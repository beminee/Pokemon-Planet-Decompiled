// Action script...

// [Action in Frame 1]
stop ();
onEnterFrame = function ()
{
    if (getBytesLoaded() / getBytesTotal() >= 1)
    {
        gotoAndStop("game");
    } // end if
};

// [Action in Frame 2]
gotoAndPlay(1);

// [Action in Frame 3]
function bitOR(a, b)
{
    var _loc1 = a & 1 | b & 1;
    var _loc2 = a >>> 1 | b >>> 1;
    return (_loc2 << 1 | _loc1);
} // End of the function
function bitXOR(a, b)
{
    var _loc1 = a & 1 ^ b & 1;
    var _loc2 = a >>> 1 ^ b >>> 1;
    return (_loc2 << 1 | _loc1);
} // End of the function
function bitAND(a, b)
{
    var _loc1 = a & 1 & (b & 1);
    var _loc2 = a >>> 1 & b >>> 1;
    return (_loc2 << 1 | _loc1);
} // End of the function
function addme(x, y)
{
    var _loc1 = (x & 65535) + (y & 65535);
    var _loc2 = (x >> 16) + (y >> 16) + (_loc1 >> 16);
    return (_loc2 << 16 | _loc1 & 65535);
} // End of the function
function rhex(num)
{
    str = "";
    for (j = 0; j <= 3; j++)
    {
        str = str + (hex_chr.charAt(num >> j * 8 + 4 & 15) + hex_chr.charAt(num >> j * 8 & 15));
    } // end of for
    return (str);
} // End of the function
function str2blks_MD5(str)
{
    nblk = (str.length + 8 >> 6) + 1;
    blks = new Array(nblk * 16);
    for (i = 0; i < nblk * 16; i++)
    {
        blks[i] = 0;
    } // end of for
    for (i = 0; i < str.length; i++)
    {
        blks[i >> 2] = blks[i >> 2] | str.charCodeAt(i) << (str.length * 8 + i) % 4 * 8;
    } // end of for
    blks[i >> 2] = blks[i >> 2] | 128 << (str.length * 8 + i) % 4 * 8;
    var _loc2 = str.length * 8;
    blks[nblk * 16 - 2] = _loc2 & 255;
    blks[nblk * 16 - 2] = blks[nblk * 16 - 2] | (_loc2 >>> 8 & 255) << 8;
    blks[nblk * 16 - 2] = blks[nblk * 16 - 2] | (_loc2 >>> 16 & 255) << 16;
    blks[nblk * 16 - 2] = blks[nblk * 16 - 2] | (_loc2 >>> 24 & 255) << 24;
    return (blks);
} // End of the function
function rol(num, cnt)
{
    return (num << cnt | num >>> 32 - cnt);
} // End of the function
function cmn(q, a, b, x, s, t)
{
    return (addme(rol(addme(addme(a, q), addme(x, t)), s), b));
} // End of the function
function ff(a, b, c, d, x, s, t)
{
    return (cmn(bitOR(bitAND(b, c), bitAND(b ^ 4294967295.000000, d)), a, b, x, s, t));
} // End of the function
function gg(a, b, c, d, x, s, t)
{
    return (cmn(bitOR(bitAND(b, d), bitAND(c, d ^ 4294967295.000000)), a, b, x, s, t));
} // End of the function
function hh(a, b, c, d, x, s, t)
{
    return (cmn(bitXOR(bitXOR(b, c), d), a, b, x, s, t));
} // End of the function
function ii(a, b, c, d, x, s, t)
{
    return (cmn(bitXOR(c, bitOR(b, d ^ 4294967295.000000)), a, b, x, s, t));
} // End of the function
function calcMD5(str)
{
    x = str2blks_MD5(str);
    a = 1732584193;
    b = -271733879;
    c = -1732584194;
    d = 271733878;
    var _loc1;
    for (i = 0; i < x.length; i = i + 16)
    {
        olda = a;
        oldb = b;
        oldc = c;
        oldd = d;
        _loc1 = 0;
        a = ff(a, b, c, d, x[i + 0], 7, -680876936);
        d = ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = ff(c, d, a, b, x[i + 10], 17, -42063);
        b = ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = gg(b, c, d, a, x[i + 0], 20, -373897302);
        a = gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = hh(a, b, c, d, x[i + 5], 4, -378558);
        d = hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = hh(d, a, b, c, x[i + 0], 11, -358537222);
        c = hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = ii(a, b, c, d, x[i + 0], 6, -198630844);
        d = ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = addme(a, olda);
        b = addme(b, oldb);
        c = addme(c, oldc);
        d = addme(d, oldd);
    } // end of for
    return (rhex(a) + rhex(b) + rhex(c) + rhex(d));
} // End of the function
function handleConnection(success)
{
    trace ("handleConnection: " + success);
    if (success && isBusy == false)
    {
        trace ("connected");
        connected = true;
        if (!_root.webClient)
        {
            _root.login._visible = true;
        }
        else
        {
            removeLogin();
            smartfox.login(zone, String(username), hashpassword);
        } // end else if
    }
    else
    {
        removeLogin();
        error = "could not connect to server";
        gotoAndStop("errorconnecting");
    } // end else if
} // End of the function
function removeLogin()
{
    _root.login.swapDepths(_root.getNextHighestDepth());
    removeMovieClip (_root.login);
} // End of the function
function updateRaidText()
{
    if (_root.raidTime > 0)
    {
        --_root.raidTime;
        mainGUI.raidT.htmlText = "<b>Raid Status: Starting in " + _root.raidTime + " seconds";
    }
    else
    {
        clearInterval(_root.updateRateTextI);
        delete _root.raidTime;
        delete _root.updateRateTextI;
    } // end else if
} // End of the function
function showHook()
{
    mainGUI.hookingUI._visible = true;
    mainGUI.hookingUI.onEnterFrame = function ()
    {
        if (this.dir == 1)
        {
            this.hook._x = this.hook._x + 6;
            if (this.hook._x > 158)
            {
                this.dir = 2;
                ++this.bounces;
                if (this.bounces >= 2)
                {
                    failedHook();
                } // end if
            } // end if
        }
        else if (this.dir == 2)
        {
            this.hook._x = this.hook._x - 6;
            if (this.hook._x < -158)
            {
                this.dir = 1;
                ++this.bounces;
                if (this.bounces >= 2)
                {
                    failedHook();
                } // end if
            } // end if
        } // end else if
    };
} // End of the function
function failedHook()
{
    stopFishing("You failed to hook the pokemon! Try fishing again.");
    canMove = true;
} // End of the function
function parseQuestArray()
{
    for (var _loc1 = 0; _loc1 < questArray.length; ++_loc1)
    {
        questArray[_loc1][0] = String(questArray[_loc1][0]);
        if (questtArray[_loc1][1] == "false")
        {
            questArray[_loc1][1] = false;
            continue;
        } // end if
        if (questArray[_loc1][1] == "true")
        {
            questArray[_loc1][1] = true;
            continue;
        } // end if
        questArray[_loc1][1] = Number(questArray[_loc1][1]);
    } // end of for
} // End of the function
function makeMarketplaceBuyListings()
{
    marketplace.buy.buyItemList._y = 16;
    marketplace.buy.scrollBar._y = -138;
    for (h in marketplace.buy.buyItemList)
    {
        removeMovieClip (marketplace.buy.buyItemList[h]);
    } // end of for...in
    marketplace.buy.buyItemList.setMask(marketplace.buy.buyMaskBg);
    var h = 0;
    while (h < searchMarketplaceListings.length)
    {
        tempItem = marketplace.buy.buyItemList.attachMovie("buyItemBase", "marketplaceBuyItem_" + h, marketplace.buy.buyItemList.getNextHighestDepth());
        tempItem._x = -2;
        tempItem._y = -150 + 45 * h;
        tempItem.nameT.htmlText = "<b>" + searchMarketplaceListings[h][1] + " (x" + format(searchMarketplaceListings[h][3]) + ")";
        tempItem.num = h;
        tempItem.tradeId = searchMarketplaceListings[h][9];
        tempItem.price = searchMarketplaceListings[h][4];
        if (searchMarketplaceListings[h][1].indexOf("Lv ") == -1)
        {
            if (searchMarketplaceListings[h][1].indexOf("HM") != -1 || searchMarketplaceListings[h][1].indexOf("TM") != -1 && searchMarketplaceListings[h][1] != "TM Box")
            {
                tempItem.i.gotoAndStop("tmhm");
            }
            else
            {
                tempItem.i.gotoAndStop(searchMarketplaceListings[h][1]);
            } // end else if
            tempItem.i2._visible = false;
        }
        else
        {
            tempString = searchMarketplaceListings[h][1].substr(3, marketplaceListings[h][1].length);
            if (searchMarketplaceListings[h][1].indexOf("[S]") != -1)
            {
                tempString = tempString.substr(tempString.indexOf(" ") + 4, tempString.length);
            }
            else
            {
                tempString = tempString.substr(tempString.indexOf(" ") + 1, tempString.length);
            } // end else if
            tempItem.i2.gotoAndStop(pokemonNameToId(tempString));
            tempItem.i._visible = false;
        } // end else if
        tempItem.priceT.htmlText = "<b>$" + format(searchMarketplaceListings[h][4]);
        tempItem.sellerT.htmlText = "<b>" + searchMarketplaceListings[h][0];
        tempItem.onRelease = tempItem.onReleaseOutside = function ()
        {
            if (this.bg._currentframe != 2)
            {
                for (t in marketplace.buy.buyItemList)
                {
                    if (marketplace.buy.buyItemList[t].bg._currentframe != 4)
                    {
                        marketplace.buy.buyItemList[t].bg.gotoAndStop(1);
                    } // end if
                } // end of for...in
                this.bg.gotoAndStop(2);
                selectedTradeId = this.tradeId;
                selectedPrice = this.price;
                selectedNum = this.num;
            }
            else if (searchMarketplaceListings[this.num][2].level != undefined)
            {
                _root.tradePoke = searchMarketplaceListings[this.num][2];
                setPokemonSummaryTrade(tradePoke);
                mainGUI.pokemonSummary.swapDepths(mainGUI.getNextHighestDepth());
                mainGUI.pokemonSummary._visible = true;
            } // end else if
        };
        tempItem.onRollOver = function ()
        {
            if (this.bg._currentframe != 2)
            {
                this.bg.gotoAndStop(3);
            } // end if
        };
        tempItem.onRollOut = function ()
        {
            if (this.bg._currentframe != 2)
            {
                this.bg.gotoAndStop(1);
            } // end if
        };
        ++h;
    } // end while
} // End of the function
function makeMarketplaceAuctionListings()
{
    marketplace.auction.buyItemList._y = 16;
    marketplace.auction.scrollBar._y = -138;
    for (h in marketplace.auction.buyItemList)
    {
        removeMovieClip (marketplace.auction.buyItemList[h]);
    } // end of for...in
    marketplace.auction.buyItemList.setMask(marketplace.auction.buyMaskBg);
    var h = 0;
    while (h < searchMarketplaceListings.length)
    {
        tempItem = marketplace.auction.buyItemList.attachMovie("auctionItemBase", "marketplaceAuctionItem_" + h, marketplace.auction.buyItemList.getNextHighestDepth());
        if (String(searchMarketplaceListings[h][0]).toLowerCase() != _root.username.toLowerCase() && String(searchMarketplaceListings[h][5]).toLowerCase() == _root.username.toLowerCase())
        {
            tempItem.bg.gotoAndStop(4);
        } // end if
        tempItem._x = -2;
        tempItem._y = -150 + 45 * h;
        tempItem.nameT.htmlText = "<b>" + searchMarketplaceListings[h][1] + " (x" + format(searchMarketplaceListings[h][3]) + ")";
        tempItem.num = h;
        tempItem.tradeId = searchMarketplaceListings[h][9];
        tempItem.price = searchMarketplaceListings[h][4];
        tempItem.bidder = searchMarketplaceListings[h][5];
        tempItem.seller = searchMarketplaceListings[h][0];
        if (searchMarketplaceListings[h][1].indexOf("Lv ") == -1)
        {
            if (searchMarketplaceListings[h][1].indexOf("HM") != -1 || searchMarketplaceListings[h][1].indexOf("TM") != -1 && searchMarketplaceListings[h][1] != "TM Box")
            {
                tempItem.i.gotoAndStop("tmhm");
            }
            else
            {
                tempItem.i.gotoAndStop(searchMarketplaceListings[h][1]);
            } // end else if
            tempItem.i2._visible = false;
        }
        else
        {
            tempString = searchMarketplaceListings[h][1].substr(3, marketplaceListings[h][1].length);
            if (searchMarketplaceListings[h][1].indexOf("[S]") != -1)
            {
                tempString = tempString.substr(tempString.indexOf(" ") + 4, tempString.length);
            }
            else
            {
                tempString = tempString.substr(tempString.indexOf(" ") + 1, tempString.length);
            } // end else if
            tempItem.i2.gotoAndStop(pokemonNameToId(tempString));
            tempItem.i._visible = false;
        } // end else if
        tempItem.priceT.htmlText = "<b>$" + format(searchMarketplaceListings[h][4]);
        tempItem.timeT.htmlText = "<b>" + int(searchMarketplaceListings[h][8] / 3600 * 10) / 10 + " hours";
        tempItem.sellerT.htmlText = "<b>" + searchMarketplaceListings[h][0];
        tempItem.onRelease = tempItem.onReleaseOutside = function ()
        {
            if (this.bg._currentframe != 2 && this.bg._currentframe != 4)
            {
                for (t in marketplace.auction.buyItemList)
                {
                    marketplace.auction.buyItemList[t].bg.gotoAndStop(1);
                } // end of for...in
                this.bg.gotoAndStop(2);
                selectedTradeId = this.tradeId;
                selectedPrice = this.price;
                selectedNum = this.num;
                selectedBidder = this.bidder;
                selectedSeller = this.seller;
            }
            else if (searchMarketplaceListings[this.num][2].level != undefined)
            {
                _root.tradePoke = searchMarketplaceListings[this.num][2];
                setPokemonSummaryTrade(tradePoke);
                mainGUI.pokemonSummary.swapDepths(mainGUI.getNextHighestDepth());
                mainGUI.pokemonSummary._visible = true;
            } // end else if
        };
        tempItem.onRollOver = function ()
        {
            if (this.bg._currentframe != 2 && this.bg._currentframe != 4)
            {
                this.bg.gotoAndStop(3);
            } // end if
        };
        tempItem.onRollOut = function ()
        {
            if (this.bg._currentframe != 2 && this.bg._currentframe != 4)
            {
                this.bg.gotoAndStop(1);
            } // end if
        };
        ++h;
    } // end while
} // End of the function
function deleteText()
{
    if (globalChatLength >= 150)
    {
        oldScroll = mainGUI.globalChatT.scroll;
        mainGUI.globalChatT.replaceText(0, mainGUI.globalChatT.text.indexOf("\r") + 1, "");
        if (checkAutoScroll())
        {
            mainGUI.globalChatT.scroll = mainGUI.globalChatT.maxscroll;
        }
        else
        {
            mainGUI.globalChatT.scroll = oldScroll;
        } // end else if
        --globalChatLength;
    } // end if
    if (localChatLength >= 150)
    {
        oldScroll = mainGUI.localChatT.scroll;
        mainGUI.localChatT.replaceText(0, mainGUI.localChatT.text.indexOf("\r") + 1, "");
        if (checkAutoScroll())
        {
            mainGUI.localChatT.scroll = mainGUI.localChatT.maxscroll;
        }
        else
        {
            mainGUI.localChatT.scroll = oldScroll;
        } // end else if
        --localChatLength;
    } // end if
    if (tradeChatLength >= 150)
    {
        oldScroll = mainGUI.tradeChatT.scroll;
        mainGUI.tradeChatT.replaceText(0, mainGUI.tradeChatT.text.indexOf("\r") + 1, "");
        if (checkAutoScroll())
        {
            mainGUI.tradeChatT.scroll = mainGUI.tradeChatT.maxscroll;
        }
        else
        {
            mainGUI.tradeChatT.scroll = oldScroll;
        } // end else if
        --tradeChatLength;
    } // end if
    if (clanChatLength >= 150)
    {
        oldScroll = mainGUI.clanChatT.scroll;
        mainGUI.clanChatT.replaceText(0, mainGUI.clanChatT.text.indexOf("\r") + 1, "");
        if (checkAutoScroll())
        {
            mainGUI.clanChatT.scroll = mainGUI.clanChatT.maxscroll;
        }
        else
        {
            mainGUI.clanChatT.scroll = oldScroll;
        } // end else if
        --clanChatLength;
    } // end if
    if (nonEnglishChatLength >= 150)
    {
        oldScroll = mainGUI.nonEnglishChatT.scroll;
        mainGUI.nonEnglishChatT.replaceText(0, mainGUI.nonEnglishChatT.text.indexOf("\r") + 1, "");
        if (checkAutoScroll())
        {
            mainGUI.nonEnglishChatT.scroll = mainGUI.nonEnglishChatT.maxscroll;
        }
        else
        {
            mainGUI.nonEnglishChatT.scroll = oldScroll;
        } // end else if
        --nonEnglishChatLength;
    } // end if
    if (customChatLength >= 150)
    {
        oldScroll = mainGUI.customChatT.scroll;
        mainGUI.customChatT.replaceText(0, mainGUI.customChatT.text.indexOf("\r") + 1, "");
        if (checkAutoScroll())
        {
            mainGUI.customChatT.scroll = mainGUI.customChatT.maxscroll;
        }
        else
        {
            mainGUI.customChatT.scroll = oldScroll;
        } // end else if
        --customChatLength;
    } // end if
} // End of the function
function updatePosition()
{
    if (player.tileX != undefined && player.tileY != undefined)
    {
        if (lastUpdateX == player.tileX && lastUpdateY == player.tileY && lastUpdateZ == _root.tileZ)
        {
        }
        else
        {
            lastUpdateX = player.tileX;
            lastUpdateY = player.tileY;
            lastUpdateZ = _root.tileZ;
            getTimestamp("updateXYZ");
        } // end if
    } // end else if
} // End of the function
function parsePokemon(str)
{
    if (str != "[]" && str != "")
    {
        if (str.indexOf("[") == 0 && str.indexOf("]") != -1)
        {
            str = str.substr(1, str.length - 2);
            var _loc1 = str.split(",");
            if (_loc1.length == 40)
            {
                if (Number(_loc1[24]) != 0)
                {
                    _loc1.push(stringifyMoveBank([Number(_loc1[21]), Number(_loc1[22]), Number(_loc1[23]), Number(_loc1[24])]));
                }
                else
                {
                    _loc1.push([]);
                } // end if
            } // end else if
            if (_loc1.length == 41)
            {
                var _loc2 = [];
                _loc2.moveBank = parseMoveBank(_loc1[40]);
                _loc2.form = _loc1[39];
                _loc2.originalCatcher = _loc1[38];
                _loc2.abilityLength = Number(_loc1[37]);
                _loc2.ailment = _loc1[36];
                _loc2.ability = Number(_loc1[35]);
                _loc2.heldItem = String(_loc1[34]);
                _loc2.name = String(_loc1[33]);
                _loc2.id = Number(_loc1[32]);
                _loc2.level = Number(_loc1[31]);
                if (_loc1[30] == "true")
                {
                    _loc2.shiny = true;
                }
                else
                {
                    _loc2.shiny = false;
                } // end else if
                _loc2.exp = Number(_loc1[29]);
                _loc2.totalExp = Number(_loc1[28]);
                _loc2.currentHp = Number(_loc1[27]);
                _loc2.type = Number(_loc1[26]);
                _loc2.type2 = Number(_loc1[25]);
                _loc2.moves = [Number(_loc1[21]), Number(_loc1[22]), Number(_loc1[23]), Number(_loc1[24])];
                _loc2.nature = String(_loc1[20]);
                _loc2.hpIV = Number(_loc1[19]);
                _loc2.attackIV = Number(_loc1[18]);
                _loc2.defenseIV = Number(_loc1[17]);
                _loc2.speedIV = Number(_loc1[16]);
                _loc2.specialAttackIV = Number(_loc1[15]);
                _loc2.specialDefenseIV = Number(_loc1[14]);
                _loc2.hpEV = Number(_loc1[13]);
                _loc2.attackEV = Number(_loc1[12]);
                _loc2.defenseEV = Number(_loc1[11]);
                _loc2.speedEV = Number(_loc1[10]);
                _loc2.specialAttackEV = Number(_loc1[9]);
                _loc2.specialDefenseEV = Number(_loc1[8]);
                _loc2.hp = Number(_loc1[7]);
                _loc2.attack = Number(_loc1[6]);
                _loc2.defense = Number(_loc1[5]);
                _loc2.speed = Number(_loc1[4]);
                _loc2.specialAttack = Number(_loc1[3]);
                _loc2.specialDefense = Number(_loc1[2]);
                _loc2.happiness = Number(_loc1[1]);
                _loc2.uniqueId = Number(_loc1[0]);
                if (isNaN(_loc2.uniqueId))
                {
                    _loc2.uniqueId = 0;
                } // end if
                return (_loc2);
            }
            else
            {
                trace ("parsePokemon length error");
            } // end else if
        }
        else
        {
            trace ("parsePokemon bracket error");
        } // end else if
    }
    else
    {
        return ([]);
    } // end else if
} // End of the function
function parseMultiPokemon(str)
{
    if (str != "[]" && str != "")
    {
        if (str.indexOf("[") == 0 && str.indexOf("]") != -1)
        {
            str = str.substr(2, str.length - 4);
            var _loc2 = str.split("],[");
            var _loc3 = [];
            for (var _loc1 = 0; _loc1 < _loc2.length; ++_loc1)
            {
                _loc2[_loc1] = "[" + _loc2[_loc1] + "]";
                _loc3.push(parsePokemon(_loc2[_loc1]));
            } // end of for
            return (_loc3);
        }
        else
        {
            trace ("parseMultiPokemon bracket error");
        } // end else if
    }
    else
    {
        return ([]);
    } // end else if
} // End of the function
function handleResendFishing(resObj)
{
    clearInterval(_root.fishingI);
    var _loc2 = 2100 - fishingLevel * 10;
    _root.fishingI = setInterval(sendFish, _loc2, resObj[2]);
    delete mainGUI.hookingUI.onEnterFrame;
    removeMovieClip (mainGUI.hookingUI);
} // End of the function
function handleUpdateInventory(resObj)
{
    _root.inventory = parseMultiArray(resObj[2]);
    for (var _loc2 = 0; _loc2 < _root.inventory.length; ++_loc2)
    {
        _root.inventory[_loc2][1] = Number(_root.inventory[_loc2][1]);
    } // end of for
    remakeInventory();
} // End of the function
function handleRemoveEliteChest(resObj)
{
    var _loc4 = Number(resObj[2]);
    var _loc3 = Number(resObj[3]);
    for (var _loc2 = 0; _loc2 < _root.eliteChests.length; ++_loc2)
    {
        if (_root.eliteChests[_loc2][0] == _loc4 && _root.eliteChests[_loc2][1] == _loc3)
        {
            _root.eliteChests.splice(_loc2, 1);
            break;
        } // end if
    } // end of for
    removeMovieClip (_root.mapLayer1["eliteChest_" + _loc4 + "_" + _loc3]);
    _root.collisionArray[_loc3][_loc4] = 0;
} // End of the function
function handleAddEliteChest(resObj)
{
    var _loc3 = Number(resObj[2]);
    var _loc2 = Number(resObj[3]);
    _root.eliteChests.push([_loc3, _loc2]);
    _root.mapLayer1.attachMovie("eliteChest", "eliteChest_" + _loc3 + "_" + _loc2, _root.mapLayer1.getNextHighestDepth());
    _root.mapLayer1["eliteChest_" + _loc3 + "_" + _loc2]._x = _loc3 * 32;
    _root.mapLayer1["eliteChest_" + _loc3 + "_" + _loc2]._y = _loc2 * 32;
    _root.collisionArray[_loc2][_loc3] = 1;
} // End of the function
function handleOpenEliteChest(resObj)
{
    var _loc1 = parseArray(resObj[2]);
    removeItem("Treasure Key", 1);
    addInventoryItem(_loc1[0], Number(_loc1[1]));
    remakeInventory();
    systemMessage("You opened the Elite Chest and found " + _loc1[1] + " " + _loc1[0] + ".");
} // End of the function
function handleQuestComplete(resObj)
{
    var _loc3 = Number(resObj[2]);
    if (_loc3 == 0)
    {
        _root.money = _root.money + 2000;
        _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(money);
        addInventoryItem("Great Ball", 15);
        remakeInventory();
        for (var _loc2 = 0; _loc2 < _root.questData.length; ++_loc2)
        {
            if (_root.questData[_loc2][0] == 0)
            {
                _root.questData[_loc2][1] = 2;
                break;
            } // end if
        } // end of for
        removeMovieClip (_root.mainGUI.yesNoBox);
        chatBox(["Thanks so much!"], "Bug Catcher Milo (Quest)");
        _root.guiUp = false;
        removeMovieClip (_root.mapLayer2.npc_6.questIcon);
    }
    else if (_loc3 == 1)
    {
        _root.money = _root.money + 4000;
        _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(money);
        addInventoryItem("Ultra Ball", 15);
        remakeInventory();
        for (var _loc2 = 0; _loc2 < _root.questData.length; ++_loc2)
        {
            if (_root.questData[_loc2][0] == 1)
            {
                _root.questData[_loc2][1] = 2;
                break;
            } // end if
        } // end of for
        removeMovieClip (_root.mainGUI.yesNoBox);
        chatBox(["Thanks so much!"], "Explorer James");
        _root.guiUp = false;
        removeMovieClip (_root.mapLayer2.npc_3.questIcon);
    }
    else if (_loc3 == 2)
    {
        _root.money = _root.money + 10000;
        _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(money);
        addInventoryItem("Elite Token", 1);
        remakeInventory();
        for (var _loc2 = 0; _loc2 < _root.questData.length; ++_loc2)
        {
            if (_root.questData[_loc2][0] == 2)
            {
                _root.questData[_loc2][1] = 2;
                break;
            } // end if
        } // end of for
        removeMovieClip (_root.mainGUI.yesNoBox);
        chatBox(["Thanks so much!"], "Scientist Don");
        _root.guiUp = false;
        removeMovieClip (_root.mapLayer2.npc_0.questIcon);
        _root.mapLayer2.npc_0.attachMovie("questIcon", "questIcon", _root.mapLayer2.npc_0.getNextHighestDepth());
        _root.mapLayer2.npc_0.questIcon._x = 40;
        _root.mapLayer2.npc_0.questIcon._y = -32;
    }
    else if (_loc3 == 3)
    {
        _root.money = _root.money + 10000;
        _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(money);
        addInventoryItem("Elite Token", 1);
        addInventoryItem("Mystery Box", 1);
        remakeInventory();
        for (var _loc2 = 0; _loc2 < _root.questData.length; ++_loc2)
        {
            if (_root.questData[_loc2][0] == 3)
            {
                _root.questData[_loc2][1] = 2;
                break;
            } // end if
        } // end of for
        removeMovieClip (_root.mainGUI.yesNoBox);
        chatBox(["Thanks so much!"], "Flannery");
        _root.guiUp = false;
        removeMovieClip (_root.mapLayer2.npc_0.questIcon);
        _root.mapLayer2.npc_0.attachMovie("questIcon", "questIcon", _root.mapLayer2.npc_0.getNextHighestDepth());
        _root.mapLayer2.npc_0.questIcon._x = 40;
        _root.mapLayer2.npc_0.questIcon._y = -32;
    } // end else if
    systemMessage("Congratulations, you completed a quest. The reward has been added to your inventory.");
} // End of the function
function handleQuestUpdate(resObj)
{
    var _loc4 = parseArray(resObj[2]);
    for (var _loc2 = 0; _loc2 < _loc4.length; ++_loc2)
    {
        _loc4[_loc2] = Number(_loc4[_loc2]);
    } // end of for
    for (var _loc2 = 0; _loc2 < _root.questData.length; ++_loc2)
    {
        if (_root.questData[_loc2][0] == _loc4[0])
        {
            _root.questData[_loc2] = _loc4;
            break;
        } // end if
    } // end of for
    if (resObj[3] == "1")
    {
        for (var _loc2 = 0; _loc2 < npcArray.length; ++_loc2)
        {
            if (npcArray[_loc2][10] != undefined)
            {
                removeMovieClip (_root.mapLayer2["npc_" + npcArray[_loc2][7]].questIcon);
                for (var _loc3 = 0; _loc3 < _root.questData.length; ++_loc3)
                {
                    if (_root.questData[_loc3][0] == npcArray[_loc2][10])
                    {
                        if (_root.questData[_loc3][1] == 0)
                        {
                            _root.mapLayer2["npc_" + npcArray[_loc2][7]].attachMovie("questIcon", "questIcon", _root.mapLayer2["npc_" + npcArray[_loc2][7]].getNextHighestDepth());
                            continue;
                        } // end if
                        if (_root.questData[_loc3][1] == 1)
                        {
                            _root.mapLayer2["npc_" + npcArray[_loc2][7]].attachMovie("questIcon2", "questIcon", _root.mapLayer2["npc_" + npcArray[_loc2][7]].getNextHighestDepth());
                        } // end if
                    } // end if
                } // end of for
                _root.mapLayer2["npc_" + npcArray[_loc2][7]].questIcon._x = 40;
                _root.mapLayer2["npc_" + npcArray[_loc2][7]].questIcon._y = -32;
            } // end if
        } // end of for
    } // end if
} // End of the function
function addInventoryItem(item, amount, additionalParam)
{
    amount = Number(amount);
    foundItem = false;
    for (var _loc1 = 0; _loc1 < inventory.length; ++_loc1)
    {
        if (inventory[_loc1][0].toLowerCase() == item.toLowerCase())
        {
            if (additionalParam != undefined)
            {
                if (inventory[_loc1].length > 2 && inventory[_loc1][2] == additionalParam)
                {
                    foundItem = true;
                    inventory[_loc1][1] = inventory[_loc1][1] + amount;
                } // end if
                continue;
            } // end if
            if (inventory[_loc1].length == 2)
            {
                foundItem = true;
                inventory[_loc1][1] = inventory[_loc1][1] + amount;
                break;
            } // end if
        } // end if
    } // end of for
    if (foundItem == false)
    {
        if (additionalParam != undefined)
        {
            inventory.push([item, amount, additionalParam]);
        }
        else
        {
            inventory.push([item, amount]);
        } // end if
    } // end else if
} // End of the function
function removeItem(itemName, amount)
{
    for (var _loc1 = 0; _loc1 < inventory.length; ++_loc1)
    {
        if (inventory[_loc1][0].toLowerCase() == itemName.toLowerCase())
        {
            if (inventory[_loc1].length <= 2)
            {
                inventory[_loc1][1] = inventory[_loc1][1] - Number(amount);
                if (inventory[_loc1][1] == 0)
                {
                    inventory.splice(_loc1, 1);
                } // end if
                break;
            } // end if
        } // end if
    } // end of for
} // End of the function
function slotIcons()
{
    ++slotCount;
    if (slotCount == 1)
    {
        mainGUI.casinoGUI.icon1.gotoAndStop(iconArray[0]);
    }
    else if (slotCount == 2)
    {
        mainGUI.casinoGUI.icon2.gotoAndStop(iconArray[1]);
    }
    else if (slotCount == 3)
    {
        mainGUI.casinoGUI.icon3.gotoAndStop(iconArray[2]);
        canUseSlots = true;
        mainGUI.casinoGUI.play1B._visible = true;
        mainGUI.casinoGUI.play2B._visible = true;
        mainGUI.casinoGUI.play3B._visible = true;
        mainGUI.casinoGUI.play4B._visible = true;
        mainGUI.casinoGUI.t1.htmlText = "<b>Play ($100)";
        mainGUI.casinoGUI.t2.htmlText = "<b>Play ($1k)";
        mainGUI.casinoGUI.t3.htmlText = "<b>Play ($10k)";
        mainGUI.casinoGUI.t4.htmlText = "<b>Play ($100k)";
        if (slotWinAmount > 0)
        {
            if (_root.casinoJP == true)
            {
                mainGUI.casinoGUI.nameT.htmlText = "<b>JACKPOT WINNER " + slotWinAmount + " TOKENS!";
            }
            else
            {
                mainGUI.casinoGUI.nameT.htmlText = "<b>WINNER " + slotWinAmount + " TOKENS!";
            } // end if
        } // end else if
        clearInterval(slotIconsI);
    } // end else if
} // End of the function
function sendRemovePlayer(oldMapBattleLost)
{
    getTimestamp("removePlayer", oldMapBattleLost);
    removePlayers();
} // End of the function
function sendMouseLog(x, y, time)
{
    if (_root.bW == true)
    {
        getTimestamp("asf8n2fs", x, y, time);
    } // end if
} // End of the function
function sendKeyLog(key, time)
{
    if (_root.bW == true)
    {
        getTimestamp("asf8n2fa", key, time);
    } // end if
} // End of the function
function endBattle(tempBattleLost)
{
    if (oldBattleBg != undefined)
    {
        _root.battleBg = oldBattleBg;
    } // end if
    bobbing = "";
    if (battleType == "trainer")
    {
        if (_root.battleType2 == "gymLeader" && _root.battleType2 != undefined)
        {
            if (battleWon == true)
            {
                if (_root.gymLeaderPostBattleText.length > 0)
                {
                    chatBox(_root.gymLeaderPostBattleText, trainerName);
                } // end if
                if (map == "Elite Four F1")
                {
                    loadMap(true, "Elite Four F2", 6, 23);
                }
                else if (map == "Elite Four F2")
                {
                    loadMap(true, "Elite Four F3", 6, 23);
                }
                else if (map == "Elite Four F3")
                {
                    loadMap(true, "Elite Four F4", 6, 23);
                }
                else if (map == "Elite Four F4")
                {
                    loadMap(true, "Elite Four F5", 6, 19);
                }
                else if (map == "Elite Four F5")
                {
                    eliteFourBeat = true;
                }
                else if (map == "Johto Elite Four F1")
                {
                    loadMap(true, "Johto Elite Four F2", 9, 22);
                }
                else if (map == "Johto Elite Four F2")
                {
                    loadMap(true, "Johto Elite Four F3", 10, 21);
                }
                else if (map == "Johto Elite Four F3")
                {
                    loadMap(true, "Johto Elite Four F4", 8, 20);
                }
                else if (map == "Johto Elite Four F4")
                {
                    loadMap(true, "Johto Elite Four F5", 11, 26);
                }
                else if (map == "Johto Elite Four F5")
                {
                    globalAnimation = "Johto Elite Four";
                }
                else if (map.indexOf("Santas Frozen Workshop") != -1)
                {
                    loadMap(true, "Santas Workshop", 8, 13);
                }
                else if (map == "Hoenn Elite Four F1")
                {
                    loadMap(true, "Hoenn Elite Four F2", 8, 26);
                }
                else if (map == "Hoenn Elite Four F2")
                {
                    loadMap(true, "Hoenn Elite Four F3", 8, 26);
                }
                else if (map == "Hoenn Elite Four F3")
                {
                    loadMap(true, "Hoenn Elite Four F4", 8, 26);
                }
                else if (map == "Hoenn Elite Four F4")
                {
                    loadMap(true, "Hoenn Champion Room", 6, 19);
                }
                else if (map == "Hoenn Champion Room")
                {
                    hoennEliteFourBeat = true;
                }
                else if (map == "Sinnoh Elite Four Room 1")
                {
                    loadMap(true, "Sinnoh Elite Four Room 2", 8, 27);
                }
                else if (map == "Sinnoh Elite Four Room 2")
                {
                    loadMap(true, "Sinnoh Elite Four Room 3", 8, 27);
                }
                else if (map == "Sinnoh Elite Four Room 3")
                {
                    loadMap(true, "Sinnoh Elite Four Room 4", 8, 27);
                }
                else if (map == "Sinnoh Elite Four Room 4")
                {
                    loadMap(true, "Sinnoh Elite Four Champion Room", 6, 19);
                }
                else if (map == "Sinnoh Elite Four Champion Room")
                {
                    sinnohEliteFourBeat = true;
                }
                else if (map == "Silph Co F1" && trainerId == 1)
                {
                    loadMap(true, "Silph Co F1", player.tileX, player.tileY);
                }
                else if (map == "Unova Elite Four R1")
                {
                    loadMap(true, "Unova Elite Four R2", 8, 27);
                }
                else if (map == "Unova Elite Four R2")
                {
                    loadMap(true, "Unova Elite Four R3", 8, 27);
                }
                else if (map == "Unova Elite Four R3")
                {
                    loadMap(true, "Unova Elite Four R4", 8, 27);
                }
                else if (map == "Unova Elite Four R4")
                {
                    loadMap(true, "Unova Champion Room", 6, 19);
                }
                else if (map == "Unova Champion Room")
                {
                    unovaEliteFourBeat = true;
                }
                else if (map == "Battle Room")
                {
                    loadMap(true, "Battle Room", 7, 14);
                }
                else if (_root.gymLeaderPostBattleText.length <= 0 || _root.gymLeaderPostBattleText == undefined)
                {
                    canMove = true;
                } // end else if
            } // end else if
        }
        else
        {
            dirArray = [];
            if (trainerDirection == "up")
            {
                for (var _loc2 = 0; _loc2 < trainerStartingCoords[1] - (player.tileY + 1); ++_loc2)
                {
                    dirArray.push("d");
                } // end of for
            }
            else if (trainerDirection == "down")
            {
                for (var _loc2 = 0; _loc2 < player.tileY - 1 - trainerStartingCoords[1]; ++_loc2)
                {
                    dirArray.push("u");
                } // end of for
            }
            else if (trainerDirection == "left")
            {
                for (var _loc2 = 0; _loc2 < trainerStartingCoords[0] - (player.tileX + 1); ++_loc2)
                {
                    dirArray.push("r");
                } // end of for
            }
            else if (trainerDirection == "right")
            {
                for (var _loc2 = 0; _loc2 < player.tileX - 1 - trainerStartingCoords[0]; ++_loc2)
                {
                    dirArray.push("l");
                } // end of for
            } // end else if
            npcTraverse(mapLayer2["npc_" + trainerId], dirArray, trainerDirection, true);
        } // end if
    } // end else if
    if (battleType == "wild" || battleType == "pvp")
    {
        if (safariTimeUp == true)
        {
            canMove = false;
            getTimestamp("safariTimeOver");
        }
        else if (johtoSafariTimeUp == true)
        {
            canMove = false;
            getTimestamp("johtoSafariTimeOver");
        }
        else if (hoennSafariTimeUp == true)
        {
            canMove = false;
            getTimestamp("hoennSafariTimeOver");
        }
        else if (sinnohSafariTimeUp == true)
        {
            canMove = false;
            getTimestamp("sinnohSafariTimeOver");
        }
        else if (acTimeUp == true)
        {
            canMove = false;
            getTimestamp("acTimeOver");
        }
        else if (battleLost != true)
        {
            canMove = true;
        } // end else if
    } // end else if
    if (battleLost == true)
    {
        moveType = "";
        moveMapSpeed = 8 * movementSpeedMod;
        activeNPCs = [];
    } // end if
    newPokemon = undefined;
    _root.battleType = "";
    _root.battleType2 = "";
    gymLeaderPostBattleText = [];
    battleText = [];
    isWaiting = false;
    battleWon = false;
    battleLost = false;
    battleEnd = false;
    battle = false;
    tempArray = [];
    _root.closeBattle = false;
    canSwitchPokemon = true;
    battleTextNumber = 1;
    battleTextFrameCount = 0;
    battleTextIndex = 0;
    displayingBattleText = false;
    _root.bt = "";
    delete _root.queueingForBattle;
    delete _root.opponentAliveArray;
    delete _root.wildPokemon2;
    clearInterval(_root.battleTimerI);
    clearInterval(_root.battleTimerI2);
    mainGUI.battleBackground.bagB.gotoAndStop(1);
    mainGUI.battleBackground.runB.gotoAndStop(1);
    for (var _loc2 = 0; _loc2 < 6; ++_loc2)
    {
        _root.targetUserBattleUI["x" + (_loc2 + 1)]._visible = false;
        _root.targetUserBattleUI["bp" + (_loc2 + 1)].gotoAndStop(1);
        _root.targetEnemyBattleUI["x" + (_loc2 + 1)]._visible = false;
        _root.targetEnemyBattleUI["bp" + (_loc2 + 1)].gotoAndStop(1);
    } // end of for
    mainGUI.battleBackground._visible = false;
    mainGUI.battleBackground.enemyHp.syncIcon._visible = false;
    _root.mainGUI.battleBackground.userT.htmlText = "";
    _root.mainGUI.battleBackground.opponentT.htmlText = "";
    loadPokemonIcons(false);
    if (_root.mainGUI.pokemonSummary._visible == true)
    {
        setPokemonSummary(_root.mainGUI.pokemonSummary.slot);
    } // end if
    fixDepths();
    if (tempBattleLost != true)
    {
        getTimestamp("r");
    }
    else
    {
        _root.needToLoadR = true;
    } // end else if
    if (_root.mainGUI.battleQueue._x != undefined)
    {
        _root.mainGUI.battleQueue._visible = true;
        canMove = false;
    } // end if
    if (fishing == true)
    {
        if (moving == false)
        {
            checkFish(fishItemNum, true);
        } // end if
    } // end if
    _root.ppC = _root.ppM;
    _root.setLevel = 0;
    for (var _loc2 = 0; _loc2 < userPokemon.length; ++_loc2)
    {
        userPokemon[_loc2].ailment = "";
    } // end of for
    _root.mainGUI.battleBackground.battleTimeT.battleTimeT.htmlText = "";
    if (_root.disableBattleMusic == false)
    {
        if (_root.moveType == "surf")
        {
            fadeMusic("Surfing.mp3", false, _root.oldMusicTime);
        }
        else
        {
            fadeMusic(undefined, true, _root.oldMusicTime);
        } // end if
    } // end else if
    removeMovieClip (threeButtonBox);
} // End of the function
function swapVisible(target)
{
    if (target.swapTimes == undefined)
    {
        target.swapTimes = 0;
    } // end if
    ++target.swapTimes;
    if (target._visible == true)
    {
        target._visible = false;
    }
    else
    {
        target._visible = true;
    } // end else if
    if (target.swapTimes >= 6)
    {
        if (target == mainGUI.battleBackground.backPokemon && userPokemon[activePokemon].shiny == false)
        {
            mainGUI.battleBackground.backPokemon._visible = true;
        } // end if
        delete target.swapTimes;
        clearInterval(swapVisibleI);
    } // end if
} // End of the function
function loadMap(switchingMap, tempMap, x, y, customMap, oldMapBattleLost, l)
{
    clearInterval(updatePositionI);
    _root.updatedMap = false;
    _root.canClickOnPlayer = false;
    _root.canMove = false;
    if (fishing == true)
    {
        stopFishing();
    } // end if
    if (mining == true)
    {
        stopMining();
    } // end if
    oldBattleBg = undefined;
    mainGUI.clanLeaderboardT._visible = false;
    mainGUI.clanLeaderboardT.text = "";
    clearInterval(_root.refreshClanLeaderboardsI);
    removeMovieClip (darkScreenLoadMap);
    delete darkScreenLoadMap;
    darkScreenLoadMap = _root.attachMovie("darkScreen", "darkScreenLoadMap", _root.getNextHighestDepth());
    darkScreenLoadMap._width = Stage.width;
    darkScreenLoadMap._height = Stage.height;
    darkScreenLoadMap._x = newWidth / 2;
    darkScreenLoadMap._y = newHeight / 2;
    darkScreenLoadMap.loadedMap = false;
    darkScreenLoadMap.v = 0;
    darkScreenLoadMap.switchingMap = switchingMap;
    darkScreenLoadMap.tempMap = tempMap;
    darkScreenLoadMap.x = x;
    darkScreenLoadMap.y = y;
    darkScreenLoadMap.oldMapBattleLost = oldMapBattleLost;
    if (switchingMap == true && globalAnimationObj.animation != "fadeScreenTeleport")
    {
        darkScreenLoadMap._alpha = 0;
    }
    else
    {
        darkScreenLoadMap._alpha = 100;
    } // end else if
    if (l == 1)
    {
        _root.lm = true;
    } // end if
    darkScreenLoadMap.onEnterFrame = function ()
    {
        if (this.v == 0)
        {
            if (this._alpha >= 100)
            {
                this.v = 1;
            }
            else
            {
                this._alpha = this._alpha + 6;
            } // end else if
        }
        else if (this.v == 1)
        {
            finishLoadingMap(this.switchingMap, this.tempMap, this.x, this.y, customMap, this.oldMapBattleLost, this.l);
            this.v = 2;
        }
        else if (this.v == 2)
        {
            if (this.loadedMap == true && _root.updatedMap == true)
            {
                updatePositionI = setInterval(updatePosition, 8000);
                _root.mapLayer1._visible = true;
                _root.mapLayer1_2._visible = true;
                _root.mapLayer2._visible = true;
                _root.mapLayer3._visible = true;
                if (_root.tileZ == 1)
                {
                    if (_root.collisionArray2 != undefined)
                    {
                        _root.collisionArray = _root.collisionArray2;
                        mapLayer3._visible = false;
                    }
                    else
                    {
                        _root.tileZ = 0;
                    } // end if
                } // end else if
                if (_root.underwaterMap)
                {
                    fadeMusic("Surfing.mp3", false);
                    moveType = "surf";
                    setSurfMount();
                    getTimestamp("updateMount", _root.player.mount);
                    if (hasItem("Surfboard"))
                    {
                        moveMapSpeed = 16 * movementSpeedMod;
                    }
                    else
                    {
                        moveMapSpeed = 8 * movementSpeedMod;
                    } // end else if
                    if (_root.fishing == true)
                    {
                        stopFishing();
                    } // end if
                    if (mining == true)
                    {
                        stopMining(undefined, true);
                    } // end if
                    if (_root.dir == "up")
                    {
                        drawPlayer(player, 12, 1);
                    }
                    else if (_root.dir == "down")
                    {
                        drawPlayer(player, 12, 0);
                    }
                    else if (_root.dir == "left")
                    {
                        drawPlayer(player, 12, 2);
                    }
                    else if (_root.dir == "right")
                    {
                        drawPlayer(player, 12, 3);
                    } // end else if
                } // end else if
                if (_root.map == "Clan Wars T1" || _root.map == "Clan Wars T2" || _root.map == "Clan Wars T3")
                {
                    if (_root.player.mount != undefined)
                    {
                        _root.player.mount = "Bike";
                        getTimestamp("updateMount", _root.player.mount);
                        if (dir == "up")
                        {
                            drawPlayer(player, 6, 1);
                        }
                        else if (dir == "down")
                        {
                            drawPlayer(player, 6, 0);
                        }
                        else if (dir == "left")
                        {
                            drawPlayer(player, 6, 2);
                        }
                        else if (dir == "right")
                        {
                            drawPlayer(player, 6, 3);
                        } // end else if
                    } // end else if
                    getTimestamp("clanWarLeaderboards");
                } // end if
                this.v = 3;
                if (battle != true && trading != true && avatarType != 0 && _root.badCustomMapLoad == undefined && _root.mainGUI.battleQueue._x == undefined)
                {
                    canMove = true;
                } // end if
                _root.canClickOnPlayer = true;
                if (_root.firstLoad != undefined)
                {
                    _root.firstLoad = undefined;
                    delete _root.firstLoad;
                    firstLoadFunction();
                } // end if
                if (_root.needToLoadR == true)
                {
                    delete _root.needToLoadR;
                    getTimestamp("r");
                } // end if
                if (_root.darkMode)
                {
                    darkenScreen(_root.darkModeMapDarkenAmount);
                } // end if
            } // end if
        }
        else if (this.v == 3)
        {
            this._alpha = this._alpha - 6;
            if (this._alpha <= 0)
            {
                delete darkScreenLoadMap.onEnterFrame;
                removeMovieClip (darkScreenLoadMap);
                delete darkScreenLoadMap;
                if (_root.badCustomMapLoad != undefined)
                {
                    delete _root.badCustomMapLoad;
                    loadMap(true, "Vermilion City", 23, 24);
                } // end else if
            } // end else if
        } // end else if
    };
    removeMovieClip (shopDialogueGUI);
    removeMovieClip (yesNoBox);
    removeMovieClip (shopBox);
    removeMovieClip (_root.mainGUI.casinoGUI);
    removeMovieClip (_root.allButtonBox);
} // End of the function
function finishLoadingMap(switchingMap, tempMap, x, y, customMap, oldMapBattleLost, l)
{
    _root.mapType = undefined;
    _root.trainerDataLoaded = false;
    _root.currentNPC = [];
    _root.mapInstance = -1;
    sendRemovePlayer(oldMapBattleLost);
    if (switchingMap == true)
    {
        _root.mapExits = [];
        _root.npcArray = [];
        _root.customTiles = [];
        _root.trainerArray = [];
        _root.shopArray = [];
        _root.pcArray = [];
        _root.casinoArray = [];
        _root.portablePCArray = [];
        _root.eliteChests = [];
        removeMovieClip (darkScreenTunnel);
        removeMovieClip (darkScreenMap);
        _root.wDown = false;
        _root.aDown = false;
        _root.sDown = false;
        _root.dDown = false;
        _root.map = tempMap;
        _root.encryptedMap = calcMD5(_root.map + "dlod02jhznpd02jdhggyambya8201201nfbmj209ahao8rh2pb" + _root.username);
        _root.player.tileX = x;
        _root.player.tileY = y;
        _root.tileZ = 0;
        _root.underwaterMap = false;
        _root.diveMap = undefined;
        encryptedTileX = calcMD5(player.tileX + _root.kg1() + _root.username);
        encryptedTileY = calcMD5(player.tileY + _root.kg1() + _root.username);
        if (mainGUI.storage._x != undefined)
        {
            removeMovieClip (mainGUI.storage);
            storageOpen = false;
        } // end if
        mainGUI.raidT.htmlText = "";
    } // end if
    _root.battleBg = "";
    _root.treeArray = [];
    _root.textArray = [];
    _root.mapErrors = 0;
    removeMovieClip (_root.mapLayer1);
    removeMovieClip (_root.mapLayer1_2);
    removeMovieClip (_root.mapLayer2);
    removeMovieClip (_root.mapLayer3);
    removeMovieClip (_root.lightMap);
    _root.mapLayer1 = _root.attachMovie("mapLayer1", "mapLayer1", _root.getNextHighestDepth());
    _root.mapLayer1_2 = _root.attachMovie("mapLayer1_2", "mapLayer1_2", _root.getNextHighestDepth());
    _root.mapLayer2 = _root.attachMovie("mapLayer2", "mapLayer2", _root.getNextHighestDepth());
    _root.mapLayer3 = _root.attachMovie("mapLayer3", "mapLayer3", _root.getNextHighestDepth());
    _root.mapLayer1.createEmptyMovieClip("bg", _root.mapLayer1.getNextHighestDepth());
    _root.mapLayer3.createEmptyMovieClip("bg", _root.mapLayer3.getNextHighestDepth());
    _root.mapLayer1._visible = false;
    _root.mapLayer1_2._visible = false;
    _root.mapLayer2._visible = false;
    _root.mapLayer3._visible = false;
    _root.mapLayer1._x = -1000;
    _root.mapLayer1_2._x = -1000;
    _root.mapLayer2._x = -1000;
    _root.mapLayer3._x = -1000;
    if (customMap != true)
    {
        _root.mapLayer1.gotoAndStop(map);
        _root.mapLayer1_2.gotoAndStop(map);
        loadMapImage();
    } // end if
    if (map.indexOf("Mewtwo Raid Lobby") != -1)
    {
        if (mainGUI.raidT.htmlText.indexOf("Raid Status: Starting ") == -1)
        {
            mainGUI.raidT.htmlText = "<b>Raid Status: Waiting for players.. " + (_root.players.length + 1) + "/8";
        } // end if
    } // end if
} // End of the function
function npcMewtwoRaid()
{
    if (_root.mewtwoRaidActive == true)
    {
    }
    else
    {
        chatBox(["There aren\'t any raids happening right now. You\'ll have to come back later."], "Mewtwo Raid Manager", false);
    } // end else if
} // End of the function
function npcMiningVendor()
{
    guiUp = true;
    canMove = false;
    allButtonBox = _root.mainGUI.attachMovie("nineButtonBox", "allButtonBox", _root.getNextHighestDepth());
    allButtonBox.msgT.text = "What would you like to do?";
    allButtonBox.nameT.htmlText = "<b>Mining Vendor</b>";
    allButtonBox.b1T.htmlText = "<b>Sell " + format(getInventoryAmount("Red Gemstone")) + " Red Gemstones for $" + format(getInventoryAmount("Red Gemstone") * 50);
    allButtonBox.b2T.htmlText = "<b>Sell " + format(getInventoryAmount("Blue Gemstone")) + " Blue Gemstones for $" + format(getInventoryAmount("Blue Gemstone") * 100);
    allButtonBox.b3T.htmlText = "<b>Sell " + format(getInventoryAmount("Green Gemstone")) + " Green Gemstones for $" + format(getInventoryAmount("Green Gemstone") * 200);
    allButtonBox.b4T.htmlText = "<b>Sell " + format(getInventoryAmount("Prism Gemstone")) + " Prism Gemstones for $" + format(getInventoryAmount("Prism Gemstone") * 400);
    allButtonBox.b5T.htmlText = "<b>Sell " + format(getInventoryAmount("Pale Gemstone")) + " Pale Gemstones for $" + format(getInventoryAmount("Pale Gemstone") * 550);
    allButtonBox.b6T.htmlText = "<b>Sell " + format(getInventoryAmount("Dark Gemstone")) + " Dark Gemstones for $" + format(getInventoryAmount("Dark Gemstone") * 900);
    allButtonBox.b7T.htmlText = "<b>Sell " + format(getInventoryAmount("Rainbow Gemstone")) + " Rainbow Gemstones for $" + format(getInventoryAmount("Rainbow Gemstone") * 20000);
    allButtonBox.b8T.htmlText = "<b>Sell " + format(getInventoryAmount("Gold Gemstone")) + " Gold Gemstones for $" + format(getInventoryAmount("Gold Gemstone") * 1500);
    allButtonBox.b9T.htmlText = "<b>Nevermind";
    allButtonBox.b1.onRelease = function ()
    {
        if (isBusy == false)
        {
            if (hasItem("Red Gemstone"))
            {
                getTimestamp("sellGemstones", 1);
            }
            else
            {
                systemMessage("You don\'t have any Red Gemstones to sell.");
            } // end if
        } // end else if
    };
    allButtonBox.b2.onRelease = function ()
    {
        if (isBusy == false)
        {
            if (hasItem("Blue Gemstone"))
            {
                getTimestamp("sellGemstones", 2);
            }
            else
            {
                systemMessage("You don\'t have any Blue Gemstones to sell.");
            } // end if
        } // end else if
    };
    allButtonBox.b3.onRelease = function ()
    {
        if (isBusy == false)
        {
            if (hasItem("Green Gemstone"))
            {
                getTimestamp("sellGemstones", 3);
            }
            else
            {
                systemMessage("You don\'t have any Green Gemstones to sell.");
            } // end if
        } // end else if
    };
    allButtonBox.b4.onRelease = function ()
    {
        if (isBusy == false)
        {
            if (hasItem("Prism Gemstone"))
            {
                getTimestamp("sellGemstones", 4);
            }
            else
            {
                systemMessage("You don\'t have any Prism Gemstones to sell.");
            } // end if
        } // end else if
    };
    allButtonBox.b5.onRelease = function ()
    {
        if (isBusy == false)
        {
            if (hasItem("Pale Gemstone"))
            {
                getTimestamp("sellGemstones", 5);
            }
            else
            {
                systemMessage("You don\'t have any Pale Gemstones to sell.");
            } // end if
        } // end else if
    };
    allButtonBox.b6.onRelease = function ()
    {
        if (isBusy == false)
        {
            if (hasItem("Dark Gemstone"))
            {
                getTimestamp("sellGemstones", 6);
            }
            else
            {
                systemMessage("You don\'t have any Dark Gemstones to sell.");
            } // end if
        } // end else if
    };
    allButtonBox.b7.onRelease = function ()
    {
        if (isBusy == false)
        {
            if (hasItem("Rainbow Gemstone"))
            {
                getTimestamp("sellGemstones", 7);
            }
            else
            {
                systemMessage("You don\'t have any Rainbow Gemstones to sell.");
            } // end if
        } // end else if
    };
    allButtonBox.b8.onRelease = function ()
    {
        if (isBusy == false)
        {
            if (hasItem("Gold Gemstone"))
            {
                getTimestamp("sellGemstones", 8);
            }
            else
            {
                systemMessage("You don\'t have any Gold Gemstones to sell.");
            } // end if
        } // end else if
    };
    allButtonBox.b9.onRelease = function ()
    {
        guiUp = false;
        canMove = true;
        removeMovieClip (allButtonBox);
    };
    assignMouseEvents(allButtonBox.b1);
    assignMouseEvents(allButtonBox.b2);
    assignMouseEvents(allButtonBox.b3);
    assignMouseEvents(allButtonBox.b4);
    assignMouseEvents(allButtonBox.b5);
    assignMouseEvents(allButtonBox.b6);
    assignMouseEvents(allButtonBox.b7);
    assignMouseEvents(allButtonBox.b8);
    assignMouseEvents(allButtonBox.b9);
} // End of the function
function npcResetLevel()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        allButtonBox = _root.mainGUI.attachMovie("allButtonBox", "allButtonBox", _root.getNextHighestDepth());
        allButtonBox.msgT.text = "Lower a pokemon\'s level: ";
        allButtonBox.nameT.htmlText = "<b>Old Man</b>";
        for (var _loc3 = 1; _loc3 < 9; ++_loc3)
        {
            allButtonBox["b" + _loc3]._visible = false;
            allButtonBox["b" + _loc3 + "T"]._visible = false;
        } // end of for
        for (var _loc3 = 1; _loc3 <= userPokemon.length; ++_loc3)
        {
            allButtonBox["b" + _loc3].loopNum = _loc3;
            allButtonBox["b" + _loc3]._visible = true;
            allButtonBox["b" + _loc3 + "T"]._visible = true;
            assignMouseEvents(allButtonBox["b" + _loc3]);
            allButtonBox["b" + _loc3 + "T"].htmlText = "<b>" + userPokemon[_loc3 - 1].name;
            allButtonBox["b" + _loc3].onRelease = function ()
            {
                if (isBusy == false)
                {
                    if (_root.userPokemon[this.loopNum - 1].level == 34 || _root.userPokemon[this.loopNum - 1].level == 67)
                    {
                        var _loc3 = false;
                        if (userPokemon[this.loopNum - 1].name == "Mamoswine" || userPokemon[this.loopNum - 1].name == "Yanmega" || userPokemon[this.loopNum - 1].name == "Cofagrigus" || userPokemon[this.loopNum - 1].name == "Lickylicky" || userPokemon[this.loopNum - 1].name == "Staraptor" || userPokemon[this.loopNum - 1].name == "Hippowdon" || userPokemon[this.loopNum - 1].name == "Skuntank" || userPokemon[this.loopNum - 1].name == "Staraptor")
                        {
                            if (userPokemon[this.loopNum - 1].level == 34)
                            {
                                _loc3 = true;
                            } // end if
                        } // end if
                        if (_loc3 == false)
                        {
                            getTimestamp("resetLevel", this.loopNum - 1);
                        }
                        else
                        {
                            systemMessage(_root.userPokemon[this.loopNum - 1].name + " can\'t use this service.");
                        } // end else if
                    }
                    else
                    {
                        systemMessage(_root.userPokemon[this.loopNum - 1].name + " needs to be level 34 or 67 to have it\'s level lowered.");
                    } // end if
                } // end else if
            };
            if (_loc3 == userPokemon.length)
            {
                allButtonBox.b7._visible = true;
                allButtonBox.b7T._visible = true;
                allButtonBox.b7._y = allButtonBox["b" + (_loc3 + 1)]._y;
                allButtonBox.b7T._y = allButtonBox["b" + (_loc3 + 1) + "T"]._y;
            } // end if
        } // end of for
        for (var _loc3 = 1; _loc3 < 9; ++_loc3)
        {
            if (allButtonBox["b" + _loc3]._visible == false)
            {
                removeMovieClip (allButtonBox["b" + _loc3]);
            } // end if
        } // end of for
        assignMouseEvents(allButtonBox.b7);
        allButtonBox.b7T.htmlText = "<b>No thanks";
        allButtonBox.b7.onRelease = function ()
        {
            guiUp = false;
            canMove = true;
            removeMovieClip (allButtonBox);
        };
    } // end if
} // End of the function
function addNpcs()
{
    if (_root.map.indexOf("Pokecenter") != -1 || _root.map == "Hoenn Pokemon League Lobby" || _root.map == "Indigo Plateau" || _root.map == "Sinnoh Pokemon League" || _root.map == "Unova Pokemon League")
    {
        if (_root.map == "Hoenn Pokemon League Lobby")
        {
            _root.npcArray.push([18, 15, "up", "Witch", "npcHalloweenWitch", "Witch", [], 101]);
        }
        else if (_root.map == "Indigo Plateau")
        {
            _root.npcArray.push([10, 19, "down", "Witch", "npcHalloweenWitch", "Witch", [], 101]);
        }
        else if (_root.map == "Sinnoh Pokemon League" || _root.map == "Unova Pokemon League")
        {
            _root.npcArray.push([13, 8, "down", "Witch", "npcHalloweenWitch", "Witch", [], 101]);
        }
        else if (_root.map == "Accumula Pokecenter" || _root.map == "Striaton Pokecenter" || _root.map == "Nacrene Pokecenter" || _root.map == "Castelia Pokecenter" || _root.map == "Nimbasa Pokecenter" || _root.map == "Driftveil Pokecenter" || _root.map == "Mistralton Pokecenter" || _root.map == "Icirrus Pokecenter" || _root.map == "Opelucid Pokecenter" || _root.map == "Lacunosa Pokecenter" || _root.map == "Undella Pokecenter" || _root.map == "Lentimas Pokecenter" || _root.map == "Black City Pokecenter" || _root.map == "Humilau Pokecenter" || _root.map == "Unova Victory Road Pokecenter")
        {
            _root.npcArray.push([12, 11, "down", "Witch", "npcHalloweenWitch", "Witch", [], 101]);
        }
        else
        {
            _root.npcArray.push([23, 14, "down", "Witch", "npcHalloweenWitch", "Witch", [], 101]);
        } // end else if
    } // end else if
    for (var _loc2 = 0; _loc2 < npcArray.length; ++_loc2)
    {
        _root.mapLayer2.createEmptyMovieClip("npc_" + npcArray[_loc2][7], _root.mapLayer2.getNextHighestDepth());
        if (npcArray[_loc2][5] != "" && npcArray[_loc2][3] != "")
        {
            _root.mapLayer2["npc_" + npcArray[_loc2][7]].createEmptyMovieClip("container", _root.mapLayer2["npc_" + npcArray[_loc2][7]].getNextHighestDepth());
            if (npcArray[_loc2][3] != "Swimmer Male" && npcArray[_loc2][3] != "Swimmer Female" && npcArray[_loc2][3] != "Diver 1" && npcArray[_loc2][3] != "Diver 2")
            {
                _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.attachMovie("shadow", "shadow", _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.getNextHighestDepth());
                _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.shadow._x = 32;
                _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.shadow._y = 48;
            } // end if
            _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.attachMovie("npcBg", "npcBg", _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.getNextHighestDepth());
            _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.npcBg.gotoAndStop(npcArray[_loc2][3]);
            _root.mapLayer2["npc_" + npcArray[_loc2][7]].name = npcArray[_loc2][5];
            _root.mapLayer2["npc_" + npcArray[_loc2][7]]._x = npcArray[_loc2][0] * 64 - 32;
            _root.mapLayer2["npc_" + npcArray[_loc2][7]]._y = npcArray[_loc2][1] * 64 - 57;
            _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.attachMovie("nameBg", "nameM", _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.getNextHighestDepth());
            _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.nameM._y = 8;
            _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.nameM._x = 32;
            _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.nameM.nameT.htmlText = "<b>" + _root.mapLayer2["npc_" + npcArray[_loc2][7]].name;
            _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.nameM.bg._width = _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.nameM.nameT.textWidth + 6;
            _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.attachMovie("maskBg", "maskBg", _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.getNextHighestDepth());
            _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.maskBg._y = 32;
            _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.maskBg._width = 64;
            _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.maskBg._height = 64;
            _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.npcBg.setMask(_root.mapLayer2["npc_" + npcArray[_loc2][7]].container.maskBg);
            if (npcArray[_loc2][2] == "down")
            {
                setNPCFrame(_root.mapLayer2["npc_" + npcArray[_loc2][7]], 0, 0);
            }
            else if (npcArray[_loc2][2] == "up")
            {
                setNPCFrame(_root.mapLayer2["npc_" + npcArray[_loc2][7]], 0, 1);
            }
            else if (npcArray[_loc2][2] == "left")
            {
                setNPCFrame(_root.mapLayer2["npc_" + npcArray[_loc2][7]], 0, 2);
            }
            else
            {
                setNPCFrame(_root.mapLayer2["npc_" + npcArray[_loc2][7]], 0, 3);
            } // end else if
            if (smallMap == false)
            {
                _root.mapLayer2["npc_" + npcArray[_loc2][7]].container._width = _root.mapLayer2["npc_" + npcArray[_loc2][7]].container._width * 2;
                _root.mapLayer2["npc_" + npcArray[_loc2][7]].container._height = _root.mapLayer2["npc_" + npcArray[_loc2][7]].container._height * 2;
            } // end if
        } // end if
        _root.mapLayer2["npc_" + npcArray[_loc2][7]].container.cacheAsBitmap = true;
        _root.collisionArray[npcArray[_loc2][1]][npcArray[_loc2][0]] = 1;
        _root.collisionArray1[npcArray[_loc2][1]][npcArray[_loc2][0]] = 1;
        _root.collisionArray2[npcArray[_loc2][1]][npcArray[_loc2][0]] = 1;
        if (npcArray[_loc2][4] == true)
        {
            trainerArray.push([npcArray[_loc2][0], npcArray[_loc2][1], npcArray[_loc2][2], npcArray[_loc2][7], npcArray[_loc2][6], npcArray[_loc2][5], npcArray[_loc2][8], npcArray[_loc2][9]]);
        } // end if
    } // end of for
    fixDepths();
} // End of the function
function moveMap(dir)
{
    moving = true;
    bDownTime = 0;
    _root.dir = dir;
    if (moveType == "")
    {
        if (dir == "up")
        {
            drawPlayer(player, 0, 1);
            movingMapUp = true;
        }
        else if (dir == "down")
        {
            drawPlayer(player, 0, 0);
            movingMapDown = true;
        }
        else if (dir == "left")
        {
            drawPlayer(player, 0, 2);
            movingMapLeft = true;
        }
        else if (dir == "right")
        {
            drawPlayer(player, 0, 3);
            movingMapRight = true;
        } // end else if
    }
    else if (moveType == "bike")
    {
        if (dir == "up")
        {
            if (!(player.frameX == 6 && player.frameY == 1 || player.frameX == 7 && player.frameY == 1 || player.frameX == 8 && player.frameY == 1 || player.frameX == 11 && player.frameY == 1))
            {
                drawPlayer(player, 6, 1);
            } // end if
            movingMapUp = true;
        }
        else if (dir == "down")
        {
            if (!(player.frameX == 6 && player.frameY == 0 || player.frameX == 7 && player.frameY == 0 || player.frameX == 8 && player.frameY == 0 || player.frameX == 11 && player.frameY == 0))
            {
                drawPlayer(player, 6, 0);
            } // end if
            movingMapDown = true;
        }
        else if (dir == "left")
        {
            if (!(player.frameX == 6 && player.frameY == 2 || player.frameX == 7 && player.frameY == 2 || player.frameX == 8 && player.frameY == 2 || player.frameX == 9 && player.frameY == 2))
            {
                drawPlayer(player, 6, 2);
            } // end if
            movingMapLeft = true;
        }
        else if (dir == "right")
        {
            if (!(player.frameX == 6 && player.frameY == 3 || player.frameX == 7 && player.frameY == 3 || player.frameX == 8 && player.frameY == 3 || player.frameX == 9 && player.frameY == 3))
            {
                drawPlayer(player, 6, 3);
            } // end if
            movingMapRight = true;
        } // end else if
    } // end else if
    sendMovement();
} // End of the function
function sendMovement()
{
    if (_root.map == disabledPlayersMaps[0] || _root.map == disabledPlayersMaps[1] || _root.map == _root.swarmMap || _root.map == _root.worldBossMap)
    {
        return;
    } // end if
    getTimestamp("sendMovement");
} // End of the function
function moveMapJump(dir)
{
    movingMapJump = true;
    moving = true;
    bDownTime = 0;
    _root.dir = dir;
    if (player.followPokemonBox._y > 0)
    {
        player.followPokemonBox.xSpeed = 8;
        player.followPokemonBox.ySpeed = 16;
    }
    else
    {
        player.followPokemonBox.xSpeed = 8;
        player.followPokemonBox.ySpeed = 8;
    } // end else if
    followPokemonMove = dir;
    setFollowPokemon(player, 0, 0);
    if (moveType == "")
    {
        if (dir == "up")
        {
            drawPlayer(player, 0, 1);
            movingMapUpJump = true;
        }
        else if (dir == "down")
        {
            drawPlayer(player, 0, 0);
            movingMapDownJump = true;
        }
        else if (dir == "left")
        {
            drawPlayer(player, 0, 2);
            movingMapLeftJump = true;
        }
        else if (dir == "right")
        {
            drawPlayer(player, 0, 3);
            movingMapRightJump = true;
        } // end else if
    }
    else if (moveType == "bike")
    {
        if (dir == "up")
        {
            drawPlayer(player, 6, 1);
            movingMapUpJump = true;
        }
        else if (dir == "down")
        {
            drawPlayer(player, 6, 0);
            movingMapDownJump = true;
        }
        else if (dir == "left")
        {
            drawPlayer(player, 6, 2);
            movingMapLeftJump = true;
        }
        else if (dir == "right")
        {
            drawPlayer(player, 6, 3);
            movingMapRightJump = true;
        } // end else if
    } // end else if
    sendMovement();
} // End of the function
function moveMapSurf(dir)
{
    moving = true;
    bDownTime = 0;
    _root.dir = dir;
    if (dir == "up")
    {
        if (player.nextStep != 1)
        {
            drawPlayer(player, 12, 1);
        }
        else
        {
            drawPlayer(player, 13, 1);
        } // end else if
        movingMapUp = true;
    }
    else if (dir == "down")
    {
        if (player.nextStep != 1)
        {
            drawPlayer(player, 12, 0);
        }
        else
        {
            drawPlayer(player, 13, 0);
        } // end else if
        movingMapDown = true;
    }
    else if (dir == "left")
    {
        if (player.nextStep != 1)
        {
            drawPlayer(player, 12, 2);
        }
        else
        {
            drawPlayer(player, 13, 2);
        } // end else if
        movingMapLeft = true;
    }
    else if (dir == "right")
    {
        if (player.nextStep != 1)
        {
            drawPlayer(player, 12, 3);
        }
        else
        {
            drawPlayer(player, 13, 3);
        } // end else if
        movingMapRight = true;
    } // end else if
    sendMovement();
} // End of the function
function checkMapExits()
{
    if (_root.battle == true)
    {
        canMove = false;
    } // end if
    if (encryptedstepsWalked == calcMD5(stepsWalked + _root.kg1() + _root.username))
    {
        ++stepsWalked;
        encryptedstepsWalked = calcMD5(stepsWalked + _root.kg1() + _root.username);
        if (stepsWalked >= 256)
        {
            getTimestamp("stepsWalked");
            stepsWalked = 0;
            encryptedstepsWalked = calcMD5(stepsWalked + _root.kg1() + _root.username);
        } // end if
    } // end if
    foundMap = false;
    for (var _loc2 = 0; _loc2 < mapExits.length; ++_loc2)
    {
        if (player.tileX == mapExits[_loc2][0] && player.tileY == mapExits[_loc2][1])
        {
            foundMap = true;
            loadMap(true, mapExits[_loc2][2], mapExits[_loc2][3], mapExits[_loc2][4]);
            break;
        } // end if
    } // end of for
    if (_root.battle != true && _root.map.indexOf("Clan Wars ") == -1)
    {
        foundTrainer2 = false;
        for (var _loc2 = 0; _loc2 < trainerArray.length; ++_loc2)
        {
            if (trainerArray[_loc2][2] == "down")
            {
                if (checkTrainerRange("down", trainerArray[_loc2]))
                {
                    startTrainerBattle(trainerArray[_loc2]);
                    foundTrainer2 = true;
                    break;
                } // end if
                continue;
            } // end if
            if (trainerArray[_loc2][2] == "up")
            {
                if (checkTrainerRange("up", trainerArray[_loc2]))
                {
                    startTrainerBattle(trainerArray[_loc2]);
                    foundTrainer2 = true;
                    break;
                } // end if
                continue;
            } // end if
            if (trainerArray[_loc2][2] == "left")
            {
                if (checkTrainerRange("left", trainerArray[_loc2]))
                {
                    startTrainerBattle(trainerArray[_loc2]);
                    foundTrainer2 = true;
                    break;
                } // end if
                continue;
            } // end if
            if (trainerArray[_loc2][2] == "right")
            {
                if (checkTrainerRange("right", trainerArray[_loc2]))
                {
                    startTrainerBattle(trainerArray[_loc2]);
                    foundTrainer2 = true;
                    break;
                } // end if
            } // end if
        } // end of for
        ++stepsSinceLastBattle;
        if (stepsSinceLastBattle >= 4 && foundTrainer2 == false && (collisionArray[player.tileY][player.tileX] == 3 || collisionArray[player.tileY][player.tileX] == 17) && foundMap != true)
        {
            if (_root.battleBg == "" || _root.battleBg == "grass")
            {
                grassAnimation();
            }
            else if (collisionArray[player.tileY][player.tileX] == 17)
            {
                snowAnimation();
            } // end else if
            if (_root.repelAmount == 0 && _root.updatedMap == true)
            {
                if (_root.battleBg != "rock" && _root.cave != true)
                {
                    if (userPokemon[0].currentHp > 0)
                    {
                        if (userPokemon[0].ability == 1 || userPokemon[0].ability == 73 || userPokemon[0].ability == 95)
                        {
                            if (rand(1, 13) == 7)
                            {
                                startWildBattle();
                            } // end if
                        }
                        else if (userPokemon[0].ability == 35 || userPokemon[0].ability == 71)
                        {
                            if (rand(1, 8) <= 2)
                            {
                                startWildBattle();
                            } // end if
                        }
                        else if (userPokemon[0].ability == 99)
                        {
                            if (rand(1, 80) <= 15)
                            {
                                startWildBattle();
                            } // end if
                        }
                        else if (userPokemon[0].heldItem == "Cleanse Tag")
                        {
                            if (rand(1, 26) == 7)
                            {
                                startWildBattle();
                            } // end if
                        }
                        else if (rand(1, 8) == 7)
                        {
                            startWildBattle();
                        } // end else if
                    }
                    else if (userPokemon[0].heldItem == "Cleanse Tag")
                    {
                        if (rand(1, 26) == 7)
                        {
                            startWildBattle();
                        } // end if
                    }
                    else if (rand(1, 8) == 7)
                    {
                        startWildBattle();
                    } // end else if
                }
                else if (userPokemon[0].currentHp > 0)
                {
                    if (userPokemon[0].ability == 1 || userPokemon[0].ability == 73 || userPokemon[0].ability == 95)
                    {
                        if (rand(1, 26) == 7)
                        {
                            startWildBattle();
                        } // end if
                    }
                    else if (userPokemon[0].ability == 35 || userPokemon[0].ability == 71)
                    {
                        if (rand(1, 8) == 7)
                        {
                            startWildBattle();
                        } // end if
                    }
                    else if (userPokemon[0].ability == 99)
                    {
                        if (rand(1, 170) <= 15)
                        {
                            startWildBattle();
                        } // end if
                    }
                    else if (userPokemon[0].heldItem == "Cleanse Tag")
                    {
                        if (rand(1, 26) == 7)
                        {
                            startWildBattle();
                        } // end if
                    }
                    else if (rand(1, 17) == 7)
                    {
                        startWildBattle();
                    } // end else if
                }
                else if (userPokemon[0].heldItem == "Cleanse Tag")
                {
                    if (rand(1, 26) == 7)
                    {
                        startWildBattle();
                    } // end if
                }
                else if (rand(1, 17) == 7)
                {
                    startWildBattle();
                } // end else if
            } // end else if
        } // end else if
        if (stepsSinceLastBattle >= 4 && foundTrainer2 == false && (collisionArray[player.tileY][player.tileX] == 2 || collisionArray[player.tileY][player.tileX] == 24 || collisionArray[player.tileY][player.tileX] == 25) && foundMap != true)
        {
            if (_root.repelAmount == 0 && _root.updatedMap == true)
            {
                if (userPokemon[0].currentHp > 0)
                {
                    if (userPokemon[0].ability == 1 || userPokemon[0].ability == 73 || userPokemon[0].ability == 95)
                    {
                        if (rand(1, 27) == 7)
                        {
                            startWildBattle();
                        } // end if
                    }
                    else if (userPokemon[0].ability == 35 || userPokemon[0].ability == 71)
                    {
                        if (rand(1, 9) == 7)
                        {
                            startWildBattle();
                        } // end if
                    }
                    else if (userPokemon[0].ability == 99)
                    {
                        if (rand(1, 180) <= 15)
                        {
                            startWildBattle();
                        } // end if
                    }
                    else if (userPokemon[0].heldItem == "Cleanse Tag")
                    {
                        if (rand(1, 27) == 7)
                        {
                            startWildBattle();
                        } // end if
                    }
                    else if (rand(1, 17) == 7)
                    {
                        startWildBattle();
                    } // end else if
                }
                else if (userPokemon[0].heldItem == "Cleanse Tag")
                {
                    if (rand(1, 27) == 7)
                    {
                        startWildBattle();
                    } // end if
                }
                else if (rand(1, 17) == 7)
                {
                    startWildBattle();
                } // end if
            } // end if
        } // end else if
    } // end else if
    if (foundTrainer2 == false && foundMap != true)
    {
        for (var _loc2 = 0; _loc2 < customTiles.length; ++_loc2)
        {
            if (customTiles[_loc2][0] == player.tileX && customTiles[_loc2][1] == player.tileY)
            {
                systemMessage(customTiles[_loc2][2]);
            } // end if
        } // end of for
    } // end if
    if (collisionArray[player.tileY][player.tileX] == 20)
    {
        _root.tileZ = 0;
        _root.collisionArray = _root.collisionArray1;
        mapLayer3._visible = true;
    }
    else if (collisionArray[player.tileY][player.tileX] == 21)
    {
        _root.tileZ = 1;
        _root.collisionArray = _root.collisionArray2;
        mapLayer3._visible = false;
    }
    else if (collisionArray[player.tileY][player.tileX] == 22)
    {
        _root.tileZ = 0;
        _root.collisionArray = _root.collisionArray1;
        mapLayer3._visible = true;
    }
    else if (collisionArray[player.tileY][player.tileX] == 23)
    {
        _root.tileZ = 1;
        _root.collisionArray = _root.collisionArray2;
        mapLayer3._visible = false;
    }
    else if (collisionArray[player.tileY][player.tileX] == 24)
    {
        _root.tileZ = 0;
        _root.collisionArray = _root.collisionArray1;
        mapLayer3._visible = true;
    }
    else if (collisionArray[player.tileY][player.tileX] == 25)
    {
        _root.tileZ = 1;
        _root.collisionArray = _root.collisionArray2;
        mapLayer3._visible = false;
    } // end else if
} // End of the function
function checkTrainerRange(npcDir, trainerArray)
{
    if (trainerArray[6] != true)
    {
        if (npcDir == "down")
        {
            if (player.tileX == trainerArray[0] && (player.tileY > trainerArray[1] && player.tileY <= trainerArray[1] + trainerRange))
            {
                if (collisionArray[trainerArray[1]][trainerArray[0]] != 2)
                {
                    for (var _loc2 = 1; _loc2 <= trainerRange; ++_loc2)
                    {
                        if (trainerArray[1] + trainerRange <= player.tileY)
                        {
                            if (collisionArray[trainerArray[1] + _loc2][trainerArray[0]] == 1 || collisionArray[trainerArray[1] + _loc2][trainerArray[0]] == 2 || collisionArray[trainerArray[1] + _loc2][trainerArray[0]] == 4 || collisionArray[trainerArray[1] + _loc2][trainerArray[0]] == 6 || collisionArray[trainerArray[1] + _loc2][trainerArray[0]] == 8 || collisionArray[trainerArray[1] + _loc2][trainerArray[0]] == 10 || collisionArray[trainerArray[1] + _loc2][trainerArray[0]] == 11 || collisionArray[trainerArray[1] + _loc2][trainerArray[0]] == 12 || collisionArray[trainerArray[1] + _loc2][trainerArray[0]] == 14)
                            {
                                return (false);
                            } // end if
                        } // end if
                    } // end of for
                }
                else
                {
                    for (var _loc2 = 1; _loc2 <= trainerRange; ++_loc2)
                    {
                        if (trainerArray[1] + trainerRange <= player.tileY)
                        {
                            if (collisionArray[trainerArray[1] + _loc2][trainerArray[0]] != 2)
                            {
                                return (false);
                            } // end if
                        } // end if
                    } // end of for
                } // end else if
            }
            else
            {
                return (false);
            } // end else if
        }
        else if (npcDir == "up")
        {
            if (player.tileX == trainerArray[0] && (player.tileY < trainerArray[1] && player.tileY >= trainerArray[1] - trainerRange))
            {
                if (collisionArray[trainerArray[1]][trainerArray[0]] != 2)
                {
                    for (var _loc2 = 1; _loc2 <= trainerRange; ++_loc2)
                    {
                        if (trainerArray[1] - trainerRange >= player.tileY)
                        {
                            if (collisionArray[trainerArray[1] - _loc2][trainerArray[0]] == 1 || collisionArray[trainerArray[1] - _loc2][trainerArray[0]] == 2 || collisionArray[trainerArray[1] - _loc2][trainerArray[0]] == 4 || collisionArray[trainerArray[1] - _loc2][trainerArray[0]] == 6 || collisionArray[trainerArray[1] - _loc2][trainerArray[0]] == 8 || collisionArray[trainerArray[1] - _loc2][trainerArray[0]] == 10 || collisionArray[trainerArray[1] - _loc2][trainerArray[0]] == 11 || collisionArray[trainerArray[1] - _loc2][trainerArray[0]] == 12 || collisionArray[trainerArray[1] - _loc2][trainerArray[0]] == 14)
                            {
                                return (false);
                            } // end if
                        } // end if
                    } // end of for
                }
                else
                {
                    for (var _loc2 = 1; _loc2 <= trainerRange; ++_loc2)
                    {
                        if (trainerArray[1] - trainerRange >= player.tileY)
                        {
                            if (collisionArray[trainerArray[1] - _loc2][trainerArray[0]] != 2)
                            {
                                return (false);
                            } // end if
                        } // end if
                    } // end of for
                } // end else if
            }
            else
            {
                return (false);
            } // end else if
        }
        else if (npcDir == "left")
        {
            if (player.tileY == trainerArray[1] && (player.tileX < trainerArray[0] && player.tileX >= trainerArray[0] - trainerRange))
            {
                if (collisionArray[trainerArray[1]][trainerArray[0]] != 2)
                {
                    for (var _loc2 = 1; _loc2 <= trainerRange; ++_loc2)
                    {
                        if (trainerArray[0] - trainerRange >= player.tileX)
                        {
                            if (collisionArray[trainerArray[1]][trainerArray[0] - _loc2] == 1 || collisionArray[trainerArray[1]][trainerArray[0] - _loc2] == 2 || collisionArray[trainerArray[1]][trainerArray[0] - _loc2] == 4 || collisionArray[trainerArray[1]][trainerArray[0] - _loc2] == 6 || collisionArray[trainerArray[1]][trainerArray[0] - _loc2] == 8 || collisionArray[trainerArray[1]][trainerArray[0] - _loc2] == 10 || collisionArray[trainerArray[1]][trainerArray[0] - _loc2] == 11 || collisionArray[trainerArray[1]][trainerArray[0] - _loc2] == 12 || collisionArray[trainerArray[1]][trainerArray[0] - _loc2] == 14)
                            {
                                return (false);
                            } // end if
                        } // end if
                    } // end of for
                }
                else
                {
                    for (var _loc2 = 1; _loc2 <= trainerRange; ++_loc2)
                    {
                        if (trainerArray[0] - trainerRange >= player.tileY)
                        {
                            if (collisionArray[trainerArray[1]][trainerArray[0] - _loc2] != 2)
                            {
                                return (false);
                            } // end if
                        } // end if
                    } // end of for
                } // end else if
            }
            else
            {
                return (false);
            } // end else if
        }
        else if (npcDir == "right")
        {
            if (player.tileY == trainerArray[1] && (player.tileX > trainerArray[0] && player.tileX <= trainerArray[0] + trainerRange))
            {
                if (collisionArray[trainerArray[1]][trainerArray[0]] != 2)
                {
                    for (var _loc2 = 1; _loc2 <= trainerRange; ++_loc2)
                    {
                        if (trainerArray[0] + trainerRange <= player.tileX)
                        {
                            if (collisionArray[trainerArray[1]][trainerArray[0] + _loc2] == 1 || collisionArray[trainerArray[1]][trainerArray[0] + _loc2] == 2 || collisionArray[trainerArray[1]][trainerArray[0] + _loc2] == 4 || collisionArray[trainerArray[1]][trainerArray[0] + _loc2] == 6 || collisionArray[trainerArray[1]][trainerArray[0] + _loc2] == 8 || collisionArray[trainerArray[1]][trainerArray[0] + _loc2] == 10 || collisionArray[trainerArray[1]][trainerArray[0] + _loc2] == 11 || collisionArray[trainerArray[1]][trainerArray[0] + _loc2] == 12 || collisionArray[trainerArray[1]][trainerArray[0] + _loc2] == 14)
                            {
                                return (false);
                            } // end if
                        } // end if
                    } // end of for
                }
                else
                {
                    for (var _loc2 = 1; _loc2 <= trainerRange; ++_loc2)
                    {
                        if (trainerArray[0] + trainerRange <= player.tileY)
                        {
                            if (collisionArray[trainerArray[1]][trainerArray[0] + _loc2] != 2)
                            {
                                return (false);
                            } // end if
                        } // end if
                    } // end of for
                } // end else if
            }
            else
            {
                return (false);
            } // end else if
        }
        else
        {
            return (false);
        } // end else if
    }
    else
    {
        return (false);
    } // end else if
    return (true);
} // End of the function
function displayBattleText()
{
    battleTextNumber = 1;
    battleTextFrameCount = 0;
    battleTextIndex = 0;
    displayingBattleText = true;
} // End of the function
function setMapStuff()
{
    kantoMap.mapText._visible = false;
    kantoMap.exitB.onRelease = function ()
    {
        mainGUI.mapB.gotoAndStop(1);
        guiUp = false;
        removeMovieClip (kantoMap);
    };
    addDraggableGUI(kantoMap);
    kantoMap.switchMapB.onRelease = function ()
    {
        if (_root.mapType2 == "Kanto")
        {
            _root.mapType2 = "Johto";
            removeMovieClip (kantoMap);
            kantoMap = _root.mainGUI.attachMovie("johtoMap", "kantoMap", _root.getNextHighestDepth());
            setJohtoMapRollOvers();
            setMapStuff();
        }
        else if (_root.mapType2 == "Johto")
        {
            _root.mapType2 = "Hoenn";
            removeMovieClip (kantoMap);
            kantoMap = _root.mainGUI.attachMovie("hoennMap", "kantoMap", _root.getNextHighestDepth());
            setHoennMapRollOvers();
            setMapStuff();
        }
        else if (_root.mapType2 == "Hoenn")
        {
            _root.mapType2 = "Sinnoh";
            removeMovieClip (kantoMap);
            kantoMap = _root.mainGUI.attachMovie("sinnohMap", "kantoMap", _root.getNextHighestDepth());
            setSinnohMapRollOvers();
            setMapStuff();
        }
        else if (_root.mapType2 == "Sinnoh")
        {
            _root.mapType2 = "Unova";
            removeMovieClip (kantoMap);
            kantoMap = _root.mainGUI.attachMovie("UnovaMap", "kantoMap", _root.getNextHighestDepth());
            setUnovaMapRollOvers();
            setMapStuff();
        }
        else if (_root.mapType2 == "Unova")
        {
            _root.mapType2 = "Kanto";
            removeMovieClip (kantoMap);
            kantoMap = _root.mainGUI.attachMovie("kantoMap", "kantoMap", _root.getNextHighestDepth());
            setMapRollOvers();
            setMapStuff();
        } // end else if
    };
    assignMouseEvents(kantoMap.exitB);
    assignMouseVars(kantoMap.switchMapB);
} // End of the function
function checkNPCMovement(dir, target)
{
    if (dir == "up")
    {
        if (target.moveMapAmount == 32)
        {
            if (target.nextStep == true)
            {
                setNPCFrame(target, 1, 1);
                target.nextStep = false;
            }
            else
            {
                setNPCFrame(target, 2, 1);
                target.nextStep = true;
            } // end else if
        }
        else if (target.moveMapAmount >= 64)
        {
            setNPCFrame(target, 0, 1);
        } // end else if
    }
    else if (dir == "down")
    {
        if (target.moveMapAmount == 32)
        {
            if (target.nextStep == true)
            {
                setNPCFrame(target, 1, 0);
                target.nextStep = false;
            }
            else
            {
                setNPCFrame(target, 2, 0);
                target.nextStep = true;
            } // end else if
        }
        else if (target.moveMapAmount >= 64)
        {
            setNPCFrame(target, 0, 0);
        } // end else if
    }
    else if (dir == "left")
    {
        if (target.moveMapAmount == 32)
        {
            if (target.nextStep == true)
            {
                setNPCFrame(target, 1, 2);
                target.nextStep = false;
            }
            else
            {
                setNPCFrame(target, 2, 2);
                target.nextStep = true;
            } // end else if
        }
        else if (target.moveMapAmount >= 64)
        {
            setNPCFrame(target, 0, 2);
        } // end else if
    }
    else if (dir == "right")
    {
        if (target.moveMapAmount == 32)
        {
            if (target.nextStep == true)
            {
                setNPCFrame(target, 1, 3);
                target.nextStep = false;
            }
            else
            {
                setNPCFrame(target, 2, 3);
                target.nextStep = true;
            } // end else if
        }
        else if (target.moveMapAmount >= 64)
        {
            setNPCFrame(target, 0, 3);
        } // end else if
    } // end else if
} // End of the function
function chatBox(mArray, textTileName)
{
    msgArray = mArray;
    currentMsg = 0;
    if (msgArray.length > 0)
    {
        chatBoxOpen = true;
        canMove = false;
        var chatBox = _root.mainGUI.attachMovie("chatBox", "chatBox", _root.mainGUI.getNextHighestDepth());
        chatBox.continueArrow._visible = false;
        chatBox._alpha = 0;
        if (textTileName == undefined)
        {
            chatBox.nameT.htmlText = "<b>" + currentNPC[5];
        }
        else
        {
            chatBox.nameT.htmlText = "<b>" + textTileName;
        } // end else if
        chatBox.onEnterFrame = function ()
        {
            if (chatBox._alpha < 100)
            {
                chatBox._alpha = chatBox._alpha + 6;
            } // end if
            if (chatBox._alpha >= 100)
            {
                this.continueArrow._visible = true;
                this.chatT.htmlText = msgArray[0];
                delete this.onEnterFrame;
            } // end if
        };
    }
    else if (typeof(currentNPC[4]) == "string")
    {
        this[currentNPC[4]]();
    } // end else if
} // End of the function
function nextMessage()
{
    ++currentMsg;
    if (msgArray[currentMsg] != undefined)
    {
        _root.mainGUI.chatBox.chatT.htmlText = msgArray[currentMsg];
    }
    else
    {
        removeMovieClip (_root.mainGUI.chatBox);
        chatBoxOpen = false;
        if (_root.battleReady == true)
        {
            fadeScreen();
        }
        else if (_root.battle == true)
        {
            _root.waitingForBattle = true;
        }
        else
        {
            canMove = true;
        } // end else if
        if (currentNPC[4][0] != undefined)
        {
            canMove = false;
            darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
            darkScreen._width = Stage.width;
            darkScreen._height = Stage.height;
            darkScreen._alpha = 70;
            darkScreen._x = newWidth / 2;
            darkScreen._y = newHeight / 2;
            merchantBox = _root.attachMovie("merchantBox", "merchantBox", _root.getNextHighestDepth());
            guiUp = true;
            merchantBox.i.gotoAndStop(currentNPC[4][0][0]);
            firstLetter = currentNPC[4][0].substr(0, 1);
            if (firstLetter == "a" || firstLetter == "i" || firstLetter == "u" || firstLetter == "e" || firstLetter == "o")
            {
                merchantBox.msgT.htmlText = "<b>Purchase an " + currentNPC[4][0][0] + " for $" + format(currentNPC[4][0][1]) + "?";
            }
            else
            {
                merchantBox.msgT.htmlText = "<b>Purchase a " + currentNPC[4][0][0] + " for $" + format(currentNPC[4][0][1]) + "?";
            } // end else if
            merchantBox.nameT.htmlText = "<b>" + currentNPC[4][0][0];
            delete firstLetter;
            merchantBox.item = currentNPC[4][0][0];
            merchantBox.price = Number(currentNPC[4][0][1]);
            merchantBox.id = currentNPC[7];
            merchantBox.yesB.onRelease = function ()
            {
                if (money >= merchantBox.price && isBusy == false)
                {
                    getTimestamp("acceptMerchantItem", merchantBox.id);
                } // end if
            };
            merchantBox.noB.onRelease = function ()
            {
                guiUp = false;
                canMove = true;
                removeMovieClip (merchantBox);
                removeMovieClip (darkScreen);
            };
            merchantBox._x = newWidth / 2;
            merchantBox._y = newHeight / 2;
        }
        else if (typeof(currentNPC[4]) == "string" && (currentNPC[6].length > 0 || currentNPC[6] == undefined))
        {
            this[currentNPC[4]]();
        } // end else if
        if (eliteFourBeat == true)
        {
            eliteFourBeat = false;
            globalAnimation = "Elite Four";
        } // end if
        if (hoennEliteFourBeat == true && _root.map == "Hoenn Champion Room")
        {
            globalAnimation = "Hoenn Elite Four";
        } // end if
        if (sinnohEliteFourBeat == true && _root.map == "Sinnoh Elite Four Champion Room")
        {
            globalAnimation = "Sinnoh Elite Four";
        } // end if
        if (unovaEliteFourBeat == true && _root.map == "Unova Champion Room")
        {
            globalAnimation = "Unova Elite Four";
        } // end if
        if (currentNPC[3] == "Professor Oak" && userPokemon.length < 1)
        {
            canChoosePokemon = true;
            currentNPC[6] = ["Go on, choose!"];
        }
        else
        {
            currentNPC = [];
        } // end else if
        if (map == "Ancient Cave R7")
        {
            openShop();
        } // end if
    } // end else if
} // End of the function
function interact(x, y)
{
    if (battle == false && typing != true)
    {
        trace ("Interacting with tile: " + x + ", " + y);
        if (darkScreenLoadMap._x == undefined)
        {
            for (var _loc6 = 0; _loc6 < trainerArray.length; ++_loc6)
            {
                if (trainerArray[_loc6][0] == x && trainerArray[_loc6][1] == y)
                {
                    if (dir == "up")
                    {
                        setNPCFrame(_root.mapLayer2["npc_" + trainerArray[_loc6][3]], 0, 0);
                    }
                    else if (dir == "down")
                    {
                        setNPCFrame(_root.mapLayer2["npc_" + trainerArray[_loc6][3]], 0, 1);
                    }
                    else if (dir == "left")
                    {
                        setNPCFrame(_root.mapLayer2["npc_" + trainerArray[_loc6][3]], 0, 3);
                    }
                    else if (dir == "right")
                    {
                        setNPCFrame(_root.mapLayer2["npc_" + trainerArray[_loc6][3]], 0, 2);
                    } // end else if
                    startTrainerBattle(trainerArray[_loc6], dir);
                    break;
                } // end if
            } // end of for
        } // end if
        for (var _loc6 = 0; _loc6 < npcArray.length; ++_loc6)
        {
            if (npcArray[_loc6][0] == x && npcArray[_loc6][1] == y && npcArray[_loc6][4] != true)
            {
                if (dir == "up")
                {
                    setNPCFrame(_root.mapLayer2["npc_" + npcArray[_loc6][7]], 0, 0);
                }
                else if (dir == "down")
                {
                    setNPCFrame(_root.mapLayer2["npc_" + npcArray[_loc6][7]], 0, 1);
                }
                else if (dir == "left")
                {
                    setNPCFrame(_root.mapLayer2["npc_" + npcArray[_loc6][7]], 0, 3);
                }
                else if (dir == "right")
                {
                    setNPCFrame(_root.mapLayer2["npc_" + npcArray[_loc6][7]], 0, 2);
                } // end else if
                currentNPC = npcArray[_loc6];
                chatBox(npcArray[_loc6][6]);
                break;
            } // end if
        } // end of for
        for (var _loc6 = 0; _loc6 < pcArray.length; ++_loc6)
        {
            if (pcArray[_loc6][0] == x && pcArray[_loc6][1] == y)
            {
                openStorage();
            } // end if
        } // end of for
        for (var _loc6 = 0; _loc6 < _root.portablePCArray.length; ++_loc6)
        {
            if (_root.portablePCArray[_loc6][0] == x && _root.portablePCArray[_loc6][1] == y + 1)
            {
                openPortablePC(_loc6);
            } // end if
        } // end of for
        for (var _loc6 = 0; _loc6 < _root.miningRocks.length; ++_loc6)
        {
            if (_root.miningRocks[_loc6][0] == x && _root.miningRocks[_loc6][1] == y)
            {
                if (_root.mining == false)
                {
                    if (_root.miningRocks[_loc6][3] == "1")
                    {
                        if (moving == false)
                        {
                            _root.currentRock = _root.miningRocks[_loc6];
                            if (hasItem("Master Pickaxe") && miningLevel >= 100)
                            {
                                checkMine(getItemPos("Master Pickaxe"));
                            }
                            else if (hasItem("Steel Pickaxe") && miningLevel >= 50)
                            {
                                checkMine(getItemPos("Steel Pickaxe"));
                            }
                            else if (hasItem("Super Pickaxe") && miningLevel >= 20)
                            {
                                checkMine(getItemPos("Super Pickaxe"));
                            }
                            else if (hasItem("Good Pickaxe") && miningLevel >= 5)
                            {
                                checkMine(getItemPos("Good Pickaxe"));
                            }
                            else if (hasItem("Old Pickaxe"))
                            {
                                checkMine(getItemPos("Old Pickaxe"));
                            }
                            else
                            {
                                systemMessage("You don\'t have a pickaxe you can use!");
                            } // end else if
                        } // end else if
                    }
                    else
                    {
                        systemMessage("You can\'t mine that right now.");
                    } // end else if
                }
                else
                {
                    stopMining();
                } // end else if
                break;
            } // end if
        } // end of for
        for (var _loc6 = 0; _loc6 < shopArray.length; ++_loc6)
        {
            if (shopArray[_loc6][0] == x && shopArray[_loc6][1] == y)
            {
                openShop();
            } // end if
        } // end of for
        for (var _loc6 = 0; _loc6 < textArray.length; ++_loc6)
        {
            if (textArray[_loc6][0] == x && textArray[_loc6][1] == y)
            {
                if (typeof(textArray[_loc6][4]) == "string")
                {
                    currentNPC = textArray[_loc6];
                } // end if
                chatBox(textArray[_loc6][2], textArray[_loc6][3]);
            } // end if
        } // end of for
        for (var _loc6 = 0; _loc6 < casinoArray.length; ++_loc6)
        {
            if (casinoArray[_loc6][0] == x && casinoArray[_loc6][1] == y)
            {
                showCasino();
            } // end if
        } // end of for
        pokemonName = "";
        if (collisionArray[y][x] == 6)
        {
            if (hasItem("HM01 - Cut"))
            {
                systemMessage("You used cut.");
                collisionArray[y][x] = 0;
                for (var _loc6 = 0; _loc6 < treeArray.length; ++_loc6)
                {
                    if (treeArray[_loc6].x == x && treeArray[_loc6].y == y)
                    {
                        removeMovieClip (treeArray[_loc6]);
                        treeArray.splice(_loc6, 1);
                        --_loc6;
                    } // end if
                } // end of for
            }
            else
            {
                systemMessage("You can\'t use cut yet.");
            } // end if
        } // end else if
        if (moveType != "surf")
        {
            if (collisionArray[y][x] == 2 || collisionArray[y][x] == 24 || collisionArray[y][x] == 25 || collisionArray[y][x] == 12 || collisionArray[y][x] == 15)
            {
                if (hasBadge("Soul Badge"))
                {
                    for (var _loc6 = 0; _loc6 < userPokemon.length; ++_loc6)
                    {
                        if (userPokemon[_loc6].moves[0] == 57)
                        {
                            pokemonName = userPokemon[_loc6].name;
                            break;
                        } // end if
                        if (userPokemon[_loc6].moves[1] == 57)
                        {
                            pokemonName = userPokemon[_loc6].name;
                            break;
                        } // end if
                        if (userPokemon[_loc6].moves[2] == 57)
                        {
                            pokemonName = userPokemon[_loc6].name;
                            break;
                        } // end if
                        if (userPokemon[_loc6].moves[3] == 57)
                        {
                            pokemonName = userPokemon[_loc6].name;
                            break;
                        } // end if
                    } // end of for
                    if (pokemonName != "" || hasItem("HM03 - Surf"))
                    {
                        systemMessage("You used Surf.");
                        fadeMusic("Surfing.mp3", false);
                        moveType = "surf";
                        setSurfMount();
                        if (hasItem("Surfboard"))
                        {
                            moveMapSpeed = 16 * movementSpeedMod;
                        }
                        else
                        {
                            moveMapSpeed = 8 * movementSpeedMod;
                        } // end else if
                        if (dir == "up")
                        {
                            moveMapSurf("up");
                        }
                        else if (dir == "down")
                        {
                            moveMapSurf("down");
                        }
                        else if (dir == "left")
                        {
                            moveMapSurf("left");
                        }
                        else if (dir == "right")
                        {
                            moveMapSurf("right");
                        } // end else if
                        if (_root.fishing == true)
                        {
                            stopFishing();
                        } // end if
                        if (mining == true)
                        {
                            stopMining(undefined, true);
                        } // end if
                        getTimestamp("updateMount", _root.player.mount);
                    } // end if
                }
                else
                {
                    systemMessage("You need to have the Soul Badge to use Surf.");
                } // end if
            } // end if
        } // end else if
        if (collisionArray[y][x] == 14 || collisionArray[y][x] == 22 || collisionArray[y][x] == 23)
        {
            if (hasBadge("Soul Badge"))
            {
                for (var _loc6 = 0; _loc6 < userPokemon.length; ++_loc6)
                {
                    if (userPokemon[_loc6].moves[0] == 127)
                    {
                        pokemonName = userPokemon[_loc6].name;
                        break;
                    } // end if
                    if (userPokemon[_loc6].moves[1] == 127)
                    {
                        pokemonName = userPokemon[_loc6].name;
                        break;
                    } // end if
                    if (userPokemon[_loc6].moves[2] == 127)
                    {
                        pokemonName = userPokemon[_loc6].name;
                        break;
                    } // end if
                    if (userPokemon[_loc6].moves[3] == 127)
                    {
                        pokemonName = userPokemon[_loc6].name;
                        break;
                    } // end if
                } // end of for
                if (pokemonName != "" || hasItem("HM - Waterfall"))
                {
                    for (var _loc3 = 0; _loc3 < _root.collisionArray.length; ++_loc3)
                    {
                        for (var _loc6 = 0; _loc6 < collisionArray[0].length; ++_loc6)
                        {
                            if (collisionArray[_loc3][_loc6] == 14)
                            {
                                collisionArray[_loc3][_loc6] = 2;
                                continue;
                            } // end if
                            if (collisionArray[_loc3][_loc6] == 22)
                            {
                                collisionArray[_loc3][_loc6] = 24;
                                continue;
                            } // end if
                            if (collisionArray[_loc3][_loc6] == 23)
                            {
                                collisionArray[_loc3][_loc6] = 25;
                            } // end if
                        } // end of for
                    } // end of for
                    for (var _loc3 = 0; _loc3 < _root.collisionArray1.length; ++_loc3)
                    {
                        for (var _loc6 = 0; _loc6 < collisionArray1[0].length; ++_loc6)
                        {
                            if (collisionArray1[_loc3][_loc6] == 14)
                            {
                                collisionArray1[_loc3][_loc6] = 2;
                                continue;
                            } // end if
                            if (collisionArray1[_loc3][_loc6] == 22)
                            {
                                collisionArray1[_loc3][_loc6] = 24;
                                continue;
                            } // end if
                            if (collisionArray1[_loc3][_loc6] == 23)
                            {
                                collisionArray1[_loc3][_loc6] = 25;
                            } // end if
                        } // end of for
                    } // end of for
                    for (var _loc3 = 0; _loc3 < _root.collisionArray2.length; ++_loc3)
                    {
                        for (var _loc6 = 0; _loc6 < collisionArray2[0].length; ++_loc6)
                        {
                            if (collisionArray2[_loc3][_loc6] == 14)
                            {
                                collisionArray2[_loc3][_loc6] = 2;
                                continue;
                            } // end if
                            if (collisionArray2[_loc3][_loc6] == 22)
                            {
                                collisionArray2[_loc3][_loc6] = 24;
                                continue;
                            } // end if
                            if (collisionArray2[_loc3][_loc6] == 23)
                            {
                                collisionArray2[_loc3][_loc6] = 25;
                            } // end if
                        } // end of for
                    } // end of for
                    systemMessage("You used Waterfall.");
                    moveType = "surf";
                    setSurfMount();
                    if (hasItem("Surfboard"))
                    {
                        moveMapSpeed = 16 * movementSpeedMod;
                    }
                    else
                    {
                        moveMapSpeed = 8 * movementSpeedMod;
                    } // end else if
                    if (dir == "up")
                    {
                        moveMapSurf("up");
                    }
                    else if (dir == "down")
                    {
                        moveMapSurf("down");
                    }
                    else if (dir == "left")
                    {
                        moveMapSurf("left");
                    }
                    else if (dir == "right")
                    {
                        moveMapSurf("right");
                    } // end else if
                    if (_root.fishing == true)
                    {
                        stopFishing();
                    } // end if
                    if (mining == true)
                    {
                        stopMining(undefined, true);
                    } // end if
                    getTimestamp("updateMount", _root.player.mount);
                } // end if
            }
            else
            {
                systemMessage("You need to have the Soul Badge to use Waterfall.");
            } // end if
        } // end else if
        if (collisionArray[y][x] == 12 || collisionArray[y][x] == 15)
        {
            for (var _loc6 = 0; _loc6 < userPokemon.length; ++_loc6)
            {
                if (userPokemon[_loc6].moves[0] == 291)
                {
                    pokemonName = userPokemon[_loc6].name;
                    break;
                } // end if
                if (userPokemon[_loc6].moves[1] == 291)
                {
                    pokemonName = userPokemon[_loc6].name;
                    break;
                } // end if
                if (userPokemon[_loc6].moves[2] == 291)
                {
                    pokemonName = userPokemon[_loc6].name;
                    break;
                } // end if
                if (userPokemon[_loc6].moves[3] == 291)
                {
                    pokemonName = userPokemon[_loc6].name;
                    break;
                } // end if
            } // end of for
            if (pokemonName != "" || hasItem("HM - Dive"))
            {
                if (_root.diveMap != undefined)
                {
                    loadMap(true, _root.diveMap[2], _root.diveMap[0], _root.diveMap[1]);
                } // end if
                systemMessage("You used Dive.");
            }
            else
            {
                systemMessage("You need a pokemon that knows Dive first.");
            } // end if
        } // end else if
        if (map == "Vermilion City" && (x == 62 && y == 7))
        {
            currentAltarAmount = undefined;
            getTimestamp("altarAmount");
            canMove = false;
            guiUp = true;
            altarGUI = mainGUI.attachMovie("altarGUI", "altarGUI", mainGUI.getNextHighestDepth());
            altarGUI.moneyT.restrict = "0-9";
            altarGUI.creditsT.restrict = "0-9";
            altarGUI.moneyB.onRelease = function ()
            {
                if (Number(altarGUI.moneyT.text) > 0)
                {
                    if (money >= Number(altarGUI.moneyT.text))
                    {
                        if (currentAltarAmount != undefined)
                        {
                            if (mConfirmBox._x == undefined)
                            {
                                darkScreen = mainGUI.attachMovie("darkScreen", "darkScreen", mainGUI.getNextHighestDepth());
                                darkScreen._width = Stage.width;
                                darkScreen._height = Stage.height;
                                darkScreen._alpha = 70;
                                mConfirmBox = mainGUI.attachMovie("threeButtonConfirmBox", "mConfirmBox", mainGUI.getNextHighestDepth());
                                assignMouseEvents(mConfirmBox.b1);
                                assignMouseEvents(mConfirmBox.b2);
                                assignMouseEvents(mConfirmBox.b3);
                                assignMouseEvents(mConfirmBox.exitB);
                                mConfirmBox.msgT.htmlText = "<b>Are you sure you want to donate $" + format(Number(altarGUI.moneyT.text)) + "?";
                                mConfirmBox.b1.onRelease = function ()
                                {
                                    if (isBusy == false)
                                    {
                                        getTimestamp("altarMoneyDonate", Number(altarGUI.moneyT.text), 1);
                                    } // end if
                                    removeMovieClip (mConfirmBox);
                                    removeMovieClip (darkScreen);
                                };
                                mConfirmBox.b2.onRelease = function ()
                                {
                                    if (isBusy == false)
                                    {
                                        getTimestamp("altarMoneyDonate", Number(altarGUI.moneyT.text), 2);
                                    } // end if
                                    removeMovieClip (mConfirmBox);
                                    removeMovieClip (darkScreen);
                                };
                                mConfirmBox.b3.onRelease = function ()
                                {
                                    if (isBusy == false)
                                    {
                                        getTimestamp("altarMoneyDonate", Number(altarGUI.moneyT.text), 3);
                                    } // end if
                                    removeMovieClip (mConfirmBox);
                                    removeMovieClip (darkScreen);
                                };
                                mConfirmBox.exitB.onRelease = function ()
                                {
                                    removeMovieClip (mConfirmBox);
                                    removeMovieClip (darkScreen);
                                };
                            } // end if
                        }
                        else
                        {
                            systemMessage("Altar amount is still loading, please wait.");
                        } // end else if
                    }
                    else
                    {
                        systemMessage("You do not have enough money.");
                    } // end else if
                }
                else
                {
                    systemMessage("Please enter a number greater than 0.");
                } // end else if
            };
            altarGUI.creditsB.onRelease = function ()
            {
                if (credits >= Number(altarGUI.creditsT.text) && Number(altarGUI.creditsT.text) > 0)
                {
                    if (mConfirmBox._x == undefined)
                    {
                        darkScreen = mainGUI.attachMovie("darkScreen", "darkScreen", mainGUI.getNextHighestDepth());
                        darkScreen._width = Stage.width;
                        darkScreen._height = Stage.height;
                        darkScreen._alpha = 70;
                        mConfirmBox = mainGUI.attachMovie("threeButtonConfirmBox", "mConfirmBox", mainGUI.getNextHighestDepth());
                        assignMouseEvents(mConfirmBox.b1);
                        assignMouseEvents(mConfirmBox.b2);
                        assignMouseEvents(mConfirmBox.b3);
                        assignMouseEvents(mConfirmBox.exitB);
                        mConfirmBox.msgT.htmlText = "<b>Are you sure you want to donate " + format(Number(altarGUI.creditsT.text)) + "c?";
                        mConfirmBox.b1.onRelease = function ()
                        {
                            if (isBusy == false)
                            {
                                getTimestamp("altarCreditDonate", Number(altarGUI.creditsT.text), 1);
                            } // end if
                            removeMovieClip (mConfirmBox);
                            removeMovieClip (darkScreen);
                        };
                        mConfirmBox.b2.onRelease = function ()
                        {
                            if (isBusy == false)
                            {
                                getTimestamp("altarCreditDonate", Number(altarGUI.creditsT.text), 2);
                            } // end if
                            removeMovieClip (mConfirmBox);
                            removeMovieClip (darkScreen);
                        };
                        mConfirmBox.b3.onRelease = function ()
                        {
                            if (isBusy == false)
                            {
                                getTimestamp("altarCreditDonate", Number(altarGUI.creditsT.text), 3);
                            } // end if
                            removeMovieClip (mConfirmBox);
                            removeMovieClip (darkScreen);
                        };
                        mConfirmBox.exitB.onRelease = function ()
                        {
                            removeMovieClip (mConfirmBox);
                            removeMovieClip (darkScreen);
                        };
                    } // end if
                }
                else
                {
                    systemMessage("You do not have enough credits.");
                } // end else if
            };
            altarGUI.exitB.onRelease = function ()
            {
                canMove = true;
                guiUp = false;
                removeMovieClip (altarGUI);
            };
            altarGUI.topB1.onRelease = function ()
            {
                if (mConfirmBox._x == undefined)
                {
                    darkScreen = mainGUI.attachMovie("darkScreen", "darkScreen", mainGUI.getNextHighestDepth());
                    darkScreen._width = Stage.width;
                    darkScreen._height = Stage.height;
                    darkScreen._alpha = 70;
                    mConfirmBox = mainGUI.attachMovie("confirmBox", "mConfirmBox", mainGUI.getNextHighestDepth());
                    assignMouseEvents(mConfirmBox.b1);
                    assignMouseEvents(mConfirmBox.exitB);
                    mConfirmBox.msgT.htmlText = "<b>Are you sure you want to top off the Arceus Altar? $" + format(4000000 - currentAltarAmount);
                    mConfirmBox.confirmB.onRelease = function ()
                    {
                        if (isBusy == false)
                        {
                            getTimestamp("altarMoneyDonate", 4000000 - currentAltarAmount, 1);
                        } // end if
                        removeMovieClip (mConfirmBox);
                        removeMovieClip (darkScreen);
                    };
                    mConfirmBox.cancelB.onRelease = mConfirmBox.exitB.onRelease = function ()
                    {
                        removeMovieClip (mConfirmBox);
                        removeMovieClip (darkScreen);
                    };
                } // end if
            };
            altarGUI.topB2.onRelease = function ()
            {
                if (mConfirmBox._x == undefined)
                {
                    darkScreen = mainGUI.attachMovie("darkScreen", "darkScreen", mainGUI.getNextHighestDepth());
                    darkScreen._width = Stage.width;
                    darkScreen._height = Stage.height;
                    darkScreen._alpha = 70;
                    mConfirmBox = mainGUI.attachMovie("confirmBox", "mConfirmBox", mainGUI.getNextHighestDepth());
                    assignMouseEvents(mConfirmBox.b1);
                    assignMouseEvents(mConfirmBox.exitB);
                    mConfirmBox.msgT.htmlText = "<b>Are you sure you want to top off the Kyogre Altar? $" + format(4000000 - currentAltarAmount2);
                    mConfirmBox.confirmB.onRelease = function ()
                    {
                        if (isBusy == false)
                        {
                            getTimestamp("altarMoneyDonate", 4000000 - currentAltarAmount2, 2);
                        } // end if
                        removeMovieClip (mConfirmBox);
                        removeMovieClip (darkScreen);
                    };
                    mConfirmBox.cancelB.onRelease = mConfirmBox.exitB.onRelease = function ()
                    {
                        removeMovieClip (mConfirmBox);
                        removeMovieClip (darkScreen);
                    };
                } // end if
            };
            altarGUI.topB3.onRelease = function ()
            {
                if (mConfirmBox._x == undefined)
                {
                    darkScreen = mainGUI.attachMovie("darkScreen", "darkScreen", mainGUI.getNextHighestDepth());
                    darkScreen._width = Stage.width;
                    darkScreen._height = Stage.height;
                    darkScreen._alpha = 70;
                    mConfirmBox = mainGUI.attachMovie("confirmBox", "mConfirmBox", mainGUI.getNextHighestDepth());
                    assignMouseEvents(mConfirmBox.b1);
                    assignMouseEvents(mConfirmBox.exitB);
                    mConfirmBox.msgT.htmlText = "<b>Are you sure you want to top off the Diancie Altar? $" + format(4000000 - currentAltarAmount3);
                    mConfirmBox.confirmB.onRelease = function ()
                    {
                        if (isBusy == false)
                        {
                            getTimestamp("altarMoneyDonate", 4000000 - currentAltarAmount3, 3);
                        } // end if
                        removeMovieClip (mConfirmBox);
                        removeMovieClip (darkScreen);
                    };
                    mConfirmBox.cancelB.onRelease = mConfirmBox.exitB.onRelease = function ()
                    {
                        removeMovieClip (mConfirmBox);
                        removeMovieClip (darkScreen);
                    };
                } // end if
            };
            assignMouseEvents(altarGUI.exitB);
            assignMouseEvents(altarGUI.topB1);
            assignMouseEvents(altarGUI.topB2);
            assignMouseEvents(altarGUI.topB3);
        }
        else if (map == "Route 3")
        {
            if (x == 13 && y == 32)
            {
                if (_root.userPokemon[0].name == "Deoxys" && _root.userPokemon[0].form != "normal")
                {
                    getTimestamp("deoxysFormChange", 0);
                } // end if
            }
            else if (x == 7 && y == 36)
            {
                if (_root.userPokemon[0].name == "Deoxys" && _root.userPokemon[0].form != "attack")
                {
                    getTimestamp("deoxysFormChange", 1);
                } // end if
            }
            else if (x == 25 && y == 26)
            {
                if (_root.userPokemon[0].name == "Deoxys" && _root.userPokemon[0].form != "defense")
                {
                    getTimestamp("deoxysFormChange", 2);
                } // end if
            }
            else if (x == 19 && y == 39)
            {
                if (_root.userPokemon[0].name == "Deoxys" && _root.userPokemon[0].form != "speed")
                {
                    getTimestamp("deoxysFormChange", 3);
                } // end else if
            } // end else if
        } // end else if
        for (var _loc6 = 0; _loc6 < _root.eliteChests.length; ++_loc6)
        {
            if (_root.eliteChests[_loc6][0] == x && _root.eliteChests[_loc6][1] == y)
            {
                if (hasItem("Treasure Key"))
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("openChest", _root.eliteChests[_loc6][0], _root.eliteChests[_loc6][1]);
                    } // end if
                }
                else
                {
                    systemMessage("You need a Treasure Key to open this chest.");
                } // end else if
                break;
            } // end if
        } // end of for
        if (canChoosePokemon == true && canChoosePokemon != undefined)
        {
            if (x == 17 && y == 12 || x == 18 && y == 12 || x == 19 && y == 12 || x == 19 && y == 11)
            {
                guiUp = true;
                canMove = false;
                darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                darkScreen._width = Stage.width;
                darkScreen._height = Stage.height;
                darkScreen._alpha = 70;
                darkScreen._x = newWidth / 2;
                darkScreen._y = newHeight / 2;
                choosePokemon = _root.attachMovie("chooseStarter", "choosePokemon", _root.getNextHighestDepth());
                choosePokemon._x = newWidth / 2;
                choosePokemon._y = newHeight / 2;
                choosePokemon.charmanderB.onRollOver = function ()
                {
                    this.bg.gotoAndStop(2);
                };
                choosePokemon.charmanderB.onRollOut = function ()
                {
                    this.bg.gotoAndStop(1);
                };
                choosePokemon.charmanderB.onRelease = function ()
                {
                    if (isBusy == false)
                    {
                        getTimestamp("choosePokemon", "charmander");
                    } // end if
                };
                choosePokemon.squirtleB.onRollOver = function ()
                {
                    this.bg.gotoAndStop(2);
                };
                choosePokemon.squirtleB.onRollOut = function ()
                {
                    this.bg.gotoAndStop(1);
                };
                choosePokemon.squirtleB.onRelease = function ()
                {
                    if (isBusy == false)
                    {
                        getTimestamp("choosePokemon", "squirtle");
                    } // end if
                };
                choosePokemon.bulbasaurB.onRollOver = function ()
                {
                    this.bg.gotoAndStop(2);
                };
                choosePokemon.bulbasaurB.onRollOut = function ()
                {
                    this.bg.gotoAndStop(1);
                };
                choosePokemon.bulbasaurB.onRelease = function ()
                {
                    if (isBusy == false)
                    {
                        getTimestamp("choosePokemon", "bulbasaur");
                    } // end if
                };
            } // end if
        } // end if
    } // end if
} // End of the function
function openPortablePC(num)
{
    if (_root.battle == false && _root.trading == false && guiUp == false)
    {
        canMove = false;
        guiUp = true;
        var threeButtonBox = _root.attachMovie("threeButtonBox", "threeButtonBox", _root.getNextHighestDepth());
        threeButtonBox.msgT.text = "This is a Portable PC placed by " + _root.portablePCArray[num][2] + ".";
        threeButtonBox._x = newWidth / 2;
        threeButtonBox._y = newHeight / 2;
        threeButtonBox.nameT.htmlText = "<b>Portable PC";
        assignMouseEvents(threeButtonBox.b1);
        assignMouseEvents(threeButtonBox.b2);
        assignMouseEvents(threeButtonBox.b3);
        threeButtonBox.b1T.htmlText = "<b>Heal your pokemon";
        threeButtonBox.b2T.htmlText = "<b>Access storage";
        threeButtonBox.b3T.htmlText = "<b>Do nothing";
        threeButtonBox.b1.onRelease = function ()
        {
            if (isBusy == false)
            {
                getTimestamp("portablePcHeal");
            } // end if
        };
        threeButtonBox.b2.onRelease = function ()
        {
            guiUp = false;
            openStorage();
            removeMovieClip (threeButtonBox);
        };
        threeButtonBox.b3.onRelease = function ()
        {
            removeMovieClip (threeButtonBox);
            canMove = true;
            guiUp = false;
        };
    } // end if
} // End of the function
function openStorage()
{
    if (storageOpen == false && guiUp == false)
    {
        guiUp = true;
        reorderPokemon._visible = false;
        storageOpen = true;
        canMove = false;
        storage = _root.mainGUI.attachMovie("storage", "storage", _root.mainGUI.getNextHighestDepth());
        storage.currentTab = 1;
        loadStorageIcons(storage.currentTab);
        storage.exitB.onRelease = function ()
        {
            closeStorage();
        };
        storage.nextB.onRelease = function ()
        {
            this.gotoAndStop(1);
            if (storage.currentTab == 1)
            {
                var _loc2 = storagePokemon;
            }
            else if (storage.currentTab == 2)
            {
                _loc2 = storagePokemon2;
            }
            else if (storage.currentTab == 3)
            {
                _loc2 = storagePokemon3;
            }
            else if (storage.currentTab == 4)
            {
                _loc2 = storagePokemon4;
            }
            else if (storage.currentTab == 5)
            {
                _loc2 = storagePokemon5;
            }
            else if (storage.currentTab == 6)
            {
                _loc2 = storagePokemon6;
            }
            else if (storage.currentTab == 7)
            {
                _loc2 = storagePokemon7;
            }
            else if (storage.currentTab == 8)
            {
                _loc2 = storagePokemon8;
            }
            else if (storage.currentTab == 9)
            {
                _loc2 = storagePokemon9;
            }
            else if (storage.currentTab == 10)
            {
                _loc2 = storagePokemon10;
            } // end else if
            if (_loc2.length > storagePage * storagePerScreen)
            {
                ++storagePage;
                loadStorageIcons(storage.currentTab);
            } // end if
        };
        storage.lastB.onRelease = function ()
        {
            this.gotoAndStop(1);
            if (storage.currentTab == 1)
            {
                var _loc2 = storagePokemon;
            }
            else if (storage.currentTab == 2)
            {
                _loc2 = storagePokemon2;
            }
            else if (storage.currentTab == 3)
            {
                _loc2 = storagePokemon3;
            }
            else if (storage.currentTab == 4)
            {
                _loc2 = storagePokemon4;
            }
            else if (storage.currentTab == 5)
            {
                _loc2 = storagePokemon5;
            }
            else if (storage.currentTab == 6)
            {
                _loc2 = storagePokemon6;
            }
            else if (storage.currentTab == 7)
            {
                _loc2 = storagePokemon7;
            }
            else if (storage.currentTab == 8)
            {
                _loc2 = storagePokemon8;
            }
            else if (storage.currentTab == 9)
            {
                _loc2 = storagePokemon9;
            }
            else if (storage.currentTab == 10)
            {
                _loc2 = storagePokemon10;
            } // end else if
            storagePage = Math.ceil(_loc2.length / storagePerScreen);
            if (storagePage <= 0)
            {
                storagePage = 1;
            } // end if
            loadStorageIcons(storage.currentTab);
        };
        storage.prevB.onRelease = function ()
        {
            this.gotoAndStop(1);
            if (storagePage > 1)
            {
                --storagePage;
                loadStorageIcons(storage.currentTab);
            } // end if
        };
        storage.firstB.onRelease = function ()
        {
            this.gotoAndStop(1);
            storagePage = 1;
            loadStorageIcons(storage.currentTab);
        };
        storage.tab1.gotoAndStop("click");
        storage.tab1.onRelease = function ()
        {
            if (storage.currentTab != 1)
            {
                storage.currentTab = 1;
                resetStorageTabs();
                this.gotoAndStop("click");
            } // end if
        };
        storage.tab2.onRelease = function ()
        {
            if (storage.currentTab != 2)
            {
                storage.currentTab = 2;
                resetStorageTabs();
                this.gotoAndStop("click");
            } // end if
        };
        storage.tab3.onRelease = function ()
        {
            if (storage.currentTab != 3)
            {
                storage.currentTab = 3;
                resetStorageTabs();
                this.gotoAndStop("click");
            } // end if
        };
        storage.tab4.onRelease = function ()
        {
            if (storage.currentTab != 4)
            {
                storage.currentTab = 4;
                resetStorageTabs();
                this.gotoAndStop("click");
            } // end if
        };
        storage.tab5.onRelease = function ()
        {
            if (storage.currentTab != 5)
            {
                storage.currentTab = 5;
                resetStorageTabs();
                this.gotoAndStop("click");
            } // end if
        };
        storage.tab6.onRelease = function ()
        {
            if (storage.currentTab != 6)
            {
                storage.currentTab = 6;
                resetStorageTabs();
                this.gotoAndStop("click");
            } // end if
        };
        storage.tab7.onRelease = function ()
        {
            if (storage.currentTab != 7)
            {
                storage.currentTab = 7;
                resetStorageTabs();
                this.gotoAndStop("click");
            } // end if
        };
        storage.tab8.onRelease = function ()
        {
            if (storage.currentTab != 8)
            {
                storage.currentTab = 8;
                resetStorageTabs();
                this.gotoAndStop("click");
            } // end if
        };
        storage.tab9.onRelease = function ()
        {
            if (storage.currentTab != 9)
            {
                storage.currentTab = 9;
                resetStorageTabs();
                this.gotoAndStop("click");
            } // end if
        };
        storage.tab10.onRelease = function ()
        {
            if (storage.currentTab != 10)
            {
                storage.currentTab = 10;
                resetStorageTabs();
                this.gotoAndStop("click");
            } // end if
        };
        storage.tab1.onRollOver = function ()
        {
            if (storage.currentTab != 1)
            {
                this.gotoAndStop("hover");
            } // end if
        };
        storage.tab2.onRollOver = function ()
        {
            if (storage.currentTab != 2)
            {
                this.gotoAndStop("hover");
            } // end if
        };
        storage.tab3.onRollOver = function ()
        {
            if (storage.currentTab != 3)
            {
                this.gotoAndStop("hover");
            } // end if
        };
        storage.tab4.onRollOver = function ()
        {
            if (storage.currentTab != 4)
            {
                this.gotoAndStop("hover");
            } // end if
        };
        storage.tab5.onRollOver = function ()
        {
            if (storage.currentTab != 5)
            {
                this.gotoAndStop("hover");
            } // end if
        };
        storage.tab6.onRollOver = function ()
        {
            if (storage.currentTab != 6)
            {
                this.gotoAndStop("hover");
            } // end if
        };
        storage.tab7.onRollOver = function ()
        {
            if (storage.currentTab != 7)
            {
                this.gotoAndStop("hover");
            } // end if
        };
        storage.tab8.onRollOver = function ()
        {
            if (storage.currentTab != 8)
            {
                this.gotoAndStop("hover");
            } // end if
        };
        storage.tab9.onRollOver = function ()
        {
            if (storage.currentTab != 9)
            {
                this.gotoAndStop("hover");
            } // end if
        };
        storage.tab10.onRollOver = function ()
        {
            if (storage.currentTab != 10)
            {
                this.gotoAndStop("hover");
            } // end if
        };
        storage.tab1.onRollOut = storage.tab1.onReleaseOutside = function ()
        {
            if (storage.currentTab != 1)
            {
                this.gotoAndStop(1);
            } // end if
        };
        storage.tab2.onRollOut = storage.tab2.onReleaseOutside = function ()
        {
            if (storage.currentTab != 2)
            {
                this.gotoAndStop(1);
            } // end if
        };
        storage.tab3.onRollOut = storage.tab3.onReleaseOutside = function ()
        {
            if (storage.currentTab != 3)
            {
                this.gotoAndStop(1);
            } // end if
        };
        storage.tab4.onRollOut = storage.tab4.onReleaseOutside = function ()
        {
            if (storage.currentTab != 4)
            {
                this.gotoAndStop(1);
            } // end if
        };
        storage.tab5.onRollOut = storage.tab5.onReleaseOutside = function ()
        {
            if (storage.currentTab != 5)
            {
                this.gotoAndStop(1);
            } // end if
        };
        storage.tab6.onRollOut = storage.tab6.onReleaseOutside = function ()
        {
            if (storage.currentTab != 6)
            {
                this.gotoAndStop(1);
            } // end if
        };
        storage.tab7.onRollOut = storage.tab7.onReleaseOutside = function ()
        {
            if (storage.currentTab != 7)
            {
                this.gotoAndStop(1);
            } // end if
        };
        storage.tab8.onRollOut = storage.tab8.onReleaseOutside = function ()
        {
            if (storage.currentTab != 8)
            {
                this.gotoAndStop(1);
            } // end if
        };
        storage.tab9.onRollOut = storage.tab9.onReleaseOutside = function ()
        {
            if (storage.currentTab != 9)
            {
                this.gotoAndStop(1);
            } // end if
        };
        storage.tab10.onRollOut = storage.tab10.onReleaseOutside = function ()
        {
            if (storage.currentTab != 10)
            {
                this.gotoAndStop(1);
            } // end if
        };
        assignMouseEvents(storage.exitB);
        assignMouseEvents(storage.prevB);
        assignMouseEvents(storage.nextB);
        assignMouseEvents(storage.firstB);
        assignMouseEvents(storage.lastB);
    } // end if
} // End of the function
function resetStorageTabs()
{
    storagePage = 1;
    storage.tab1.gotoAndStop(1);
    storage.tab2.gotoAndStop(1);
    storage.tab3.gotoAndStop(1);
    storage.tab4.gotoAndStop(1);
    storage.tab5.gotoAndStop(1);
    storage.tab6.gotoAndStop(1);
    storage.tab7.gotoAndStop(1);
    storage.tab8.gotoAndStop(1);
    storage.tab9.gotoAndStop(1);
    storage.tab10.gotoAndStop(1);
    loadStorageIcons(storage.currentTab);
} // End of the function
function closeStorage()
{
    guiUp = false;
    for (var _loc2 = 0; _loc2 < storagePerScreen; ++_loc2)
    {
        removeMovieClip (_root.mainGUI["storagePokemon_" + _loc2]);
        removeMovieClip (_root.mainGUI["storagePokemon_" + _loc2 + "_i"]);
    } // end of for
    removeMovieClip (mainGUI.storage);
    storageOpen = false;
    canMove = true;
} // End of the function
function openShop()
{
    guiUp = true;
    canMove = false;
    if (map == "Ancient Cave R7")
    {
        yesNoBox = _root.attachMovie("yesNoBox", "yesNoBox", _root.getNextHighestDepth());
        yesNoBox._x = newWidth / 2;
        yesNoBox._y = newHeight / 2;
        yesNoBox.nameT.htmlText = "<b>Dungeon Explorer";
        yesNoBox.msgT.text = "Interested in buying something?";
        yesNoBox.yesT.htmlText = "<b>Vendor Items";
        yesNoBox.noT.htmlText = "<b>Nevermind";
        assignMouseEvents(yesNoBox.yesB);
        assignMouseEvents(yesNoBox.noB);
        yesNoBox.yesB.onRelease = function ()
        {
            removeMovieClip (yesNoBox);
            shopBox = _root.mainGUI.attachMovie("shopBg", "shopBox", _root.getNextHighestDepth());
            shopBox.moneyT.htmlText = "<b>" + format(money);
            shopBox.itemList.setMask(shopBox.maskBg);
            makeShopButtons();
        };
        yesNoBox.noB.onRelease = function ()
        {
            removeMovieClip (yesNoBox);
            guiUp = false;
            canMove = true;
        };
    }
    else
    {
        yesNoBox = _root.attachMovie("yesNoBox", "yesNoBox", _root.getNextHighestDepth());
        yesNoBox._x = newWidth / 2;
        yesNoBox._y = newHeight / 2;
        yesNoBox.nameT.htmlText = "<b>Pokemart Vendor";
        yesNoBox.msgT.text = "Welcome to our Pokemart, how may I help you?";
        yesNoBox.yesT.htmlText = "<b>Vendor Items";
        yesNoBox.noT.htmlText = "<b>Global Marketplace";
        assignMouseEvents(yesNoBox.yesB);
        assignMouseEvents(yesNoBox.noB);
        yesNoBox.yesB.onRelease = function ()
        {
            removeMovieClip (yesNoBox);
            shopBox = _root.mainGUI.attachMovie("shopBg", "shopBox", _root.getNextHighestDepth());
            shopBox.moneyT.htmlText = "<b>" + format(money);
            shopBox.itemList.setMask(shopBox.maskBg);
            makeShopButtons();
        };
        yesNoBox.noB.onRelease = function ()
        {
            removeMovieClip (yesNoBox);
            marketplace = mainGUI.attachMovie("marketplace", "marketplace", mainGUI.getNextHighestDepth());
            makeMarketplaceSell();
        };
    } // end else if
} // End of the function
function makeMarketplaceSell()
{
    itemForSale = -1;
    itemForSaleAmount = -1;
    marketplace.sell.moneyT.htmlText = "<b>" + format(money);
    marketplace.buy._visible = false;
    marketplace.auction._visible = false;
    marketplace.sell._visible = true;
    marketplace.sell.i2._visible = false;
    marketplace.sell.buyTab.gotoAndStop(1);
    marketplace.sell.auctionsTab.gotoAndStop(1);
    marketplace.sell.sellTab.gotoAndStop(2);
    marketplace.sell.auctionsTab.onRelease = function ()
    {
        makeMarketplaceAuction();
    };
    marketplace.sell.buyTab.onRelease = function ()
    {
        makeMarketplaceBuy();
    };
    marketplace.sell.auctionsTab.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.sell.buyTab.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.sell.sellTab.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.sell.auctionsTab.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.sell.buyTab.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.sell.sellTab.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.sell.auctionB.onRelease = function ()
    {
        updateListingPrice = true;
        this.gotoAndStop(1);
        if (itemForSale != -1 && itemForSaleAmount != -1)
        {
            marketplace.sell.listingDetails.gotoAndStop(3);
        } // end if
    };
    marketplace.sell.sellB.onRelease = function ()
    {
        updateListingPrice = true;
        this.gotoAndStop(1);
        if (itemForSale != -1 && itemForSaleAmount != -1)
        {
            marketplace.sell.listingDetails.gotoAndStop(2);
            marketplace.sell.listingDetails.startSellingB.onRelease = function ()
            {
                if (inventory[itemForSale][0] != player.cape && inventory[itemForSale][0] != player.face2 && inventory[itemForSale][0] != player.hat && inventory[itemForSale][0] != player.wings && inventory[itemForSale][0] != player.tail && inventory[itemForSale][0] != player.neck && inventory[itemForSale][0] != player.costume || itemForSaleType == "pokemon")
                {
                    if (money >= Math.ceil(Number(marketplace.sell.listingDetails.priceT.text) / 100) && marketplace.sell.listingDetails.priceT.text != "")
                    {
                        if (mConfirmBox._x == undefined)
                        {
                            darkScreen = mainGUI.attachMovie("darkScreen", "darkScreen", mainGUI.getNextHighestDepth());
                            darkScreen._width = Stage.width;
                            darkScreen._height = Stage.height;
                            darkScreen._alpha = 70;
                            darkScreen.onRelease = function ()
                            {
                            };
                            mConfirmBox = mainGUI.attachMovie("confirmBox", "mConfirmBox", mainGUI.getNextHighestDepth());
                            assignMouseEvents(mConfirmBox.confirmB);
                            assignMouseEvents(mConfirmBox.cancelB);
                            assignMouseEvents(mConfirmBox.exitB);
                            marketplace.sell.listingDetails.priceT.restrict = "0-9";
                            mConfirmBox.msgT.htmlText = "<b>Are you sure you want to list this item for $" + format(Number(marketplace.sell.listingDetails.priceT.text)) + "? Listing fee: $" + marketplace.sell.listingDetails.listingFeeT.text + ".";
                            mConfirmBox.confirmB.onRelease = function ()
                            {
                                if (isBusy == false)
                                {
                                    getTimestamp("listItemSell", Number(marketplace.sell.listingDetails.priceT.text), itemForSale, itemForSaleAmount, itemForSaleType);
                                } // end if
                                removeMovieClip (mConfirmBox);
                            };
                            mConfirmBox.cancelB.onRelease = function ()
                            {
                                removeMovieClip (mConfirmBox);
                                removeMovieClip (darkScreen);
                            };
                            mConfirmBox.exitB.onRelease = function ()
                            {
                                removeMovieClip (mConfirmBox);
                                removeMovieClip (darkScreen);
                            };
                        } // end if
                    }
                    else
                    {
                        systemMessage("You do not have enough money to list this item.");
                    } // end else if
                }
                else
                {
                    systemMessage("You cannot sell an item you have equipped.");
                } // end else if
            };
            assignMouseEvents(marketplace.sell.listingDetails.startSellingB);
        } // end if
    };
    marketplace.sell.auctionB.onRelease = function ()
    {
        updateListingPrice = true;
        this.gotoAndStop(1);
        if (itemForSale != -1 && itemForSaleAmount != -1)
        {
            marketplace.sell.listingDetails.gotoAndStop(3);
            marketplace.sell.listingDetails.startAuctionB.onRelease = function ()
            {
                if (inventory[itemForSale][0] != player.cape && inventory[itemForSale][0] != player.face2 && inventory[itemForSale][0] != player.hat && inventory[itemForSale][0] != player.wings && inventory[itemForSale][0] != player.tail && inventory[itemForSale][0] != player.neck && inventory[itemForSale][0] != player.costume || itemForSaleType == "pokemon")
                {
                    if (money >= Math.ceil(Number(marketplace.sell.listingDetails.priceT.text) / 100) && marketplace.sell.listingDetails.priceT.text != "")
                    {
                        if (Number(marketplace.sell.listingDetails.durationT.text) >= 1 && Number(marketplace.sell.listingDetails.durationT.text) <= 168 && marketplace.sell.listingDetails.durationT.text != "")
                        {
                            if (mConfirmBox._x == undefined)
                            {
                                darkScreen = mainGUI.attachMovie("darkScreen", "darkScreen", mainGUI.getNextHighestDepth());
                                darkScreen._width = Stage.width;
                                darkScreen._height = Stage.height;
                                darkScreen._alpha = 70;
                                darkScreen.onRelease = function ()
                                {
                                };
                                mConfirmBox = mainGUI.attachMovie("confirmBox", "mConfirmBox", mainGUI.getNextHighestDepth());
                                assignMouseEvents(mConfirmBox.confirmB);
                                assignMouseEvents(mConfirmBox.cancelB);
                                assignMouseEvents(mConfirmBox.exitB);
                                marketplace.sell.listingDetails.priceT.restrict = "0-9";
                                mConfirmBox.msgT.htmlText = "<b>Are you sure you want to auction this item at $" + format(Number(marketplace.sell.listingDetails.priceT.text)) + " for " + Number(marketplace.sell.listingDetails.durationT.text) + " hours? Listing fee: $" + marketplace.sell.listingDetails.listingFeeT.text + ".";
                                mConfirmBox.confirmB.onRelease = function ()
                                {
                                    if (isBusy == false)
                                    {
                                        getTimestamp("startAuction", Number(marketplace.sell.listingDetails.priceT.text), itemForSale, itemForSaleAmount, itemForSaleType);
                                    } // end if
                                    removeMovieClip (mConfirmBox);
                                };
                                mConfirmBox.cancelB.onRelease = function ()
                                {
                                    removeMovieClip (mConfirmBox);
                                    removeMovieClip (darkScreen);
                                };
                                mConfirmBox.exitB.onRelease = function ()
                                {
                                    removeMovieClip (mConfirmBox);
                                    removeMovieClip (darkScreen);
                                };
                            } // end if
                        }
                        else
                        {
                            systemMessage("Please enter a listing duration of 1-168 hours.");
                        } // end else if
                    }
                    else
                    {
                        systemMessage("You do not have enough money to auction this item.");
                    } // end else if
                }
                else
                {
                    systemMessage("You cannot auction an item you have equipped.");
                } // end else if
            };
            assignMouseEvents(marketplace.sell.listingDetails.startSellingB);
        } // end if
    };
    marketplace.sell.aScrollUpB.onRelease = marketplace.sell.aScrollUpB.onReleaseOutside = function ()
    {
        _root.dragScrollbar = 0;
        this.gotoAndStop(1);
    };
    marketplace.sell.aScrollDownB.onRelease = marketplace.sell.aScrollDownB.onReleaseOutside = function ()
    {
        _root.dragScrollbar = 0;
        this.gotoAndStop(1);
    };
    marketplace.sell.bScrollUpB.onRelease = marketplace.sell.bScrollUpB.onReleaseOutside = function ()
    {
        _root.dragScrollbar = 0;
        this.gotoAndStop(1);
    };
    marketplace.sell.bScrollDownB.onRelease = marketplace.sell.bScrollDownB.onReleaseOutside = function ()
    {
        _root.dragScrollbar = 0;
        this.gotoAndStop(1);
    };
    marketplace.sell.aScrollUpB.onPress = function ()
    {
        _root.dragScrollbar = 13;
        this.gotoAndStop("click");
    };
    marketplace.sell.aScrollDownB.onPress = function ()
    {
        _root.dragScrollbar = 12;
        this.gotoAndStop("click");
    };
    marketplace.sell.bScrollUpB.onPress = function ()
    {
        _root.dragScrollbar = 10;
        this.gotoAndStop("click");
    };
    marketplace.sell.bScrollDownB.onPress = function ()
    {
        _root.dragScrollbar = 9;
        this.gotoAndStop("click");
    };
    marketplace.sell.aScrollUpB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    marketplace.sell.aScrollDownB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    marketplace.sell.bScrollUpB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    marketplace.sell.bScrollDownB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    marketplace.sell.aScrollUpB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    marketplace.sell.aScrollDownB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    marketplace.sell.bScrollUpB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    marketplace.sell.bScrollDownB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    marketplace.sell.aScrollBar.onRelease = marketplace.sell.aScrollBar.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        _root.dragScrollbar = 0;
    };
    marketplace.sell.aScrollBar.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, this._x, -23, this._x, -139);
        _root.dragScrollbar = 14;
    };
    marketplace.sell.aScrollBar.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    marketplace.sell.aScrollBar.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    marketplace.sell.bScrollBar.onRelease = marketplace.sell.bScrollBar.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        _root.dragScrollbar = 0;
    };
    marketplace.sell.bScrollBar.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, this._x, 192, this._x, 77);
        _root.dragScrollbar = 11;
    };
    marketplace.sell.bScrollBar.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    marketplace.sell.bScrollBar.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    marketplace.sell.exitB.onRelease = function ()
    {
        removeMovieClip (mainGUI.marketplace);
        canMove = true;
        guiUp = false;
        delete updateListingPrice;
    };
    marketplace.dragBg.onPress = function ()
    {
        marketplace.startDrag(false, -newWidth / 2 + marketplace._width / 2 - widthOffset, -newHeight / 2 + marketplace._height / 2 - heightOffset, newWidth / 2 - marketplace._width / 2 + widthOffset, newHeight / 2 - marketplace._height / 2 + heightOffset);
    };
    marketplace.dragBg.onRelease = marketplace.dragBg.onReleaseOutside = function ()
    {
        marketplace.stopDrag();
    };
    assignMouseEvents(marketplace.auction.exitB);
    assignMouseEvents(marketplace.buy.exitB);
    assignMouseEvents(marketplace.sell.exitB);
    assignMouseEvents(marketplace.sell.auctionB);
    assignMouseEvents(marketplace.sell.sellB);
    makeMarketplaceListings();
} // End of the function
function makeMarketplaceBuy()
{
    selectedCategory = "all";
    selectedTradeId = undefined;
    selectedPrice = -1;
    selectedNum = -1;
    marketplace.buy.moneyT.htmlText = "<b>" + format(money);
    marketplace.buy.searchT.restrict = "A-Z 0-9a-z\\-[]()";
    marketplace.buy._visible = true;
    marketplace.auction._visible = false;
    marketplace.sell._visible = false;
    marketplace.buy.buyTab.gotoAndStop(2);
    marketplace.buy.auctionsTab.gotoAndStop(1);
    marketplace.buy.sellTab.gotoAndStop(1);
    marketplace.buy.auctionsTab.onRelease = function ()
    {
        makeMarketplaceAuction();
    };
    marketplace.buy.sellTab.onRelease = function ()
    {
        makeMarketplaceSell();
    };
    marketplace.buy.auctionsTab.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.buy.buyTab.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.buy.sellTab.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.buy.auctionsTab.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.buy.buyTab.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.buy.sellTab.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.buy.allB.gotoAndStop(2);
    marketplace.buy.allB.onRelease = marketplace.buy.allB.onReleaseOutside = function ()
    {
        selectedCategory = "all";
        this.gotoAndStop(2);
        marketplace.buy.consumablesB.gotoAndStop(1);
        marketplace.buy.pokemonB.gotoAndStop(1);
        marketplace.buy.heldItemsB.gotoAndStop(1);
        marketplace.buy.decorativeB.gotoAndStop(1);
    };
    marketplace.buy.allB.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.buy.allB.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.buy.consumablesB.onRelease = marketplace.buy.consumablesB.onReleaseOutside = function ()
    {
        selectedCategory = "consumables";
        this.gotoAndStop(2);
        marketplace.buy.allB.gotoAndStop(1);
        marketplace.buy.pokemonB.gotoAndStop(1);
        marketplace.buy.heldItemsB.gotoAndStop(1);
        marketplace.buy.decorativeB.gotoAndStop(1);
    };
    marketplace.buy.consumablesB.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.buy.consumablesB.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.buy.pokemonB.onRelease = marketplace.buy.pokemonB.onReleaseOutside = function ()
    {
        selectedCategory = "pokemon";
        this.gotoAndStop(2);
        marketplace.buy.allB.gotoAndStop(1);
        marketplace.buy.consumablesB.gotoAndStop(1);
        marketplace.buy.heldItemsB.gotoAndStop(1);
        marketplace.buy.decorativeB.gotoAndStop(1);
    };
    marketplace.buy.pokemonB.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.buy.pokemonB.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.buy.heldItemsB.onRelease = marketplace.buy.heldItemsB.onReleaseOutside = function ()
    {
        selectedCategory = "held items";
        this.gotoAndStop(2);
        marketplace.buy.allB.gotoAndStop(1);
        marketplace.buy.consumablesB.gotoAndStop(1);
        marketplace.buy.pokemonB.gotoAndStop(1);
        marketplace.buy.decorativeB.gotoAndStop(1);
    };
    marketplace.buy.heldItemsB.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.buy.heldItemsB.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.buy.decorativeB.onRelease = marketplace.buy.decorativeB.onReleaseOutside = function ()
    {
        selectedCategory = "decorative items";
        this.gotoAndStop(2);
        marketplace.buy.allB.gotoAndStop(1);
        marketplace.buy.consumablesB.gotoAndStop(1);
        marketplace.buy.pokemonB.gotoAndStop(1);
        marketplace.buy.heldItemsB.gotoAndStop(1);
    };
    marketplace.buy.decorativeB.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.buy.decorativeB.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.buy.searchB.onRelease = function ()
    {
        if (isBusy == false)
        {
            darkScreen = mainGUI.attachMovie("darkScreenLoading", "darkScreen", mainGUI.getNextHighestDepth());
            darkScreen._width = Stage.width;
            darkScreen._height = Stage.height;
            darkScreen.onRelease = function ()
            {
            };
            getTimestamp("marketplaceSearch", selectedCategory, marketplace.buy.searchT.text);
        } // end if
    };
    marketplace.buy.purchaseB.onRelease = function ()
    {
        if (money >= selectedPrice && selectedPrice != -1 && selectedPrice != undefined)
        {
            if (mConfirmBox._x == undefined)
            {
                darkScreen = mainGUI.attachMovie("darkScreenLoading", "darkScreen", mainGUI.getNextHighestDepth());
                darkScreen._width = Stage.width;
                darkScreen._height = Stage.height;
                darkScreen.onRelease = function ()
                {
                };
                mConfirmBox = mainGUI.attachMovie("confirmBox", "mConfirmBox", mainGUI.getNextHighestDepth());
                assignMouseEvents(mConfirmBox.confirmB);
                assignMouseEvents(mConfirmBox.cancelB);
                assignMouseEvents(mConfirmBox.exitB);
                mConfirmBox.msgT.htmlText = "<b>Are you sure you want to buy this item for $" + format(selectedPrice) + "?";
                mConfirmBox.confirmB.onRelease = function ()
                {
                    if (isBusy == false)
                    {
                        getTimestamp("marketplaceBuy", selectedTradeId);
                    } // end if
                    removeMovieClip (mConfirmBox);
                };
                mConfirmBox.cancelB.onRelease = function ()
                {
                    removeMovieClip (mConfirmBox);
                    removeMovieClip (darkScreen);
                };
                mConfirmBox.exitB.onRelease = function ()
                {
                    removeMovieClip (mConfirmBox);
                    removeMovieClip (darkScreen);
                };
            } // end if
        } // end if
    };
    marketplace.buy.scrollUpB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    marketplace.buy.scrollDownB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    marketplace.buy.scrollBar.onRelease = marketplace.buy.scrollBar.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        _root.dragScrollbar = 0;
    };
    marketplace.buy.scrollBar.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, this._x, 157, this._x, -138);
        _root.dragScrollbar = 8;
    };
    marketplace.buy.scrollBar.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    marketplace.buy.scrollBar.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    marketplace.buy.scrollUpB.onRelease = marketplace.buy.scrollUpB.onReleaseOutside = function ()
    {
        _root.dragScrollbar = 0;
        this.gotoAndStop(1);
    };
    marketplace.buy.scrollDownB.onRelease = marketplace.buy.scrollDownB.onReleaseOutside = function ()
    {
        _root.dragScrollbar = 0;
        this.gotoAndStop(1);
    };
    marketplace.buy.scrollUpB.onPress = function ()
    {
        _root.dragScrollbar = 7;
        this.gotoAndStop("click");
    };
    marketplace.buy.scrollDownB.onPress = function ()
    {
        _root.dragScrollbar = 6;
        this.gotoAndStop("click");
    };
    marketplace.buy.scrollUpB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    marketplace.buy.scrollDownB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    marketplace.buy.scrollUpB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    marketplace.buy.scrollDownB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    marketplace.buy.exitB.onRelease = function ()
    {
        removeMovieClip (mainGUI.marketplace);
        canMove = true;
        guiUp = false;
        delete updateListingPrice;
    };
    marketplace.dragBg.onPress = function ()
    {
        marketplace.startDrag(false, -newWidth / 2 + marketplace._width / 2 - widthOffset, -newHeight / 2 + marketplace._height / 2 - heightOffset, newWidth / 2 - marketplace._width / 2 + widthOffset, newHeight / 2 - marketplace._height / 2 + heightOffset);
    };
    marketplace.dragBg.onRelease = marketplace.dragBg.onReleaseOutside = function ()
    {
        marketplace.stopDrag();
    };
    assignMouseEvents(marketplace.buy.exitB);
    assignMouseEvents(marketplace.buy.searchB);
    assignMouseEvents(marketplace.buy.purchaseB);
} // End of the function
function handleXMLResponse(resObj)
{
    if (resObj._cmd == "wildBattleDisconnect")
    {
        if (moveType == "surf")
        {
            _root.battleBg = "water";
        } // end if
        battle = true;
        _root.canMove = false;
        battleType = "wild";
        fadeScreen();
        _root.userPokemon = resObj.userPokemon;
        _root.wildPokemon = resObj.wildPokemon;
        _root.battleReady = true;
    }
    else if (resObj._cmd == "pvpBattle")
    {
        handlePVPBattle(resObj);
    }
    else if (resObj._cmd == "learnMove")
    {
        handleLearnMove(resObj);
    }
    else if (resObj._cmd == "fm")
    {
        if (_root.battle == false)
        {
            _root.canMove = true;
        } // end if
        if (resObj.inventory != undefined)
        {
            parseInventory(resObj.inventory);
            remakeInventory();
        } // end if
        if (resObj.m != undefined)
        {
            _root.money = Number(resObj.m);
            _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(money);
        } // end if
        _root.userPokemon = parseMultiPokemon(resObj.userPokemon);
        _root.ppC = [1, 1, 1, 1];
        _root.ppM = [1, 1, 1, 1];
        _root.learnMoves = false;
        _root.guiUp = false;
        removeMovieClip (_root.learnMoveScreen);
    }
    else if (resObj._cmd == "reorderStoragePokemon")
    {
        handleReorderStoragePokemon(resObj);
    }
    else if (resObj._cmd == "trainerData")
    {
        if (resObj.clientTrainerData != undefined)
        {
            trainerData = resObj.clientTrainerData;
        } // end if
        if (resObj.shopList != undefined && resObj.shopList.length > 0)
        {
            _root.shopList = resObj.shopList;
        } // end if
        if (resObj.badges != undefined)
        {
            _root.badges = resObj.badges;
        } // end if
        trainerDataLoaded = true;
    }
    else if (resObj._cmd == "choosePokemon")
    {
        _root.userPokemon = resObj.userPokemon;
        loadPokemonIcons();
        removeMovieClip (darkScreen);
        removeMovieClip (choosePokemon);
        _root.guiUp = false;
        currentNPC[6] = ["Good luck!"];
        _root.canChoosePokemon = false;
        addFollowPokemon();
        _root.canMove = true;
        fixDepths();
    }
    else if (resObj._cmd == "buyItem")
    {
        if (resObj.money != undefined)
        {
            _root.money = Number(resObj.money);
            _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(money);
            _root.shopBox.moneyT.htmlText = "<b>" + format(money);
        } // end if
        if (resObj.inventory != undefined)
        {
            _root.inventory = resObj.inventory;
            remakeInventory();
        } // end if
        systemMessage(resObj.msg);
    }
    else if (resObj._cmd == "christmasBuy")
    {
        _root.inventory = resObj.inventory;
        remakeInventory();
        if (resObj.userPokemon != undefined)
        {
            _root.userPokemon = resObj.userPokemon;
            loadPokemonIcons(false);
        } // end if
        systemMessage(resObj.msg);
    }
    else if (resObj._cmd == "halloweenBuy")
    {
        _root.inventory = resObj.inventory;
        remakeInventory();
        if (resObj.userPokemon != undefined)
        {
            _root.userPokemon = resObj.userPokemon;
            loadPokemonIcons(false);
        } // end if
        systemMessage(resObj.msg);
    }
    else if (resObj._cmd == "cb")
    {
        _root.inventory = resObj.inventory;
        remakeInventory();
        if (resObj.userPokemon != undefined)
        {
            _root.userPokemon = resObj.userPokemon;
            loadPokemonIcons(false);
        } // end if
        systemMessage(resObj.msg);
    }
    else if (resObj._cmd == "clanWarBuy")
    {
        _root.inventory = resObj.inventory;
        remakeInventory();
        if (resObj.userPokemon != undefined)
        {
            _root.userPokemon = resObj.userPokemon;
            loadPokemonIcons(false);
        } // end if
        systemMessage(resObj.msg);
    }
    else if (resObj._cmd == "b104")
    {
        _root.inventory = resObj.inventory;
        remakeInventory();
        if (resObj.userPokemon != undefined)
        {
            _root.userPokemon = resObj.userPokemon;
            loadPokemonIcons(false);
        } // end if
        if (resObj.msg != undefined)
        {
            systemMessage(resObj.msg);
        } // end if
    }
    else if (resObj._cmd == "openTrade")
    {
        _root.canMove = false;
        showTrade(resObj.fromName, Number(resObj.level1), Number(resObj.level2));
    }
    else if (resObj._cmd == "askEvolve")
    {
        canMove = false;
        showEvolve(resObj.slot, resObj.id);
    }
    else if (resObj._cmd == "acceptEvolve")
    {
        _root.userPokemon = resObj.userPokemon;
        loadPokemonIcons(false);
        _root.evolving = false;
        removeMovieClip (_root.evolveUI);
        removeMovieClip (_root.darkScreen);
        _root.guiUp = false;
    }
    else if (resObj._cmd == "declineEvolve")
    {
        _root.canMove = true;
        _root.evolving = false;
        _root.guiUp = false;
        removeMovieClip (_root.evolveUI);
        removeMovieClip (_root.darkScreen);
    }
    else if (resObj._cmd == "acceptMerchantItem")
    {
        if (resObj.money != undefined)
        {
            _root.money = Number(resObj.money);
            _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
        } // end if
        if (resObj.inventory != undefined)
        {
            _root.inventory = resObj.inventory;
            remakeInventory();
        } // end if
        Selection.setFocus(null);
        _root.typing = false;
        _root.canMove = true;
        _root.guiUp = false;
        removeMovieClip (_root.merchantBox);
        removeMovieClip (_root.darkScreen);
    }
    else if (resObj._cmd == "fish")
    {
        canMove = true;
    }
    else if (resObj._cmd == "updateInventory")
    {
        if (resObj.inventory != undefined)
        {
            inventory = resObj.inventory;
            remakeInventory();
        } // end if
    }
    else if (resObj._cmd == "updateQuestArray")
    {
        _root.questArray = resObj.questArray;
    }
    else if (resObj._cmd == "updateSafariTime")
    {
        handleUpdateSafariTime(resObj);
    }
    else if (resObj._cmd == "safariTimeOver")
    {
        if (resObj.m != undefined)
        {
            loadMap(true, "Safari Zone Entrance", 17, 6);
        }
        else
        {
            if (map == "Safari Zone Entrance")
            {
                _root.npcArray[0] = [2, 6, "right", "", "safariZoneTicket", "", ["You don’t have a Safari Zone ticket. You can purchase one here."], 0];
                _root.customTiles.push([4, 1, "You need a Safari Pass."]);
                _root.mapExits.splice(1, 1);
            } // end if
            _root.canMove = true;
        } // end else if
        _root.safariTime2 = 0;
        _root.safariTimeUp = false;
    }
    else if (resObj._cmd == "cancelTrade")
    {
        removeMovieClip (_root.mainGUI.tradeBox);
        Selection.setFocus(null);
        _root.trading = false;
        _root.buttonClicked = false;
        _root.guiUp = false;
        _root.canMove = true;
    }
    else if (resObj._cmd == "addTradeItem" || resObj._cmd == "removeTradeItem")
    {
        handleAddTradeItem(resObj);
    }
    else if (resObj._cmd == "confirmTrade")
    {
        _root.mainGUI.tradeBox.dark3._visible = true;
        _root.mainGUI.tradeBox.dark4._visible = true;
        _root.mainGUI.tradeBox.confirmingB.gotoAndStop(2);
    }
    else if (resObj._cmd == "finalConfirm")
    {
        _root.mainGUI.tradeBox.finalB._visible = true;
        _root.mainGUI.tradeBox.finalB.onRelease = function ()
        {
            if (_root.isBusy == false && _root.buttonClicked == false)
            {
                _root.buttonClicked = true;
                this.gotoAndStop("accepted");
                getTimestamp("finalConfirm");
            } // end if
        };
        _root.mainGUI.tradeBox.finalB.onPress = function ()
        {
            if (this._currentframe != 4)
            {
                this.gotoAndStop("click");
            } // end if
        };
        _root.mainGUI.tradeBox.finalB.onRollOver = function ()
        {
            if (this._currentframe != 4)
            {
                this.gotoAndStop("hover");
            } // end if
        };
        _root.mainGUI.tradeBox.finalB.onRollOut = function ()
        {
            if (this._currentframe != 4)
            {
                this.gotoAndStop(1);
            } // end if
        };
    }
    else if (resObj._cmd == "endTrade")
    {
        handleEndTrade(resObj);
    }
    else if (resObj._cmd == "tradeError")
    {
        systemMessage(resObj.msg);
        removeMovieClip (_root.mainGUI.tradeBox);
        Selection.setFocus(null);
        _root.buttonClicked = false;
        _root.trading = false;
        _root.canMove = true;
        _root.guiUp = false;
    }
    else if (resObj._cmd == "addCash")
    {
        _root.mainGUI.tradeBox.money2T.htmlText = "<b>" + format(Number(resObj.amount));
    }
    else if (resObj._cmd == "worldBlessing")
    {
        if (resObj.a == 1.200000)
        {
            mainGUI.worldBlessingBigT.htmlText = "<b>" + resObj.u + " used a World Blessing! +5% exp for 1 hour!";
        }
        else
        {
            mainGUI.worldBlessingBigT.htmlText = "<b>" + resObj.u + " stacked a World Blessing! +5% exp for 1 hour!";
        } // end else if
        mainGUI.worldBlessingBigT._visible = true;
        mainGUI.w._visible = true;
        mainGUI.w.gotoAndStop(1);
        mainGUI.worldBlessingSmallT.htmlText = "<b>World Blessing Active x" + int(Number(resObj.a) * 100) / 100 + " Exp (" + resObj.u + ", " + resObj.d + ")";
        mainGUI.worldBlessingSmallT._visible = true;
        clearWorldBlessingMessageI = setInterval(clearWorldBlessing, 7000);
    }
    else if (resObj._cmd == "dropRateBlessing")
    {
        mainGUI.dropRateBlessingBigT.htmlText = "<b>" + resObj.usedBy + " used a Drop Rate Blessing! +20% Drop Rate for 1 hour!";
        mainGUI.dropRateBlessingBigT._visible = true;
        mainGUI.dr._visible = true;
        mainGUI.dropRateBlessingSmallT.htmlText = "<b>Drop Rate Blessing Active +20% Drop Rate (" + resObj.usedBy + ", " + resObj.d + ")";
        mainGUI.dropRateBlessingSmallT._visible = true;
        clearDropRateBlessingMessageI = setInterval(clearDropRateBlessing, 7000);
    }
    else if (resObj._cmd == "creditShopBuy")
    {
        systemMessage(resObj.msg);
        if (resObj.inventory != undefined)
        {
            inventory = resObj.inventory;
            remakeInventory();
        } // end if
        if (resObj.credits != undefined)
        {
            credits = Number(resObj.credits);
            mainGUI.creditsT.htmlText = "<b>" + format(credits) + "c</b>";
            mainGUI.creditShop.creditsT.htmlText = "<b>" + format(credits) + "c";
        } // end if
        removeMovieClip (darkScreen);
        removeMovieClip (confirmBox);
        removeMovieClip (giftBox);
        canBuyItem = true;
        guiUp = false;
        Selection.setFocus(null);
    }
    else if (resObj._cmd == "muted")
    {
        muted = true;
        encryptedMuted = calcMD5(muted + _root.kg1() + username);
        clearInterval(unMuteI);
        unMuteI = setInterval(unMute, resObj.muteLength * 60 * 1000);
        systemMessage(resObj.muter + " muted you for " + resObj.muteLength + " minutes. Reason: " + resObj.muteReason + " In order to prevent getting muted please read the rules and do not discuss mutes in chat.");
    }
    else if (resObj._cmd == "b2adb2")
    {
        _root.bW = true;
        _root.bWT = resObj.a;
    }
    else if (resObj._cmd == "b2adb2z")
    {
        _root.bW = false;
    }
    else if (resObj._cmd == "relearnList")
    {
        removeMovieClip (_root.allButtonBox);
        showRelearnList(resObj.learnableMoves);
    }
    else if (resObj._cmd == "relearnList2")
    {
        removeMovieClip (_root.allButtonBox);
        showRelearnList2(resObj.learnableMoves);
    }
    else if (resObj._cmd == "relearnList3")
    {
        removeMovieClip (_root.allButtonBox);
        showRelearnList3(resObj.learnableMoves);
    }
    else if (resObj._cmd == "relearnList4")
    {
        removeMovieClip (_root.allButtonBox);
        showRelearnList4(resObj.learnableMoves);
    }
    else if (resObj._cmd == "relearnList5")
    {
        removeMovieClip (_root.allButtonBox);
        showRelearnList5(resObj.learnableMoves);
    }
    else if (resObj._cmd == "releasePokemon")
    {
        if (storageOpen == false)
        {
            _root.canMove = true;
        } // end if
        _root.mainGUI.pokemonSummary._visible = false;
        removeMovieClip (_root.confirmBox);
        removeMovieClip (_root.darkScreen);
        systemMessage(resObj.msg);
        if (resObj.pokemon != undefined)
        {
            _root.userPokemon = resObj.pokemon;
            loadPokemonIcons();
        } // end if
        _root.canReleasePokemon = true;
    }
    else if (resObj._cmd == "createClan")
    {
        handleCreateClan(resObj);
    }
    else if (resObj._cmd == "createClanError")
    {
        _root.creatingClan = false;
    }
    else if (resObj._cmd == "depositClanBank")
    {
        _root.money = Number(resObj.money);
        _root.clanBank = Number(resObj.bank);
        _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(_root.money) + "</b>";
        _root.mainGUI.clanGUI.clanBg.bankT.htmlText = "<b>$" + format(_root.clanBank);
        _root.mainGUI.clanGUI.clanBg.depositT.text = "0";
        systemMessage(resObj.msg);
    }
    else if (resObj._cmd == "withdrawClanBank")
    {
        _root.money = Number(resObj.money);
        _root.clanBank = Number(resObj.bank);
        _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(_root.money) + "</b>";
        _root.mainGUI.clanGUI.clanBg.bankT.htmlText = "<b>$" + format(_root.clanBank);
        _root.mainGUI.clanGUI.clanBg.withdrawT.text = "0";
        systemMessage(resObj.msg);
    }
    else if (resObj._cmd == "kickClanMember")
    {
        _root.clanRoster = resObj.clanRoster;
        if (mainGUI.clanGUI._visible == true)
        {
            loadClanGUIInfo();
        } // end if
        removeMovieClip (disbandBox);
        removeMovieClip (darkScreen);
        systemMessage(resObj.msg);
    }
    else if (resObj._cmd == "kickedFromClan")
    {
        _root.clan = "";
        _root.clanBank = undefined;
        _root.clanRank = undefined;
        _root.clanRoster = undefined;
        mainGUI.clanGUI._visible = false;
        mainGUI.clanB.gotoAndStop(1);
        systemMessage("You have been kicked from your clan.");
    }
    else if (resObj._cmd == "sendClanInvite")
    {
        removeMovieClip (_root.clanInviteBox);
        removeMovieClip (_root.darkScreen);
        systemMessage(resObj.msg);
    }
    else if (resObj._cmd == "clanRequest")
    {
        showClanInvite(resObj.fromName, resObj.fromClan);
    }
    else if (resObj._cmd == "acceptClanInvite")
    {
        _root.clan = String(resObj.clan);
        _root.clanRank = String(resObj.clanRank);
        _root.clanRoster = resObj.clanRoster;
        _root.clanBank = Number(resObj.clanBank);
        _root.rosterSize = Number(resObj.rosterSize);
        systemMessage("You joined " + _root.clan + ".");
    }
    else if (resObj._cmd == "newClanMember")
    {
        _root.clanRoster = resObj.clanRoster;
        if (mainGUI.clanGUI._visible == true)
        {
            loadClanGUIInfo();
        } // end if
        systemMessage(resObj.memberName + " joined the clan.");
    }
    else if (resObj._cmd == "updateRoster")
    {
        _root.clanRoster = resObj.clanRoster;
        if (mainGUI.clanGUI._visible == true)
        {
            loadClanGUIInfo();
        } // end if
        if (resObj.msg != undefined)
        {
            systemMessage(resObj.msg);
        } // end if
    }
    else if (resObj._cmd == "clanDisband")
    {
        _root.clan = "";
        _root.clanBank = undefined;
        _root.clanRank = undefined;
        _root.clanRoster = undefined;
        mainGUI.clanGUI._visible = false;
        mainGUI.clanB.gotoAndStop(1);
        systemMessage("Your clan has been disbanded.");
    }
    else if (resObj._cmd == "leaveClan")
    {
        _root.clan = "";
        _root.clanBank = undefined;
        _root.clanRank = undefined;
        _root.clanRoster = undefined;
        _root.mainGUI.clanGUI._visible = false;
        _root.mainGUI.clanB.gotoAndStop(1);
        systemMessage("You have left the clan.");
        if (_root.map == "Clan Wars T1" || _root.map == "Clan Wars T2" || _root.map == "Clan Wars T3")
        {
            loadMap(true, "Clan Building", 23, 19);
        } // end if
    }
    else if (resObj._cmd == "promoteMember")
    {
        systemMessage(resObj.msg);
    }
    else if (resObj._cmd == "clanRankChanged")
    {
        _root.clanRank = String(resObj.clanRank);
        _root.clanRoster = resObj.clanRoster;
        if (mainGUI.clanGUI._visible == true)
        {
            loadClanGUIInfo();
        } // end if
        systemMessage("Your clan rank was changed to " + resObj.clanRank);
    }
    else if (resObj._cmd == "upgradeRoster")
    {
        _root.rosterSize = Number(resObj.rosterSize);
        _root.clanBank = Number(resObj.clanBank);
        systemMessage("You upgraded the clan\'s roster to " + rosterSize + ".");
    }
    else if (resObj._cmd == "rosterUpgraded")
    {
        _root.rosterSize = Number(resObj.rosterSize);
        _root.clanBank = Number(resObj.clanBank);
    }
    else if (resObj._cmd == "exchangeShards")
    {
        systemMessage(resObj.msg);
        if (resObj.inventory != undefined)
        {
            _root.inventory = resObj.inventory;
            remakeInventory();
        } // end if
        if (resObj.userPokemon != undefined)
        {
            _root.userPokemon = resObj.userPokemon;
            loadPokemonIcons(false);
        } // end if
        removeMovieClip (_root.fourButtonBox);
        _root.canMove = true;
        _root.guiUp = false;
    }
    else if (resObj._cmd == "slotSpin")
    {
        _root.money = Number(resObj.money);
        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
        if (resObj.inventory != undefined)
        {
            inventory = resObj.inventory;
            remakeInventory();
        } // end if
        slotWinAmount = resObj.amount;
        slotCount = 0;
        iconArray = [resObj.i1, resObj.i2, resObj.i3];
        if (resObj.jp == true)
        {
            _root.casinoJP = true;
        }
        else
        {
            _root.casinoJP = false;
        } // end else if
        slotIconsI = setInterval(slotIcons, 500);
    } // end else if
} // End of the function
function makeMarketplaceAuction()
{
    selectedCategory = "all";
    selectedTradeId = undefined;
    selectedPrice = -1;
    selectedNum = -1;
    marketplace.auction.moneyT.htmlText = "<b>" + format(money);
    marketplace.auction.searchT.restrict = "A-Z 0-9a-z\\-[]()";
    marketplace.buy._visible = false;
    marketplace.auction._visible = true;
    marketplace.sell._visible = false;
    marketplace.auction.buyTab.gotoAndStop(1);
    marketplace.auction.auctionsTab.gotoAndStop(2);
    marketplace.auction.sellTab.gotoAndStop(1);
    marketplace.auction.buyTab.onRelease = function ()
    {
        makeMarketplaceBuy();
    };
    marketplace.auction.sellTab.onRelease = function ()
    {
        makeMarketplaceSell();
    };
    marketplace.auction.buyTab.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.auction.sellTab.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.auction.buyTab.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.auction.sellTab.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.auction.allB.gotoAndStop(2);
    marketplace.auction.allB.onRelease = marketplace.auction.allB.onReleaseOutside = function ()
    {
        selectedCategory = "all";
        this.gotoAndStop(2);
        marketplace.auction.consumablesB.gotoAndStop(1);
        marketplace.auction.pokemonB.gotoAndStop(1);
        marketplace.auction.heldItemsB.gotoAndStop(1);
        marketplace.auction.decorativeB.gotoAndStop(1);
    };
    marketplace.auction.allB.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.auction.allB.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.auction.consumablesB.onRelease = marketplace.auction.consumablesB.onReleaseOutside = function ()
    {
        selectedCategory = "consumables";
        this.gotoAndStop(2);
        marketplace.auction.allB.gotoAndStop(1);
        marketplace.auction.pokemonB.gotoAndStop(1);
        marketplace.auction.heldItemsB.gotoAndStop(1);
        marketplace.auction.decorativeB.gotoAndStop(1);
    };
    marketplace.auction.consumablesB.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.auction.consumablesB.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.auction.pokemonB.onRelease = marketplace.auction.pokemonB.onReleaseOutside = function ()
    {
        selectedCategory = "pokemon";
        this.gotoAndStop(2);
        marketplace.auction.allB.gotoAndStop(1);
        marketplace.auction.consumablesB.gotoAndStop(1);
        marketplace.auction.heldItemsB.gotoAndStop(1);
        marketplace.auction.decorativeB.gotoAndStop(1);
    };
    marketplace.auction.pokemonB.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.auction.pokemonB.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.auction.heldItemsB.onRelease = marketplace.auction.heldItemsB.onReleaseOutside = function ()
    {
        selectedCategory = "held items";
        this.gotoAndStop(2);
        marketplace.auction.allB.gotoAndStop(1);
        marketplace.auction.consumablesB.gotoAndStop(1);
        marketplace.auction.pokemonB.gotoAndStop(1);
        marketplace.auction.decorativeB.gotoAndStop(1);
    };
    marketplace.auction.heldItemsB.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.auction.heldItemsB.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.auction.decorativeB.onRelease = marketplace.auction.decorativeB.onReleaseOutside = function ()
    {
        selectedCategory = "decorative items";
        this.gotoAndStop(2);
        marketplace.auction.allB.gotoAndStop(1);
        marketplace.auction.consumablesB.gotoAndStop(1);
        marketplace.auction.pokemonB.gotoAndStop(1);
        marketplace.auction.heldItemsB.gotoAndStop(1);
    };
    marketplace.auction.decorativeB.onRollOver = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(3);
        } // end if
    };
    marketplace.auction.decorativeB.onRollOut = function ()
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop(1);
        } // end if
    };
    marketplace.auction.searchB.onRelease = function ()
    {
        if (isBusy == false)
        {
            darkScreen = mainGUI.attachMovie("darkScreenLoading", "darkScreen", mainGUI.getNextHighestDepth());
            darkScreen._width = Stage.width;
            darkScreen._height = Stage.height;
            darkScreen.onRelease = function ()
            {
            };
            getTimestamp("marketplaceSearchAuction", selectedCategory, marketplace.auction.searchT.text);
        } // end if
    };
    marketplace.auction.bidB.onRelease = function ()
    {
        if (money >= selectedPrice && selectedPrice != -1 && selectedPrice != undefined)
        {
            if (selectedBidder.toLowerCase() != _root.username.toLowerCase())
            {
                if (selectedSeller.toLowerCase() != _root.username.toLowerCase())
                {
                    if (mConfirmBox._x == undefined)
                    {
                        darkScreen = mainGUI.attachMovie("darkScreenLoading", "darkScreen", mainGUI.getNextHighestDepth());
                        darkScreen._width = Stage.width;
                        darkScreen._height = Stage.height;
                        darkScreen.onRelease = function ()
                        {
                        };
                        bidBox = mainGUI.attachMovie("bidBox", "bidBox", mainGUI.getNextHighestDepth());
                        Selection.setFocus(bidBox.moneyT);
                        assignMouseEvents(bidBox.confirmB);
                        assignMouseEvents(bidBox.cancelB);
                        assignMouseEvents(bidBox.exitB);
                        bidBox.moneyT.restrict = "0-9";
                        bidBox.confirmB.onRelease = function ()
                        {
                            if (bidBox.moneyT.text != "" && Number(bidBox.moneyT.text) > selectedPrice)
                            {
                                if (isBusy == false)
                                {
                                    getTimestamp("marketplaceBid", selectedTradeId, Number(bidBox.moneyT.text));
                                    removeMovieClip (bidBox);
                                } // end if
                            }
                            else
                            {
                                systemMessage("Your bid is not high enough.");
                            } // end else if
                        };
                        bidBox.cancelB.onRelease = function ()
                        {
                            removeMovieClip (bidBox);
                            removeMovieClip (darkScreen);
                        };
                        bidBox.exitB.onRelease = function ()
                        {
                            removeMovieClip (bidBox);
                            removeMovieClip (darkScreen);
                        };
                    } // end if
                } // end if
            }
            else
            {
                systemMessage("You can\'t bid on an item that you have the current bid for.");
            } // end if
        } // end else if
    };
    marketplace.auction.scrollUpB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    marketplace.auction.scrollDownB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    marketplace.auction.scrollBar.onRelease = marketplace.auction.scrollBar.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        _root.dragScrollbar = 0;
    };
    marketplace.auction.scrollBar.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, this._x, 157, this._x, -138);
        _root.dragScrollbar = 5;
    };
    marketplace.auction.scrollBar.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    marketplace.auction.scrollBar.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    marketplace.auction.scrollUpB.onRelease = marketplace.auction.scrollUpB.onReleaseOutside = function ()
    {
        _root.dragScrollbar = 0;
        this.gotoAndStop(1);
    };
    marketplace.auction.scrollDownB.onRelease = marketplace.auction.scrollDownB.onReleaseOutside = function ()
    {
        _root.dragScrollbar = 0;
        this.gotoAndStop(1);
    };
    marketplace.auction.scrollUpB.onPress = function ()
    {
        _root.dragScrollbar = 4;
        this.gotoAndStop("click");
    };
    marketplace.auction.scrollDownB.onPress = function ()
    {
        _root.dragScrollbar = 3;
        this.gotoAndStop("click");
    };
    marketplace.auction.scrollUpB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    marketplace.auction.scrollDownB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    marketplace.auction.scrollUpB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    marketplace.auction.scrollDownB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    marketplace.auction.exitB.onRelease = function ()
    {
        removeMovieClip (mainGUI.marketplace);
        canMove = true;
        guiUp = false;
        delete updateListingPrice;
    };
    marketplace.dragBg.onPress = function ()
    {
        marketplace.startDrag(false, -newWidth / 2 + marketplace._width / 2 - widthOffset, -newHeight / 2 + marketplace._height / 2 - heightOffset, newWidth / 2 - marketplace._width / 2 + widthOffset, newHeight / 2 - marketplace._height / 2 + heightOffset);
    };
    marketplace.dragBg.onRelease = marketplace.dragBg.onReleaseOutside = function ()
    {
        marketplace.stopDrag();
    };
    assignMouseEvents(marketplace.auction.exitB);
    assignMouseEvents(marketplace.auction.searchB);
    assignMouseEvents(marketplace.auction.bidB);
} // End of the function
function makeMarketplaceListings()
{
    for (h in marketplace.sell.sellItemList)
    {
        removeMovieClip (marketplace.sell.sellItemList[h]);
    } // end of for...in
    for (h in marketplace.sell.auctionItemList)
    {
        removeMovieClip (marketplace.sell.auctionItemList[h]);
    } // end of for...in
    marketplace.sell.sellItemList.setMask(marketplace.sell.sellMaskBg);
    marketplace.sell.auctionItemList.setMask(marketplace.sell.auctionMaskBg);
    addedToSell = 0;
    var h = 0;
    while (h < marketplaceListings.length)
    {
        if (marketplaceListings[h][3] == "sell")
        {
            ++addedToSell;
            tempItem = marketplace.sell.sellItemList.attachMovie("marketplaceSellItem", "marketplaceSellItem_" + addedToSell, marketplace.sell.sellItemList.getNextHighestDepth());
            tempItem._y = -74 + 45 * (addedToSell - 1);
            tempItem.nameT.htmlText = "<b>" + marketplaceListings[h][0];
            if (marketplaceListings[h][0].indexOf("Lv ") == -1)
            {
                if (marketplaceListings[h][0].indexOf("HM") != -1 || marketplaceListings[h][0].indexOf("TM") != -1 && marketplaceListings[h][0] != "TM Box")
                {
                    tempItem.i.gotoAndStop("tmhm");
                }
                else
                {
                    tempItem.i.gotoAndStop(marketplaceListings[h][0]);
                } // end else if
                tempItem.i2._visible = false;
            }
            else
            {
                tempString = marketplaceListings[h][0].substr(3, marketplaceListings[h][0].length);
                if (marketplaceListings[h][0].indexOf("[S]") != -1)
                {
                    tempString = tempString.substr(tempString.indexOf(" ") + 4, tempString.length);
                }
                else
                {
                    tempString = tempString.substr(tempString.indexOf(" ") + 1, tempString.length);
                } // end else if
                tempItem.i2.gotoAndStop(pokemonNameToId(tempString));
                tempItem.i._visible = false;
            } // end else if
            tempItem.priceT.htmlText = "<b>$" + format(marketplaceListings[h][2]);
            tempItem.cancelB.num = h;
            tempItem.cancelB.onRelease = function ()
            {
                this.gotoAndStop(1);
                if (isBusy == false)
                {
                    getTimestamp("cancelListItem", this.num);
                    darkScreen = mainGUI.attachMovie("darkScreenLoading", "darkScreen", mainGUI.getNextHighestDepth());
                    darkScreen._width = Stage.width;
                    darkScreen._height = Stage.height;
                    darkScreen.onRelease = function ()
                    {
                    };
                } // end if
            };
            assignMouseEvents(tempItem.cancelB);
        } // end if
        ++h;
    } // end while
    addedToAuction = 0;
    var h = 0;
    while (h < marketplaceListings.length)
    {
        if (marketplaceListings[h][3] == "auction")
        {
            ++addedToAuction;
            tempItem = marketplace.sell.auctionItemList.attachMovie("marketplaceAuctionItem", "marketplaceAuctionItem_" + addedToAuction, marketplace.sell.auctionItemList.getNextHighestDepth());
            tempItem._y = -60 + 45 * (addedToAuction - 1);
            tempItem.nameT.htmlText = "<b>" + marketplaceListings[h][0];
            if (marketplaceListings[h][0].indexOf("Lv ") == -1)
            {
                if (marketplaceListings[h][0].indexOf("HM") != -1 || marketplaceListings[h][0].indexOf("TM") != -1 && marketplaceListings[h][0] != "TM Box")
                {
                    tempItem.i.gotoAndStop("tmhm");
                }
                else
                {
                    tempItem.i.gotoAndStop(marketplaceListings[h][0]);
                } // end else if
                tempItem.i2._visible = false;
            }
            else
            {
                tempString = marketplaceListings[h][0].substr(3, marketplaceListings[h][0].length);
                if (marketplaceListings[h][0].indexOf("[S]") != -1)
                {
                    tempString = tempString.substr(tempString.indexOf(" ") + 4, tempString.length);
                }
                else
                {
                    tempString = tempString.substr(tempString.indexOf(" ") + 1, tempString.length);
                } // end else if
                tempItem.i2.gotoAndStop(pokemonNameToId(tempString));
                tempItem.i._visible = false;
            } // end else if
            tempItem.priceT.htmlText = "<b>$" + format(marketplaceListings[h][2]);
            tempItem.timeT.htmlText = "<b>" + int(marketplaceListings[h][5] / 3600 * 10) / 10 + " hours";
        } // end if
        ++h;
    } // end while
} // End of the function
function pokemonNameToId(tempName)
{
    tempName = tempName.toLowerCase();
    for (var _loc1 = 0; _loc1 < pokemonDB.length; ++_loc1)
    {
        if (tempName == pokemonDB[_loc1][1])
        {
            return (pokemonDB[_loc1][0]);
        } // end if
    } // end of for
    return (0);
} // End of the function
function shopDialogue(buyNum)
{
    shopDialogueGUI = _root.mainGUI.attachMovie("inputBox", "shopDialogueGUI", _root.mainGUI.getNextHighestDepth());
    shopDialogueGUI.nameT.htmlText = "<b>Shopkeeper";
    shopDialogueGUI.msgT.text = "How many " + pluralize(_root.shopList[buyNum][0]) + " would you like to purchase?";
    shopDialogueGUI.createB.nameT.htmlText = "<b>Buy";
    shopDialogueGUI.createB.nameText = "Buy";
    shopDialogueGUI.createB.buyNum = buyNum;
    shopDialogueGUI.inputT.restrict = "0-9";
    Selection.setFocus(shopDialogueGUI.inputT);
    assignMouseEvents(shopDialogueGUI.createB, true);
    assignMouseEvents(shopDialogueGUI.noB);
    shopDialogueGUI.createB.onRelease = function ()
    {
        if (shopDialogueGUI.inputT.text != "" && Number(shopDialogueGUI.inputT.text) > 0 && Number(shopDialogueGUI.inputT.text) < 1000000)
        {
            if (_root.money > Number(shopDialogueGUI.inputT.text) * _root.shopList[this.buyNum][1])
            {
                yesNoBox = _root.mainGUI.attachMovie("yesNoBox", "yesNoBox", _root.mainGUI.getNextHighestDepth());
                yesNoBox.nameT.htmlText = "<b>Shopkeeper";
                yesNoBox.yesB.buyNum = this.buyNum;
                yesNoBox.yesB.amount = Number(shopDialogueGUI.inputT.text);
                if (Number(shopDialogueGUI.inputT.text) > 1)
                {
                    yesNoBox.msgT.text = "Purchase " + format(Number(shopDialogueGUI.inputT.text)) + " " + pluralize(_root.shopList[this.buyNum][0]) + " for $" + format(Number(shopDialogueGUI.inputT.text) * _root.shopList[this.buyNum][1]) + "?";
                }
                else
                {
                    yesNoBox.msgT.text = "Purchase " + format(Number(shopDialogueGUI.inputT.text)) + " " + _root.shopList[this.buyNum][0] + " for $" + format(Number(shopDialogueGUI.inputT.text) * _root.shopList[this.buyNum][1]) + "?";
                } // end else if
                removeMovieClip (shopDialogueGUI);
                yesNoBox.yesT.htmlText = "<b>Yes";
                yesNoBox.noT.htmlText = "<b>No";
                assignMouseEvents(yesNoBox.yesB);
                assignMouseEvents(yesNoBox.noB);
                yesNoBox.yesB.onRelease = function ()
                {
                    getTimestamp("buyItem", this.buyNum, this.amount);
                    removeMovieClip (yesNoBox);
                };
                yesNoBox.noB.onRelease = function ()
                {
                    removeMovieClip (yesNoBox);
                };
            }
            else
            {
                systemMessage("You don\'t have enough money..");
            } // end else if
        }
        else
        {
            systemMessage("Please enter a valid amount.");
        } // end else if
    };
    shopDialogueGUI.noB.onRelease = function ()
    {
        removeMovieClip (shopDialogueGUI);
    };
} // End of the function
function makeShopButtons()
{
    for (var _loc3 = 0; _loc3 < shopList.length; ++_loc3)
    {
        tempItem = shopBox.itemList.attachMovie("shopItem", "shopItem" + _loc3, shopBox.itemList.getNextHighestDepth());
        tempItem._y = -116 + 56 * _loc3;
        if (shopList[_loc3][0].indexOf("HM") != -1 || shopList[_loc3][0].indexOf("TM") != -1 && shopList[_loc3][0] != "TM Box")
        {
            tempItem.itemImage.gotoAndStop("tmhm");
        }
        else
        {
            tempItem.itemImage.gotoAndStop(shopList[_loc3][0]);
        } // end else if
        tempItem.nameT.htmlText = "<b>" + shopList[_loc3][0];
        tempItem.priceT.htmlText = "<b>" + format(shopList[_loc3][1]);
        tempItem.buyB.buyNum = _loc3;
        tempItem.buyB.onRelease = function ()
        {
            this.gotoAndStop(1);
            if (_root.mainGUI.shopDialogueGUI.createB.buyNum == undefined && _root.mainGUI.yesNoBox.nameT == undefined)
            {
                shopDialogue(this.buyNum);
            } // end if
        };
        assignMouseEvents(tempItem.buyB);
    } // end of for
    shopBox.scrollBar.onRelease = shopBox.scrollBar.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        _root.dragScrollbar = 0;
    };
    shopBox.scrollBar.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, this._x, 95, this._x, -104);
        _root.dragScrollbar = 35;
    };
    shopBox.scrollBar.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    shopBox.scrollBar.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    addDraggableGUI(shopBox);
    shopBox.scrollUpB.onRelease = shopBox.scrollUpB.onReleaseOutside = function ()
    {
        _root.dragScrollbar = 0;
        this.gotoAndStop(1);
    };
    shopBox.scrollUpB.onPress = function ()
    {
        _root.dragScrollbar = 20;
        this.gotoAndStop("click");
    };
    shopBox.scrollUpB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    shopBox.scrollUpB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    shopBox.scrollDownB.onRelease = shopBox.scrollDownB.onReleaseOutside = function ()
    {
        _root.dragScrollbar = 0;
        this.gotoAndStop(1);
    };
    shopBox.scrollDownB.onPress = function ()
    {
        _root.dragScrollbar = 19;
        this.gotoAndStop("click");
    };
    shopBox.scrollDownB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    shopBox.scrollDownB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    shopBox.exitB.onRelease = function ()
    {
        removeMovieClip (shopDialogueGUI);
        removeMovieClip (yesNoBox);
        Selection.setFocus(null);
        typing = false;
        removeMovieClip (shopBox);
        canMove = true;
        guiUp = false;
    };
    assignMouseEvents(shopBox.exitB);
} // End of the function
function showRelearnList(moveArray)
{
    _root.relearnMoveArray = moveArray;
    relearnGUI = _root.mainGUI.attachMovie("relearnMovesGUI", "relearnGUI", _root.mainGUI.getNextHighestDepth());
    relearnGUI.itemList.setMask(relearnGUI.maskBg);
    for (var _loc3 = 0; _loc3 < moveArray.length; ++_loc3)
    {
        tempItem = relearnGUI.itemList.attachMovie("relearnItem", "relearnItem" + i, relearnGUI.itemList.getNextHighestDepth());
        tempItem._y = -103 + 56 * _loc3;
        tempItem.nameT.htmlText = "<b>" + moveIdToName(moveArray[_loc3]);
        tempItem.learnB.moveNum = _loc3;
        tempItem.learnB.onRelease = function ()
        {
            if (_root.learnMoves != true)
            {
                this.gotoAndStop(1);
                if (isBusy == false)
                {
                    getTimestamp("relearnMove", this.moveNum);
                } // end if
            } // end if
        };
        assignMouseEvents(tempItem.learnB);
    } // end of for
    relearnGUI.scrollBar.onRelease = relearnGUI.scrollBar.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        _root.dragScrollbar = 0;
    };
    relearnGUI.scrollBar.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, this._x, 109, this._x, -88);
        _root.dragScrollbar = 15;
    };
    relearnGUI.scrollBar.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollBar.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.dragBg.onPress = function ()
    {
        relearnGUI.startDrag(false, -newWidth / 2 + relearnGUI._width / 2 - widthOffset, -newHeight / 2 + relearnGUI._height / 2 - heightOffset, newWidth / 2 - relearnGUI._width / 2 + widthOffset, newHeight / 2 - relearnGUI._height / 2 + heightOffset);
    };
    relearnGUI.dragBg.onRelease = relearnGUI.dragBg.onReleaseOutside = function ()
    {
        relearnGUI.stopDrag();
    };
    relearnGUI.scrollUpB.onRelease = relearnGUI.scrollUpB.onReleaseOutside = function ()
    {
        draggingRelearnUp = false;
        this.gotoAndStop(1);
    };
    relearnGUI.scrollUpB.onPress = function ()
    {
        draggingRelearnUp = true;
        this.gotoAndStop("click");
    };
    relearnGUI.scrollUpB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollUpB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.scrollDownB.onRelease = relearnGUI.scrollDownB.onReleaseOutside = function ()
    {
        draggingRelearnDown = false;
        this.gotoAndStop(1);
    };
    relearnGUI.scrollDownB.onPress = function ()
    {
        draggingRelearnDown = true;
        this.gotoAndStop("click");
    };
    relearnGUI.scrollDownB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollDownB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.exitB.onRelease = function ()
    {
        removeMovieClip (relearnGUI);
        guiUp = false;
        canMove = true;
        getTimestamp("exitRelearnList");
    };
    assignMouseEvents(relearnGUI.exitB);
} // End of the function
function showRelearnList2(moveArray)
{
    _root.relearnMoveArray = moveArray;
    relearnGUI = _root.mainGUI.attachMovie("relearnMovesGUI", "relearnGUI", _root.mainGUI.getNextHighestDepth());
    relearnGUI.itemList.setMask(relearnGUI.maskBg);
    for (var _loc3 = 0; _loc3 < moveArray.length; ++_loc3)
    {
        tempItem = relearnGUI.itemList.attachMovie("relearnItem", "relearnItem" + i, relearnGUI.itemList.getNextHighestDepth());
        tempItem._y = -103 + 56 * _loc3;
        tempItem.nameT.htmlText = "<b>" + moveIdToName(moveArray[_loc3]);
        tempItem.learnB.moveNum = _loc3;
        tempItem.learnB.onRelease = function ()
        {
            this.gotoAndStop(1);
            if (_root.learnMoves != true)
            {
                if (getInventoryAmount("Tutor Move Ticket") >= 1)
                {
                    if (isBusy == false)
                    {
                        getTimestamp("relearnMove2", this.moveNum);
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough Tutor Move Tickets to learn that move.");
                } // end if
            } // end else if
        };
        assignMouseEvents(tempItem.learnB);
    } // end of for
    relearnGUI.scrollBar.onRelease = relearnGUI.scrollBar.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        _root.dragScrollbar = 0;
    };
    relearnGUI.scrollBar.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, this._x, 109, this._x, -88);
        _root.dragScrollbar = 15;
    };
    relearnGUI.scrollBar.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollBar.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.dragBg.onPress = function ()
    {
        relearnGUI.startDrag(false, -newWidth / 2 + relearnGUI._width / 2 - widthOffset, -newHeight / 2 + relearnGUI._height / 2 - heightOffset, newWidth / 2 - relearnGUI._width / 2 + widthOffset, newHeight / 2 - relearnGUI._height / 2 + heightOffset);
    };
    relearnGUI.dragBg.onRelease = relearnGUI.dragBg.onReleaseOutside = function ()
    {
        relearnGUI.stopDrag();
    };
    relearnGUI.scrollUpB.onRelease = relearnGUI.scrollUpB.onReleaseOutside = function ()
    {
        draggingRelearnUp = false;
        this.gotoAndStop(1);
    };
    relearnGUI.scrollUpB.onPress = function ()
    {
        draggingRelearnUp = true;
        this.gotoAndStop("click");
    };
    relearnGUI.scrollUpB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollUpB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.scrollDownB.onRelease = relearnGUI.scrollDownB.onReleaseOutside = function ()
    {
        draggingRelearnDown = false;
        this.gotoAndStop(1);
    };
    relearnGUI.scrollDownB.onPress = function ()
    {
        draggingRelearnDown = true;
        this.gotoAndStop("click");
    };
    relearnGUI.scrollDownB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollDownB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.exitB.onRelease = function ()
    {
        removeMovieClip (relearnGUI);
        guiUp = false;
        canMove = true;
        getTimestamp("exitRelearnList");
    };
    assignMouseEvents(relearnGUI.exitB);
} // End of the function
function showRelearnList3(moveArray)
{
    _root.relearnMoveArray = moveArray;
    relearnGUI = _root.mainGUI.attachMovie("relearnMovesGUI", "relearnGUI", _root.mainGUI.getNextHighestDepth());
    relearnGUI.itemList.setMask(relearnGUI.maskBg);
    for (var _loc3 = 0; _loc3 < moveArray.length; ++_loc3)
    {
        tempItem = relearnGUI.itemList.attachMovie("relearnItem", "relearnItem" + i, relearnGUI.itemList.getNextHighestDepth());
        tempItem._y = -103 + 56 * _loc3;
        tempItem.nameT.htmlText = "<b>" + moveIdToName(moveArray[_loc3]);
        tempItem.learnB.moveNum = _loc3;
        tempItem.learnB.onRelease = function ()
        {
            this.gotoAndStop(1);
            if (_root.learnMoves != true)
            {
                if (getInventoryAmount("Egg Move Ticket") >= 1)
                {
                    if (isBusy == false)
                    {
                        getTimestamp("relearnMove3", this.moveNum);
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough Egg Move Tickets to learn that move.");
                } // end if
            } // end else if
        };
        assignMouseEvents(tempItem.learnB);
    } // end of for
    relearnGUI.scrollBar.onRelease = relearnGUI.scrollBar.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        _root.dragScrollbar = 0;
    };
    relearnGUI.scrollBar.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, this._x, 109, this._x, -88);
        _root.dragScrollbar = 15;
    };
    relearnGUI.scrollBar.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollBar.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.dragBg.onPress = function ()
    {
        relearnGUI.startDrag(false, -newWidth / 2 + relearnGUI._width / 2 - widthOffset, -newHeight / 2 + relearnGUI._height / 2 - heightOffset, newWidth / 2 - relearnGUI._width / 2 + widthOffset, newHeight / 2 - relearnGUI._height / 2 + heightOffset);
    };
    relearnGUI.dragBg.onRelease = relearnGUI.dragBg.onReleaseOutside = function ()
    {
        relearnGUI.stopDrag();
    };
    relearnGUI.scrollUpB.onRelease = relearnGUI.scrollUpB.onReleaseOutside = function ()
    {
        draggingRelearnUp = false;
        this.gotoAndStop(1);
    };
    relearnGUI.scrollUpB.onPress = function ()
    {
        draggingRelearnUp = true;
        this.gotoAndStop("click");
    };
    relearnGUI.scrollUpB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollUpB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.scrollDownB.onRelease = relearnGUI.scrollDownB.onReleaseOutside = function ()
    {
        draggingRelearnDown = false;
        this.gotoAndStop(1);
    };
    relearnGUI.scrollDownB.onPress = function ()
    {
        draggingRelearnDown = true;
        this.gotoAndStop("click");
    };
    relearnGUI.scrollDownB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollDownB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.exitB.onRelease = function ()
    {
        removeMovieClip (relearnGUI);
        guiUp = false;
        canMove = true;
        getTimestamp("exitRelearnList");
    };
    assignMouseEvents(relearnGUI.exitB);
} // End of the function
function showRelearnList4(moveArray)
{
    _root.relearnMoveArray = moveArray;
    relearnGUI = _root.mainGUI.attachMovie("relearnMovesGUI", "relearnGUI", _root.mainGUI.getNextHighestDepth());
    relearnGUI.itemList.setMask(relearnGUI.maskBg);
    for (var _loc3 = 0; _loc3 < moveArray.length; ++_loc3)
    {
        tempItem = relearnGUI.itemList.attachMovie("relearnItem", "relearnItem" + i, relearnGUI.itemList.getNextHighestDepth());
        tempItem._y = -103 + 56 * _loc3;
        tempItem.nameT.htmlText = "<b>" + moveIdToName(moveArray[_loc3]);
        tempItem.learnB.moveNum = _loc3;
        tempItem.learnB.onRelease = function ()
        {
            this.gotoAndStop(1);
            if (_root.learnMoves != true)
            {
                if (_root.money >= 50000)
                {
                    if (isBusy == false)
                    {
                        getTimestamp("relearnMove4", this.moveNum);
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money to learn that move.");
                } // end if
            } // end else if
        };
        assignMouseEvents(tempItem.learnB);
    } // end of for
    relearnGUI.scrollBar.onRelease = relearnGUI.scrollBar.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        _root.dragScrollbar = 0;
    };
    relearnGUI.scrollBar.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, this._x, 109, this._x, -88);
        _root.dragScrollbar = 15;
    };
    relearnGUI.scrollBar.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollBar.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.dragBg.onPress = function ()
    {
        relearnGUI.startDrag(false, -newWidth / 2 + relearnGUI._width / 2 - widthOffset, -newHeight / 2 + relearnGUI._height / 2 - heightOffset, newWidth / 2 - relearnGUI._width / 2 + widthOffset, newHeight / 2 - relearnGUI._height / 2 + heightOffset);
    };
    relearnGUI.dragBg.onRelease = relearnGUI.dragBg.onReleaseOutside = function ()
    {
        relearnGUI.stopDrag();
    };
    relearnGUI.scrollUpB.onRelease = relearnGUI.scrollUpB.onReleaseOutside = function ()
    {
        draggingRelearnUp = false;
        this.gotoAndStop(1);
    };
    relearnGUI.scrollUpB.onPress = function ()
    {
        draggingRelearnUp = true;
        this.gotoAndStop("click");
    };
    relearnGUI.scrollUpB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollUpB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.scrollDownB.onRelease = relearnGUI.scrollDownB.onReleaseOutside = function ()
    {
        draggingRelearnDown = false;
        this.gotoAndStop(1);
    };
    relearnGUI.scrollDownB.onPress = function ()
    {
        draggingRelearnDown = true;
        this.gotoAndStop("click");
    };
    relearnGUI.scrollDownB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollDownB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.exitB.onRelease = function ()
    {
        removeMovieClip (relearnGUI);
        guiUp = false;
        canMove = true;
        getTimestamp("exitRelearnList");
    };
    assignMouseEvents(relearnGUI.exitB);
} // End of the function
function showRelearnList5(moveArray)
{
    _root.relearnMoveArray = moveArray;
    relearnGUI = _root.mainGUI.attachMovie("relearnMovesGUI", "relearnGUI", _root.mainGUI.getNextHighestDepth());
    relearnGUI.itemList.setMask(relearnGUI.maskBg);
    for (var _loc3 = 0; _loc3 < moveArray.length; ++_loc3)
    {
        tempItem = relearnGUI.itemList.attachMovie("relearnItem", "relearnItem" + i, relearnGUI.itemList.getNextHighestDepth());
        tempItem._y = -103 + 56 * _loc3;
        tempItem.nameT.htmlText = "<b>" + moveIdToName(moveArray[_loc3]);
        tempItem.learnB.moveNum = _loc3;
        tempItem.learnB.onRelease = function ()
        {
            this.gotoAndStop(1);
            if (_root.learnMoves != true)
            {
                if (getInventoryAmount("Event Move Ticket") >= 1)
                {
                    if (isBusy == false)
                    {
                        getTimestamp("relearnMove5", this.moveNum);
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough Event Move Tickets to learn that move.");
                } // end if
            } // end else if
        };
        assignMouseEvents(tempItem.learnB);
    } // end of for
    relearnGUI.scrollBar.onRelease = relearnGUI.scrollBar.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        _root.dragScrollbar = 0;
    };
    relearnGUI.scrollBar.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, this._x, 109, this._x, -88);
        _root.dragScrollbar = 15;
    };
    relearnGUI.scrollBar.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollBar.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.dragBg.onPress = function ()
    {
        relearnGUI.startDrag(false, -newWidth / 2 + relearnGUI._width / 2 - widthOffset, -newHeight / 2 + relearnGUI._height / 2 - heightOffset, newWidth / 2 - relearnGUI._width / 2 + widthOffset, newHeight / 2 - relearnGUI._height / 2 + heightOffset);
    };
    relearnGUI.dragBg.onRelease = relearnGUI.dragBg.onReleaseOutside = function ()
    {
        relearnGUI.stopDrag();
    };
    relearnGUI.scrollUpB.onRelease = relearnGUI.scrollUpB.onReleaseOutside = function ()
    {
        draggingRelearnUp = false;
        this.gotoAndStop(1);
    };
    relearnGUI.scrollUpB.onPress = function ()
    {
        draggingRelearnUp = true;
        this.gotoAndStop("click");
    };
    relearnGUI.scrollUpB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollUpB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.scrollDownB.onRelease = relearnGUI.scrollDownB.onReleaseOutside = function ()
    {
        draggingRelearnDown = false;
        this.gotoAndStop(1);
    };
    relearnGUI.scrollDownB.onPress = function ()
    {
        draggingRelearnDown = true;
        this.gotoAndStop("click");
    };
    relearnGUI.scrollDownB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollDownB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.exitB.onRelease = function ()
    {
        removeMovieClip (relearnGUI);
        guiUp = false;
        canMove = true;
        getTimestamp("exitRelearnList");
    };
    assignMouseEvents(relearnGUI.exitB);
} // End of the function
function showRelearnList6(moveArray)
{
    _root.relearnMoveArray = moveArray;
    relearnGUI = _root.mainGUI.attachMovie("relearnMovesGUI", "relearnGUI", _root.mainGUI.getNextHighestDepth());
    relearnGUI.itemList.setMask(relearnGUI.maskBg);
    for (var _loc3 = 0; _loc3 < moveArray.length; ++_loc3)
    {
        tempItem = relearnGUI.itemList.attachMovie("relearnItem", "relearnItem" + i, relearnGUI.itemList.getNextHighestDepth());
        tempItem._y = -103 + 56 * _loc3;
        tempItem.nameT.htmlText = "<b>" + moveIdToName(Number(moveArray[_loc3]));
        tempItem.learnB.moveNum = _loc3;
        tempItem.learnB.onRelease = function ()
        {
            this.gotoAndStop(1);
            if (_root.learnMoves != true)
            {
                if (getInventoryAmount("Transfer Move Ticket") >= 1)
                {
                    if (isBusy == false)
                    {
                        getTimestamp("relearnMove6", this.moveNum);
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough Transfer Move Tickets to learn that move.");
                } // end if
            } // end else if
        };
        assignMouseEvents(tempItem.learnB);
    } // end of for
    relearnGUI.scrollBar.onRelease = relearnGUI.scrollBar.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        _root.dragScrollbar = 0;
    };
    relearnGUI.scrollBar.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, this._x, 109, this._x, -88);
        _root.dragScrollbar = 15;
    };
    relearnGUI.scrollBar.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollBar.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.dragBg.onPress = function ()
    {
        relearnGUI.startDrag(false, -newWidth / 2 + relearnGUI._width / 2 - widthOffset, -newHeight / 2 + relearnGUI._height / 2 - heightOffset, newWidth / 2 - relearnGUI._width / 2 + widthOffset, newHeight / 2 - relearnGUI._height / 2 + heightOffset);
    };
    relearnGUI.dragBg.onRelease = relearnGUI.dragBg.onReleaseOutside = function ()
    {
        relearnGUI.stopDrag();
    };
    relearnGUI.scrollUpB.onRelease = relearnGUI.scrollUpB.onReleaseOutside = function ()
    {
        draggingRelearnUp = false;
        this.gotoAndStop(1);
    };
    relearnGUI.scrollUpB.onPress = function ()
    {
        draggingRelearnUp = true;
        this.gotoAndStop("click");
    };
    relearnGUI.scrollUpB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollUpB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.scrollDownB.onRelease = relearnGUI.scrollDownB.onReleaseOutside = function ()
    {
        draggingRelearnDown = false;
        this.gotoAndStop(1);
    };
    relearnGUI.scrollDownB.onPress = function ()
    {
        draggingRelearnDown = true;
        this.gotoAndStop("click");
    };
    relearnGUI.scrollDownB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    relearnGUI.scrollDownB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    relearnGUI.exitB.onRelease = function ()
    {
        removeMovieClip (relearnGUI);
        guiUp = false;
        canMove = true;
        getTimestamp("exitRelearnList");
    };
    assignMouseEvents(relearnGUI.exitB);
} // End of the function
function loadStorageIcons(tabNumber)
{
    for (var _loc3 = 0; _loc3 < storagePerScreen; ++_loc3)
    {
        removeMovieClip (_root.mainGUI.storage["storageBar_" + _loc3]);
    } // end of for
    if (tabNumber == 1)
    {
        var tempStorage = storagePokemon;
    }
    else if (tabNumber == 2)
    {
        var tempStorage = storagePokemon2;
    }
    else if (tabNumber == 3)
    {
        var tempStorage = storagePokemon3;
    }
    else if (tabNumber == 4)
    {
        var tempStorage = storagePokemon4;
    }
    else if (tabNumber == 5)
    {
        var tempStorage = storagePokemon5;
    }
    else if (tabNumber == 6)
    {
        var tempStorage = storagePokemon6;
    }
    else if (tabNumber == 7)
    {
        var tempStorage = storagePokemon7;
    }
    else if (tabNumber == 8)
    {
        var tempStorage = storagePokemon8;
    }
    else if (tabNumber == 9)
    {
        var tempStorage = storagePokemon9;
    }
    else if (tabNumber == 10)
    {
        var tempStorage = storagePokemon10;
    } // end else if
    length = tempStorage.length;
    length = length - (storagePage - 1) * storagePerScreen;
    if (length > storagePerScreen)
    {
        length = storagePerScreen;
    } // end if
    for (var _loc3 = 0; _loc3 < length; ++_loc3)
    {
        _root.mainGUI.storage.attachMovie("storageBar", "storageBar_" + _loc3, _root.mainGUI.storage.getNextHighestDepth());
        if (_loc3 < 7)
        {
            _root.mainGUI.storage["storageBar_" + _loc3]._x = -190 + _loc3 * 63;
            _root.mainGUI.storage["storageBar_" + _loc3]._y = -40;
        }
        else if (_loc3 < 14)
        {
            _root.mainGUI.storage["storageBar_" + _loc3]._x = -190 + (_loc3 - 7) * 63;
            _root.mainGUI.storage["storageBar_" + _loc3]._y = 23;
        }
        else if (_loc3 < 21)
        {
            _root.mainGUI.storage["storageBar_" + _loc3]._x = -190 + (_loc3 - 14) * 63;
            _root.mainGUI.storage["storageBar_" + _loc3]._y = 86;
        } // end else if
        _root.mainGUI.storage["storageBar_" + _loc3].i.gotoAndStop(tempStorage[_loc3 + (storagePage - 1) * storagePerScreen].id);
        _root.mainGUI.storage["storageBar_" + _loc3].i.number = _loc3 + (storagePage - 1) * storagePerScreen + 1;
        _root.mainGUI.storage["storageBar_" + _loc3].i.tabNumber = tabNumber;
        _root.mainGUI.storage["storageBar_" + _loc3].i.lastClick = 0;
        _root.mainGUI.storage["storageBar_" + _loc3].i.x = _root.mainGUI.storage["storageBar_" + _loc3].i._x;
        _root.mainGUI.storage["storageBar_" + _loc3].i.y = _root.mainGUI.storage["storageBar_" + _loc3].i._y;
        if (tempStorage[_root.mainGUI.storage["storageBar_" + _loc3].i.number - 1].heldItem != "none")
        {
            _root.mainGUI.storage["storageBar_" + _loc3].i2.gotoAndStop(tempStorage[_root.mainGUI.storage["storageBar_" + _loc3].i.number - 1].heldItem);
            _root.mainGUI.storage["storageBar_" + _loc3].i2._width = Math.round(_root.mainGUI.storage["storageBar_" + _loc3].i2._width * 0.900000);
            _root.mainGUI.storage["storageBar_" + _loc3].i2._height = Math.round(_root.mainGUI.storage["storageBar_" + _loc3].i2._height * 0.900000);
        } // end if
        _root.mainGUI.storage["storageBar_" + _loc3].i.onPress = function ()
        {
            if (trading == false && battle == false)
            {
                this.startDrag();
                this._alpha = 75;
            } // end if
        };
        _root.mainGUI.storage["storageBar_" + _loc3].i.tempStorage = tempStorage;
        _root.mainGUI.storage["storageBar_" + _loc3].i.onRelease = _root.mainGUI.storage["storageBar_" + _loc3].i.onReleaseOutside = function ()
        {
            if (getTimer() - this.lastClick <= 350)
            {
                this.lastClick = 0;
                if (mainGUI.pokemonSummary._visible == false)
                {
                    mainGUI.pokemonSummary._visible = true;
                    pokemonSummaryNum = this.number - 1;
                    _root.tradePoke = this.tempStorage[this.number - 1];
                    setPokemonSummaryTrade(tradePoke, this.tabNumber, this.number);
                    mainGUI.pokemonSummary.swapDepths(mainGUI.getNextHighestDepth());
                }
                else if (pokemonSummaryNum != this.number - 1)
                {
                    mainGUI.pokemonSummary._visible = true;
                    pokemonSummaryNum = this.number - 1;
                    _root.tradePoke = this.tempStorage[this.number - 1];
                    setPokemonSummaryTrade(tradePoke, this.tabNumber, this.number);
                    mainGUI.pokemonSummary.swapDepths(mainGUI.getNextHighestDepth());
                }
                else
                {
                    mainGUI.pokemonSummary._visible = false;
                    pokemonSummaryNum = -1;
                } // end else if
            }
            else
            {
                this.lastClick = getTimer();
            } // end else if
            if (trading == false && battle == false)
            {
                stopDrag ();
                var _loc3 = {x: this._x, y: this._y};
                this._parent.localToGlobal(_loc3);
                if (_root.webClient)
                {
                    if (!(_loc3.x >= 261 && _loc3.x <= 763 && (_loc3.y >= 158 && _loc3.y <= 458)))
                    {
                        if (userPokemon.length < 6)
                        {
                            getTimestamp("reorderStoragePokemon", -1, this.number);
                        }
                        else
                        {
                            returnOldIcon(this, this.x, this.y);
                        } // end else if
                    }
                    else
                    {
                        returnOldIcon(this, this.x, this.y);
                    } // end else if
                }
                else if (!(_loc3.x >= 261 + widthOffset && _loc3.x <= 763 + widthOffset && (_loc3.y >= 158 + heightOffset && _loc3.y <= 458 + heightOffset)))
                {
                    if (userPokemon.length < 6)
                    {
                        getTimestamp("reorderStoragePokemon", -1, this.number);
                    }
                    else
                    {
                        returnOldIcon(this, this.x, this.y);
                    } // end else if
                }
                else
                {
                    returnOldIcon(this, this.x, this.y);
                } // end else if
            } // end else if
        };
    } // end of for
} // End of the function
function npcBill()
{
    if (hasItem("SS Anne Ticket") == false)
    {
        getTimestamp("getSSTicket");
    } // end if
    npcArray[0] = [7, 5, "down", "Bill", "npcBill", "Bill", ["The SS Anne is in Vermilion City. You better get moving!"]];
} // End of the function
function npcCaptain()
{
    if (hasItem("HM01 - Cut") == false)
    {
        getTimestamp("getHM", 1);
    } // end if
    npcArray[0] = [5, 4, "up", "Captain", false, "Captain", ["...Whew!", "Now that I’m not seasick anymore I guess it’s time.", "The SS Anne will set sail soon!", "Farewell, until our return to Vermilion City!"], 0];
} // End of the function
function npcOaksAidHM05()
{
    if (pokedexCaughtAmount >= 10 && pokedexCaughtAmount != undefined)
    {
        if (hasItem("HM05 - Flash") == false)
        {
            currentNPC = [];
            chatBox(["Congratulations, you have caught " + pokedexCaughtAmount + " kinds of Pokemon, so here is your reward."], "Oak\'s Aid");
            getTimestamp("getHM", 5);
        }
        else
        {
            currentNPC = [];
            chatBox(["I already gave you the reward!"], "Oak\'s Aid");
        } // end else if
    }
    else
    {
        currentNPC = [];
        chatBox(["You have only caught " + pokedexCaughtAmount + " kinds of Pokemon.", "You need to catch at least 10 before recieving the reward."], "Oak\'s Aid");
    } // end else if
} // End of the function
function npcFlyHM()
{
    if (hasItem("HM02 - Fly") == false)
    {
        getTimestamp("getHM", 2);
    } // end if
    npcArray[0] = [4, 4, "right", "Female 4", false, "Sora", ["HM02 is fly. It\'s a wonderously convenient move."], 0];
} // End of the function
function npcMrFugi()
{
    if (hasItem("Poke Flute") == false)
    {
        getTimestamp("getItem", "Poke Flute");
    } // end if
    npcArray[3] = [18, 9, "down", "Mr Fugi", false, "Mr. Fugi", ["Good luck on your journey."], 4];
} // End of the function
function npcSurf()
{
    if (hasItem("HM03 - Surf") == false)
    {
        getTimestamp("getHM", 3);
    } // end if
    npcArray[0] = [68, 52, "down", "Safari Zone Guy", false, "Darren", ["Surf is a wonderful HM. Why don’t you try it outside?"], 0];
} // End of the function
function npcLiftService()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        yesNoBox = _root.attachMovie("yesNoBox", "yesNoBox", _root.getNextHighestDepth());
        yesNoBox._x = newWidth / 2;
        yesNoBox._y = newHeight / 2;
        yesNoBox.nameT.htmlText = "<b>Lift Service";
        yesNoBox.msgT.text = "Take the lift?";
        yesNoBox.yesT.htmlText = "<b>Sure, let\'s go.";
        yesNoBox.noT.htmlText = "<b>No thanks.";
        assignMouseEvents(yesNoBox.yesB);
        assignMouseEvents(yesNoBox.noB);
        yesNoBox.yesB.onRelease = function ()
        {
            removeMovieClip (yesNoBox);
            if (_root.map == "Route 112")
            {
                globalAnimationObj.map = "Mt Chimney";
                globalAnimationObj.x = 19;
                globalAnimationObj.y = 24;
            }
            else
            {
                globalAnimationObj.map = "Route 112";
                globalAnimationObj.x = 38;
                globalAnimationObj.y = 42;
            } // end else if
            globalAnimationObj.animation = "fadeScreenTeleport";
        };
        yesNoBox.noB.onRelease = function ()
        {
            removeMovieClip (yesNoBox);
            guiUp = false;
            canMove = true;
        };
    } // end if
} // End of the function
function npcBillCinnabar()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        var _loc3 = _root.mainGUI.attachMovie("allButtonBox", "nineButtonBox", _root.mainGUI.getNextHighestDepth());
        _loc3.msgT.text = "Sail to:";
        _loc3.nameT.htmlText = "<b>Bill";
        for (var _loc2 = 1; _loc2 <= 9; ++_loc2)
        {
            assignMouseEvents(_loc3["b" + _loc2]);
        } // end of for
        _loc3.b1T.htmlText = "<b>One Island";
        _loc3.b2T.htmlText = "<b>Two Island";
        _loc3.b3T.htmlText = "<b>Three Island";
        _loc3.b4T.htmlText = "<b>Four Island";
        _loc3.b5T.htmlText = "<b>Five Island";
        _loc3.b6T.htmlText = "<b>Six Island";
        _loc3.b7T.htmlText = "<b>Seven Island";
        _loc3.b8T.htmlText = "<b>Nevermind";
        _loc3.b1.onRelease = function ()
        {
            removeMovieClip (_root.mainGUI.nineButtonBox);
            globalAnimationObj.map = "One Island Ferry Station";
            globalAnimationObj.x = 9;
            globalAnimationObj.y = 5;
            globalAnimationObj.animation = "fadeScreenTeleport";
        };
        _loc3.b2.onRelease = function ()
        {
            removeMovieClip (_root.mainGUI.nineButtonBox);
            globalAnimationObj.map = "Two Island Ferry Station";
            globalAnimationObj.x = 9;
            globalAnimationObj.y = 5;
            globalAnimationObj.animation = "fadeScreenTeleport";
        };
        _loc3.b3.onRelease = function ()
        {
            removeMovieClip (_root.mainGUI.nineButtonBox);
            globalAnimationObj.map = "Three Island Ferry Station";
            globalAnimationObj.x = 9;
            globalAnimationObj.y = 5;
            globalAnimationObj.animation = "fadeScreenTeleport";
        };
        _loc3.b4.onRelease = function ()
        {
            removeMovieClip (_root.mainGUI.nineButtonBox);
            globalAnimationObj.map = "Four Island";
            globalAnimationObj.x = 13;
            globalAnimationObj.y = 51;
            globalAnimationObj.animation = "fadeScreenTeleport";
        };
        _loc3.b5.onRelease = function ()
        {
            removeMovieClip (_root.mainGUI.nineButtonBox);
            globalAnimationObj.map = "Five Island";
            globalAnimationObj.x = 11;
            globalAnimationObj.y = 38;
            globalAnimationObj.animation = "fadeScreenTeleport";
        };
        _loc3.b6.onRelease = function ()
        {
            removeMovieClip (_root.mainGUI.nineButtonBox);
            globalAnimationObj.map = "Six Island";
            globalAnimationObj.x = 16;
            globalAnimationObj.y = 40;
            globalAnimationObj.animation = "fadeScreenTeleport";
        };
        _loc3.b7.onRelease = function ()
        {
            removeMovieClip (_root.mainGUI.nineButtonBox);
            globalAnimationObj.map = "Seven Island";
            globalAnimationObj.x = 41;
            globalAnimationObj.y = 91;
            globalAnimationObj.animation = "fadeScreenTeleport";
        };
        _loc3.b8.onRelease = function ()
        {
            removeMovieClip (_root.mainGUI.nineButtonBox);
            guiUp = false;
            canMove = true;
        };
    } // end if
} // End of the function
function npcBillOneIslandFerryStation()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        var _loc3 = _root.mainGUI.attachMovie("nineButtonBox", "nineButtonBox", _root.mainGUI.getNextHighestDepth());
        _loc3.msgT.text = "Sail to:";
        _loc3.nameT.htmlText = "<b>Bill";
        for (var _loc2 = 1; _loc2 <= 9; ++_loc2)
        {
            assignMouseEvents(_loc3["b" + _loc2]);
        } // end of for
        _loc3.b1T.htmlText = "<b>Cinnabar";
        _loc3.b2T.htmlText = "<b>One Island";
        _loc3.b3T.htmlText = "<b>Two Island";
        _loc3.b4T.htmlText = "<b>Three Island";
        _loc3.b5T.htmlText = "<b>Four Island";
        _loc3.b6T.htmlText = "<b>Five Island";
        _loc3.b7T.htmlText = "<b>Six Island";
        _loc3.b8T.htmlText = "<b>Seven Island";
        _loc3.b9T.htmlText = "<b>Nevermind";
        _loc3.b1.onRelease = function ()
        {
            removeMovieClip (_root.mainGUI.nineButtonBox);
            globalAnimationObj.map = "Cinnabar Island";
            globalAnimationObj.x = 36;
            globalAnimationObj.y = 14;
            globalAnimationObj.animation = "fadeScreenTeleport";
        };
        _loc3.b2.onRelease = function ()
        {
            removeMovieClip (_root.mainGUI.nineButtonBox);
            globalAnimationObj.map = "One Island Ferry Station";
            globalAnimationObj.x = 9;
            globalAnimationObj.y = 5;
            globalAnimationObj.animation = "fadeScreenTeleport";
        };
        _loc3.b3.onRelease = function ()
        {
            removeMovieClip (_root.mainGUI.nineButtonBox);
            globalAnimationObj.map = "Two Island Ferry Station";
            globalAnimationObj.x = 9;
            globalAnimationObj.y = 5;
            globalAnimationObj.animation = "fadeScreenTeleport";
        };
        _loc3.b4.onRelease = function ()
        {
            removeMovieClip (_root.mainGUI.nineButtonBox);
            globalAnimationObj.map = "Three Island Ferry Station";
            globalAnimationObj.x = 9;
            globalAnimationObj.y = 5;
            globalAnimationObj.animation = "fadeScreenTeleport";
        };
        _loc3.b5.onRelease = function ()
        {
            removeMovieClip (_root.mainGUI.nineButtonBox);
            globalAnimationObj.map = "Four Island";
            globalAnimationObj.x = 13;
            globalAnimationObj.y = 51;
            globalAnimationObj.animation = "fadeScreenTeleport";
        };
        _loc3.b6.onRelease = function ()
        {
            removeMovieClip (_root.mainGUI.nineButtonBox);
            globalAnimationObj.map = "Five Island";
            globalAnimationObj.x = 11;
            globalAnimationObj.y = 38;
            globalAnimationObj.animation = "fadeScreenTeleport";
        };
        _loc3.b7.onRelease = function ()
        {
            removeMovieClip (_root.mainGUI.nineButtonBox);
            globalAnimationObj.map = "Six Island";
            globalAnimationObj.x = 16;
            globalAnimationObj.y = 40;
            globalAnimationObj.animation = "fadeScreenTeleport";
        };
        _loc3.b8.onRelease = function ()
        {
            removeMovieClip (_root.mainGUI.nineButtonBox);
            globalAnimationObj.map = "Seven Island";
            globalAnimationObj.x = 41;
            globalAnimationObj.y = 91;
            globalAnimationObj.animation = "fadeScreenTeleport";
        };
        _loc3.b9.onRelease = function ()
        {
            removeMovieClip (_root.mainGUI.nineButtonBox);
            guiUp = false;
            canMove = true;
        };
    } // end if
} // End of the function
function hideButtons(target, startingNum)
{
    for (var _loc1 = startingNum; _loc1 < 9; ++_loc1)
    {
        target["b" + _loc1 + "T"].htmlText = "";
        target["b" + _loc1]._visible = false;
    } // end of for
} // End of the function
function setKantoSailButtons(target)
{
    if (_root.map == "Vermilion City")
    {
        target.b1T.htmlText = "<b>Cinnabar Island ($3,000)";
        target.b2T.htmlText = "<b>Nevermind";
        hideButtons(target, 3);
        target.b1.onRelease = function ()
        {
            if (money >= 3000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Volcano Badge"))
                    {
                        getTimestamp("removeMoney", 3000);
                        money = money - 3000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Cinnabar Island";
                        globalAnimationObj.x = 46;
                        globalAnimationObj.y = 27;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Volcano Badge to ferry to Cinnabar Island!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    }
    else if (_root.map == "Cinnabar Island")
    {
        target.b1T.htmlText = "<b>Vermilion City ($3,000)";
        target.b2T.htmlText = "<b>Nevermind";
        hideButtons(target, 3);
        target.b1.onRelease = function ()
        {
            if (money >= 3000)
            {
                if (_root.isBusy == false)
                {
                    getTimestamp("removeMoney", 3000);
                    money = money - 3000;
                    mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                    removeMovieClip (target);
                    globalAnimationObj.map = "Vermilion City";
                    globalAnimationObj.x = 36;
                    globalAnimationObj.y = 59;
                    globalAnimationObj.animation = "fadeScreenTeleport";
                } // end if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    }
    else
    {
        target.b1T.htmlText = "<b>Vermilion City ($3,000)";
        target.b2T.htmlText = "<b>Cinnabar Island ($3,000)";
        target.b3T.htmlText = "<b>Nevermind";
        hideButtons(target, 4);
        target.b1.onRelease = function ()
        {
            if (money >= 3000)
            {
                if (_root.isBusy == false)
                {
                    getTimestamp("removeMoney", 3000);
                    money = money - 3000;
                    mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                    removeMovieClip (target);
                    globalAnimationObj.map = "Vermilion City";
                    globalAnimationObj.x = 36;
                    globalAnimationObj.y = 59;
                    globalAnimationObj.animation = "fadeScreenTeleport";
                } // end if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            if (money >= 3000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Volcano Badge"))
                    {
                        getTimestamp("removeMoney", 3000);
                        money = money - 3000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Cinnabar Island";
                        globalAnimationObj.x = 46;
                        globalAnimationObj.y = 27;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Volcano Badge to ferry to Cinnabar Island!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b3.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    } // end else if
} // End of the function
function setJohtoSailButtons(target)
{
    if (_root.map == "Blackthorn City")
    {
        target.b1T.htmlText = "<b>Olivine City ($6,000)";
        target.b2T.htmlText = "<b>Nevermind";
        hideButtons(target, 3);
        target.b1.onRelease = function ()
        {
            if (money >= 6000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Fog Badge"))
                    {
                        getTimestamp("removeMoney", 6000);
                        money = money - 6000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Olivine City";
                        globalAnimationObj.x = 34;
                        globalAnimationObj.y = 72;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Fog Badge to ferry into Olivine City!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    }
    else if (_root.map == "Olivine City")
    {
        target.b1T.htmlText = "<b>Blackthorn City ($6,000)";
        target.b2T.htmlText = "<b>Nevermind";
        hideButtons(target, 3);
        target.b1.onRelease = function ()
        {
            if (money >= 6000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Rising Badge"))
                    {
                        getTimestamp("removeMoney", 6000);
                        money = money - 6000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Blackthorn City";
                        globalAnimationObj.x = 67;
                        globalAnimationObj.y = 58;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Rising Badge to ferry into Blackthorn City!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    }
    else
    {
        target.b1T.htmlText = "<b>Olivine City ($6,000)";
        target.b2T.htmlText = "<b>Blackthorn City ($6,000)";
        target.b3T.htmlText = "<b>Nevermind";
        hideButtons(target, 4);
        target.b1.onRelease = function ()
        {
            if (money >= 6000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Fog Badge"))
                    {
                        getTimestamp("removeMoney", 6000);
                        money = money - 6000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Olivine City";
                        globalAnimationObj.x = 34;
                        globalAnimationObj.y = 72;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Fog Badge to ferry into Olivine City!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            if (money >= 6000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Rising Badge"))
                    {
                        getTimestamp("removeMoney", 6000);
                        money = money - 6000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Blackthorn City";
                        globalAnimationObj.x = 67;
                        globalAnimationObj.y = 58;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Rising Badge to ferry into Blackthorn City!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b3.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    } // end else if
} // End of the function
function setHoennSailButtons(target)
{
    if (_root.map == "Slateport City")
    {
        target.b1T.htmlText = "<b>Dewford Town ($9,000)";
        target.b2T.htmlText = "<b>Lilycove City ($9,000)";
        if (_root.hasItem("Old Sea Map"))
        {
            target.b3T.htmlText = "<b>Faraway Island ($50,000)";
            target.b4T.htmlText = "<b>Nevermind";
            hideButtons(target, 5);
        }
        else
        {
            target.b3T.htmlText = "<b>Nevermind";
            hideButtons(target, 4);
        } // end else if
        target.b1.onRelease = function ()
        {
            if (money >= 9000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Knuckle Badge"))
                    {
                        getTimestamp("removeMoney", 9000);
                        money = money - 9000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Dewford Town";
                        globalAnimationObj.x = 28;
                        globalAnimationObj.y = 15;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Knuckle Badge to ferry into Dewford Town!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            if (money >= 9000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Feather Badge"))
                    {
                        getTimestamp("removeMoney", 9000);
                        money = money - 9000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Lilycove City";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 47;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Feather Badge to ferry into Lilycove City!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        if (_root.hasItem("Old Sea Map"))
        {
            target.b3.onRelease = function ()
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Faraway Island";
                        globalAnimationObj.x = 24;
                        globalAnimationObj.y = 28;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            };
            target.b4.onRelease = function ()
            {
                removeMovieClip (target);
                guiUp = false;
                canMove = true;
            };
        }
        else
        {
            target.b3.onRelease = function ()
            {
                removeMovieClip (target);
                guiUp = false;
                canMove = true;
            };
        } // end else if
    }
    else if (_root.map == "Lilycove City")
    {
        target.b1T.htmlText = "<b>Dewford Town ($9,000)";
        target.b2T.htmlText = "<b>Slateport City ($9,000)";
        if (_root.hasItem("Old Sea Map"))
        {
            target.b3T.htmlText = "<b>Faraway Island ($50,000)";
            target.b4T.htmlText = "<b>Nevermind";
            hideButtons(target, 5);
        }
        else
        {
            target.b3T.htmlText = "<b>Nevermind";
            hideButtons(target, 4);
        } // end else if
        target.b1.onRelease = function ()
        {
            if (money >= 9000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Knuckle Badge"))
                    {
                        getTimestamp("removeMoney", 9000);
                        money = money - 9000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Dewford Town";
                        globalAnimationObj.x = 28;
                        globalAnimationObj.y = 15;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Knuckle Badge to ferry into Dewford Town!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            if (money >= 9000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Knuckle Badge"))
                    {
                        getTimestamp("removeMoney", 9000);
                        money = money - 9000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Slateport City";
                        globalAnimationObj.x = 56;
                        globalAnimationObj.y = 18;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Knuckle Badge to ferry into Slateport City!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        if (_root.hasItem("Old Sea Map"))
        {
            target.b3.onRelease = function ()
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Faraway Island";
                        globalAnimationObj.x = 24;
                        globalAnimationObj.y = 28;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            };
            target.b4.onRelease = function ()
            {
                removeMovieClip (target);
                guiUp = false;
                canMove = true;
            };
        }
        else
        {
            target.b3.onRelease = function ()
            {
                removeMovieClip (target);
                guiUp = false;
                canMove = true;
            };
        } // end else if
    }
    else if (_root.map == "Dewford Town")
    {
        target.b1T.htmlText = "<b>Slateport City ($9,000)";
        target.b2T.htmlText = "<b>Lilycove City ($9,000)";
        if (_root.hasItem("Old Sea Map"))
        {
            target.b3T.htmlText = "<b>Faraway Island ($50,000)";
            target.b4T.htmlText = "<b>Nevermind";
            hideButtons(target, 5);
        }
        else
        {
            target.b3T.htmlText = "<b>Nevermind";
            hideButtons(target, 4);
        } // end else if
        target.b1.onRelease = function ()
        {
            if (money >= 9000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Knuckle Badge"))
                    {
                        getTimestamp("removeMoney", 9000);
                        money = money - 9000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Slateport City";
                        globalAnimationObj.x = 56;
                        globalAnimationObj.y = 18;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Knuckle Badge to ferry into Slateport City!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            if (money >= 9000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Feather Badge"))
                    {
                        getTimestamp("removeMoney", 9000);
                        money = money - 9000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Lilycove City";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 47;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Feather Badge to ferry into Lilycove City!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        if (_root.hasItem("Old Sea Map"))
        {
            target.b3.onRelease = function ()
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Faraway Island";
                        globalAnimationObj.x = 24;
                        globalAnimationObj.y = 28;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            };
            target.b4.onRelease = function ()
            {
                removeMovieClip (target);
                guiUp = false;
                canMove = true;
            };
        }
        else
        {
            target.b3.onRelease = function ()
            {
                removeMovieClip (target);
                guiUp = false;
                canMove = true;
            };
        } // end else if
    }
    else if (_root.map == "Faraway Island")
    {
        target.b1T.htmlText = "<b>Dewford Town ($9,000)";
        target.b2T.htmlText = "<b>Slateport City ($9,000)";
        target.b3T.htmlText = "<b>Lilycove City ($9,000)";
        target.b4T.htmlText = "<b>Nevermind";
        hideButtons(target, 5);
        target.b1.onRelease = function ()
        {
            if (money >= 9000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Knuckle Badge"))
                    {
                        getTimestamp("removeMoney", 9000);
                        money = money - 9000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Dewford Town";
                        globalAnimationObj.x = 28;
                        globalAnimationObj.y = 15;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Knuckle Badge to ferry into Dewford Town!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            if (money >= 9000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Knuckle Badge"))
                    {
                        getTimestamp("removeMoney", 9000);
                        money = money - 9000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Slateport City";
                        globalAnimationObj.x = 56;
                        globalAnimationObj.y = 18;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Knuckle Badge to ferry into Slateport City!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b3.onRelease = function ()
        {
            if (money >= 9000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Feather Badge"))
                    {
                        getTimestamp("removeMoney", 9000);
                        money = money - 9000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Lilycove City";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 47;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Feather Badge to ferry into Lilycove City!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b4.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    }
    else
    {
        target.b1T.htmlText = "<b>Dewford Town ($9,000)";
        target.b2T.htmlText = "<b>Slateport City ($9,000)";
        target.b3T.htmlText = "<b>Lilycove City ($9,000)";
        if (_root.hasItem("Old Sea Map"))
        {
            target.b4T.htmlText = "<b>Faraway Island ($50,000)";
            target.b5T.htmlText = "<b>Nevermind";
            hideButtons(target, 6);
        }
        else
        {
            target.b4T.htmlText = "<b>Nevermind";
            hideButtons(target, 5);
        } // end else if
        target.b1.onRelease = function ()
        {
            if (money >= 9000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Knuckle Badge"))
                    {
                        getTimestamp("removeMoney", 9000);
                        money = money - 9000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Dewford Town";
                        globalAnimationObj.x = 28;
                        globalAnimationObj.y = 15;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Knuckle Badge to ferry into Dewford Town!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            if (money >= 9000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Knuckle Badge"))
                    {
                        getTimestamp("removeMoney", 9000);
                        money = money - 9000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Slateport City";
                        globalAnimationObj.x = 56;
                        globalAnimationObj.y = 18;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Knuckle Badge to ferry into Slateport City!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b3.onRelease = function ()
        {
            if (money >= 9000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Feather Badge"))
                    {
                        getTimestamp("removeMoney", 9000);
                        money = money - 9000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Lilycove City";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 47;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need the Feather Badge to ferry into Lilycove City!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        if (_root.hasItem("Old Sea Map"))
        {
            target.b4.onRelease = function ()
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Faraway Island";
                        globalAnimationObj.x = 24;
                        globalAnimationObj.y = 28;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            };
            target.b5.onRelease = function ()
            {
                removeMovieClip (target);
                guiUp = false;
                canMove = true;
            };
        }
        else
        {
            target.b4.onRelease = function ()
            {
                removeMovieClip (target);
                guiUp = false;
                canMove = true;
            };
        } // end else if
    } // end else if
} // End of the function
function setSinnohSailButtons(target)
{
    target.b6._visible = true;
    target.b7._visible = true;
    if (_root.map == "Twinleaf Town")
    {
        target.b1T.htmlText = "<b>Canalave City ($12,000)";
        target.b2T.htmlText = "<b>Snowpoint City ($12,000)";
        target.b3T.htmlText = "<b>Sunnyshore City ($12,000)";
        target.b4T.htmlText = "<b>Battle Zone ($50,000)";
        target.b5T.htmlText = "<b>New Moon Island ($50,000)";
        target.b6T.htmlText = "<b>Full Moon Island ($50,000)";
        target.b7T.htmlText = "<b>Nevermind";
        target.b1.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Relic Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Canalave Boat Station";
                        globalAnimationObj.x = 8;
                        globalAnimationObj.y = 5;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Relic Badge to sail to Canalave City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Mine Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Snowpoint City";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 51;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Mine Badge to sail to Snowpoint City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b3.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Beacon Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Sunnyshore City";
                        globalAnimationObj.x = 30;
                        globalAnimationObj.y = 3;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Beacon Badge to sail to Sunnyshore City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b4.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Fight Area";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 23;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to Battle Zone.");
            } // end else if
        };
        target.b5.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "New Moon Island";
                        globalAnimationObj.x = 29;
                        globalAnimationObj.y = 31;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to New Moon Island.");
            } // end else if
        };
        target.b6.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Full Moon Island";
                        globalAnimationObj.x = 19;
                        globalAnimationObj.y = 30;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to Full Moon Island.");
            } // end else if
        };
        target.b7.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    }
    else if (_root.map == "Canalave Boat Station")
    {
        target.b1T.htmlText = "<b>Twinleaf Town ($12,000)";
        target.b2T.htmlText = "<b>Snowpoint City ($12,000)";
        target.b3T.htmlText = "<b>Sunnyshore City ($12,000)";
        target.b4T.htmlText = "<b>Battle Zone ($50,000)";
        target.b5T.htmlText = "<b>New Moon Island ($50,000)";
        target.b6T.htmlText = "<b>Full Moon Island ($50,000)";
        target.b7T.htmlText = "<b>Nevermind";
        target.b1.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasQuestArray("Hoenn Elite Four"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Twinleaf Town";
                        globalAnimationObj.x = 20;
                        globalAnimationObj.y = 30;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to beat the Hoenn Elite Four to ferry into Sinnoh!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Mine Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Snowpoint City";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 51;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Mine Badge to sail to Snowpoint City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b3.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Beacon Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Sunnyshore City";
                        globalAnimationObj.x = 30;
                        globalAnimationObj.y = 3;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Beacon Badge to sail to Sunnyshore City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b4.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Fight Area";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 23;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to Battle Zone.");
            } // end else if
        };
        target.b5.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "New Moon Island";
                        globalAnimationObj.x = 29;
                        globalAnimationObj.y = 31;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to New Moon Island.");
            } // end else if
        };
        target.b6.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Full Moon Island";
                        globalAnimationObj.x = 19;
                        globalAnimationObj.y = 30;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to Full Moon Island.");
            } // end else if
        };
        target.b7.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    }
    else if (_root.map == "Snowpoint City")
    {
        target.b1T.htmlText = "<b>Twinleaf Town ($12,000)";
        target.b2T.htmlText = "<b>Canalave City ($12,000)";
        target.b3T.htmlText = "<b>Sunnyshore City ($12,000)";
        target.b4T.htmlText = "<b>Battle Zone ($50,000)";
        target.b5T.htmlText = "<b>New Moon Island ($50,000)";
        target.b6T.htmlText = "<b>Full Moon Island ($50,000)";
        target.b7T.htmlText = "<b>Nevermind";
        target.b1.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasQuestArray("Hoenn Elite Four"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Twinleaf Town";
                        globalAnimationObj.x = 20;
                        globalAnimationObj.y = 30;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to beat the Hoenn Elite Four to ferry into Sinnoh!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Relic Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Canalave Boat Station";
                        globalAnimationObj.x = 8;
                        globalAnimationObj.y = 5;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Relic Badge to sail to Canalave City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b3.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Beacon Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Sunnyshore City";
                        globalAnimationObj.x = 30;
                        globalAnimationObj.y = 3;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Beacon Badge to sail to Sunnyshore City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b4.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Fight Area";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 23;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to Battle Zone.");
            } // end else if
        };
        target.b5.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "New Moon Island";
                        globalAnimationObj.x = 29;
                        globalAnimationObj.y = 31;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to New Moon Island.");
            } // end else if
        };
        target.b6.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Full Moon Island";
                        globalAnimationObj.x = 19;
                        globalAnimationObj.y = 30;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to Full Moon Island.");
            } // end else if
        };
        target.b7.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    }
    else if (_root.map == "Sunnyshore City")
    {
        target.b1T.htmlText = "<b>Twinleaf Town ($12,000)";
        target.b2T.htmlText = "<b>Canalave City ($12,000)";
        target.b3T.htmlText = "<b>Snowpoint City ($12,000)";
        target.b4T.htmlText = "<b>Battle Zone ($50,000)";
        target.b5T.htmlText = "<b>New Moon Island ($50,000)";
        target.b6T.htmlText = "<b>Full Moon Island ($50,000)";
        target.b7T.htmlText = "<b>Nevermind";
        target.b1.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasQuestArray("Hoenn Elite Four"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Twinleaf Town";
                        globalAnimationObj.x = 20;
                        globalAnimationObj.y = 30;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to beat the Hoenn Elite Four to ferry into Sinnoh!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Relic Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Canalave Boat Station";
                        globalAnimationObj.x = 8;
                        globalAnimationObj.y = 5;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Relic Badge to sail to Canalave City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b3.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Mine Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Snowpoint City";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 51;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Mine Badge to sail to Snowpoint City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b4.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Fight Area";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 23;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to Battle Zone.");
            } // end else if
        };
        target.b5.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "New Moon Island";
                        globalAnimationObj.x = 29;
                        globalAnimationObj.y = 31;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to New Moon Island.");
            } // end else if
        };
        target.b6.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Full Moon Island";
                        globalAnimationObj.x = 19;
                        globalAnimationObj.y = 30;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to Full Moon Island.");
            } // end else if
        };
        target.b7.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    }
    else if (_root.map == "New Moon Island")
    {
        target.b1T.htmlText = "<b>Twinleaf Town ($12,000)";
        target.b2T.htmlText = "<b>Canalave City ($12,000)";
        target.b3T.htmlText = "<b>Snowpoint City ($12,000)";
        target.b4T.htmlText = "<b>Sunnyshore City ($12,000)";
        target.b5T.htmlText = "<b>Battle Zone ($50,000)";
        target.b6T.htmlText = "<b>Full Moon Island ($50,000)";
        target.b7T.htmlText = "<b>Nevermind";
        hideButtons(target, 8);
        target.b1.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasQuestArray("Hoenn Elite Four"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Twinleaf Town";
                        globalAnimationObj.x = 20;
                        globalAnimationObj.y = 30;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to beat the Hoenn Elite Four to ferry into Sinnoh!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Relic Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Canalave Boat Station";
                        globalAnimationObj.x = 8;
                        globalAnimationObj.y = 5;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Relic Badge to sail to Canalave City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b3.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Mine Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Snowpoint City";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 51;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Mine Badge to sail to Snowpoint City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b4.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Beacon Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Sunnyshore City";
                        globalAnimationObj.x = 30;
                        globalAnimationObj.y = 3;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Beacon Badge to sail to Sunnyshore City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b5.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Fight Area";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 23;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to Battle Zone.");
            } // end else if
        };
        target.b6.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Full Moon Island";
                        globalAnimationObj.x = 19;
                        globalAnimationObj.y = 30;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to Full Moon Island.");
            } // end else if
        };
        target.b7.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    }
    else if (_root.map == "Full Moon Island")
    {
        target.b1T.htmlText = "<b>Twinleaf Town ($12,000)";
        target.b2T.htmlText = "<b>Canalave City ($12,000)";
        target.b3T.htmlText = "<b>Snowpoint City ($12,000)";
        target.b4T.htmlText = "<b>Sunnyshore City ($12,000)";
        target.b5T.htmlText = "<b>Battle Zone ($50,000)";
        target.b6T.htmlText = "<b>New Moon Island ($50,000)";
        target.b7T.htmlText = "<b>Nevermind";
        hideButtons(target, 8);
        target.b1.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasQuestArray("Hoenn Elite Four"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Twinleaf Town";
                        globalAnimationObj.x = 20;
                        globalAnimationObj.y = 30;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to beat the Hoenn Elite Four to ferry into Sinnoh!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Relic Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Canalave Boat Station";
                        globalAnimationObj.x = 8;
                        globalAnimationObj.y = 5;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Relic Badge to sail to Canalave City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b3.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Mine Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Snowpoint City";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 51;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Mine Badge to sail to Snowpoint City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b4.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Beacon Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Sunnyshore City";
                        globalAnimationObj.x = 30;
                        globalAnimationObj.y = 3;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Beacon Badge to sail to Sunnyshore City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b5.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Fight Area";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 23;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to Battle Zone.");
            } // end else if
        };
        target.b6.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "New Moon Island";
                        globalAnimationObj.x = 29;
                        globalAnimationObj.y = 31;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to New Moon Island.");
            } // end else if
        };
        target.b7.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    }
    else if (_root.map == "Fight Area")
    {
        target.b1T.htmlText = "<b>Twinleaf Town ($12,000)";
        target.b2T.htmlText = "<b>Canalave City ($12,000)";
        target.b3T.htmlText = "<b>Snowpoint City ($12,000)";
        target.b4T.htmlText = "<b>Sunnyshore City ($12,000)";
        target.b5T.htmlText = "<b>New Moon Island ($50,000)";
        target.b6T.htmlText = "<b>Full Moon Island ($50,000)";
        target.b7T.htmlText = "<b>Nevermind";
        hideButtons(target, 8);
        target.b1.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasQuestArray("Hoenn Elite Four"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Twinleaf Town";
                        globalAnimationObj.x = 20;
                        globalAnimationObj.y = 30;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to beat the Hoenn Elite Four to ferry into Sinnoh!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Relic Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Canalave Boat Station";
                        globalAnimationObj.x = 8;
                        globalAnimationObj.y = 5;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Relic Badge to sail to Canalave City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b3.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Mine Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Snowpoint City";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 51;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Mine Badge to sail to Snowpoint City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b4.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Beacon Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Sunnyshore City";
                        globalAnimationObj.x = 30;
                        globalAnimationObj.y = 3;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Beacon Badge to sail to Sunnyshore City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b5.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "New Moon Island";
                        globalAnimationObj.x = 29;
                        globalAnimationObj.y = 31;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to New Moon Island.");
            } // end else if
        };
        target.b6.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Full Moon Island";
                        globalAnimationObj.x = 19;
                        globalAnimationObj.y = 30;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to Full Moon Island.");
            } // end else if
        };
        target.b7.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    }
    else
    {
        target.b1T.htmlText = "<b>Twinleaf Town ($12,000)";
        target.b2T.htmlText = "<b>Canalave City ($12,000)";
        target.b3T.htmlText = "<b>Snowpoint City ($12,000)";
        target.b4T.htmlText = "<b>Sunnyshore City ($12,000)";
        target.b5T.htmlText = "<b>Battle Zone ($50,000)";
        target.b6T.htmlText = "<b>New Moon Island ($50,000)";
        target.b7T.htmlText = "<b>Full Moon Island ($50,000)";
        target.b8T.htmlText = "<b>Nevermind";
        target.b8._visible = true;
        target.b1.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasQuestArray("Hoenn Elite Four"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Twinleaf Town";
                        globalAnimationObj.x = 20;
                        globalAnimationObj.y = 30;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to beat the Hoenn Elite Four to ferry into Sinnoh!");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b2.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Relic Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Canalave Boat Station";
                        globalAnimationObj.x = 8;
                        globalAnimationObj.y = 5;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Relic Badge to sail to Canalave City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b3.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Mine Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Snowpoint City";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 51;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Mine Badge to sail to Snowpoint City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b4.onRelease = function ()
        {
            if (money >= 12000)
            {
                if (_root.isBusy == false)
                {
                    if (hasBadge("Beacon Badge"))
                    {
                        getTimestamp("removeMoney", 12000);
                        money = money - 12000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Sunnyshore City";
                        globalAnimationObj.x = 30;
                        globalAnimationObj.y = 3;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    }
                    else
                    {
                        systemMessage("You need to have the Beacon Badge to sail to Sunnyshore City.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You don\'t have enough money.");
            } // end else if
        };
        target.b5.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Fight Area";
                        globalAnimationObj.x = 12;
                        globalAnimationObj.y = 23;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to Battle Zone.");
            } // end else if
        };
        target.b6.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "New Moon Island";
                        globalAnimationObj.x = 29;
                        globalAnimationObj.y = 31;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to New Moon Island.");
            } // end else if
        };
        target.b7.onRelease = function ()
        {
            if (hasQuestArray("Sinnoh Elite Four"))
            {
                if (money >= 50000)
                {
                    if (_root.isBusy == false)
                    {
                        getTimestamp("removeMoney", 50000);
                        money = money - 50000;
                        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                        removeMovieClip (target);
                        globalAnimationObj.map = "Full Moon Island";
                        globalAnimationObj.x = 19;
                        globalAnimationObj.y = 30;
                        globalAnimationObj.animation = "fadeScreenTeleport";
                    } // end if
                }
                else
                {
                    systemMessage("You don\'t have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to have defeated the Sinnoh Elite Four to sail to Full Moon Island.");
            } // end else if
        };
        target.b8.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    } // end else if
} // End of the function
function setMapButton(mapName)
{
    if (mapName == "Nuvema Town")
    {
        if (money >= 15000)
        {
            if (_root.isBusy == false)
            {
                if (hasQuestArray("Sinnoh Elite Four"))
                {
                    getTimestamp("removeMoney", 15000);
                    money = money - 15000;
                    mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                    removeMovieClip (target);
                    globalAnimationObj.map = "Nuvema Town";
                    globalAnimationObj.x = 19;
                    globalAnimationObj.y = 39;
                    globalAnimationObj.animation = "fadeScreenTeleport";
                }
                else
                {
                    systemMessage("You need to defeat the Sinnoh Elite Four to ferry to Nuvema Town!");
                } // end if
            } // end else if
        }
        else
        {
            systemMessage("You don\'t have enough money.");
        } // end else if
    }
    else if (mapName == "Castelia City")
    {
        if (money >= 15000)
        {
            if (_root.isBusy == false)
            {
                if (hasBadge("Insect Badge"))
                {
                    getTimestamp("removeMoney", 15000);
                    money = money - 15000;
                    mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                    removeMovieClip (target);
                    globalAnimationObj.map = "Castelia City";
                    globalAnimationObj.x = 67;
                    globalAnimationObj.y = 34;
                    globalAnimationObj.animation = "fadeScreenTeleport";
                }
                else
                {
                    systemMessage("You need the Insect Badge to ferry to Castelia City!");
                } // end if
            } // end else if
        }
        else
        {
            systemMessage("You don\'t have enough money.");
        } // end else if
    }
    else if (mapName == "Driftveil City")
    {
        if (money >= 15000)
        {
            if (_root.isBusy == false)
            {
                if (hasBadge("Quake Badge"))
                {
                    getTimestamp("removeMoney", 15000);
                    money = money - 15000;
                    mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                    removeMovieClip (target);
                    globalAnimationObj.map = "Driftveil City";
                    globalAnimationObj.x = 59;
                    globalAnimationObj.y = 33;
                    globalAnimationObj.animation = "fadeScreenTeleport";
                }
                else
                {
                    systemMessage("You need the Quake Badge to ferry to Driftveil City!");
                } // end if
            } // end else if
        }
        else
        {
            systemMessage("You don\'t have enough money.");
        } // end else if
    }
    else if (mapName == "Undella Town")
    {
        if (money >= 15000)
        {
            if (_root.isBusy == false)
            {
                if (hasBadge("Legend Badge"))
                {
                    getTimestamp("removeMoney", 15000);
                    money = money - 15000;
                    mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
                    removeMovieClip (target);
                    globalAnimationObj.map = "Undella Town";
                    globalAnimationObj.x = 80;
                    globalAnimationObj.y = 25;
                    globalAnimationObj.animation = "fadeScreenTeleport";
                }
                else
                {
                    systemMessage("You need the Legend Badge to ferry to Undella Town!");
                } // end if
            } // end else if
        }
        else
        {
            systemMessage("You don\'t have enough money.");
        } // end else if
    }
    else if (mapName == "Vaniville Town")
    {
        systemMessage("Soon!");
    } // end else if
} // End of the function
function setUnovaSailButtons(target)
{
    if (_root.map == "Nuvema Town")
    {
        target.b1T.htmlText = "<b>Castelia City ($15,000)";
        target.b2T.htmlText = "<b>Driftveil City ($15,000)";
        target.b3T.htmlText = "<b>Undella Town ($15,000)";
        target.b4T.htmlText = "<b>Nevermind";
        hideButtons(target, 5);
        target.b1.onRelease = function ()
        {
            setMapButton("Castelia City");
        };
        target.b2.onRelease = function ()
        {
            setMapButton("Driftveil City");
        };
        target.b3.onRelease = function ()
        {
            setMapButton("Undella Town");
        };
        target.b4.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    }
    else if (_root.map == "Castelia City")
    {
        target.b1T.htmlText = "<b>Nuvema Town ($15,000)";
        target.b2T.htmlText = "<b>Driftveil City ($15,000)";
        target.b3T.htmlText = "<b>Undella Town ($15,000)";
        target.b4T.htmlText = "<b>Nevermind";
        hideButtons(target, 5);
        target.b1.onRelease = function ()
        {
            setMapButton("Nuvema Town");
        };
        target.b2.onRelease = function ()
        {
            setMapButton("Driftveil City");
        };
        target.b3.onRelease = function ()
        {
            setMapButton("Undella Town");
        };
        target.b4.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    }
    else if (_root.map == "Driftveil City")
    {
        target.b1T.htmlText = "<b>Nuvema Town ($15,000)";
        target.b2T.htmlText = "<b>Castelia City ($15,000)";
        target.b3T.htmlText = "<b>Undella Town ($15,000)";
        target.b4T.htmlText = "<b>Nevermind";
        hideButtons(target, 5);
        target.b1.onRelease = function ()
        {
            setMapButton("Nuvema Town");
        };
        target.b2.onRelease = function ()
        {
            setMapButton("Castelia City");
        };
        target.b3.onRelease = function ()
        {
            setMapButton("Undella Town");
        };
        target.b4.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    }
    else if (_root.map == "Undella Town")
    {
        target.b1T.htmlText = "<b>Nuvema Town ($15,000)";
        target.b2T.htmlText = "<b>Castelia City ($15,000)";
        target.b3T.htmlText = "<b>Driftveil City ($15,000)";
        target.b4T.htmlText = "<b>Nevermind";
        hideButtons(target, 5);
        target.b1.onRelease = function ()
        {
            setMapButton("Nuvema Town");
        };
        target.b2.onRelease = function ()
        {
            setMapButton("Castelia City");
        };
        target.b3.onRelease = function ()
        {
            setMapButton("Driftveil City");
        };
        target.b4.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    }
    else
    {
        target.b1T.htmlText = "<b>Nuvema Town ($15,000)";
        target.b2T.htmlText = "<b>Castelia City ($15,000)";
        target.b3T.htmlText = "<b>Driftveil City ($15,000)";
        target.b4T.htmlText = "<b>Undella Town ($15,000)";
        target.b5T.htmlText = "<b>Nevermind";
        hideButtons(target, 6);
        target.b1.onRelease = function ()
        {
            setMapButton("Nuvema Town");
        };
        target.b2.onRelease = function ()
        {
            setMapButton("Castelia City");
        };
        target.b3.onRelease = function ()
        {
            setMapButton("Driftveil City");
        };
        target.b4.onRelease = function ()
        {
            setMapButton("Undella Town");
        };
        target.b5.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    } // end else if
} // End of the function
function setKalosSailButtons(target)
{
    if (_root.map == "Vaniville Town")
    {
        target.b1T.htmlText = "<b>Nevermind";
        hideButtons(target, 2);
        target.b1.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    }
    else
    {
        target.b1T.htmlText = "<b>Vaniville Town ($18,000)";
        target.b2T.htmlText = "<b>Nevermind";
        hideButtons(target, 3);
        target.b1.onRelease = function ()
        {
            setMapButton("Vaniville Town");
        };
        target.b2.onRelease = function ()
        {
            removeMovieClip (target);
            guiUp = false;
            canMove = true;
        };
    } // end else if
} // End of the function
function setSailorNPC()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        yesNoBox = _root.attachMovie("allButtonBox", "fourButtonBox", _root.getNextHighestDepth());
        yesNoBox._x = newWidth / 2;
        yesNoBox._y = newHeight / 2;
        yesNoBox.b8._visible = false;
        yesNoBox.nameT.htmlText = "<b>Sailor";
        yesNoBox.msgT.text = "Set sail for:";
        yesNoBox.b1T.htmlText = "<b>Kanto";
        yesNoBox.b2T.htmlText = "<b>Johto";
        yesNoBox.b3T.htmlText = "<b>Hoenn";
        yesNoBox.b4T.htmlText = "<b>Sinnoh";
        yesNoBox.b5T.htmlText = "<b>Unova";
        yesNoBox.b6T.htmlText = "<b>Kalos";
        yesNoBox.b7T.htmlText = "<b>Nevermind";
        assignMouseEvents(yesNoBox.b1);
        assignMouseEvents(yesNoBox.b2);
        assignMouseEvents(yesNoBox.b3);
        assignMouseEvents(yesNoBox.b4);
        assignMouseEvents(yesNoBox.b5);
        assignMouseEvents(yesNoBox.b6);
        assignMouseEvents(yesNoBox.b7);
        yesNoBox.b1.onRelease = function ()
        {
            setKantoSailButtons(yesNoBox);
        };
        yesNoBox.b2.onRelease = function ()
        {
            setJohtoSailButtons(yesNoBox);
        };
        yesNoBox.b3.onRelease = function ()
        {
            setHoennSailButtons(yesNoBox);
        };
        yesNoBox.b4.onRelease = function ()
        {
            setSinnohSailButtons(yesNoBox);
        };
        yesNoBox.b5.onRelease = function ()
        {
            setUnovaSailButtons(yesNoBox);
        };
        yesNoBox.b6.onRelease = function ()
        {
            setKalosSailButtons(yesNoBox);
        };
        yesNoBox.b7.onRelease = function ()
        {
            removeMovieClip (yesNoBox);
            guiUp = false;
            canMove = true;
        };
    } // end if
} // End of the function
function npcVermilionOlivine()
{
    setSailorNPC();
} // End of the function
function npcCinnabarFerry()
{
    setSailorNPC();
} // End of the function
function npcTwinleafSailor()
{
    setSailorNPC();
} // End of the function
function npcEliteShop()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        christmasShop = _root.mainGUI.attachMovie("eliteShop", "eliteShop", _root.mainGUI.getNextHighestDepth());
        christmasShop.itemList.setMask(christmasShop.maskBg);
        christmasShop.itemList.buy1B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Elite Token") >= 150)
                {
                    getTimestamp("eliteBuy", 1);
                }
                else
                {
                    systemMessage("You don\'t have enough Elite Tokens.");
                } // end if
            } // end else if
        };
        christmasShop.itemList.buy2B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Elite Token") >= 30)
                {
                    getTimestamp("eliteBuy", 2);
                }
                else
                {
                    systemMessage("You don\'t have enough Elite Tokens.");
                } // end if
            } // end else if
        };
        christmasShop.itemList.buy3B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Elite Token") >= 50)
                {
                    getTimestamp("eliteBuy", 3);
                }
                else
                {
                    systemMessage("You don\'t have enough Elite Tokens.");
                } // end if
            } // end else if
        };
        christmasShop.itemList.buy4B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Elite Token") >= 20)
                {
                    getTimestamp("eliteBuy", 4);
                }
                else
                {
                    systemMessage("You don\'t have enough Elite Tokens.");
                } // end if
            } // end else if
        };
        christmasShop.itemList.buy5B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Elite Token") >= 10)
                {
                    getTimestamp("eliteBuy", 5);
                }
                else
                {
                    systemMessage("You don\'t have enough Elite Tokens.");
                } // end if
            } // end else if
        };
        christmasShop.itemList.buy6B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Elite Token") >= 1)
                {
                    getTimestamp("eliteBuy", 6);
                }
                else
                {
                    systemMessage("You don\'t have enough Elite Tokens.");
                } // end if
            } // end else if
        };
        christmasShop.itemList.buy7B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Elite Token") >= 125)
                {
                    getTimestamp("eliteBuy", 7);
                }
                else
                {
                    systemMessage("You don\'t have enough Elite Tokens.");
                } // end if
            } // end else if
        };
        christmasShop.itemList.buy8B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Elite Token") >= 15)
                {
                    getTimestamp("eliteBuy", 8);
                }
                else
                {
                    systemMessage("You don\'t have enough Elite Tokens.");
                } // end if
            } // end else if
        };
        christmasShop.itemList.buy9B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Elite Token") >= 20)
                {
                    getTimestamp("eliteBuy", 9);
                }
                else
                {
                    systemMessage("You don\'t have enough Elite Tokens.");
                } // end if
            } // end else if
        };
        christmasShop.scrollBar.onRelease = christmasShop.scrollBar.onReleaseOutside = function ()
        {
            this.gotoAndStop(1);
            this.stopDrag();
            _root.dragScrollbar = 0;
        };
        christmasShop.scrollBar.onPress = function ()
        {
            this.gotoAndStop("click");
            this.startDrag(true, this._x, 106, this._x, -87);
            _root.dragScrollbar = 46;
        };
        christmasShop.scrollBar.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        christmasShop.scrollBar.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        christmasShop.dragBg.onPress = function ()
        {
            christmasShop.startDrag(false, -newWidth / 2 + christmasShop._width / 2 - widthOffset, -newHeight / 2 + christmasShop._height / 2 - heightOffset, newWidth / 2 - christmasShop._width / 2 + widthOffset, newHeight / 2 - christmasShop._height / 2 + heightOffset);
        };
        christmasShop.dragBg.onRelease = christmasShop.dragBg.onReleaseOutside = function ()
        {
            christmasShop.stopDrag();
        };
        christmasShop.exitB.onRelease = function ()
        {
            guiUp = false;
            canMove = true;
            removeMovieClip (christmasShop);
        };
        assignMouseEvents(christmasShop.exitB);
        assignMouseEvents(christmasShop.itemList.buy1B);
        assignMouseEvents(christmasShop.itemList.buy2B);
        assignMouseEvents(christmasShop.itemList.buy3B);
        assignMouseEvents(christmasShop.itemList.buy4B);
        assignMouseEvents(christmasShop.itemList.buy5B);
        assignMouseEvents(christmasShop.itemList.buy6B);
        assignMouseEvents(christmasShop.itemList.buy7B);
        assignMouseEvents(christmasShop.itemList.buy8B);
        assignMouseEvents(christmasShop.itemList.buy9B);
    } // end if
} // End of the function
function npcHalloweenWitch()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        yesNoBox = _root.attachMovie("threeButtonBox", "threeButtonBox", _root.getNextHighestDepth());
        yesNoBox._x = newWidth / 2;
        yesNoBox._y = newHeight / 2;
        yesNoBox.nameT.htmlText = "<b>Witch";
        yesNoBox.msgT.text = "What do you want?";
        if (map == "Corn Maze" || map == "Haunted Forest 1" || map == "Haunted Forest 2" || map == "Haunted Forest 3" || map == "Fright Town")
        {
            yesNoBox.b1T.htmlText = "<b>Go back to " + _root.nearestPokecenter + ".";
        }
        else if (hasQuestArray("Haunted Forest 2021"))
        {
            yesNoBox.b1T.htmlText = "<b>Go to the Haunted Forest.";
        }
        else
        {
            yesNoBox.b1T.htmlText = "<b>Go to the Corn Maze.";
        } // end else if
        yesNoBox.b2T.htmlText = "<b>View the Halloween Shop.";
        yesNoBox.b3T.htmlText = "<b>Nevermind.";
        assignMouseEvents(yesNoBox.b1);
        assignMouseEvents(yesNoBox.b2);
        assignMouseEvents(yesNoBox.b3);
        yesNoBox.b1.onRelease = function ()
        {
            removeMovieClip (yesNoBox);
            if (map == "Corn Maze" || map == "Haunted Forest 1" || map == "Haunted Forest 2" || map == "Haunted Forest 3" || map == "Fright Town")
            {
                if (_root.nearestPokecenter != undefined)
                {
                    globalAnimationObj.map = _root.nearestPokecenter;
                }
                else
                {
                    globalAnimationObj.map = "Viridian City Pokecenter";
                } // end else if
                if (_root.nearestPokecenter == "Indigo Plateau")
                {
                    globalAnimationObj.x = 8;
                    globalAnimationObj.y = 20;
                }
                else if (_root.nearestPokecenter == "Hoenn Pokemon League Lobby")
                {
                    globalAnimationObj.x = 11;
                    globalAnimationObj.y = 14;
                }
                else if (_root.nearestPokecenter == "Sinnoh Pokemon League" || _root.nearestPokecenter == "Unova Pokemon League")
                {
                    globalAnimationObj.x = 13;
                    globalAnimationObj.y = 9;
                }
                else if (_root.nearestPokecenter == "Accumula Pokecenter" || _root.nearestPokecenter == "Striaton Pokecenter" || _root.nearestPokecenter == "Nacrene Pokecenter" || _root.nearestPokecenter == "Castelia Pokecenter" || _root.nearestPokecenter == "Nimbasa Pokecenter" || _root.nearestPokecenter == "Driftveil Pokecenter" || _root.nearestPokecenter == "Mistralton Pokecenter" || _root.nearestPokecenter == "Icirrus Pokecenter" || _root.nearestPokecenter == "Opelucid Pokecenter" || _root.nearestPokecenter == "Lacunosa Pokecenter" || _root.nearestPokecenter == "Undella Pokecenter" || _root.nearestPokecenter == "Lentimas Pokecenter" || _root.nearestPokecenter == "Black City Pokecenter" || _root.nearestPokecenter == "Humilau Pokecenter" || _root.nearestPokecenter == "Unova Victory Road Pokecenter")
                {
                    globalAnimationObj.x = 12;
                    globalAnimationObj.y = 12;
                }
                else
                {
                    globalAnimationObj.x = 19;
                    globalAnimationObj.y = 14;
                } // end else if
                globalAnimationObj.animation = "fadeScreenTeleport";
            }
            else if (hasQuestArray("Haunted Forest 2021"))
            {
                globalAnimationObj.map = "Haunted Forest 1";
                globalAnimationObj.x = 8;
                globalAnimationObj.y = 4;
            }
            else
            {
                globalAnimationObj.map = "Corn Maze";
                globalAnimationObj.x = 64;
                globalAnimationObj.y = 3;
            } // end else if
            globalAnimationObj.animation = "fadeScreenTeleport";
        };
        yesNoBox.b2.onRelease = function ()
        {
            removeMovieClip (yesNoBox);
            christmasShop = mainGUI.attachMovie("halloweenShop", "christmasShop", mainGUI.getNextHighestDepth());
            christmasShop.buy1B.onRelease = function ()
            {
                if (isBusy == false)
                {
                    if (getInventoryAmount("Brains") >= 80)
                    {
                        getTimestamp("halloweenBuy", 1);
                    }
                    else
                    {
                        systemMessage("You don\'t have enough Brains.");
                    } // end if
                } // end else if
            };
            christmasShop.buy2B.onRelease = function ()
            {
                if (isBusy == false)
                {
                    if (getInventoryAmount("Brains") >= 40)
                    {
                        getTimestamp("halloweenBuy", 2);
                    }
                    else
                    {
                        systemMessage("You don\'t have enough Brains.");
                    } // end if
                } // end else if
            };
            christmasShop.buy3B.onRelease = function ()
            {
                if (isBusy == false)
                {
                    if (getInventoryAmount("Brains") >= 15)
                    {
                        getTimestamp("halloweenBuy", 3);
                    }
                    else
                    {
                        systemMessage("You don\'t have enough Brains.");
                    } // end if
                } // end else if
            };
            christmasShop.buy4B.onRelease = function ()
            {
                if (isBusy == false)
                {
                    if (getInventoryAmount("Brains") >= 200)
                    {
                        getTimestamp("halloweenBuy", 4);
                    }
                    else
                    {
                        systemMessage("You don\'t have enough Brains.");
                    } // end if
                } // end else if
            };
            christmasShop.buy5B.onRelease = function ()
            {
                if (isBusy == false)
                {
                    if (getInventoryAmount("Brains") >= 8)
                    {
                        getTimestamp("halloweenBuy", 5);
                    }
                    else
                    {
                        systemMessage("You don\'t have enough Brains.");
                    } // end if
                } // end else if
            };
            christmasShop.scrollBar.onRelease = christmasShop.scrollBar.onReleaseOutside = function ()
            {
                this.gotoAndStop(1);
                this.stopDrag();
            };
            christmasShop.scrollBar.onPress = function ()
            {
                this.gotoAndStop("click");
                this.startDrag(true, this._x, 106, this._x, -87);
            };
            christmasShop.scrollBar.onRollOver = function ()
            {
                this.gotoAndStop("hover");
            };
            christmasShop.scrollBar.onRollOut = function ()
            {
                this.gotoAndStop(1);
            };
            christmasShop.dragBg.onPress = function ()
            {
                christmasShop.startDrag(false, -newWidth / 2 + christmasShop._width / 2 - widthOffset, -newHeight / 2 + christmasShop._height / 2 - heightOffset, newWidth / 2 - christmasShop._width / 2 + widthOffset, newHeight / 2 - christmasShop._height / 2 + heightOffset);
            };
            christmasShop.dragBg.onRelease = christmasShop.dragBg.onReleaseOutside = function ()
            {
                christmasShop.stopDrag();
            };
            christmasShop.exitB.onRelease = function ()
            {
                guiUp = false;
                canMove = true;
                removeMovieClip (christmasShop);
            };
            assignMouseEvents(christmasShop.exitB);
            assignMouseEvents(christmasShop.buy1B);
            assignMouseEvents(christmasShop.buy2B);
            assignMouseEvents(christmasShop.buy3B);
            assignMouseEvents(christmasShop.buy4B);
            assignMouseEvents(christmasShop.buy5B);
        };
        yesNoBox.b3.onRelease = function ()
        {
            removeMovieClip (yesNoBox);
            guiUp = false;
            canMove = true;
        };
    } // end if
} // End of the function
function npcFerry()
{
    setSailorNPC();
} // End of the function
function npcOlivineVermilion()
{
    setSailorNPC();
} // End of the function
function npcLilycoveFerry()
{
    setSailorNPC();
} // End of the function
function npcMoveTutor()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        allButtonBox = _root.attachMovie("allButtonBox", "allButtonBox", _root.getNextHighestDepth());
        allButtonBox.msgT.text = "Teach a move to:";
        allButtonBox.nameT.htmlText = "<b>Move Tutor</b>";
        for (var _loc3 = 1; _loc3 < 9; ++_loc3)
        {
            allButtonBox["b" + _loc3]._visible = false;
            allButtonBox["b" + _loc3 + "T"]._visible = false;
        } // end of for
        for (var _loc3 = 1; _loc3 <= userPokemon.length; ++_loc3)
        {
            allButtonBox["b" + _loc3].loopNum = _loc3;
            allButtonBox["b" + _loc3]._visible = true;
            allButtonBox["b" + _loc3 + "T"]._visible = true;
            assignMouseEvents(allButtonBox["b" + _loc3]);
            allButtonBox["b" + _loc3 + "T"].htmlText = "<b>" + userPokemon[_loc3 - 1].name;
            allButtonBox["b" + _loc3].onRelease = function ()
            {
                if (isBusy == false)
                {
                    getTimestamp("relearnList", this.loopNum);
                } // end if
            };
            if (_loc3 == userPokemon.length)
            {
                allButtonBox.b7._visible = true;
                allButtonBox.b7T._visible = true;
                allButtonBox.b7._y = allButtonBox["b" + (_loc3 + 1)]._y;
                allButtonBox.b7T._y = allButtonBox["b" + (_loc3 + 1) + "T"]._y;
            } // end if
        } // end of for
        for (var _loc3 = 1; _loc3 < 9; ++_loc3)
        {
            if (allButtonBox["b" + _loc3]._visible == false)
            {
                removeMovieClip (allButtonBox["b" + _loc3]);
            } // end if
        } // end of for
        assignMouseEvents(allButtonBox.b7);
        allButtonBox.b7T.htmlText = "<b>No thanks";
        allButtonBox.b7.onRelease = function ()
        {
            if (isBusy == false)
            {
                guiUp = false;
                canMove = true;
                removeMovieClip (allButtonBox);
            } // end if
        };
        allButtonBox._x = newWidth / 2;
        allButtonBox._y = newHeight / 2;
    } // end if
} // End of the function
function npcPreEvoMoveTutor()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        allButtonBox = _root.attachMovie("allButtonBox", "allButtonBox", _root.getNextHighestDepth());
        allButtonBox.msgT.text = "Teach a move to:";
        allButtonBox.nameT.htmlText = "<b>Pre Evo Move Tutor</b>";
        for (var _loc3 = 1; _loc3 < 9; ++_loc3)
        {
            allButtonBox["b" + _loc3]._visible = false;
            allButtonBox["b" + _loc3 + "T"]._visible = false;
        } // end of for
        for (var _loc3 = 1; _loc3 <= userPokemon.length; ++_loc3)
        {
            allButtonBox["b" + _loc3].loopNum = _loc3;
            allButtonBox["b" + _loc3]._visible = true;
            allButtonBox["b" + _loc3 + "T"]._visible = true;
            assignMouseEvents(allButtonBox["b" + _loc3]);
            allButtonBox["b" + _loc3 + "T"].htmlText = "<b>" + userPokemon[_loc3 - 1].name;
            allButtonBox["b" + _loc3].onRelease = function ()
            {
                if (isBusy == false)
                {
                    getTimestamp("relearnList4", this.loopNum);
                } // end if
            };
            if (_loc3 == userPokemon.length)
            {
                allButtonBox.b7._visible = true;
                allButtonBox.b7T._visible = true;
                allButtonBox.b7._y = allButtonBox["b" + (_loc3 + 1)]._y;
                allButtonBox.b7T._y = allButtonBox["b" + (_loc3 + 1) + "T"]._y;
            } // end if
        } // end of for
        for (var _loc3 = 1; _loc3 < 9; ++_loc3)
        {
            if (allButtonBox["b" + _loc3]._visible == false)
            {
                removeMovieClip (allButtonBox["b" + _loc3]);
            } // end if
        } // end of for
        assignMouseEvents(allButtonBox.b7);
        allButtonBox.b7T.htmlText = "<b>No thanks";
        allButtonBox.b7.onRelease = function ()
        {
            guiUp = false;
            canMove = true;
            removeMovieClip (allButtonBox);
        };
        allButtonBox._x = newWidth / 2;
        allButtonBox._y = newHeight / 2;
    } // end if
} // End of the function
function npcChristmasTrader()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        christmasShop = mainGUI.attachMovie("christmasShop", "christmasShop", mainGUI.getNextHighestDepth());
        christmasShop.buy1B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Christmas Coin") >= 110)
                {
                    getTimestamp("christmasBuy", 1);
                }
                else
                {
                    systemMessage("You don\'t have enough Christmas Coins.");
                } // end if
            } // end else if
        };
        christmasShop.buy2B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Christmas Coin") >= 75)
                {
                    getTimestamp("christmasBuy", 2);
                }
                else
                {
                    systemMessage("You don\'t have enough Christmas Coins.");
                } // end if
            } // end else if
        };
        christmasShop.buy3B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Christmas Coin") >= 60)
                {
                    getTimestamp("christmasBuy", 3);
                }
                else
                {
                    systemMessage("You don\'t have enough Christmas Coins.");
                } // end if
            } // end else if
        };
        christmasShop.buy4B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Christmas Coin") >= 25)
                {
                    getTimestamp("christmasBuy", 4);
                }
                else
                {
                    systemMessage("You don\'t have enough Christmas Coins.");
                } // end if
            } // end else if
        };
        christmasShop.buy5B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Christmas Coin") >= 150)
                {
                    getTimestamp("christmasBuy", 5);
                }
                else
                {
                    systemMessage("You don\'t have enough Christmas Coins.");
                } // end if
            } // end else if
        };
        christmasShop.scrollBar.onRelease = christmasShop.scrollBar.onReleaseOutside = function ()
        {
            this.gotoAndStop(1);
            this.stopDrag();
        };
        christmasShop.scrollBar.onPress = function ()
        {
            this.gotoAndStop("click");
            this.startDrag(true, this._x, 106, this._x, -87);
        };
        christmasShop.scrollBar.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        christmasShop.scrollBar.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        christmasShop.dragBg.onPress = function ()
        {
            christmasShop.startDrag(false, -newWidth / 2 + christmasShop._width / 2 - widthOffset, -newHeight / 2 + christmasShop._height / 2 - heightOffset, newWidth / 2 - christmasShop._width / 2 + widthOffset, newHeight / 2 - christmasShop._height / 2 + heightOffset);
        };
        christmasShop.dragBg.onRelease = christmasShop.dragBg.onReleaseOutside = function ()
        {
            christmasShop.stopDrag();
        };
        christmasShop.exitB.onRelease = function ()
        {
            canMove = true;
            removeMovieClip (christmasShop);
            guiUp = false;
        };
        assignMouseEvents(christmasShop.exitB);
        assignMouseEvents(christmasShop.buy1B);
        assignMouseEvents(christmasShop.buy2B);
        assignMouseEvents(christmasShop.buy3B);
        assignMouseEvents(christmasShop.buy4B);
        assignMouseEvents(christmasShop.buy5B);
    } // end if
} // End of the function
function npcPhilanthropistPointShop()
{
    if (guiUp != true)
    {
        systemMessage("You have " + ppCurrent + " Philanthropist Points.");
        canMove = false;
        guiUp = true;
        ppShop = mainGUI.attachMovie("ppShop", "ppShop", mainGUI.getNextHighestDepth());
        ppShop.itemList.setMask(ppShop.maskBg);
        ppShop.scrollBar.onRelease = ppShop.scrollBar.onReleaseOutside = function ()
        {
            this.gotoAndStop(1);
            this.stopDrag();
            _root.dragScrollbar = 0;
        };
        ppShop.scrollBar.onPress = function ()
        {
            this.gotoAndStop("click");
            this.startDrag(true, this._x, 162, this._x, -87);
            _root.dragScrollbar = 32;
        };
        ppShop.scrollBar.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        ppShop.scrollBar.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        ppShop.itemList.buy1B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (ppCurrent >= 10000)
                {
                    getTimestamp("ppBuy", 1);
                }
                else
                {
                    systemMessage("You don\'t have enough Philanthropist Points.");
                } // end if
            } // end else if
        };
        ppShop.itemList.buy2B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (ppCurrent >= 7500)
                {
                    getTimestamp("ppBuy", 2);
                }
                else
                {
                    systemMessage("You don\'t have enough Philanthropist Points.");
                } // end if
            } // end else if
        };
        ppShop.itemList.buy3B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (ppCurrent >= 6000)
                {
                    getTimestamp("ppBuy", 3);
                }
                else
                {
                    systemMessage("You don\'t have enough Philanthropist Points.");
                } // end if
            } // end else if
        };
        ppShop.itemList.buy4B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (ppCurrent >= 6000)
                {
                    getTimestamp("ppBuy", 4);
                }
                else
                {
                    systemMessage("You don\'t have enough Philanthropist Points.");
                } // end if
            } // end else if
        };
        ppShop.itemList.buy5B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (ppCurrent >= 6000)
                {
                    getTimestamp("ppBuy", 5);
                }
                else
                {
                    systemMessage("You don\'t have enough Philanthropist Points.");
                } // end if
            } // end else if
        };
        ppShop.itemList.buy6B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (ppCurrent >= 15000)
                {
                    getTimestamp("ppBuy", 6);
                }
                else
                {
                    systemMessage("You don\'t have enough Philanthropist Points.");
                } // end if
            } // end else if
        };
        ppShop.itemList.buy7B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (ppCurrent >= 30000)
                {
                    getTimestamp("ppBuy", 7);
                }
                else
                {
                    systemMessage("You don\'t have enough Philanthropist Points.");
                } // end if
            } // end else if
        };
        ppShop.itemList.buy8B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (ppCurrent >= 100000)
                {
                    getTimestamp("ppBuy", 8);
                }
                else
                {
                    systemMessage("You don\'t have enough Philanthropist Points.");
                } // end if
            } // end else if
        };
        ppShop.itemList.buy9B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (ppCurrent >= 200000)
                {
                    getTimestamp("ppBuy", 9);
                }
                else
                {
                    systemMessage("You don\'t have enough Philanthropist Points.");
                } // end if
            } // end else if
        };
        ppShop.itemList.buy10B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (ppCurrent >= 100000)
                {
                    getTimestamp("ppBuy", 10);
                }
                else
                {
                    systemMessage("You don\'t have enough Philanthropist Points.");
                } // end if
            } // end else if
        };
        ppShop.itemList.buy11B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (ppCurrent >= 100000)
                {
                    getTimestamp("ppBuy", 11);
                }
                else
                {
                    systemMessage("You don\'t have enough Philanthropist Points.");
                } // end if
            } // end else if
        };
        addDraggableGUI(ppShop);
        ppShop.exitB.onRelease = function ()
        {
            guiUp = false;
            canMove = true;
            removeMovieClip (ppShop);
        };
        assignMouseEvents(ppShop.exitB);
        assignMouseEvents(ppShop.itemList.buy1B);
        assignMouseEvents(ppShop.itemList.buy2B);
        assignMouseEvents(ppShop.itemList.buy3B);
        assignMouseEvents(ppShop.itemList.buy4B);
        assignMouseEvents(ppShop.itemList.buy5B);
        assignMouseEvents(ppShop.itemList.buy6B);
        assignMouseEvents(ppShop.itemList.buy7B);
    } // end if
} // End of the function
function npcClanCreate()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        yesNoBox = _root.attachMovie("yesNoBox", "yesNoBox", _root.getNextHighestDepth());
        yesNoBox._x = newWidth / 2;
        yesNoBox._y = newHeight / 2;
        yesNoBox.nameT.htmlText = "<b>Clan Assistant";
        yesNoBox.msgT.text = "Create a clan for $100,000?";
        yesNoBox.yesT.htmlText = "<b>Yes";
        yesNoBox.noT.htmlText = "<b>No thanks.";
        assignMouseEvents(yesNoBox.yesB);
        assignMouseEvents(yesNoBox.noB);
        yesNoBox.yesB.onRelease = function ()
        {
            if (_root.money >= 100000)
            {
                removeMovieClip (yesNoBox);
                createClanGUI = _root.attachMovie("inputBox", "createClanGUI", _root.getNextHighestDepth());
                createClanGUI.nameT.htmlText = "<b>Clan Assistant";
                createClanGUI.msgT.text = "Enter a clan name:";
                createClanGUI._x = newWidth / 2;
                createClanGUI._y = newHeight / 2;
                createClanGUI.inputT.restrict = "A-Z a-z 0-9^ ";
                Selection.setFocus(createClanGUI.inputT);
                assignMouseEvents(createClanGUI.createB);
                assignMouseEvents(createClanGUI.noB);
                createClanGUI.createB.onRelease = function ()
                {
                    if (creatingClan == false)
                    {
                        if (createClanGUI.inputT.text != "")
                        {
                            if (createClanGUI.inputT.length >= 3)
                            {
                                if (_root.clan == "")
                                {
                                    if (isBusy == false && creatingClan == false)
                                    {
                                        creatingClan = true;
                                        systemMessage("Clan creation in progress, please wait.");
                                        getTimestamp("createClan", createClanGUI.inputT.text);
                                    } // end if
                                }
                                else
                                {
                                    systemMessage("You\'re already in a clan.");
                                } // end else if
                            }
                            else
                            {
                                systemMessage("Clan name needs to be at least 3 characters long.");
                            } // end else if
                        }
                        else
                        {
                            systemMessage("Please enter a clan name.");
                        } // end else if
                    }
                    else
                    {
                        systemMessage("Clan creation in progress, please wait.");
                    } // end else if
                };
                createClanGUI.noB.onRelease = function ()
                {
                    if (creatingClan == false)
                    {
                        canMove = true;
                        guiUp = false;
                        removeMovieClip (createClanGUI);
                    }
                    else
                    {
                        systemMessage("Clan creation in progress, please wait.");
                    } // end else if
                };
            }
            else
            {
                systemMessage("You need $100,000 to create a clan.");
                removeMovieClip (yesNoBox);
                canMove = true;
                guiUp = false;
            } // end else if
        };
        yesNoBox.noB.onRelease = function ()
        {
            removeMovieClip (yesNoBox);
            canMove = true;
            guiUp = false;
        };
    } // end if
} // End of the function
function npcPokemonLabScientist()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        allButtonBox = _root.attachMovie("twelveButtonBox", "allButtonBox", _root.getNextHighestDepth());
        allButtonBox.msgT.text = "Which shards do you want me to take a look at?";
        allButtonBox.nameT.htmlText = "<b>Scientist</b>";
        allButtonBox._x = newWidth / 2;
        allButtonBox._y = newHeight / 2;
        allButtonBox.b1T.htmlText = "<b>Amber Shards";
        allButtonBox.b2T.htmlText = "<b>Dome Shards";
        allButtonBox.b3T.htmlText = "<b>Helix Shards";
        allButtonBox.b4T.htmlText = "<b>Root Shards";
        allButtonBox.b5T.htmlText = "<b>Claw Shards";
        allButtonBox.b6T.htmlText = "<b>Skull Shards";
        allButtonBox.b7T.htmlText = "<b>Armor Shards";
        allButtonBox.b8T.htmlText = "<b>Cover Shards";
        allButtonBox.b9T.htmlText = "<b>Plume Shards";
        allButtonBox.b10T.htmlText = "<b>Jaw Shards";
        allButtonBox.b11T.htmlText = "<b>Sail Shards";
        allButtonBox.b12T.htmlText = "<b>Nevermind";
        allButtonBox.b1.onRelease = function ()
        {
            if (getInventoryAmount("Amber Shard") >= 100)
            {
                if (isBusy == false)
                {
                    getTimestamp("exchangeShards", 1);
                } // end if
            }
            else
            {
                systemMessage("You don\'t have enough shards.");
                removeMovieClip (allButtonBox);
                canMove = true;
                guiUp = false;
            } // end else if
        };
        allButtonBox.b2.onRelease = function ()
        {
            if (getInventoryAmount("Dome Shard") >= 100)
            {
                if (isBusy == false)
                {
                    getTimestamp("exchangeShards", 2);
                } // end if
            }
            else
            {
                systemMessage("You don\'t have enough shards.");
                removeMovieClip (allButtonBox);
                canMove = true;
                guiUp = false;
            } // end else if
        };
        allButtonBox.b3.onRelease = function ()
        {
            if (getInventoryAmount("Helix Shard") >= 100)
            {
                if (isBusy == false)
                {
                    getTimestamp("exchangeShards", 3);
                } // end if
            }
            else
            {
                systemMessage("You don\'t have enough shards.");
                removeMovieClip (allButtonBox);
                canMove = true;
                guiUp = false;
            } // end else if
        };
        allButtonBox.b4.onRelease = function ()
        {
            if (getInventoryAmount("Root Shard") >= 100)
            {
                if (isBusy == false)
                {
                    getTimestamp("exchangeShards", 4);
                } // end if
            }
            else
            {
                systemMessage("You don\'t have enough shards.");
                removeMovieClip (allButtonBox);
                canMove = true;
                guiUp = false;
            } // end else if
        };
        allButtonBox.b5.onRelease = function ()
        {
            if (getInventoryAmount("Claw Shard") >= 100)
            {
                if (isBusy == false)
                {
                    getTimestamp("exchangeShards", 5);
                } // end if
            }
            else
            {
                systemMessage("You don\'t have enough shards.");
                removeMovieClip (allButtonBox);
                canMove = true;
                guiUp = false;
            } // end else if
        };
        allButtonBox.b6.onRelease = function ()
        {
            if (getInventoryAmount("Skull Shard") >= 100)
            {
                if (isBusy == false)
                {
                    getTimestamp("exchangeShards", 6);
                } // end if
            }
            else
            {
                systemMessage("You don\'t have enough shards.");
                removeMovieClip (allButtonBox);
                canMove = true;
                guiUp = false;
            } // end else if
        };
        allButtonBox.b7.onRelease = function ()
        {
            if (getInventoryAmount("Armor Shard") >= 100)
            {
                if (isBusy == false)
                {
                    getTimestamp("exchangeShards", 7);
                } // end if
            }
            else
            {
                systemMessage("You don\'t have enough shards.");
                removeMovieClip (allButtonBox);
                canMove = true;
                guiUp = false;
            } // end else if
        };
        allButtonBox.b8.onRelease = function ()
        {
            if (getInventoryAmount("Cover Shard") >= 100)
            {
                if (isBusy == false)
                {
                    getTimestamp("exchangeShards", 8);
                } // end if
            }
            else
            {
                systemMessage("You don\'t have enough shards.");
                removeMovieClip (allButtonBox);
                canMove = true;
                guiUp = false;
            } // end else if
        };
        allButtonBox.b9.onRelease = function ()
        {
            if (getInventoryAmount("Plume Shard") >= 100)
            {
                if (isBusy == false)
                {
                    getTimestamp("exchangeShards", 9);
                } // end if
            }
            else
            {
                systemMessage("You don\'t have enough shards.");
                removeMovieClip (allButtonBox);
                canMove = true;
                guiUp = false;
            } // end else if
        };
        allButtonBox.b10.onRelease = function ()
        {
            if (getInventoryAmount("Jaw Shard") >= 100)
            {
                if (isBusy == false)
                {
                    getTimestamp("exchangeShards", 10);
                } // end if
            }
            else
            {
                systemMessage("You don\'t have enough shards.");
                removeMovieClip (allButtonBox);
                canMove = true;
                guiUp = false;
            } // end else if
        };
        allButtonBox.b11.onRelease = function ()
        {
            if (getInventoryAmount("Sail Shard") >= 100)
            {
                if (isBusy == false)
                {
                    getTimestamp("exchangeShards", 11);
                } // end if
            }
            else
            {
                systemMessage("You don\'t have enough shards.");
                removeMovieClip (allButtonBox);
                canMove = true;
                guiUp = false;
            } // end else if
        };
        allButtonBox.b12.onRelease = function ()
        {
            removeMovieClip (allButtonBox);
            canMove = true;
            guiUp = false;
        };
        assignMouseEvents(allButtonBox.b1);
        assignMouseEvents(allButtonBox.b2);
        assignMouseEvents(allButtonBox.b3);
        assignMouseEvents(allButtonBox.b4);
        assignMouseEvents(allButtonBox.b5);
        assignMouseEvents(allButtonBox.b6);
        assignMouseEvents(allButtonBox.b7);
        assignMouseEvents(allButtonBox.b8);
        assignMouseEvents(allButtonBox.b9);
        assignMouseEvents(allButtonBox.b10);
        assignMouseEvents(allButtonBox.b11);
        assignMouseEvents(allButtonBox.b12);
    } // end if
} // End of the function
function npcPrizeShop()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        prizeShop = mainGUI.attachMovie("prizeShop", "prizeShop", mainGUI.getNextHighestDepth());
        prizeShop.itemList.setMask(prizeShop.maskBg);
        prizeShop.scrollBar.onRelease = prizeShop.scrollBar.onReleaseOutside = function ()
        {
            this.gotoAndStop(1);
            this.stopDrag();
            _root.dragScrollbar = 0;
        };
        prizeShop.scrollBar.onPress = function ()
        {
            this.gotoAndStop("click");
            this.startDrag(true, this._x, 110, this._x, -87);
            _root.dragScrollbar = 34;
        };
        prizeShop.scrollBar.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        prizeShop.scrollBar.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        addDraggableGUI(prizeShop);
        prizeShop.scrollUpB.onRelease = prizeShop.scrollUpB.onReleaseOutside = function ()
        {
            _root.dragScrollbar = 0;
            this.gotoAndStop(1);
        };
        prizeShop.scrollUpB.onPress = function ()
        {
            _root.dragScrollbar = 51;
            this.gotoAndStop("click");
        };
        prizeShop.scrollUpB.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        prizeShop.scrollUpB.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        prizeShop.scrollDownB.onRelease = prizeShop.scrollDownB.onReleaseOutside = function ()
        {
            _root.dragScrollbar = 0;
            this.gotoAndStop(1);
        };
        prizeShop.scrollDownB.onPress = function ()
        {
            _root.dragScrollbar = 52;
            this.gotoAndStop("click");
        };
        prizeShop.scrollDownB.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        prizeShop.scrollDownB.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        prizeShop.itemList.buy1B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 150000)
                {
                    getTimestamp("casinoBuy", 1);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy2B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 10000)
                {
                    getTimestamp("casinoBuy", 2);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy3B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 50000)
                {
                    getTimestamp("casinoBuy", 3);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy4B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 10000)
                {
                    getTimestamp("casinoBuy", 4);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy5B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 17500)
                {
                    getTimestamp("casinoBuy", 5);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy6B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 1000)
                {
                    getTimestamp("casinoBuy", 6);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy7B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 1000)
                {
                    getTimestamp("casinoBuy", 7);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy8B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 5000)
                {
                    getTimestamp("casinoBuy", 8);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy9B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 4000)
                {
                    getTimestamp("casinoBuy", 9);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy10B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 3500)
                {
                    getTimestamp("casinoBuy", 10);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy11B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 30000)
                {
                    getTimestamp("casinoBuy", 11);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy12B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 30000)
                {
                    getTimestamp("casinoBuy", 12);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy13B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 40000)
                {
                    getTimestamp("casinoBuy", 13);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy14B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 20000)
                {
                    getTimestamp("casinoBuy", 14);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy15B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 5000)
                {
                    getTimestamp("casinoBuy", 15);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy16B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 500)
                {
                    getTimestamp("casinoBuy", 16);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy17B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 20000)
                {
                    getTimestamp("casinoBuy", 17);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy18B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 350000)
                {
                    getTimestamp("casinoBuy", 18);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy19B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 7500)
                {
                    getTimestamp("casinoBuy", 19);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy20B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 50000)
                {
                    getTimestamp("casinoBuy", 20);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy21B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 7500)
                {
                    getTimestamp("casinoBuy", 21);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy22B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 1000)
                {
                    getTimestamp("casinoBuy", 22);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy23B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 1000)
                {
                    getTimestamp("casinoBuy", 23);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy24B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 5000)
                {
                    getTimestamp("casinoBuy", 24);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy25B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 125000)
                {
                    getTimestamp("casinoBuy", 25);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy26B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 30000)
                {
                    getTimestamp("casinoBuy", 26);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy27B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 30000)
                {
                    getTimestamp("casinoBuy", 27);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy28B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 25000)
                {
                    getTimestamp("casinoBuy", 28);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy29B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 25000)
                {
                    getTimestamp("casinoBuy", 29);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy30B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 25000)
                {
                    getTimestamp("casinoBuy", 30);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy31B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 32500)
                {
                    getTimestamp("casinoBuy", 31);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.itemList.buy32B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Casino Token") >= 20000)
                {
                    getTimestamp("casinoBuy", 32);
                }
                else
                {
                    systemMessage("You don\'t have enough Casino Tokens.");
                } // end if
            } // end else if
        };
        prizeShop.exitB.onRelease = function ()
        {
            removeMovieClip (prizeShop);
            canMove = true;
            guiUp = false;
        };
        assignMouseEvents(prizeShop.exitB);
        for (var _loc3 = 1; _loc3 <= 32; ++_loc3)
        {
            assignMouseEvents(prizeShop.itemList["buy" + _loc3 + "B"]);
        } // end of for
    } // end if
} // End of the function
function npcPvPPrizeShop2()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        prizeShop = _root.mainGUI.attachMovie("battleQueuePrizeShop", "battleQueuePrizeShop", _root.mainGUI.getNextHighestDepth());
        prizeShop.itemList.setMask(prizeShop.maskBg);
        prizeShop.scrollBar.onRelease = prizeShop.scrollBar.onReleaseOutside = function ()
        {
            this.gotoAndStop(1);
            this.stopDrag();
            _root.dragScrollbar = 0;
        };
        prizeShop.scrollBar.onPress = function ()
        {
            this.gotoAndStop("click");
            this.startDrag(true, this._x, 110, this._x, -87);
            _root.dragScrollbar = 41;
        };
        prizeShop.scrollBar.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        prizeShop.scrollBar.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        addDraggableGUI(prizeShop);
        prizeShop.scrollUpB.onRelease = prizeShop.scrollUpB.onReleaseOutside = function ()
        {
            this.gotoAndStop(1);
        };
        prizeShop.scrollUpB.onPress = function ()
        {
            this.gotoAndStop("click");
        };
        prizeShop.scrollUpB.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        prizeShop.scrollUpB.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        prizeShop.scrollDownB.onRelease = prizeShop.scrollDownB.onReleaseOutside = function ()
        {
            this.gotoAndStop(1);
        };
        prizeShop.scrollDownB.onPress = function ()
        {
            this.gotoAndStop("click");
        };
        prizeShop.scrollDownB.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        prizeShop.scrollDownB.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        for (var _loc3 = 1; _loc3 <= 35; ++_loc3)
        {
            prizeShop.itemList["buy" + _loc3 + "B"].num = _loc3;
            prizeShop.itemList["buy" + _loc3 + "B"].onRelease = function ()
            {
                if (_root.isBusy == false)
                {
                    getTimestamp("battleQueuePrizeBuy", this.num);
                } // end if
            };
            assignMouseEvents(prizeShop.itemList["buy" + _loc3 + "B"]);
        } // end of for
        prizeShop.exitB.onRelease = function ()
        {
            removeMovieClip (prizeShop);
            canMove = true;
            guiUp = false;
        };
        assignMouseEvents(prizeShop.exitB);
    } // end if
} // End of the function
function npcBattleTowerPrizeShop()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        prizeShop = _root.mainGUI.attachMovie("battleTowerPrizeShop", "battleTowerPrizeShop", _root.mainGUI.getNextHighestDepth());
        prizeShop.itemList.setMask(prizeShop.maskBg);
        prizeShop.scrollBar.onRelease = prizeShop.scrollBar.onReleaseOutside = function ()
        {
            this.gotoAndStop(1);
            this.stopDrag();
            _root.dragScrollbar = 0;
        };
        prizeShop.scrollBar.onPress = function ()
        {
            this.gotoAndStop("click");
            this.startDrag(true, this._x, 110, this._x, -87);
            _root.dragScrollbar = 47;
        };
        prizeShop.scrollBar.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        prizeShop.scrollBar.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        addDraggableGUI(prizeShop);
        prizeShop.scrollUpB.onRelease = prizeShop.scrollUpB.onReleaseOutside = function ()
        {
            this.gotoAndStop(1);
        };
        prizeShop.scrollUpB.onPress = function ()
        {
            this.gotoAndStop("click");
        };
        prizeShop.scrollUpB.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        prizeShop.scrollUpB.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        prizeShop.scrollDownB.onRelease = prizeShop.scrollDownB.onReleaseOutside = function ()
        {
            this.gotoAndStop(1);
        };
        prizeShop.scrollDownB.onPress = function ()
        {
            this.gotoAndStop("click");
        };
        prizeShop.scrollDownB.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        prizeShop.scrollDownB.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        for (var _loc3 = 1; _loc3 <= 15; ++_loc3)
        {
            prizeShop.itemList["buy" + _loc3 + "B"].num = _loc3;
            prizeShop.itemList["buy" + _loc3 + "B"].onRelease = function ()
            {
                if (_root.isBusy == false)
                {
                    getTimestamp("battleTowerPrizeBuy", this.num);
                } // end if
            };
            assignMouseEvents(prizeShop.itemList["buy" + _loc3 + "B"]);
        } // end of for
        prizeShop.exitB.onRelease = function ()
        {
            removeMovieClip (prizeShop);
            canMove = true;
            guiUp = false;
        };
        assignMouseEvents(prizeShop.exitB);
    } // end if
} // End of the function
function npcSquirtbottle()
{
    if (hasItem("Squirtbottle") == false)
    {
        getTimestamp("getSquirtbottle");
    } // end if
    if (npcArray.length == 1)
    {
        npcArray[0] = [32, 5, "up", "Female 4", false, "Gardener", ["The odd tree is on Route 36. Please be careful!"], 1];
    }
    else if (npcArray.length == 2)
    {
        npcArray[1] = [32, 5, "up", "Female 4", false, "Gardener", ["The odd tree is on Route 36. Please be careful!"], 1];
    } // end else if
} // End of the function
function npcClanWarPrizeShop()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        clanPrizeShop = mainGUI.attachMovie("clanPrizeShop", "clanPrizeShop", mainGUI.getNextHighestDepth());
        clanPrizeShop.itemList.setMask(clanPrizeShop.maskBg);
        clanPrizeShop.scrollBar.onRelease = clanPrizeShop.scrollBar.onReleaseOutside = function ()
        {
            this.gotoAndStop(1);
            this.stopDrag();
            _root.dragScrollbar = 0;
        };
        clanPrizeShop.scrollBar.onPress = function ()
        {
            this.gotoAndStop("click");
            this.startDrag(true, this._x, 110, this._x, -87);
            _root.dragScrollbar = 27;
        };
        clanPrizeShop.scrollBar.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        clanPrizeShop.scrollBar.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        addDraggableGUI(clanPrizeShop);
        clanPrizeShop.scrollUpB.onRelease = clanPrizeShop.scrollUpB.onReleaseOutside = function ()
        {
            draggingClanPrizeShopUp = false;
            this.gotoAndStop(1);
        };
        clanPrizeShop.scrollUpB.onPress = function ()
        {
            draggingClanPrizeShopUp = true;
            this.gotoAndStop("click");
        };
        clanPrizeShop.scrollUpB.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        clanPrizeShop.scrollUpB.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        clanPrizeShop.scrollDownB.onRelease = clanPrizeShop.scrollDownB.onReleaseOutside = function ()
        {
            draggingClanPrizeShopDown = false;
            this.gotoAndStop(1);
        };
        clanPrizeShop.scrollDownB.onPress = function ()
        {
            draggingClanPrizeShopDown = true;
            this.gotoAndStop("click");
        };
        clanPrizeShop.scrollDownB.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        clanPrizeShop.scrollDownB.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        clanPrizeShop.itemList.buy1B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Clan War Token") >= 1800)
                {
                    getTimestamp("clanWarBuy", 1);
                }
                else
                {
                    systemMessage("You don\'t have enough Clan War Tokens.");
                } // end if
            } // end else if
        };
        clanPrizeShop.itemList.buy2B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Clan War Token") >= 700)
                {
                    getTimestamp("clanWarBuy", 2);
                }
                else
                {
                    systemMessage("You don\'t have enough Clan War Tokens.");
                } // end if
            } // end else if
        };
        clanPrizeShop.itemList.buy3B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Clan War Token") >= 800)
                {
                    getTimestamp("clanWarBuy", 3);
                }
                else
                {
                    systemMessage("You don\'t have enough Clan War Tokens.");
                } // end if
            } // end else if
        };
        clanPrizeShop.itemList.buy4B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Clan War Token") >= 750)
                {
                    getTimestamp("clanWarBuy", 4);
                }
                else
                {
                    systemMessage("You don\'t have enough Clan War Tokens.");
                } // end if
            } // end else if
        };
        clanPrizeShop.itemList.buy5B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Clan War Token") >= 750)
                {
                    getTimestamp("clanWarBuy", 5);
                }
                else
                {
                    systemMessage("You don\'t have enough Clan War Tokens.");
                } // end if
            } // end else if
        };
        clanPrizeShop.itemList.buy6B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Clan War Token") >= 50)
                {
                    getTimestamp("clanWarBuy", 6);
                }
                else
                {
                    systemMessage("You don\'t have enough Clan War Tokens.");
                } // end if
            } // end else if
        };
        clanPrizeShop.itemList.buy7B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Clan War Token") >= 500)
                {
                    getTimestamp("clanWarBuy", 7);
                }
                else
                {
                    systemMessage("You don\'t have enough Clan War Tokens.");
                } // end if
            } // end else if
        };
        clanPrizeShop.itemList.buy8B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Clan War Token") >= 20)
                {
                    getTimestamp("clanWarBuy", 8);
                }
                else
                {
                    systemMessage("You don\'t have enough Clan War Tokens.");
                } // end if
            } // end else if
        };
        clanPrizeShop.itemList.buy11B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Clan War Token") >= 50)
                {
                    getTimestamp("clanWarBuy", 11);
                }
                else
                {
                    systemMessage("You don\'t have enough Clan War Tokens.");
                } // end if
            } // end else if
        };
        clanPrizeShop.itemList.buy12B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Clan War Token") >= 50)
                {
                    getTimestamp("clanWarBuy", 12);
                }
                else
                {
                    systemMessage("You don\'t have enough Clan War Tokens.");
                } // end if
            } // end else if
        };
        clanPrizeShop.itemList.buy13B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Clan War Token") >= 5500)
                {
                    getTimestamp("clanWarBuy", 13);
                }
                else
                {
                    systemMessage("You don\'t have enough Clan War Tokens.");
                } // end if
            } // end else if
        };
        clanPrizeShop.itemList.buy14B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Clan War Token") >= 3000)
                {
                    getTimestamp("clanWarBuy", 14);
                }
                else
                {
                    systemMessage("You don\'t have enough Clan War Tokens.");
                } // end if
            } // end else if
        };
        clanPrizeShop.itemList.buy15B.onRelease = function ()
        {
            if (isBusy == false)
            {
                if (getInventoryAmount("Clan War Token") >= 3000)
                {
                    getTimestamp("clanWarBuy", 15);
                }
                else
                {
                    systemMessage("You don\'t have enough Clan War Tokens.");
                } // end if
            } // end else if
        };
        clanPrizeShop.exitB.onRelease = function ()
        {
            removeMovieClip (clanPrizeShop);
            canMove = true;
            guiUp = false;
        };
        assignMouseEvents(clanPrizeShop.exitB);
        assignMouseEvents(clanPrizeShop.itemList.buy1B);
        assignMouseEvents(clanPrizeShop.itemList.buy2B);
        assignMouseEvents(clanPrizeShop.itemList.buy3B);
        assignMouseEvents(clanPrizeShop.itemList.buy4B);
        assignMouseEvents(clanPrizeShop.itemList.buy5B);
        assignMouseEvents(clanPrizeShop.itemList.buy6B);
        assignMouseEvents(clanPrizeShop.itemList.buy7B);
        assignMouseEvents(clanPrizeShop.itemList.buy8B);
        assignMouseEvents(clanPrizeShop.itemList.buy9B);
        assignMouseEvents(clanPrizeShop.itemList.buy10B);
        assignMouseEvents(clanPrizeShop.itemList.buy11B);
        assignMouseEvents(clanPrizeShop.itemList.buy12B);
        assignMouseEvents(clanPrizeShop.itemList.buy13B);
        assignMouseEvents(clanPrizeShop.itemList.buy14B);
        assignMouseEvents(clanPrizeShop.itemList.buy15B);
    } // end if
} // End of the function
function npcPvPPrizeShop()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        pvpPrizeShop = mainGUI.attachMovie("pvpPrizeShop", "pvpPrizeShop", mainGUI.getNextHighestDepth());
        pvpPrizeShop.itemList.setMask(pvpPrizeShop.maskBg);
        pvpPrizeShop.scrollBar.onRelease = pvpPrizeShop.scrollBar.onReleaseOutside = function ()
        {
            this.gotoAndStop(1);
            this.stopDrag();
            _root.dragScrollbar = 0;
        };
        pvpPrizeShop.scrollBar.onPress = function ()
        {
            this.gotoAndStop("click");
            this.startDrag(true, this._x, 110, this._x, -87);
            _root.dragScrollbar = 26;
        };
        pvpPrizeShop.scrollBar.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        pvpPrizeShop.scrollBar.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        addDraggableGUI(pvpPrizeShop);
        pvpPrizeShop.scrollUpB.onRelease = pvpPrizeShop.scrollUpB.onReleaseOutside = function ()
        {
            draggingPvpPrizeShopUp = false;
            this.gotoAndStop(1);
        };
        pvpPrizeShop.scrollUpB.onPress = function ()
        {
            draggingPvpPrizeShopUp = true;
            this.gotoAndStop("click");
        };
        pvpPrizeShop.scrollUpB.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        pvpPrizeShop.scrollUpB.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        pvpPrizeShop.scrollDownB.onRelease = pvpPrizeShop.scrollDownB.onReleaseOutside = function ()
        {
            draggingPvpPrizeShopDown = false;
            this.gotoAndStop(1);
        };
        pvpPrizeShop.scrollDownB.onPress = function ()
        {
            draggingPvpPrizeShopDown = true;
            this.gotoAndStop("click");
        };
        pvpPrizeShop.scrollDownB.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        pvpPrizeShop.scrollDownB.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        var _loc4 = [1500, 500, 600, 800, 800, 500, 400, 200, 300, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 1000, 200, 100, 100, 250, 750, 400, 2000, 7000, 3500, 3000];
        for (var _loc3 = 1; _loc3 <= 38; ++_loc3)
        {
            pvpPrizeShop.itemList["buy" + _loc3 + "B"].num = _loc3;
            pvpPrizeShop.itemList["buy" + _loc3 + "B"].price = _loc4[_loc3 - 1];
            pvpPrizeShop.itemList["buy" + _loc3 + "B"].onRelease = function ()
            {
                if (isBusy == false)
                {
                    if (getInventoryAmount("PvP Token") >= this.price)
                    {
                        getTimestamp("pvpShopBuy", this.num);
                    }
                    else
                    {
                        systemMessage("You don\'t have enough PvP Tokens.");
                    } // end if
                } // end else if
            };
            assignMouseEvents(pvpPrizeShop.itemList["buy" + _loc3 + "B"]);
        } // end of for
        pvpPrizeShop.exitB.onRelease = function ()
        {
            removeMovieClip (pvpPrizeShop);
            canMove = true;
            guiUp = false;
        };
        assignMouseEvents(pvpPrizeShop.exitB);
    } // end if
} // End of the function
function npcClanWarMoveTutor()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        allButtonBox = _root.attachMovie("allButtonBox", "allButtonBox", _root.getNextHighestDepth());
        allButtonBox.msgT.text = "Teach a move to:";
        allButtonBox.nameT.htmlText = "<b>Move Tutor</b>";
        for (var _loc3 = 1; _loc3 < 9; ++_loc3)
        {
            allButtonBox["b" + _loc3]._visible = false;
            allButtonBox["b" + _loc3 + "T"]._visible = false;
        } // end of for
        for (var _loc3 = 1; _loc3 <= userPokemon.length; ++_loc3)
        {
            allButtonBox["b" + _loc3].loopNum = _loc3;
            allButtonBox["b" + _loc3]._visible = true;
            allButtonBox["b" + _loc3 + "T"]._visible = true;
            assignMouseEvents(allButtonBox["b" + _loc3]);
            allButtonBox["b" + _loc3 + "T"].htmlText = "<b>" + userPokemon[_loc3 - 1].name;
            allButtonBox["b" + _loc3].onRelease = function ()
            {
                if (isBusy == false)
                {
                    getTimestamp("relearnList2", this.loopNum);
                } // end if
            };
            if (_loc3 == userPokemon.length)
            {
                allButtonBox.b7._visible = true;
                allButtonBox.b7T._visible = true;
                allButtonBox.b7._y = allButtonBox["b" + (_loc3 + 1)]._y;
                allButtonBox.b7T._y = allButtonBox["b" + (_loc3 + 1) + "T"]._y;
            } // end if
        } // end of for
        for (var _loc3 = 1; _loc3 < 9; ++_loc3)
        {
            if (allButtonBox["b" + _loc3]._visible == false)
            {
                removeMovieClip (allButtonBox["b" + _loc3]);
            } // end if
        } // end of for
        assignMouseEvents(allButtonBox.b7);
        allButtonBox.b7T.htmlText = "<b>No thanks";
        allButtonBox.b7.onRelease = function ()
        {
            guiUp = false;
            canMove = true;
            removeMovieClip (allButtonBox);
        };
        allButtonBox._x = newWidth / 2;
        allButtonBox._y = newHeight / 2;
    } // end if
} // End of the function
function npcClanWarEggMoveTutor()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        allButtonBox = _root.attachMovie("allButtonBox", "allButtonBox", _root.getNextHighestDepth());
        allButtonBox.msgT.text = "Teach a move to:";
        allButtonBox.nameT.htmlText = "<b>Egg Move Tutor</b>";
        for (var _loc3 = 1; _loc3 < 9; ++_loc3)
        {
            allButtonBox["b" + _loc3]._visible = false;
            allButtonBox["b" + _loc3 + "T"]._visible = false;
        } // end of for
        for (var _loc3 = 1; _loc3 <= userPokemon.length; ++_loc3)
        {
            allButtonBox["b" + _loc3].loopNum = _loc3;
            allButtonBox["b" + _loc3]._visible = true;
            allButtonBox["b" + _loc3 + "T"]._visible = true;
            assignMouseEvents(allButtonBox["b" + _loc3]);
            allButtonBox["b" + _loc3 + "T"].htmlText = "<b>" + userPokemon[_loc3 - 1].name;
            allButtonBox["b" + _loc3].onRelease = function ()
            {
                if (isBusy == false)
                {
                    getTimestamp("relearnList3", this.loopNum);
                } // end if
            };
            if (_loc3 == userPokemon.length)
            {
                allButtonBox.b7._visible = true;
                allButtonBox.b7T._visible = true;
                allButtonBox.b7._y = allButtonBox["b" + (_loc3 + 1)]._y;
                allButtonBox.b7T._y = allButtonBox["b" + (_loc3 + 1) + "T"]._y;
            } // end if
        } // end of for
        for (var _loc3 = 1; _loc3 < 9; ++_loc3)
        {
            if (allButtonBox["b" + _loc3]._visible == false)
            {
                removeMovieClip (allButtonBox["b" + _loc3]);
            } // end if
        } // end of for
        assignMouseEvents(allButtonBox.b7);
        allButtonBox.b7T.htmlText = "<b>No thanks";
        allButtonBox.b7.onRelease = function ()
        {
            guiUp = false;
            canMove = true;
            removeMovieClip (allButtonBox);
        };
        allButtonBox._x = newWidth / 2;
        allButtonBox._y = newHeight / 2;
    } // end if
} // End of the function
function npcEventMoveTutor()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        allButtonBox = _root.attachMovie("allButtonBox", "allButtonBox", _root.getNextHighestDepth());
        allButtonBox.msgT.text = "Teach a move to:";
        allButtonBox.nameT.htmlText = "<b>Event Move Tutor</b>";
        for (var _loc3 = 1; _loc3 < 9; ++_loc3)
        {
            allButtonBox["b" + _loc3]._visible = false;
            allButtonBox["b" + _loc3 + "T"]._visible = false;
        } // end of for
        for (var _loc3 = 1; _loc3 <= userPokemon.length; ++_loc3)
        {
            allButtonBox["b" + _loc3].loopNum = _loc3;
            allButtonBox["b" + _loc3]._visible = true;
            allButtonBox["b" + _loc3 + "T"]._visible = true;
            assignMouseEvents(allButtonBox["b" + _loc3]);
            allButtonBox["b" + _loc3 + "T"].htmlText = "<b>" + userPokemon[_loc3 - 1].name;
            allButtonBox["b" + _loc3].onRelease = function ()
            {
                if (isBusy == false)
                {
                    getTimestamp("relearnList5", this.loopNum);
                } // end if
            };
            if (_loc3 == userPokemon.length)
            {
                allButtonBox.b7._visible = true;
                allButtonBox.b7T._visible = true;
                allButtonBox.b7._y = allButtonBox["b" + (_loc3 + 1)]._y;
                allButtonBox.b7T._y = allButtonBox["b" + (_loc3 + 1) + "T"]._y;
            } // end if
        } // end of for
        for (var _loc3 = 1; _loc3 < 9; ++_loc3)
        {
            if (allButtonBox["b" + _loc3]._visible == false)
            {
                removeMovieClip (allButtonBox["b" + _loc3]);
            } // end if
        } // end of for
        assignMouseEvents(allButtonBox.b7);
        allButtonBox.b7T.htmlText = "<b>No thanks";
        allButtonBox.b7.onRelease = function ()
        {
            guiUp = false;
            canMove = true;
            removeMovieClip (allButtonBox);
        };
        allButtonBox._x = newWidth / 2;
        allButtonBox._y = newHeight / 2;
    } // end if
} // End of the function
function npcTransferMoveTutor()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        allButtonBox = _root.attachMovie("allButtonBox", "allButtonBox", _root.getNextHighestDepth());
        allButtonBox.msgT.text = "Teach a move to:";
        allButtonBox.nameT.htmlText = "<b>Transfer Move Tutor</b>";
        for (var _loc3 = 1; _loc3 < 9; ++_loc3)
        {
            allButtonBox["b" + _loc3]._visible = false;
            allButtonBox["b" + _loc3 + "T"]._visible = false;
        } // end of for
        for (var _loc3 = 1; _loc3 <= userPokemon.length; ++_loc3)
        {
            allButtonBox["b" + _loc3].loopNum = _loc3;
            allButtonBox["b" + _loc3]._visible = true;
            allButtonBox["b" + _loc3 + "T"]._visible = true;
            assignMouseEvents(allButtonBox["b" + _loc3]);
            allButtonBox["b" + _loc3 + "T"].htmlText = "<b>" + userPokemon[_loc3 - 1].name;
            allButtonBox["b" + _loc3].onRelease = function ()
            {
                if (isBusy == false)
                {
                    getTimestamp("relearnList6", this.loopNum);
                } // end if
            };
            if (_loc3 == userPokemon.length)
            {
                allButtonBox.b7._visible = true;
                allButtonBox.b7T._visible = true;
                allButtonBox.b7._y = allButtonBox["b" + (_loc3 + 1)]._y;
                allButtonBox.b7T._y = allButtonBox["b" + (_loc3 + 1) + "T"]._y;
            } // end if
        } // end of for
        for (var _loc3 = 1; _loc3 < 9; ++_loc3)
        {
            if (allButtonBox["b" + _loc3]._visible == false)
            {
                removeMovieClip (allButtonBox["b" + _loc3]);
            } // end if
        } // end of for
        assignMouseEvents(allButtonBox.b7);
        allButtonBox.b7T.htmlText = "<b>No thanks";
        allButtonBox.b7.onRelease = function ()
        {
            guiUp = false;
            canMove = true;
            removeMovieClip (allButtonBox);
        };
        allButtonBox._x = newWidth / 2;
        allButtonBox._y = newHeight / 2;
    } // end if
} // End of the function
function npcLotteryTicket()
{
} // End of the function
function safariZoneTicket()
{
    canMove = false;
    guiUp = true;
    darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
    darkScreen._width = Stage.width;
    darkScreen._height = Stage.height;
    darkScreen._alpha = 70;
    darkScreen._x = newWidth / 2;
    darkScreen._y = newHeight / 2;
    merchantBox = _root.attachMovie("merchantBox", "merchantBox", _root.getNextHighestDepth());
    merchantBox.msgT.htmlText = "<b>Purchase a 24-hour Safari Zone ticket for $20,000?";
    merchantBox.nameT.htmlText = "<b>Safari Zone Ticket";
    merchantBox.yesB.p = false;
    merchantBox.yesB.onRelease = function ()
    {
        if (money >= 20000 && isBusy == false && this.p == false)
        {
            this.p = true;
            getTimestamp("purchaseSafariZoneTicket");
        } // end if
    };
    merchantBox.noB.onRelease = function ()
    {
        guiUp = false;
        canMove = true;
        removeMovieClip (merchantBox);
        removeMovieClip (darkScreen);
    };
    merchantBox._x = newWidth / 2;
    merchantBox._y = newHeight / 2;
} // End of the function
function johtoSafariZoneTicket()
{
    canMove = false;
    guiUp = true;
    darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
    darkScreen._width = Stage.width;
    darkScreen._height = Stage.height;
    darkScreen._alpha = 70;
    darkScreen._x = newWidth / 2;
    darkScreen._y = newHeight / 2;
    merchantBox = _root.attachMovie("merchantBox", "merchantBox", _root.getNextHighestDepth());
    merchantBox.msgT.htmlText = "<b>Purchase a 24-hour Johto Safari Zone ticket for $80,000?";
    merchantBox.nameT.htmlText = "<b>Johto Safari Zone Ticket";
    merchantBox.yesB.onRelease = function ()
    {
        if (money >= 80000 && isBusy == false)
        {
            getTimestamp("purchaseJohtoSafariZoneTicket");
        } // end if
    };
    merchantBox.noB.onRelease = function ()
    {
        guiUp = false;
        canMove = true;
        removeMovieClip (merchantBox);
        removeMovieClip (darkScreen);
    };
    merchantBox._x = newWidth / 2;
    merchantBox._y = newHeight / 2;
} // End of the function
function hoennSafariZoneTicket()
{
    canMove = false;
    guiUp = true;
    darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
    darkScreen._width = Stage.width;
    darkScreen._height = Stage.height;
    darkScreen._alpha = 70;
    darkScreen._x = newWidth / 2;
    darkScreen._y = newHeight / 2;
    merchantBox = _root.attachMovie("merchantBox", "merchantBox", _root.getNextHighestDepth());
    merchantBox.msgT.htmlText = "<b>Purchase a 24-hour Hoenn Safari Zone ticket for $400,000?";
    merchantBox.nameT.htmlText = "<b>Hoenn Safari Zone Ticket";
    merchantBox.yesB.onRelease = function ()
    {
        if (money >= 400000 && isBusy == false)
        {
            getTimestamp("purchaseHoennSafariZoneTicket");
        } // end if
    };
    merchantBox.noB.onRelease = function ()
    {
        guiUp = false;
        canMove = true;
        removeMovieClip (merchantBox);
        removeMovieClip (darkScreen);
    };
    merchantBox._x = newWidth / 2;
    merchantBox._y = newHeight / 2;
} // End of the function
function sinnohSafariZoneTicket()
{
    canMove = false;
    guiUp = true;
    darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
    darkScreen._width = Stage.width;
    darkScreen._height = Stage.height;
    darkScreen._alpha = 70;
    darkScreen._x = newWidth / 2;
    darkScreen._y = newHeight / 2;
    merchantBox = _root.attachMovie("merchantBox", "merchantBox", _root.getNextHighestDepth());
    merchantBox.msgT.htmlText = "<b>Purchase a 24-hour Sinnoh Safari Zone ticket for $400,000?";
    merchantBox.nameT.htmlText = "<b>Sinnoh Safari Zone Ticket";
    merchantBox.yesB.onRelease = function ()
    {
        if (money >= 400000 && isBusy == false)
        {
            getTimestamp("purchaseSinnohSafariZoneTicket");
        } // end if
    };
    merchantBox.noB.onRelease = function ()
    {
        guiUp = false;
        canMove = true;
        removeMovieClip (merchantBox);
        removeMovieClip (darkScreen);
    };
    merchantBox._x = newWidth / 2;
    merchantBox._y = newHeight / 2;
} // End of the function
function hasItem(itemName)
{
    itemName = itemName.toLowerCase();
    for (var _loc1 = 0; _loc1 < inventory.length; ++_loc1)
    {
        if (inventory[_loc1][0].toLowerCase() == itemName && inventory[_loc1].length <= 2)
        {
            return (true);
        } // end if
    } // end of for
    return (false);
} // End of the function
function getItemPos(itemName)
{
    itemName = itemName.toLowerCase();
    for (var _loc1 = 0; _loc1 < inventory.length; ++_loc1)
    {
        if (inventory[_loc1][0].toLowerCase() == itemName)
        {
            return (_loc1);
        } // end if
    } // end of for
    return (-1);
} // End of the function
function getInventoryAmount(itemName)
{
    itemName = itemName.toLowerCase();
    for (var _loc1 = 0; _loc1 < inventory.length; ++_loc1)
    {
        if (inventory[_loc1][0].toLowerCase() == itemName)
        {
            return (Number(inventory[_loc1][1]));
        } // end if
    } // end of for
    return (0);
} // End of the function
function hasBadge(badgeName)
{
    badgeName = badgeName.toLowerCase();
    for (var _loc1 = 0; _loc1 < badges.length; ++_loc1)
    {
        if (badges[_loc1].toLowerCase() == badgeName)
        {
            return (true);
        } // end if
    } // end of for
    return (false);
} // End of the function
function hasQuestArray(questName)
{
    questName = questName.toLowerCase();
    for (var _loc1 = 0; _loc1 < questArray.length; ++_loc1)
    {
        if (questArray[_loc1][0].toLowerCase() == questName)
        {
            if (String(questArray[_loc1][1]) == "true")
            {
                return (true);
                continue;
            } // end if
            if (Number(questArray[_loc1][1]) > 0 && Number(questArray[_loc1][1]) != undefined && !isNaN(Number(questArray[_loc1][1])))
            {
                return (true);
                continue;
            } // end if
            return (false);
        } // end if
    } // end of for
    return (false);
} // End of the function
function assignMouseEvents(target, textToNameT)
{
    if (textToNameT == true)
    {
        target.onRollOver = function ()
        {
            this.gotoAndStop("hover");
            this.nameT.htmlText = "<b>" + this.nameText + "</b>";
        };
        target.onRollOut = function ()
        {
            this.gotoAndStop(1);
            this.nameT.htmlText = "<b>" + this.nameText + "</b>";
        };
        target.onPress = function ()
        {
            this.gotoAndStop("click");
            this.nameT.htmlText = "<b>" + this.nameText + "</b>";
        };
    }
    else
    {
        target.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        target.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        target.onPress = function ()
        {
            this.gotoAndStop("click");
        };
    } // end else if
} // End of the function
function remakeInventory()
{
    mainGUI.inventory.inventoryIcons.setMask(mainGUI.inventory.maskBg);
    for (var _loc3 = 1; _loc3 < 90; ++_loc3)
    {
        mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b1.gotoAndStop(1);
        mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b2.gotoAndStop(1);
        mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b3.gotoAndStop(1);
        mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b4.gotoAndStop(1);
        mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b5.gotoAndStop(1);
        mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].i1.gotoAndStop(1);
        mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].t1.text = "";
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b1.onPress;
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b2.onPress;
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b3.onPress;
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b4.onPress;
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b5.onPress;
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b1.onRollOver;
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b1.onRollOut;
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b1.onRelease;
        mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].i2.gotoAndStop(1);
        mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].t2.text = "";
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b2.onRollOver;
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b2.onRollOut;
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b2.onRelease;
        mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].i3.gotoAndStop(1);
        mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].t3.text = "";
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b3.onRollOver;
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b3.onRollOut;
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b3.onRelease;
        mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].i4.gotoAndStop(1);
        mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].t4.text = "";
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b4.onRollOver;
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b4.onRollOut;
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b4.onRelease;
        mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].i5.gotoAndStop(1);
        mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].t5.text = "";
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b5.onRollOver;
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b5.onRollOut;
        delete mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b5.onRelease;
        if (_loc3 >= 9)
        {
            removeMovieClip (mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3]);
        } // end if
    } // end of for
    for (var _loc3 = 1; _loc3 <= Math.ceil(inventory.length / 5); ++_loc3)
    {
        if (_loc3 >= 9)
        {
            removeMovieClip (mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3]);
            mainGUI.inventory.inventoryIcons.attachMovie("inventoryBar", "inventoryBar" + _loc3, mainGUI.inventory.inventoryIcons.getNextHighestDepth());
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3]._x = 0;
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3]._y = -130.150000 + (_loc3 - 1) * 37;
        } // end if
        if (inventory[0 + 5 * (_loc3 - 1)][0] != undefined)
        {
            if (inventory[0 + 5 * (_loc3 - 1)][0].indexOf("HM") != -1 || inventory[0 + 5 * (_loc3 - 1)][0].indexOf("TM") != -1 && inventory[0 + 5 * (_loc3 - 1)][0] != "TM Box")
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].i1.gotoAndStop("tmhm");
            }
            else
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].i1.gotoAndStop(inventory[0 + 5 * (_loc3 - 1)][0]);
            } // end else if
            if (isEquippableItem(inventory[0 + 5 * (_loc3 - 1)][0]))
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b1.gotoAndStop("equippable");
            }
            else
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b1.gotoAndStop(1);
            } // end else if
            if (player.hat == inventory[0 + 5 * (_loc3 - 1)][0] || player.wings == inventory[0 + 5 * (_loc3 - 1)][0] || player.tail == inventory[0 + 5 * (_loc3 - 1)][0] || player.face2 == inventory[0 + 5 * (_loc3 - 1)][0] || player.cape == inventory[0 + 5 * (_loc3 - 1)][0] || player.neck == inventory[0 + 5 * (_loc3 - 1)][0] || player.costume == inventory[0 + 5 * (_loc3 - 1)][0])
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b1.gotoAndStop("equipped");
            } // end if
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].t1.htmlText = "<b>" + inventory[0 + 5 * (_loc3 - 1)][1];
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b1.name = inventory[0 + 5 * (_loc3 - 1)][0];
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b1.i3 = inventory[0 + 5 * (_loc3 - 1)][2];
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b1.loopNum = _loc3;
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b1.lastClick = 0;
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b1.onRollOver = function ()
            {
                var _loc2 = {x: _xmouse, y: _ymouse};
                mainGUI.inventory.globalToLocal(_loc2);
                mainGUI.inventory.inventoryHighlight._x = _loc2.x + 10;
                mainGUI.inventory.inventoryHighlight._y = _loc2.y;
                if (this.i3 != undefined && this.i3.indexOf("-") != -1)
                {
                    mainGUI.inventory.inventoryHighlight.nameT.htmlText = "<b>" + this.name + " (Dyed " + this.i3 + ")";
                }
                else
                {
                    mainGUI.inventory.inventoryHighlight.nameT.htmlText = "<b>" + this.name;
                } // end else if
                mainGUI.inventory.inventoryHighlight.startDrag();
                mainGUI.inventory.inventoryHighlight._visible = true;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b1.onRollOut = function ()
            {
                mainGUI.inventory.inventoryHighlight.stopDrag();
                mainGUI.inventory.inventoryHighlight._visible = false;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b1.onPress = function ()
            {
                mainGUI.inventory.inventoryHighlight.stopDrag();
                mainGUI.inventory.inventoryHighlight._visible = false;
                itemImageDrag2.stopDrag();
                removeMovieClip (itemImageDrag2);
                itemImageDrag2 = _root.attachMovie("itemImage", "itemImageDrag2", _root.getNextHighestDepth());
                var _loc3 = {x: mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i1._x, y: mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i1._y};
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i1._parent.localToGlobal(_loc3);
                itemImageDrag2._x = _loc3.x;
                itemImageDrag2._y = _loc3.y;
                itemImageDrag2.gotoAndStop(inventory[this.loopNum * 5 - 5][0]);
                if (inventory[this.loopNum * 5 - 5][0].indexOf("TM") != -1 && inventory[this.loopNum * 5 - 5][0] != "TM Box" || inventory[this.loopNum * 5 - 5][0].indexOf("HM") != -1)
                {
                    itemImageDrag2.gotoAndStop("tmhm");
                } // end if
                itemImageDrag2.startDrag();
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i1._visible = false;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b1.onRelease = function ()
            {
                if (getTimer() - this.lastClick <= 350)
                {
                    this.lastClick = 0;
                    itemNum = this.loopNum * 5 - 5;
                    useInventoryItem(this.name);
                }
                else
                {
                    this.lastClick = getTimer();
                } // end else if
                checkInventoryHits(this.loopNum, 1);
                itemImageDrag2.stopDrag();
                removeMovieClip (itemImageDrag2);
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i1._visible = true;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b1.onReleaseOutside = function ()
            {
                mainGUI.inventory.inventoryHighlight.stopDrag();
                mainGUI.inventory.inventoryHighlight._visible = false;
                checkInventoryHits(this.loopNum, 1);
                itemImageDrag2.stopDrag();
                removeMovieClip (itemImageDrag2);
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i1._visible = true;
            };
        }
        else
        {
            break;
        } // end else if
        if (inventory[1 + 5 * (_loc3 - 1)][0] != undefined)
        {
            if (inventory[1 + 5 * (_loc3 - 1)][0].indexOf("HM") != -1 || inventory[1 + 5 * (_loc3 - 1)][0].indexOf("TM") != -1 && inventory[1 + 5 * (_loc3 - 1)][0] != "TM Box")
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].i2.gotoAndStop("tmhm");
            }
            else
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].i2.gotoAndStop(inventory[1 + 5 * (_loc3 - 1)][0]);
            } // end else if
            if (isEquippableItem(inventory[1 + 5 * (_loc3 - 1)][0]))
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b2.gotoAndStop("equippable");
            }
            else
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b2.gotoAndStop(1);
            } // end else if
            if (player.hat == inventory[1 + 5 * (_loc3 - 1)][0] || player.wings == inventory[1 + 5 * (_loc3 - 1)][0] || player.tail == inventory[1 + 5 * (_loc3 - 1)][0] || player.face2 == inventory[1 + 5 * (_loc3 - 1)][0] || player.cape == inventory[1 + 5 * (_loc3 - 1)][0] || player.neck == inventory[1 + 5 * (_loc3 - 1)][0] || player.costume == inventory[1 + 5 * (_loc3 - 1)][0])
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b2.gotoAndStop("equipped");
            } // end if
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].t2.htmlText = "<b>" + inventory[1 + 5 * (_loc3 - 1)][1];
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b2.name = inventory[1 + 5 * (_loc3 - 1)][0];
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b2.i3 = inventory[1 + 5 * (_loc3 - 1)][2];
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b2.loopNum = _loc3;
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b2.lastClick = 0;
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b2.onRollOver = function ()
            {
                var _loc2 = {x: _xmouse, y: _ymouse};
                mainGUI.inventory.globalToLocal(_loc2);
                mainGUI.inventory.inventoryHighlight._x = _loc2.x + 10;
                mainGUI.inventory.inventoryHighlight._y = _loc2.y;
                if (this.i3 != undefined && this.i3.indexOf("-") != -1)
                {
                    mainGUI.inventory.inventoryHighlight.nameT.htmlText = "<b>" + this.name + " (Dyed " + this.i3 + ")";
                }
                else
                {
                    mainGUI.inventory.inventoryHighlight.nameT.htmlText = "<b>" + this.name;
                } // end else if
                mainGUI.inventory.inventoryHighlight.startDrag();
                mainGUI.inventory.inventoryHighlight._visible = true;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b2.onRollOut = function ()
            {
                mainGUI.inventory.inventoryHighlight.stopDrag();
                mainGUI.inventory.inventoryHighlight._visible = false;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b2.onPress = function ()
            {
                mainGUI.inventory.inventoryHighlight.stopDrag();
                mainGUI.inventory.inventoryHighlight._visible = false;
                itemImageDrag2.stopDrag();
                removeMovieClip (itemImageDrag2);
                itemImageDrag2 = _root.attachMovie("itemImage", "itemImageDrag2", _root.getNextHighestDepth());
                var _loc3 = {x: mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i2._x, y: mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i2._y};
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i2._parent.localToGlobal(_loc3);
                itemImageDrag2._x = _loc3.x;
                itemImageDrag2._y = _loc3.y;
                itemImageDrag2.gotoAndStop(inventory[this.loopNum * 5 - 5 + 1][0]);
                if (inventory[this.loopNum * 5 - 5 + 1][0].indexOf("TM") != -1 && inventory[this.loopNum * 5 - 5 + 1][0] != "TM Box" || inventory[this.loopNum * 5 - 5 + 1][0].indexOf("HM") != -1)
                {
                    itemImageDrag2.gotoAndStop("tmhm");
                } // end if
                itemImageDrag2.startDrag();
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i2._visible = false;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b2.onRelease = function ()
            {
                if (getTimer() - this.lastClick <= 350)
                {
                    this.lastClick = 0;
                    itemNum = this.loopNum * 5 - 5 + 1;
                    useInventoryItem(this.name);
                }
                else
                {
                    this.lastClick = getTimer();
                } // end else if
                checkInventoryHits(this.loopNum, 2);
                itemImageDrag2.stopDrag();
                removeMovieClip (itemImageDrag2);
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i2._visible = true;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b2.onReleaseOutside = function ()
            {
                mainGUI.inventory.inventoryHighlight.stopDrag();
                mainGUI.inventory.inventoryHighlight._visible = false;
                checkInventoryHits(this.loopNum, 2);
                itemImageDrag2.stopDrag();
                removeMovieClip (itemImageDrag2);
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i2._visible = true;
            };
        }
        else
        {
            break;
        } // end else if
        if (inventory[2 + 5 * (_loc3 - 1)][0] != undefined)
        {
            if (inventory[2 + 5 * (_loc3 - 1)][0].indexOf("HM") != -1 || inventory[2 + 5 * (_loc3 - 1)][0].indexOf("TM") != -1 && inventory[2 + 5 * (_loc3 - 1)][0] != "TM Box")
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].i3.gotoAndStop("tmhm");
            }
            else
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].i3.gotoAndStop(inventory[2 + 5 * (_loc3 - 1)][0]);
            } // end else if
            if (isEquippableItem(inventory[2 + 5 * (_loc3 - 1)][0]))
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b3.gotoAndStop("equippable");
            }
            else
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b3.gotoAndStop(1);
            } // end else if
            if (player.hat == inventory[2 + 5 * (_loc3 - 1)][0] || player.wings == inventory[2 + 5 * (_loc3 - 1)][0] || player.tail == inventory[2 + 5 * (_loc3 - 1)][0] || player.face2 == inventory[2 + 5 * (_loc3 - 1)][0] || player.cape == inventory[2 + 5 * (_loc3 - 1)][0] || player.neck == inventory[2 + 5 * (_loc3 - 1)][0] || player.costume == inventory[2 + 5 * (_loc3 - 1)][0])
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b3.gotoAndStop("equipped");
            } // end if
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].t3.htmlText = "<b>" + inventory[2 + 5 * (_loc3 - 1)][1];
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b3.name = inventory[2 + 5 * (_loc3 - 1)][0];
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b3.i3 = inventory[2 + 5 * (_loc3 - 1)][2];
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b3.loopNum = _loc3;
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b3.lastClick = 0;
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b3.onRollOver = function ()
            {
                var _loc2 = {x: _xmouse, y: _ymouse};
                mainGUI.inventory.globalToLocal(_loc2);
                mainGUI.inventory.inventoryHighlight._x = _loc2.x + 10;
                mainGUI.inventory.inventoryHighlight._y = _loc2.y;
                if (this.i3 != undefined && this.i3.indexOf("-") != -1)
                {
                    mainGUI.inventory.inventoryHighlight.nameT.htmlText = "<b>" + this.name + " (Dyed " + this.i3 + ")";
                }
                else
                {
                    mainGUI.inventory.inventoryHighlight.nameT.htmlText = "<b>" + this.name;
                } // end else if
                mainGUI.inventory.inventoryHighlight.startDrag();
                mainGUI.inventory.inventoryHighlight._visible = true;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b3.onRollOut = function ()
            {
                mainGUI.inventory.inventoryHighlight.stopDrag();
                mainGUI.inventory.inventoryHighlight._visible = false;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b3.onPress = function ()
            {
                mainGUI.inventory.inventoryHighlight.stopDrag();
                mainGUI.inventory.inventoryHighlight._visible = false;
                itemImageDrag2.stopDrag();
                removeMovieClip (itemImageDrag2);
                itemImageDrag2 = _root.attachMovie("itemImage", "itemImageDrag2", _root.getNextHighestDepth());
                var _loc3 = {x: mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i3._x, y: mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i3._y};
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i3._parent.localToGlobal(_loc3);
                itemImageDrag2._x = _loc3.x;
                itemImageDrag2._y = _loc3.y;
                itemImageDrag2.gotoAndStop(inventory[this.loopNum * 5 - 5 + 2][0]);
                if (inventory[this.loopNum * 5 - 5 + 2][0].indexOf("TM") != -1 && inventory[this.loopNum * 5 - 5 + 2][0] != "TM Box" || inventory[this.loopNum * 5 - 5 + 2][0].indexOf("HM") != -1)
                {
                    itemImageDrag2.gotoAndStop("tmhm");
                } // end if
                itemImageDrag2.startDrag();
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i3._visible = false;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b3.onRelease = function ()
            {
                if (getTimer() - this.lastClick <= 350)
                {
                    this.lastClick = 0;
                    itemNum = this.loopNum * 5 - 5 + 2;
                    useInventoryItem(this.name);
                }
                else
                {
                    this.lastClick = getTimer();
                } // end else if
                checkInventoryHits(this.loopNum, 3);
                itemImageDrag2.stopDrag();
                removeMovieClip (itemImageDrag2);
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i3._visible = true;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b3.onReleaseOutside = function ()
            {
                mainGUI.inventory.inventoryHighlight.stopDrag();
                mainGUI.inventory.inventoryHighlight._visible = false;
                checkInventoryHits(this.loopNum, 3);
                itemImageDrag2.stopDrag();
                removeMovieClip (itemImageDrag2);
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i3._visible = true;
            };
        }
        else
        {
            break;
        } // end else if
        if (inventory[3 + 5 * (_loc3 - 1)][0] != undefined)
        {
            if (inventory[3 + 5 * (_loc3 - 1)][0].indexOf("HM") != -1 || inventory[3 + 5 * (_loc3 - 1)][0].indexOf("TM") != -1 && inventory[3 + 5 * (_loc3 - 1)][0] != "TM Box")
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].i4.gotoAndStop("tmhm");
            }
            else
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].i4.gotoAndStop(inventory[3 + 5 * (_loc3 - 1)][0]);
            } // end else if
            if (isEquippableItem(inventory[3 + 5 * (_loc3 - 1)][0]))
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b4.gotoAndStop("equippable");
            }
            else
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b4.gotoAndStop(1);
            } // end else if
            if (player.hat == inventory[3 + 5 * (_loc3 - 1)][0] || player.wings == inventory[3 + 5 * (_loc3 - 1)][0] || player.tail == inventory[3 + 5 * (_loc3 - 1)][0] || player.face2 == inventory[3 + 5 * (_loc3 - 1)][0] || player.cape == inventory[3 + 5 * (_loc3 - 1)][0] || player.neck == inventory[3 + 5 * (_loc3 - 1)][0] || player.costume == inventory[3 + 5 * (_loc3 - 1)][0])
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b4.gotoAndStop("equipped");
            } // end if
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].t4.htmlText = "<b>" + inventory[3 + 5 * (_loc3 - 1)][1];
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b4.name = inventory[3 + 5 * (_loc3 - 1)][0];
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b4.i3 = inventory[3 + 5 * (_loc3 - 1)][2];
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b4.loopNum = _loc3;
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b4.lastClick = 0;
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b4.onRollOver = function ()
            {
                var _loc2 = {x: _xmouse, y: _ymouse};
                mainGUI.inventory.globalToLocal(_loc2);
                mainGUI.inventory.inventoryHighlight._x = _loc2.x + 10;
                mainGUI.inventory.inventoryHighlight._y = _loc2.y;
                if (this.i3 != undefined && this.i3.indexOf("-") != -1)
                {
                    mainGUI.inventory.inventoryHighlight.nameT.htmlText = "<b>" + this.name + " (Dyed " + this.i3 + ")";
                }
                else
                {
                    mainGUI.inventory.inventoryHighlight.nameT.htmlText = "<b>" + this.name;
                } // end else if
                mainGUI.inventory.inventoryHighlight.startDrag();
                mainGUI.inventory.inventoryHighlight._visible = true;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b4.onRollOut = function ()
            {
                mainGUI.inventory.inventoryHighlight.stopDrag();
                mainGUI.inventory.inventoryHighlight._visible = false;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b4.onPress = function ()
            {
                mainGUI.inventory.inventoryHighlight.stopDrag();
                mainGUI.inventory.inventoryHighlight._visible = false;
                itemImageDrag2.stopDrag();
                removeMovieClip (itemImageDrag2);
                itemImageDrag2 = _root.attachMovie("itemImage", "itemImageDrag2", _root.getNextHighestDepth());
                var _loc3 = {x: mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i4._x, y: mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i4._y};
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i4._parent.localToGlobal(_loc3);
                itemImageDrag2._x = _loc3.x;
                itemImageDrag2._y = _loc3.y;
                itemImageDrag2.gotoAndStop(inventory[this.loopNum * 5 - 5 + 3][0]);
                if (inventory[this.loopNum * 5 - 5 + 3][0].indexOf("TM") != -1 && inventory[this.loopNum * 5 - 5 + 3][0] != "TM Box" || inventory[this.loopNum * 5 - 5 + 3][0].indexOf("HM") != -1)
                {
                    itemImageDrag2.gotoAndStop("tmhm");
                } // end if
                itemImageDrag2.startDrag();
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i4._visible = false;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b4.onRelease = function ()
            {
                if (getTimer() - this.lastClick <= 350)
                {
                    this.lastClick = 0;
                    itemNum = this.loopNum * 5 - 5 + 3;
                    useInventoryItem(this.name);
                }
                else
                {
                    this.lastClick = getTimer();
                } // end else if
                checkInventoryHits(this.loopNum, 4);
                itemImageDrag2.stopDrag();
                removeMovieClip (itemImageDrag2);
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i4._visible = true;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b4.onReleaseOutside = function ()
            {
                mainGUI.inventory.inventoryHighlight.stopDrag();
                mainGUI.inventory.inventoryHighlight._visible = false;
                7;
                checkInventoryHits(this.loopNum, 4);
                itemImageDrag2.stopDrag();
                removeMovieClip (itemImageDrag2);
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i4._visible = true;
            };
        }
        else
        {
            break;
        } // end else if
        if (inventory[4 + 5 * (_loc3 - 1)][0] != undefined)
        {
            if (inventory[4 + 5 * (_loc3 - 1)][0].indexOf("HM") != -1 || inventory[4 + 5 * (_loc3 - 1)][0].indexOf("TM") != -1 && inventory[4 + 5 * (_loc3 - 1)][0] != "TM Box")
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].i5.gotoAndStop("tmhm");
            }
            else
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].i5.gotoAndStop(inventory[4 + 5 * (_loc3 - 1)][0]);
            } // end else if
            if (isEquippableItem(inventory[4 + 5 * (_loc3 - 1)][0]))
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b5.gotoAndStop("equippable");
            }
            else
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b5.gotoAndStop(1);
            } // end else if
            if (player.hat == inventory[4 + 5 * (_loc3 - 1)][0] || player.wings == inventory[4 + 5 * (_loc3 - 1)][0] || player.tail == inventory[4 + 5 * (_loc3 - 1)][0] || player.face2 == inventory[4 + 5 * (_loc3 - 1)][0] || player.cape == inventory[4 + 5 * (_loc3 - 1)][0] || player.neck == inventory[4 + 5 * (_loc3 - 1)][0] || player.costume == inventory[4 + 5 * (_loc3 - 1)][0])
            {
                mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b5.gotoAndStop("equipped");
            } // end if
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].t5.htmlText = "<b>" + inventory[4 + 5 * (_loc3 - 1)][1];
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b5.name = inventory[4 + 5 * (_loc3 - 1)][0];
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b5.i3 = inventory[4 + 5 * (_loc3 - 1)][2];
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b5.loopNum = _loc3;
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b5.lastClick = 0;
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b5.onRollOver = function ()
            {
                var _loc2 = {x: _xmouse, y: _ymouse};
                mainGUI.inventory.globalToLocal(_loc2);
                mainGUI.inventory.inventoryHighlight._x = _loc2.x + 10;
                mainGUI.inventory.inventoryHighlight._y = _loc2.y;
                if (this.i3 != undefined && this.i3.indexOf("-") != -1)
                {
                    mainGUI.inventory.inventoryHighlight.nameT.htmlText = "<b>" + this.name + " (Dyed " + this.i3 + ")";
                }
                else
                {
                    mainGUI.inventory.inventoryHighlight.nameT.htmlText = "<b>" + this.name;
                } // end else if
                mainGUI.inventory.inventoryHighlight.startDrag();
                mainGUI.inventory.inventoryHighlight._visible = true;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b5.onRollOut = function ()
            {
                mainGUI.inventory.inventoryHighlight.stopDrag();
                mainGUI.inventory.inventoryHighlight._visible = false;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b5.onPress = function ()
            {
                mainGUI.inventory.inventoryHighlight.stopDrag();
                mainGUI.inventory.inventoryHighlight._visible = false;
                itemImageDrag2.stopDrag();
                removeMovieClip (itemImageDrag2);
                itemImageDrag2 = _root.attachMovie("itemImage", "itemImageDrag2", _root.getNextHighestDepth());
                var _loc3 = {x: mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i5._x, y: mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i5._y};
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i5._parent.localToGlobal(_loc3);
                itemImageDrag2._x = _loc3.x;
                itemImageDrag2._y = _loc3.y;
                itemImageDrag2.gotoAndStop(inventory[this.loopNum * 5 - 5 + 4][0]);
                if (inventory[this.loopNum * 5 - 5 + 4][0].indexOf("TM") != -1 && inventory[this.loopNum * 5 - 5 + 4][0] != "TM Box" || inventory[this.loopNum * 5 - 5 + 4][0].indexOf("HM") != -1)
                {
                    itemImageDrag2.gotoAndStop("tmhm");
                } // end if
                itemImageDrag2.startDrag();
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i5._visible = false;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b5.onRelease = function ()
            {
                if (getTimer() - this.lastClick <= 350)
                {
                    this.lastClick = 0;
                    itemNum = this.loopNum * 5 - 5 + 4;
                    useInventoryItem(this.name);
                }
                else
                {
                    this.lastClick = getTimer();
                } // end else if
                checkInventoryHits(this.loopNum, 5);
                itemImageDrag2.stopDrag();
                removeMovieClip (itemImageDrag2);
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i5._visible = true;
            };
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc3].b5.onReleaseOutside = function ()
            {
                mainGUI.inventory.inventoryHighlight.stopDrag();
                mainGUI.inventory.inventoryHighlight._visible = false;
                checkInventoryHits(this.loopNum, 5);
                itemImageDrag2.stopDrag();
                removeMovieClip (itemImageDrag2);
                mainGUI.inventory.inventoryIcons["inventoryBar" + this.loopNum].i5._visible = true;
            };
            continue;
        } // end if
        break;
    } // end of for
} // End of the function
function checkInventoryHits(loopNum, buttonNum)
{
    invNum = loopNum * 5 - 5 + (buttonNum - 1);
    if (isBusy == false && trading == false && battle == false)
    {
        if (marketplace._x == undefined)
        {
            for (var _loc2 = 0; _loc2 < Math.ceil(inventory.length / 5); ++_loc2)
            {
                if (mainGUI.inventory.inventoryIcons["inventoryBar" + (_loc2 + 1)]._visible == true)
                {
                    if (itemImageDrag2.hitTest(mainGUI.inventory.inventoryIcons["inventoryBar" + (_loc2 + 1)].b1))
                    {
                        if (loopNum != _loc2 + 1 || buttonNum != 1 && inventory[(_loc2 + 1) * 5 - 5] != undefined)
                        {
                            getTimestamp("reorderInventory", invNum, (_loc2 + 1) * 5 - 5);
                            break;
                        } // end if
                        continue;
                    } // end if
                    if (itemImageDrag2.hitTest(mainGUI.inventory.inventoryIcons["inventoryBar" + (_loc2 + 1)].b2))
                    {
                        if (loopNum != _loc2 + 1 || buttonNum != 2 && inventory[(_loc2 + 1) * 5 - 5 + 1] != undefined)
                        {
                            getTimestamp("reorderInventory", invNum, (_loc2 + 1) * 5 - 5 + 1);
                            break;
                        } // end if
                        continue;
                    } // end if
                    if (itemImageDrag2.hitTest(mainGUI.inventory.inventoryIcons["inventoryBar" + (_loc2 + 1)].b3))
                    {
                        if (loopNum != _loc2 + 1 || buttonNum != 3 && inventory[(_loc2 + 1) * 5 - 5 + 2] != undefined)
                        {
                            getTimestamp("reorderInventory", invNum, (_loc2 + 1) * 5 - 5 + 2);
                            break;
                        } // end if
                        continue;
                    } // end if
                    if (itemImageDrag2.hitTest(mainGUI.inventory.inventoryIcons["inventoryBar" + (_loc2 + 1)].b4))
                    {
                        if (loopNum != _loc2 + 1 || buttonNum != 4 && inventory[(_loc2 + 1) * 5 - 5 + 3] != undefined)
                        {
                            getTimestamp("reorderInventory", invNum, (_loc2 + 1) * 5 - 5 + 3);
                            break;
                        } // end if
                        continue;
                    } // end if
                    if (itemImageDrag2.hitTest(mainGUI.inventory.inventoryIcons["inventoryBar" + (_loc2 + 1)].b5))
                    {
                        if (loopNum != _loc2 + 1 || buttonNum != 5 && inventory[(_loc2 + 1) * 5 - 5 + 4] != undefined)
                        {
                            getTimestamp("reorderInventory", invNum, (_loc2 + 1) * 5 - 5 + 4);
                            break;
                        } // end if
                    } // end if
                } // end if
            } // end of for
        } // end if
        if (mainGUI.pokemonSummary._visible == true)
        {
            if (itemImageDrag2.hitTest(mainGUI.pokemonSummary.stats.hitBox))
            {
                if (userPokemon[pokemonSummaryNum].heldItem == "none")
                {
                    if (isBusy == false)
                    {
                        if (inventory[invNum][0] == "Smoke Ball" || inventory[invNum][0] == "Ever Share" || inventory[invNum][0] == "Rare Charm" || inventory[invNum][0] == "Growth Charm" || inventory[invNum][0] == "Hunter Charm" || inventory[invNum][0] == "Greed Charm" || inventory[invNum][0] == "Lucky Egg" || inventory[invNum][0] == "Shiny Egg" || inventory[invNum][0] == "Synchronize Stone" || inventory[invNum][0] == "Everstone" || inventory[invNum][0] == "Power Herb" || inventory[invNum][0] == "Cleanse Tag" || inventory[invNum][0] == "Shiny Charm" || inventory[invNum][0] == "Exp Share (Enhanced)" || inventory[invNum][0] == "Black Belt" || inventory[invNum][0] == "Black Glasses" || inventory[invNum][0] == "Charcoal" || inventory[invNum][0] == "Dragon Fang" || inventory[invNum][0] == "Hard Stone" || inventory[invNum][0] == "Magnet" || inventory[invNum][0] == "Miracle Seed" || inventory[invNum][0] == "Mystic Water" || inventory[invNum][0] == "Never Melt Ice" || inventory[invNum][0] == "Poison Barb" || inventory[invNum][0] == "Sharp Beak" || inventory[invNum][0] == "Silk Scarf" || inventory[invNum][0] == "Silver Powder" || inventory[invNum][0] == "Soft Sand" || inventory[invNum][0] == "Spell Tag" || inventory[invNum][0] == "Twisted Spoon" || inventory[invNum][0] == "Red Card" || inventory[invNum][0] == "Air Balloon" || inventory[invNum][0] == "Light Clay" || inventory[invNum][0] == "Soul Shard (Enhanced)" || inventory[invNum][0] == "Focus Sash (Permanent)" || inventory[invNum][0] == "Fire Stone (Enhanced)" || inventory[invNum][0] == "Water Stone (Enhanced)" || inventory[invNum][0] == "Thunder Stone (Enhanced)" || inventory[invNum][0] == "Exp Share" || inventory[invNum][0] == "Metal Coat" || inventory[invNum][0] == "Kings Rock" || inventory[invNum][0] == "Kings Rock" || inventory[invNum][0] == "Leftovers" || inventory[invNum][0] == "Big Root" || inventory[invNum][0] == "Macho Brace" || inventory[invNum][0] == "Soothe Bell" || inventory[invNum][0] == "Muscle Band" || inventory[invNum][0] == "Wise Glasses" || inventory[invNum][0] == "Focus Band" || inventory[invNum][0] == "Focus Sash" || inventory[invNum][0] == "Expert Belt" || inventory[invNum][0] == "Razor Claw" || inventory[invNum][0] == "Razor Fang" || inventory[invNum][0] == "Black Sludge" || inventory[invNum][0] == "Shed Shell" || inventory[invNum][0] == "Shell Bell" || inventory[invNum][0] == "Lagging Tail" || inventory[invNum][0] == "Quick Claw" || inventory[invNum][0] == "Rocky Helmet" || inventory[invNum][0] == "Bright Powder" || inventory[invNum][0] == "Scope Lens" || inventory[invNum][0] == "Wide Lens" || inventory[invNum][0] == "Binding Band" || inventory[invNum][0] == "Metronome" || inventory[invNum][0] == "Eviolite" || inventory[invNum][0] == "Assault Vest" || inventory[invNum][0] == "Life Orb" || inventory[invNum][0] == "Choice Scarf" || inventory[invNum][0] == "Choice Specs" || inventory[invNum][0] == "Choice Band" || inventory[invNum][0] == "Effort Brace" || inventory[invNum][0] == "Gold Effort Brace" || inventory[invNum][0] == "Feather of Articuno" || inventory[invNum][0] == "Feather of Moltres" || inventory[invNum][0] == "Feather of Zapdos" || inventory[invNum][0] == "Feather of Moltres (Enhanced)" || inventory[invNum][0] == "Feather of Zapdos (Enhanced)" || inventory[invNum][0] == "Feather of Articuno (Enhanced)" || inventory[invNum][0] == "White Herb" || inventory[invNum][0] == "Weakness Policy" || inventory[invNum][0] == "Toxic Orb" || inventory[invNum][0] == "Flame Orb" || inventory[invNum][0] == "Damp Rock" || inventory[invNum][0] == "Heat Rock" || inventory[invNum][0] == "Smooth Rock" || inventory[invNum][0] == "Icy Rock" || inventory[invNum][0] == "Fire Gem" || inventory[invNum][0] == "Water Gem" || inventory[invNum][0] == "Electric Gem" || inventory[invNum][0] == "Grass Gem" || inventory[invNum][0] == "Ice Gem" || inventory[invNum][0] == "Fighting Gem" || inventory[invNum][0] == "Poison Gem" || inventory[invNum][0] == "Ground Gem" || inventory[invNum][0] == "Flying Gem" || inventory[invNum][0] == "Psychic Gem" || inventory[invNum][0] == "Bug Gem" || inventory[invNum][0] == "Rock Gem" || inventory[invNum][0] == "Ghost Gem" || inventory[invNum][0] == "Dragon Gem" || inventory[invNum][0] == "Dark Gem" || inventory[invNum][0] == "Steel Gem" || inventory[invNum][0] == "Normal Gem" || inventory[invNum][0] == "Fairy Gem")
                        {
                            getTimestamp("equipItem", pokemonSummaryNum, invNum);
                        }
                        else if (inventory[invNum][0] == "Light Ball")
                        {
                            if (userPokemon[pokemonSummaryNum].name == "Pikachu")
                            {
                                getTimestamp("equipItem", pokemonSummaryNum, invNum);
                            }
                            else
                            {
                                systemMessage(userPokemon[pokemonSummaryNum].name + " can\'t hold a Light Ball.");
                            } // end else if
                        }
                        else if (inventory[invNum][0] == "Stick")
                        {
                            if (userPokemon[pokemonSummaryNum].name == "Farfetchd")
                            {
                                getTimestamp("equipItem", pokemonSummaryNum, invNum);
                            }
                            else
                            {
                                systemMessage(userPokemon[pokemonSummaryNum].name + " can\'t hold a Stick.");
                            } // end else if
                        }
                        else if (inventory[invNum][0] == "Lucky Punch")
                        {
                            if (userPokemon[pokemonSummaryNum].name == "Chansey")
                            {
                                getTimestamp("equipItem", pokemonSummaryNum, invNum);
                            }
                            else
                            {
                                systemMessage(userPokemon[pokemonSummaryNum].name + " can\'t hold a Lucky Punch.");
                            } // end else if
                        }
                        else if (inventory[invNum][0] == "Thick Club")
                        {
                            if (userPokemon[pokemonSummaryNum].name == "Cubone" || userPokemon[pokemonSummaryNum].name == "Marowak")
                            {
                                getTimestamp("equipItem", pokemonSummaryNum, invNum);
                            }
                            else
                            {
                                systemMessage(userPokemon[pokemonSummaryNum].name + " can\'t hold a Thick Club.");
                            } // end else if
                        }
                        else if (inventory[invNum][0] == "Quick Powder")
                        {
                            if (userPokemon[pokemonSummaryNum].name == "Ditto")
                            {
                                getTimestamp("equipItem", pokemonSummaryNum, invNum);
                            }
                            else
                            {
                                systemMessage(userPokemon[pokemonSummaryNum].name + " can\'t hold a Quick Powder.");
                            } // end else if
                        }
                        else if (inventory[invNum][0] == "Metal Powder")
                        {
                            if (userPokemon[pokemonSummaryNum].name == "Ditto")
                            {
                                getTimestamp("equipItem", pokemonSummaryNum, invNum);
                            }
                            else
                            {
                                systemMessage(userPokemon[pokemonSummaryNum].name + " can\'t hold a Metal Powder.");
                            } // end else if
                        }
                        else if (inventory[invNum][0] == "Deep Sea Scale" || inventory[invNum][0] == "Deep Sea Tooth")
                        {
                            if (userPokemon[pokemonSummaryNum].name == "Clamperl")
                            {
                                getTimestamp("equipItem", pokemonSummaryNum, invNum);
                            }
                            else
                            {
                                systemMessage(userPokemon[pokemonSummaryNum].name + " can\'t hold this item.");
                            } // end else if
                        } // end else if
                    } // end else if
                }
                else
                {
                    systemMessage(userPokemon[pokemonSummaryNum].name + " is already holding an item.");
                } // end if
            } // end if
        } // end else if
        if (itemImageDrag2.hitTest(marketplace.sell.dragItemToSell))
        {
            tradeableItem = true;
            for (var _loc5 = 0; _loc5 < untradeableItems.length; ++_loc5)
            {
                if (inventory[invNum][0] == untradeableItems[_loc5])
                {
                    tradeableItem = false;
                    break;
                } // end if
            } // end of for
            if (inventory[invNum].length > 2)
            {
                tradeableItem = false;
            } // end if
            if (inventory[invNum][0] == player.hat || inventory[invNum][0] == player.wings || inventory[invNum][0] == player.tail || inventory[invNum][0] == player.face2 || inventory[invNum][0] == player.cape || inventory[invNum][0] == player.neck || inventory[invNum][0] == player.costume)
            {
                tradeableItem = false;
            } // end if
            if (tradeableItem == true)
            {
                itemForSaleType = "inventory";
                if (inventory[invNum][1] > 1)
                {
                    darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                    darkScreen._width = Stage.width;
                    darkScreen._height = Stage.height;
                    darkScreen._alpha = 70;
                    darkScreen._x = newWidth / 2;
                    darkScreen._y = newHeight / 2;
                    cashBox = _root.attachMovie("tradeAmountBox", "cashBox", _root.getNextHighestDepth());
                    cashBox.amount = inventory[invNum][1];
                    cashBox._x = 540;
                    cashBox._y = 290;
                    cashBox.moneyT.restrict = "0-9";
                    Selection.setFocus(_root.cashBox.moneyT);
                    cashBox.confirmB.onRelease = function ()
                    {
                        if (isBusy == false && cashBox.moneyT.text != "")
                        {
                            if (Number(cashBox.moneyT.text) <= cashBox.amount)
                            {
                                if (Number(cashBox.moneyT.text) > 0)
                                {
                                    marketplace.sell.i2._visible = false;
                                    Selection.setFocus(null);
                                    if (inventory[invNum][0].indexOf("TM") != -1 && inventory[invNum][0] != "TM Box" || inventory[invNum][0].indexOf("HM") != -1)
                                    {
                                        marketplace.sell.i.gotoAndStop("tmhm");
                                    }
                                    else
                                    {
                                        marketplace.sell.i.gotoAndStop(inventory[invNum][0]);
                                    } // end else if
                                    marketplace.sell.nameT.htmlText = "<b>" + inventory[invNum][0] + " (" + Number(cashBox.moneyT.text) + ")";
                                    itemForSale = invNum;
                                    itemForSaleAmount = Number(cashBox.moneyT.text);
                                    removeMovieClip (cashBox);
                                    removeMovieClip (darkScreen);
                                }
                                else
                                {
                                    cashBox.moneyT.text = 1;
                                } // end else if
                            }
                            else
                            {
                                Selection.setFocus(null);
                                cashBox.moneyT.text = cashBox.amount;
                            } // end if
                        } // end else if
                    };
                    cashBox.cancelB.onRelease = function ()
                    {
                        tradeBox.cashBoxUp = false;
                        removeMovieClip (cashBox);
                        removeMovieClip (darkScreen);
                    };
                    cashBox.exitB.onRelease = function ()
                    {
                        tradeBox.cashBoxUp = false;
                        removeMovieClip (cashBox);
                        removeMovieClip (darkScreen);
                    };
                    assignMouseEvents(cashBox.confirmB);
                    assignMouseEvents(cashBox.cancelB);
                    assignMouseEvents(cashBox.exitB);
                }
                else
                {
                    if (inventory[invNum][0].indexOf("TM") != -1 && inventory[invNum][0] != "TM Box" || inventory[invNum][0].indexOf("HM") != -1)
                    {
                        marketplace.sell.i.gotoAndStop("tmhm");
                    }
                    else
                    {
                        marketplace.sell.i.gotoAndStop(inventory[invNum][0]);
                    } // end else if
                    marketplace.sell.nameT.htmlText = "<b>" + inventory[invNum][0] + " (1)";
                    itemForSale = invNum;
                    itemForSaleAmount = 1;
                } // end if
            } // end if
        } // end else if
        if (mainGUI.crafting._visible == true)
        {
            if (itemImageDrag2.hitTest(mainGUI.crafting.b0))
            {
                if (placedInCrafting(inventory[invNum][0]) < inventory[invNum][1])
                {
                    addToCrafting(0, invNum);
                } // end if
            }
            else if (itemImageDrag2.hitTest(mainGUI.crafting.b1))
            {
                if (placedInCrafting(inventory[invNum][0]) < inventory[invNum][1])
                {
                    addToCrafting(1, invNum);
                } // end if
            }
            else if (itemImageDrag2.hitTest(mainGUI.crafting.b2))
            {
                if (placedInCrafting(inventory[invNum][0]) < inventory[invNum][1])
                {
                    addToCrafting(2, invNum);
                } // end if
            }
            else if (itemImageDrag2.hitTest(mainGUI.crafting.b3))
            {
                if (placedInCrafting(inventory[invNum][0]) < inventory[invNum][1])
                {
                    addToCrafting(3, invNum);
                } // end if
            }
            else if (itemImageDrag2.hitTest(mainGUI.crafting.b4))
            {
                if (placedInCrafting(inventory[invNum][0]) < inventory[invNum][1])
                {
                    addToCrafting(4, invNum);
                } // end if
            }
            else if (itemImageDrag2.hitTest(mainGUI.crafting.b5))
            {
                if (placedInCrafting(inventory[invNum][0]) < inventory[invNum][1])
                {
                    addToCrafting(5, invNum);
                } // end if
            }
            else if (itemImageDrag2.hitTest(mainGUI.crafting.b6))
            {
                if (placedInCrafting(inventory[invNum][0]) < inventory[invNum][1])
                {
                    addToCrafting(6, invNum);
                } // end if
            }
            else if (itemImageDrag2.hitTest(mainGUI.crafting.b7))
            {
                if (placedInCrafting(inventory[invNum][0]) < inventory[invNum][1])
                {
                    addToCrafting(7, invNum);
                } // end if
            }
            else if (itemImageDrag2.hitTest(mainGUI.crafting.b8))
            {
                if (placedInCrafting(inventory[invNum][0]) < inventory[invNum][1])
                {
                    addToCrafting(8, invNum);
                } // end else if
            } // end else if
        } // end else if
        if (itemImageDrag2.hitTest(_root.mainGUI.dyeGUI.hitBox))
        {
            if (isEquippableItem(inventory[invNum][0]) && inventory[invNum].length <= 2)
            {
                if (inventory[invNum][0] != player.hat && inventory[invNum][0] != player.wings && inventory[invNum][0] != player.tail && inventory[invNum][0] != player.face2 && inventory[invNum][0] != player.cape && inventory[invNum][0] != player.neck && inventory[invNum][0] != player.costume)
                {
                    _root.mainGUI.dyeGUI.itemName = inventory[invNum][0];
                    _root.mainGUI.dyeGUI.i.gotoAndStop(_root.mainGUI.dyeGUI.itemName);
                    _root.mainGUI.dyeGUI.dyeRa = undefined;
                    _root.mainGUI.dyeGUI.dyeGa = undefined;
                    _root.mainGUI.dyeGUI.dyeBa = undefined;
                    removeMovieClip (_root.mainGUI.dyeGUI.dyePreview);
                    dyePreview = _root.mainGUI.dyeGUI.createEmptyMovieClip("dyePreview", _root.mainGUI.dyeGUI.getNextHighestDepth());
                    dyePreview.createEmptyMovieClip("player", dyePreview.getNextHighestDepth());
                    makePlayer(dyePreview);
                    dyePreview._x = _root.mainGUI.dyeGUI._width / 2 - 60;
                    dyePreview._y = 30;
                    dyePreview.holderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
                    if (_root.mainGUI.dyeGUI.itemName.indexOf("Wings") != -1 || _root.mainGUI.dyeGUI.itemName == "Master Cape" || _root.mainGUI.dyeGUI.itemName.indexOf(" Tail") != -1 || _root.mainGUI.dyeGUI.itemName == "Hair Ribbon 2" || _root.mainGUI.dyeGUI.itemName == "Cofagrigus Arms" || _root.mainGUI.dyeGUI.itemName == "Pizza Cape" || _root.mainGUI.dyeGUI.itemName == "Bulbasaur Backpack" || _root.mainGUI.dyeGUI.itemName == "Victreebel Backpack" || _root.mainGUI.dyeGUI.itemName == "Donut Backpack" || _root.mainGUI.dyeGUI.itemName == "Treasure Chest Backpack")
                    {
                        dyePreview.holderB.copyPixels(_root["b_" + _root.mainGUI.dyeGUI.itemName + "_Behind"], new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
                    }
                    else if (_root.mainGUI.dyeGUI.itemName == "Backpack" || _root.mainGUI.dyeGUI.itemName == "Starmie Backpack" || _root.mainGUI.dyeGUI.itemName == "Halloween Starmie Backpack" || _root.mainGUI.dyeGUI.itemName == "Heart Backpack")
                    {
                        dyePreview.holderB.copyPixels(_root["b_Male " + _root.mainGUI.dyeGUI.itemName], new flash.geom.Rectangle(0, 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
                    }
                    else if (_root.mainGUI.dyeGUI.itemName == "Heart Backpack" || _root.mainGUI.dyeGUI.itemName == "Dracula Cloak" || _root.mainGUI.dyeGUI.itemName == "Valentines Bow" || _root.mainGUI.dyeGUI.itemName == "Coffin Backpack" || _root.mainGUI.dyeGUI.itemName == "Scythe" || _root.mainGUI.dyeGUI.itemName == "Pumpkin Backpack")
                    {
                        dyePreview.holderB.copyPixels(_root["b_" + _root.mainGUI.dyeGUI.itemName], new flash.geom.Rectangle(0, 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
                    }
                    else
                    {
                        dyePreview.holderB.copyPixels(_root["b_" + _root.mainGUI.dyeGUI.itemName], new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
                    } // end else if
                }
                else
                {
                    systemMessage("Please unequip this item before trying to dye it.");
                } // end else if
            }
            else
            {
                systemMessage("This item can\'t be dyed.");
            } // end if
        } // end if
    } // end else if
} // End of the function
function setDyePreviewColor(ra, ga, ba)
{
    var _loc2 = [];
    _loc2 = _loc2.concat([ra / 100, 0, 0, 0, 0]);
    _loc2 = _loc2.concat([0, ga / 100, 0, 0, 0]);
    _loc2 = _loc2.concat([0, 0, ba / 100, 0, 0]);
    _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
    _root.mainGUI.dyeGUI.dyePreview.dyeFilter = new flash.filters.ColorMatrixFilter(_loc2);
    _root.mainGUI.dyeGUI.dyePreview.holderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
    if (_root.mainGUI.dyeGUI.itemName.indexOf("Wings") != -1 || _root.mainGUI.dyeGUI.itemName == "Cofagrigus Arms" || _root.mainGUI.dyeGUI.itemName == "Master Cape" || _root.mainGUI.dyeGUI.itemName.indexOf(" Tail") != -1 || _root.mainGUI.dyeGUI.itemName == "Hair Ribbon 2" || _root.mainGUI.dyeGUI.itemName == "Pizza Cape" || _root.mainGUI.dyeGUI.itemName == "Bulbasaur Backpack" || _root.mainGUI.dyeGUI.itemName == "Victreebel Backpack" || _root.mainGUI.dyeGUI.itemName == "Donut Backpack" || _root.mainGUI.dyeGUI.itemName == "Treasure Chest Backpack")
    {
        _root.mainGUI.dyeGUI.dyePreview.colorHolderB.copyPixels(_root["b_" + _root.mainGUI.dyeGUI.itemName + "_Behind"], new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
    }
    else if (_root.mainGUI.dyeGUI.itemName == "Backpack" || _root.mainGUI.dyeGUI.itemName == "Starmie Backpack" || _root.mainGUI.dyeGUI.itemName == "Halloween Starmie Backpack" || _root.mainGUI.dyeGUI.itemName == "Heart Backpack")
    {
        _root.mainGUI.dyeGUI.dyePreview.colorHolderB.copyPixels(_root["b_Male " + _root.mainGUI.dyeGUI.itemName], new flash.geom.Rectangle(0, 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
    }
    else if (_root.mainGUI.dyeGUI.itemName == "Heart Backpack" || _root.mainGUI.dyeGUI.itemName == "Dracula Cloak" || _root.mainGUI.dyeGUI.itemName == "Valentines Bow" || _root.mainGUI.dyeGUI.itemName == "Coffin Backpack" || _root.mainGUI.dyeGUI.itemName == "Scythe" || _root.mainGUI.dyeGUI.itemName == "Pumpkin Backpack")
    {
        _root.mainGUI.dyeGUI.dyePreview.colorHolderB.copyPixels(_root["b_" + _root.mainGUI.dyeGUI.itemName], new flash.geom.Rectangle(0, 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
    }
    else
    {
        _root.mainGUI.dyeGUI.dyePreview.colorHolderB.copyPixels(_root["b_" + _root.mainGUI.dyeGUI.itemName], new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
    } // end else if
    _root.mainGUI.dyeGUI.dyePreview.colorHolderB.applyFilter(_root.mainGUI.dyeGUI.dyePreview.colorHolderB, _root.mainGUI.dyeGUI.dyePreview.colorHolderB.rectangle, new flash.geom.Point(0, 0), _root.mainGUI.dyeGUI.dyePreview.dyeFilter);
    _root.mainGUI.dyeGUI.dyePreview.holderB.copyPixels(_root.mainGUI.dyeGUI.dyePreview.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
    _root.mainGUI.dyeGUI.dyePreview.colorHolderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
} // End of the function
function placedInCrafting(item)
{
    var _loc3 = 0;
    for (var _loc2 = 0; _loc2 < 9; ++_loc2)
    {
        if (_root.craftingArray[_loc2][0] == item)
        {
            ++_loc3;
        } // end if
    } // end of for
    return (_loc3);
} // End of the function
function addToCrafting(slot, invSlot)
{
    craftingArray[slot][0] = inventory[invSlot][0];
    craftingArray[slot][1] = invSlot;
    if (craftingArray[slot][0].indexOf("HM") != -1 || craftingArray[slot][0].indexOf("TM") != -1)
    {
        mainGUI.crafting["i" + slot].gotoAndStop("tmhm");
    }
    else
    {
        mainGUI.crafting["i" + slot].gotoAndStop(craftingArray[slot][0]);
    } // end else if
    checkCraftingRecipe();
} // End of the function
function checkCraftingRecipe()
{
    mainGUI.crafting.i9.gotoAndStop(1);
    var _loc2 = 0;
    for (var _loc3 = 0; _loc3 < 9; ++_loc3)
    {
        if (_root.craftingArray[_loc3][0] == "")
        {
            ++_loc2;
        } // end if
    } // end of for
    if (inArray2(_root.craftingArray, "Ancient Key (Loop Half)") && inArray2(_root.craftingArray, "Ancient Key (Tooth Half)"))
    {
        if (_loc2 == 7)
        {
            mainGUI.crafting.i9.gotoAndStop("Ancient Key");
            mainGUI.crafting.i9.a = "Ancient Key";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "Steel Wire") && inArray2(_root.craftingArray, "Metal Coat") && inArray2(_root.craftingArray, "Super Rod"))
    {
        if (_loc2 == 6)
        {
            mainGUI.crafting.i9.gotoAndStop("Steel Rod");
            mainGUI.crafting.i9.a = "Steel Rod";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "Moon Stone"))
    {
        if (_loc2 == 8)
        {
            mainGUI.crafting.i9.gotoAndStop("Stardust");
            mainGUI.crafting.i9.a = "Stardust";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "Stardust") && inArray2(_root.craftingArray, "Silk") && inArray2(_root.craftingArray, "Miracle Berry"))
    {
        if (_loc2 == 6)
        {
            mainGUI.crafting.i9.gotoAndStop("Ability Capsule");
            mainGUI.crafting.i9.a = "Ability Capsule";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "Macho Brace") && inArray2(_root.craftingArray, "Effort Brace"))
    {
        if (_loc2 == 7)
        {
            mainGUI.crafting.i9.gotoAndStop("Gold Effort Brace");
            mainGUI.crafting.i9.a = "Gold Effort Brace";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "Master Ball") && inArray2(_root.craftingArray, "Steel Rod"))
    {
        if (_loc2 == 7)
        {
            mainGUI.crafting.i9.gotoAndStop("Master Rod");
            mainGUI.crafting.i9.a = "Master Rod";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "Legendary Bait") && inArray2(_root.craftingArray, "Feather of Moltres"))
    {
        if (_loc2 == 7)
        {
            mainGUI.crafting.i9.gotoAndStop("Feather of Moltres (Enhanced)");
            mainGUI.crafting.i9.a = "Feather of Moltres (Enhanced)";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "Legendary Bait") && inArray2(_root.craftingArray, "Feather of Articuno"))
    {
        if (_loc2 == 7)
        {
            mainGUI.crafting.i9.gotoAndStop("Feather of Articuno (Enhanced)");
            mainGUI.crafting.i9.a = "Feather of Articuno (Enhanced)";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "Legendary Bait") && inArray2(_root.craftingArray, "Feather of Zapdos"))
    {
        if (_loc2 == 7)
        {
            mainGUI.crafting.i9.gotoAndStop("Feather of Zapdos (Enhanced)");
            mainGUI.crafting.i9.a = "Feather of Zapdos (Enhanced)";
        } // end if
    } // end if
    if (inArrayAmount2(_root.craftingArray, "World Blessing (Enhanced)") == 1)
    {
        if (_loc2 == 8)
        {
            mainGUI.crafting.i9.gotoAndStop("World Blessing");
            mainGUI.crafting.i9.a = "World Blessing";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "Legendary Bait") && inArrayAmount2(_root.craftingArray, "Fire Stone") == 3)
    {
        if (_loc2 == 5)
        {
            mainGUI.crafting.i9.gotoAndStop("Fire Stone (Enhanced)");
            mainGUI.crafting.i9.a = "Fire Stone (Enhanced)";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "Legendary Bait") && inArrayAmount2(_root.craftingArray, "Water Stone") == 3)
    {
        if (_loc2 == 5)
        {
            mainGUI.crafting.i9.gotoAndStop("Water Stone (Enhanced)");
            mainGUI.crafting.i9.a = "Water Stone (Enhanced)";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "Legendary Bait") && inArrayAmount2(_root.craftingArray, "Thunder Stone") == 3)
    {
        if (_loc2 == 5)
        {
            mainGUI.crafting.i9.gotoAndStop("Thunder Stone (Enhanced)");
            mainGUI.crafting.i9.a = "Thunder Stone (Enhanced)";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "Legendary Bait") && inArray2(_root.craftingArray, "Soul Shard"))
    {
        if (_loc2 == 7)
        {
            mainGUI.crafting.i9.gotoAndStop("Soul Shard (Enhanced)");
            mainGUI.crafting.i9.a = "Soul Shard (Enhanced)";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "Steel Wire") && inArray2(_root.craftingArray, "Metal Coat") && inArray2(_root.craftingArray, "Super Pickaxe"))
    {
        if (_loc2 == 6)
        {
            mainGUI.crafting.i9.gotoAndStop("Steel Pickaxe");
            mainGUI.crafting.i9.a = "Steel Pickaxe";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "Master Ball") && inArray2(_root.craftingArray, "Steel Pickaxe"))
    {
        if (_loc2 == 7)
        {
            mainGUI.crafting.i9.gotoAndStop("Master Pickaxe");
            mainGUI.crafting.i9.a = "Master Pickaxe";
        } // end if
    } // end if
    var _loc4 = equippableItemInCraft();
    if (inArray2(_root.craftingArray, "Dye Remover") && tempEquipItem != false)
    {
        if (_loc2 == 7)
        {
            if (_root.inventory[_loc4[1]].length >= 3)
            {
                mainGUI.crafting.i9.gotoAndStop(_loc4[0]);
                mainGUI.crafting.i9.a = _loc4[0];
                mainGUI.crafting.i9.b = _loc4[1];
            } // end if
        } // end if
    }
    else
    {
        delete mainGUI.crafting.i9.b;
    } // end else if
    if (inArrayAmount2(_root.craftingArray, "Christmas Blessing") == 3)
    {
        if (_loc2 == 6)
        {
            mainGUI.crafting.i9.gotoAndStop("World Blessing");
            mainGUI.crafting.i9.a = "World Blessing";
            mainGUI.crafting.i9.c = "Christmas Blessing";
        } // end if
    } // end if
    if (inArrayAmount2(_root.craftingArray, "Halloween Blessing") == 3)
    {
        if (_loc2 == 6)
        {
            mainGUI.crafting.i9.gotoAndStop("World Blessing");
            mainGUI.crafting.i9.a = "World Blessing";
            mainGUI.crafting.i9.c = "Halloween Blessing";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "IV Deductor") && inArray2(_root.craftingArray, "HP Up"))
    {
        if (_loc2 == 7)
        {
            mainGUI.crafting.i9.gotoAndStop("HP IV Deductor");
            mainGUI.crafting.i9.a = "HP IV Deductor";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "IV Deductor") && inArray2(_root.craftingArray, "Protein"))
    {
        if (_loc2 == 7)
        {
            mainGUI.crafting.i9.gotoAndStop("Attack IV Deductor");
            mainGUI.crafting.i9.a = "Attack IV Deductor";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "IV Deductor") && inArray2(_root.craftingArray, "Iron"))
    {
        if (_loc2 == 7)
        {
            mainGUI.crafting.i9.gotoAndStop("Defense IV Deductor");
            mainGUI.crafting.i9.a = "Defense IV Deductor";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "IV Deductor") && inArray2(_root.craftingArray, "Calcium"))
    {
        if (_loc2 == 7)
        {
            mainGUI.crafting.i9.gotoAndStop("Special Attack IV Deductor");
            mainGUI.crafting.i9.a = "Special Attack IV Deductor";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "IV Deductor") && inArray2(_root.craftingArray, "Zinc"))
    {
        if (_loc2 == 7)
        {
            mainGUI.crafting.i9.gotoAndStop("Special Defense IV Deductor");
            mainGUI.crafting.i9.a = "Special Defense IV Deductor";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "IV Deductor") && inArray2(_root.craftingArray, "Carbos"))
    {
        if (_loc2 == 7)
        {
            mainGUI.crafting.i9.gotoAndStop("Speed IV Deductor");
            mainGUI.crafting.i9.a = "Speed IV Deductor";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "Lucky Egg") && inArray2(_root.craftingArray, "Shiny Charm"))
    {
        if (_loc2 == 7)
        {
            mainGUI.crafting.i9.gotoAndStop("Shiny Egg");
            mainGUI.crafting.i9.a = "Shiny Egg";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "Exp Share") && inArray2(_root.craftingArray, "Everstone"))
    {
        if (_loc2 == 7)
        {
            mainGUI.crafting.i9.gotoAndStop("Ever Share");
            mainGUI.crafting.i9.a = "Ever Share";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "IV Reset"))
    {
        if (_loc2 == 8)
        {
            mainGUI.crafting.i9.gotoAndStop("IV Powder");
            mainGUI.crafting.i9.a = "IV Powder";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "IV Reset (untradeable)"))
    {
        if (_loc2 == 8)
        {
            mainGUI.crafting.i9.gotoAndStop("IV Powder");
            mainGUI.crafting.i9.a = "IV Powder";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "IV Gem") && inArray2(_root.craftingArray, "IV Powder") && inArray2(_root.craftingArray, "HP Up"))
    {
        if (_loc2 == 6)
        {
            mainGUI.crafting.i9.gotoAndStop("HP IV Reset");
            mainGUI.crafting.i9.a = "HP IV Reset";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "IV Gem") && inArray2(_root.craftingArray, "IV Powder") && inArray2(_root.craftingArray, "Protein"))
    {
        if (_loc2 == 6)
        {
            mainGUI.crafting.i9.gotoAndStop("Attack IV Reset");
            mainGUI.crafting.i9.a = "Attack IV Reset";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "IV Gem") && inArray2(_root.craftingArray, "IV Powder") && inArray2(_root.craftingArray, "Iron"))
    {
        if (_loc2 == 6)
        {
            mainGUI.crafting.i9.gotoAndStop("Defense IV Reset");
            mainGUI.crafting.i9.a = "Defense IV Reset";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "IV Gem") && inArray2(_root.craftingArray, "IV Powder") && inArray2(_root.craftingArray, "Calcium"))
    {
        if (_loc2 == 6)
        {
            mainGUI.crafting.i9.gotoAndStop("Special Attack IV Reset");
            mainGUI.crafting.i9.a = "Special Attack IV Reset";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "IV Gem") && inArray2(_root.craftingArray, "IV Powder") && inArray2(_root.craftingArray, "Zinc"))
    {
        if (_loc2 == 6)
        {
            mainGUI.crafting.i9.gotoAndStop("Special Defense IV Reset");
            mainGUI.crafting.i9.a = "Special Defense IV Reset";
        } // end if
    } // end if
    if (inArray2(_root.craftingArray, "IV Gem") && inArray2(_root.craftingArray, "IV Powder") && inArray2(_root.craftingArray, "Carbos"))
    {
        if (_loc2 == 6)
        {
            mainGUI.crafting.i9.gotoAndStop("Speed IV Reset");
            mainGUI.crafting.i9.a = "Speed IV Reset";
        } // end if
    } // end if
} // End of the function
function equippableItemInCraft()
{
    for (var _loc2 = 0; _loc2 < 9; ++_loc2)
    {
        if (isEquippableItem(_root.craftingArray[_loc2][0]))
        {
            return (_root.craftingArray[_loc2]);
        } // end if
    } // end of for
    return (false);
} // End of the function
function inArray(arr, item)
{
    var _loc2 = arr.length;
    for (var _loc1 = 0; _loc1 < _loc2; ++_loc1)
    {
        if (arr[_loc1] == item)
        {
            return (true);
        } // end if
    } // end of for
    return (false);
} // End of the function
function inArray2(arr, item)
{
    var _loc2 = arr.length;
    for (var _loc1 = 0; _loc1 < _loc2; ++_loc1)
    {
        if (arr[_loc1][0] == item)
        {
            return (true);
        } // end if
    } // end of for
    return (false);
} // End of the function
function inArrayAmount(arr, item)
{
    var _loc2 = 0;
    var _loc3 = arr.length;
    for (var _loc1 = 0; _loc1 < _loc3; ++_loc1)
    {
        if (arr[_loc1] == item)
        {
            ++_loc2;
        } // end if
    } // end of for
    return (_loc2);
} // End of the function
function inArrayAmount2(arr, item)
{
    var _loc2 = 0;
    var _loc3 = arr.length;
    for (var _loc1 = 0; _loc1 < _loc3; ++_loc1)
    {
        if (arr[_loc1][0] == item)
        {
            ++_loc2;
        } // end if
    } // end of for
    return (_loc2);
} // End of the function
function assignEquippableState(cosmetic)
{
    for (var _loc1 = 1; _loc1 <= Math.ceil(inventory.length / 5); ++_loc1)
    {
        if (inventory[0 + 5 * (_loc1 - 1)][0] == cosmetic)
        {
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc1].b1.gotoAndStop("equippable");
            break;
        } // end if
        if (inventory[1 + 5 * (_loc1 - 1)][0] == cosmetic)
        {
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc1].b2.gotoAndStop("equippable");
            break;
        } // end if
        if (inventory[2 + 5 * (_loc1 - 1)][0] == cosmetic)
        {
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc1].b3.gotoAndStop("equippable");
            break;
        } // end if
        if (inventory[3 + 5 * (_loc1 - 1)][0] == cosmetic)
        {
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc1].b4.gotoAndStop("equippable");
            break;
        } // end if
        if (inventory[4 + 5 * (_loc1 - 1)][0] == cosmetic)
        {
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc1].b5.gotoAndStop("equippable");
            break;
        } // end if
    } // end of for
} // End of the function
function assignEquippedState(cosmetic)
{
    for (var _loc1 = 1; _loc1 <= Math.ceil(inventory.length / 5); ++_loc1)
    {
        if (inventory[0 + 5 * (_loc1 - 1)][0] == cosmetic)
        {
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc1].b1.gotoAndStop("equipped");
            break;
        } // end if
        if (inventory[1 + 5 * (_loc1 - 1)][0] == cosmetic)
        {
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc1].b2.gotoAndStop("equipped");
            break;
        } // end if
        if (inventory[2 + 5 * (_loc1 - 1)][0] == cosmetic)
        {
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc1].b3.gotoAndStop("equipped");
            break;
        } // end if
        if (inventory[3 + 5 * (_loc1 - 1)][0] == cosmetic)
        {
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc1].b4.gotoAndStop("equipped");
            break;
        } // end if
        if (inventory[4 + 5 * (_loc1 - 1)][0] == cosmetic)
        {
            mainGUI.inventory.inventoryIcons["inventoryBar" + _loc1].b5.gotoAndStop("equipped");
            break;
        } // end if
    } // end of for
} // End of the function
function customRemove(target)
{
    removeMovieClip (target);
} // End of the function
function startingAnimation()
{
    canMove = false;
    var rival = _root.mapLayer2.attachMovie("femaleRival", "rival", _root.mapLayer2.getNextHighestDepth());
    rival.gotoAndStop(4);
    rival._x = 736 + rival._width / 2;
    rival._y = 352 + rival._height / 2;
    var _loc3 = _root.GUI.attachMovie("blackout", "blackout", _root.GUI.getNextHighestDepth());
    _loc3._x = newWidth / 2;
    _loc3._y = newHeight / 2;
    _loc3._alpha = 100;
    _loc3.interactStage = 0;
    _loc3.onEnterFrame = function ()
    {
        if (this._alpha > 0)
        {
            ++count;
            if (count == 3)
            {
                --this._alpha;
                count = 0;
            } // end if
        }
        else
        {
            if (this.interactStage == 0)
            {
                ++count;
                if (count >= 56)
                {
                    this.interactStage = 1;
                    count = 0;
                    chatBox(["It\'s nice out here, isn\'t it?", "..."]);
                } // end if
            } // end if
            if (this.interactStage == 1 && chatBoxOpen == false)
            {
                ++count;
                if (count >= 56)
                {
                    this.interactStage = 2;
                    count = 0;
                    rival.gotoAndStop(1);
                    chatBox(["We should probably head back now."]);
                } // end if
            } // end if
            if (this.interactStage == 2 && chatBoxOpen == false)
            {
                npcTraverse(rival, ["d", "d", "d", "l", "d", "d", "d", "d", "d", "r", "r", "d", "d"]);
                canMove = true;
                this.interactStage = 3;
            } // end if
        } // end else if
    };
} // End of the function
function removePlayers()
{
    for (var _loc2 = 0; _loc2 < players.length; ++_loc2)
    {
        clearInterval(_root["animationI_" + players[_loc2].name]);
        removeMovieClip (players[_loc2]);
    } // end of for
    _root.players = [];
} // End of the function
function npcTraverse(npc, directions, finalDirection, trainerBattleNPC)
{
    npc.trainer = false;
    npc.speed = 4;
    npc.moveMapAmount = 0;
    npc.nextStep = false;
    npc.pathNum = 0;
    npc.directions = directions;
    npc.traversing = true;
    npc.finalDirection = finalDirection;
    npc.trainerBattleNPC = trainerBattleNPC;
    activeNPCs.push(npc);
} // End of the function
function addTrees()
{
    for (var _loc3 = 0; _loc3 < _root.collisionArray.length; ++_loc3)
    {
        for (var _loc2 = 0; _loc2 < collisionArray[0].length; ++_loc2)
        {
            if (collisionArray[_loc3][_loc2] == 6)
            {
                var _loc4 = _root.mapLayer1.attachMovie("tree", "t_" + _loc2 + "_" + _loc3, _root.mapLayer1.getNextHighestDepth());
                _loc4.x = _loc2;
                _loc4.y = _loc3;
                _loc4._x = _loc2 * 32;
                _loc4._y = _loc3 * 32;
                treeArray.push(_loc4);
                continue;
            } // end if
            if (collisionArray[_loc3][_loc2] == 11)
            {
                if (hasItem("Squirtbottle") == false)
                {
                    _loc4 = _root.mapLayer1.attachMovie("sudowoodo", "sw_" + _loc2 + "_" + _loc3, _root.mapLayer1.getNextHighestDepth());
                    _loc4._x = _loc2 * 32;
                    _loc4._y = _loc3 * 32;
                    continue;
                } // end if
                collisionArray[_loc3][_loc2] = 0;
            } // end if
        } // end of for
    } // end of for
} // End of the function
function addSnorlax()
{
    for (var _loc3 = 0; _loc3 < collisionArray.length; ++_loc3)
    {
        for (var _loc2 = 0; _loc2 < collisionArray[0].length; ++_loc2)
        {
            if (collisionArray[_loc3][_loc2] == 8)
            {
                if (hasItem("Poke Flute") == false)
                {
                    var _loc4 = _root.mapLayer1.attachMovie("snorlaxTile", "snorlaxTile", _root.mapLayer1.getNextHighestDepth());
                    _loc4._x = _loc2 * 32 + 16;
                    _loc4._y = _loc3 * 32 + 16;
                    continue;
                } // end if
                collisionArray[_loc3][_loc2] = 0;
            } // end if
        } // end of for
    } // end of for
} // End of the function
function addWater(addAnimations)
{
    for (var _loc3 = 0; _loc3 < collisionArray.length; ++_loc3)
    {
        for (var _loc2 = 0; _loc2 < collisionArray[0].length; ++_loc2)
        {
            if (collisionArray[_loc3][_loc2] == 2 || collisionArray[_loc3][_loc2] == 9 || collisionArray[_loc3][_loc2] == 10)
            {
                if (addAnimations != false)
                {
                    var _loc4 = _root.mapLayer1.attachMovie("water", "w_" + _loc2 + "_" + _loc3, _root.mapLayer1.getNextHighestDepth());
                    _loc4._x = _loc2 * 32;
                    _loc4._y = _loc3 * 32;
                } // end if
                if (collisionArray[_loc3][_loc2] == 9)
                {
                    collisionArray[_loc3][_loc2] = 0;
                } // end if
                if (collisionArray[_loc3][_loc2] == 10)
                {
                    collisionArray[_loc3][_loc2] = 1;
                } // end if
                continue;
            } // end if
            if (collisionArray[_loc3][_loc2] == 14)
            {
                if (addAnimations != false)
                {
                    _loc4 = _root.mapLayer1.attachMovie("waterfall", "wff_" + _loc2 + "_" + _loc3, _root.mapLayer1.getNextHighestDepth());
                    _loc4._x = _loc2 * 32;
                    _loc4._y = _loc3 * 32;
                } // end if
            } // end if
        } // end of for
    } // end of for
    _root.mapLayer1.bg.swapDepths(_root.mapLayer1.getNextHighestDepth());
    if (collisionArray[player.tileY][player.tileX] == 2 || collisionArray[player.tileY][player.tileX] == 24 || collisionArray[player.tileY][player.tileX] == 25 || collisionArray[player.tileY][player.tileX] == 12 || collisionArray[player.tileY][player.tileX] == 15)
    {
        moveType = "surf";
        setSurfMount();
        getTimestamp("updateMount", _root.player.mount);
        drawPlayer(player, 12, 0);
        if (hasItem("Surfboard"))
        {
            moveMapSpeed = 16 * movementSpeedMod;
        }
        else
        {
            moveMapSpeed = 8 * movementSpeedMod;
        } // end if
    } // end else if
} // End of the function
function addFlowers()
{
    for (var _loc3 = 0; _loc3 < _root.collisionArray.length; ++_loc3)
    {
        for (var _loc2 = 0; _loc2 < _root.collisionArray[0].length; ++_loc2)
        {
            if (collisionArray[_loc3][_loc2] == 7)
            {
                collisionArray[_loc3][_loc2] = 0;
                var _loc4 = _root.mapLayer1.attachMovie("flower", "f_" + _loc2 + "_" + _loc3, _root.mapLayer1.getNextHighestDepth());
                _loc4._x = _loc2 * 32;
                _loc4._y = _loc3 * 32;
                continue;
            } // end if
            if (collisionArray[_loc3][_loc2] == 13)
            {
                collisionArray[_loc3][_loc2] = 0;
                _loc4 = _root.mapLayer1.attachMovie("hoennFlower", "f_" + _loc2 + "_" + _loc3, _root.mapLayer1.getNextHighestDepth());
                _loc4._x = _loc2 * 32;
                _loc4._y = _loc3 * 32;
            } // end if
        } // end of for
    } // end of for
} // End of the function
function addFollowPokemon()
{
    if (userPokemon.length > 0)
    {
        removeMovieClip (player.followPokemonBox);
        player.followPokemonBox = player.attachMovie("followPokemonBox", "followPokemonBox", player.getNextHighestDepth());
        player.followPokemonBox.cacheAsBitmap = true;
        player.player.swapDepths(player.getNextHighestDepth());
        player.nameM.swapDepths(player.getNextHighestDepth());
        followPokemonBox._y = -32;
        followPokemonImage = player.followPokemonBox.attachMovie("followPokemonImage", "followPokemonImage", followPokemonBox.getNextHighestDepth());
        if (userPokemon[0].shiny == true)
        {
            followPokemonImage.gotoAndStop(userPokemon[0].id + shinyDifference);
        }
        else
        {
            followPokemonImage.gotoAndStop(userPokemon[0].id);
        } // end else if
        setFollowPokemon(player, 0, 0);
        player.followPokemonBox.followPokemonImage.setMask(player.followPokemonBox.box);
    } // end if
} // End of the function
function checkRepel()
{
    if (_root.repelAmount > 0)
    {
        if (_root.encryptedRepelAmount == calcMD5(_root.repelAmount + "dsf09jf30f9jsapdfn30fesanfipas" + _root.username))
        {
            --_root.repelAmount;
            _root.encryptedRepelAmount = calcMD5(_root.repelAmount + "dsf09jf30f9jsapdfn30fesanfipas" + _root.username);
            if (_root.repelAmount == 25)
            {
                systemMessage("Your repel wears off in 25 steps.");
            } // end if
            if (_root.repelAmount == 0)
            {
                systemMessage("The effects of your repel have worn off.");
            } // end if
        }
        else
        {
            error = "Repel Count";
            _root.gotoAndStop("errorconnecting");
        } // end if
    } // end else if
} // End of the function
function fixDepths()
{
    mapLayer1.swapDepths(_root.getNextHighestDepth());
    mapLayer1_2.swapDepths(_root.getNextHighestDepth());
    for (var _loc2 = 0; _loc2 < players.length; ++_loc2)
    {
        players[_loc2].swapDepths(_root.getNextHighestDepth());
    } // end of for
    followPokemonBox.swapDepths(_root.getNextHighestDepth());
    player.swapDepths(_root.getNextHighestDepth());
    mapLayer2.swapDepths(_root.getNextHighestDepth());
    mapLayer3.swapDepths(_root.getNextHighestDepth());
    if (darkScreenTunnel != undefined)
    {
        darkScreenTunnel.swapDepths(_root.getNextHighestDepth());
    } // end if
    if (darkScreenMap != undefined)
    {
        darkScreenMap.swapDepths(_root.getNextHighestDepth());
    } // end if
    lightMap.swapDepths(_root.getNextHighestDepth());
    itemPokemon.swapDepths(_root.getNextHighestDepth());
    GUI.swapDepths(_root.getNextHighestDepth());
    particleHolder.swapDepths(_root.getNextHighestDepth());
    mainGUI.swapDepths(_root.getNextHighestDepth());
    reorderPokemon.swapDepths(_root.getNextHighestDepth());
    learnMoveScreen.swapDepths(_root.getNextHighestDepth());
    mainGUI.tradeBox.swapDepths(_root.mainGUI.getNextHighestDepth());
    mainGUI.pokemonSummary.swapDepths(mainGUI.getNextHighestDepth());
    mainGUI.creditShop.swapDepths(mainGUI.getNextHighestDepth());
    mainGUI.altarGUI.swapDepths(_root.mainGUI.getNextHighestDepth());
    mainGUI.mapEdit.swapDepths(mainGUI.getNextHighestDepth());
    mainGUI.darkScreen.swapDepths(mainGUI.getNextHighestDepth());
    confirmBox.swapDepths(_root.getNextHighestDepth());
    darkScreen2.swapDepths(_root.getNextHighestDepth());
    darkScreen.swapDepths(_root.getNextHighestDepth());
    mainGUI.tradeAmountBox.swapDepths(_root.mainGUI.getNextHighestDepth());
    mainGUI.battleQueue.swapDepths(_root.mainGUI.getNextHighestDepth());
    mainGUI.battleQueueHighscores.swapDepths(_root.mainGUI.getNextHighestDepth());
    mainGUI.battleQueuePrizeShop.swapDepths(_root.mainGUI.getNextHighestDepth());
    mainGUI.battleBackground.swapDepths(_root.mainGUI.getNextHighestDepth());
    mainGUI.mConfirmBox.swapDepths(_root.mainGUI.getNextHighestDepth());
    mainGUI.giftBox.swapDepths(_root.mainGUI.getNextHighestDepth());
    if (_root.useItemOnPokemon._visible == true)
    {
        for (var _loc3 = 1; _loc3 < 7; ++_loc3)
        {
            mainGUI["pokemonIcon" + _loc3].swapDepths(mainGUI.getNextHighestDepth());
        } // end of for
    } // end if
    allButtonBox.swapDepths(_root.getNextHighestDepth());
    merchantBox.swapDepths(_root.getNextHighestDepth());
    evolveUI.swapDepths(_root.getNextHighestDepth());
    chooseAvatarGUI.swapDepths(_root.getNextHighestDepth());
    kantoMap.swapDepths(_root.getNextHighestDepth());
    battleRequest.swapDepths(_root.getNextHighestDepth());
    tradeRequest.swapDepths(_root.getNextHighestDepth());
    giftBox.swapDepths(giftBox._parent.getNextHighestDepth());
    friendInviteBox.swapDepths(_root.getNextHighestDepth());
    clanInviteRequest.swapDepths(_root.getNextHighestDepth());
    cashBox.swapDepths(_root.getNextHighestDepth());
    clanInviteBox.swapDepths(_root.getNextHighestDepth());
    upgradeBox.swapDepths(_root.getNextHighestDepth());
    cashBox.swapDepths(_root.getNextHighestDepth());
    shopBox.swapDepths(_root.getNextHighestDepth());
    yesNoBox.swapDepths(_root.getNextHighestDepth());
    leaveBox.swapDepths(_root.getNextHighestDepth());
    friendInviteBox.swapDepths(_root.getNextHighestDepth());
    ignoreInviteBox.swapDepths(_root.getNextHighestDepth());
    createClanGUI.swapDepths(_root.getNextHighestDepth());
    confirmBox.swapDepths(_root.getNextHighestDepth());
    disbandBox.swapDepths(_root.getNextHighestDepth());
    chatRequest.swapDepths(_root.getNextHighestDepth());
    bidBox.swapDepths(_root.getNextHighestDepth());
    useItemOnPokemon.swapDepths(_root.getNextHighestDepth());
    itemImageDrag.swapDepths(_root.getNextHighestDepth());
    choosePokemon.swapDepths(_root.getNextHighestDepth());
    threeButtonBox.swapDepths(_root.getNextHighestDepth());
    shopDialogueGUI.swapDepths(_root.getNextHighestDepth());
    inputBox.swapDepths(_root.getNextHighestDepth());
    promoteBox.swapDepths(_root.getNextHighestDepth());
    createMapGUI.swapDepths(_root.getNextHighestDepth());
    enterMapGUI.swapDepths(_root.getNextHighestDepth());
    bgM.swapDepths(_root.getNextHighestDepth());
    creation.swapDepths(_root.getNextHighestDepth());
    creation.confirmation.swapDepths(creation.getNextHighestDepth());
    darkScreenLoadMap.swapDepths(_root.getNextHighestDepth());
} // End of the function
function rand(x, y)
{
    var _loc1 = Math.floor(Math.random() * (1 + y - x)) + x;
    return (_loc1);
} // End of the function
function stringReplace(myString, findThis, replaceThis)
{
    return (myString.split(findThis).join(replaceThis));
} // End of the function
function startWildBattle()
{
    getTimestamp("wildBattle");
    if (moveType == "surf")
    {
        _root.oldBattleBg = _root.battleBg;
        _root.battleBg = "water";
    } // end if
    battle = true;
    canMove = false;
    battleType = "wild";
    stepsSinceLastBattle = 0;
    fadeScreen();
} // End of the function
function startTrainerBattle(tempArray, playerDir)
{
    var _loc8 = false;
    var _loc5 = 0;
    var _loc7 = -1;
    var _loc6 = "";
    if (trainerDataLoaded == true)
    {
        foundTrainer = false;
        for (var _loc2 = 0; _loc2 < trainerData.length; ++_loc2)
        {
            if (trainerData[_loc2][0] == tempArray[3])
            {
                _loc7 = _loc2;
                foundTrainer = true;
                _loc8 = true;
                if (trainerData[_loc2][2] == true)
                {
                    foundTrainer = false;
                }
                else if (playerDir != undefined)
                {
                    if (tempArray[6] != undefined && tempArray[6] == true && _root.map != "Battle Cafe")
                    {
                        if (_root.map.indexOf("Elite Four") != -1 || _root.map.indexOf("Champion Room") != -1)
                        {
                            if (int((1500 - trainerData[_loc2][1]) / 3600 * 10) / 10 <= 0)
                            {
                                foundTrainer = false;
                            }
                            else
                            {
                                _loc5 = true;
                            } // end else if
                        }
                        else if (int((600 - trainerData[_loc2][1]) / 3600 * 10) / 10 <= 0)
                        {
                            foundTrainer = false;
                        }
                        else
                        {
                            _loc5 = true;
                        } // end else if
                    }
                    else if (_root.map == "Silph Co F1" && trainerData[_loc2][0] == 1 || _root.map == "Rocket Hideout BF4" && trainerData[_loc2][0] == 3 || _root.map == "Pokemon Mansion F0" && trainerData[_loc2][0] == 2 || _root.map == "Sprout Tower F3" && trainerData[_loc2][0] == 3 || _root.map == "Rocket Hideout BF4" && trainerData[_loc2][0] == 0 || _root.map == "Silph Co F1" && trainerData[_loc2][0] == 1)
                    {
                        if (int((600 - trainerData[_loc2][1]) / 3600 * 10) / 10 <= 0)
                        {
                            foundTrainer = false;
                        }
                        else
                        {
                            _loc5 = true;
                            _loc6 = "gymLeader";
                        } // end else if
                    }
                    else if (int((86400 - trainerData[_loc2][1]) / 3600 * 10) / 10 <= 0)
                    {
                        foundTrainer = false;
                    }
                    else
                    {
                        _loc5 = true;
                    } // end else if
                } // end else if
                break;
            } // end if
        } // end of for
        if (tempArray[6] != undefined && tempArray[6] == true)
        {
            _root.battleType2 = "gymLeader";
            _root.gymLeaderPostBattleText = tempArray[7];
            _loc6 = "gymLeader";
        }
        else
        {
            _root.battleType2 = "";
        } // end else if
        var _loc10 = _root.battleType2;
        _root.trainerName = tempArray[5];
        var _loc4 = false;
        if (_root.battleType2 == "gymLeader")
        {
            if (_root.map != "Battle Cafe")
            {
                if (trainerName == "Brock" && hasBadge("Boulder Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Brock.");
                    _loc4 = true;
                }
                else if (trainerName == "Misty" && hasBadge("Cascade Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Misty.");
                    _loc4 = true;
                }
                else if (trainerName == "Lt Surge" && hasBadge("Thunder Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Lt Surge.");
                    _loc4 = true;
                }
                else if (trainerName == "Erika" && hasBadge("Rainbow Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Erika.");
                    _loc4 = true;
                }
                else if (trainerName == "Sabrina" && hasBadge("Marsh Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Sabrina.");
                    _loc4 = true;
                }
                else if (trainerName == "Koga" && hasBadge("Soul Badge") && map != "Johto Elite Four F2")
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Koga.");
                    _loc4 = true;
                }
                else if (trainerName == "Blaine" && hasBadge("Volcano Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Blaine.");
                    _loc4 = true;
                }
                else if (trainerName == "Giovanni" && hasBadge("Earth Badge") && _root.map == "Viridian City Gym")
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Giovanni.");
                    _loc4 = true;
                }
                else if (trainerName == "Falkner" && hasBadge("Zephyr Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Falkner.");
                    _loc4 = true;
                }
                else if (trainerName == "Bugsy" && hasBadge("Hive Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Bugsy.");
                    _loc4 = true;
                }
                else if (trainerName == "Whitney" && hasBadge("Plain Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Whitney.");
                    _loc4 = true;
                }
                else if (trainerName == "Morty" && hasBadge("Fog Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Morty.");
                    _loc4 = true;
                }
                else if (trainerName == "Chuck" && hasBadge("Storm Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Chuck.");
                    _loc4 = true;
                }
                else if (trainerName == "Jasmine" && hasBadge("Mineral Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Jasmine.");
                    _loc4 = true;
                }
                else if (trainerName == "Pryce" && hasBadge("Glacier Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Pryce.");
                    _loc4 = true;
                }
                else if (trainerName == "Clair" && hasBadge("Rising Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Clair.");
                    _loc4 = true;
                }
                else if (trainerName == "Roxanne" && hasBadge("Stone Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Roxanne.");
                    _loc4 = true;
                }
                else if (trainerName == "Brawley" && hasBadge("Knuckle Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Brawley.");
                    _loc4 = true;
                }
                else if (trainerName == "Wattson" && hasBadge("Dynamo Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Wattson.");
                    _loc4 = true;
                }
                else if (trainerName == "Flannery" && hasBadge("Heat Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Flannery.");
                    _loc4 = true;
                }
                else if (trainerName == "Norman" && hasBadge("Balance Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Norman.");
                    _loc4 = true;
                }
                else if (trainerName == "Winona" && hasBadge("Feather Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Winona.");
                    _loc4 = true;
                }
                else if (trainerName == "Tate" && hasBadge("Mind Badge 1"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Tate.");
                    _loc4 = true;
                }
                else if (trainerName == "Liza" && hasBadge("Mind Badge 2"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Liza.");
                    _loc4 = true;
                }
                else if (trainerName == "Juan" && hasBadge("Rain Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Juan.");
                    _loc4 = true;
                }
                else if (trainerName == "Roark" && hasBadge("Coal Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Roark.");
                    _loc4 = true;
                }
                else if (trainerName == "Gardenia" && hasBadge("Forest Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Gardenia.");
                    _loc4 = true;
                }
                else if (trainerName == "Maylene" && hasBadge("Cobble Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Maylene.");
                    _loc4 = true;
                }
                else if (trainerName == "Crasher Wake" && hasBadge("Fen Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Crasher Wake.");
                    _loc4 = true;
                }
                else if (trainerName == "Fantina" && hasBadge("Relic Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Fantina.");
                    _loc4 = true;
                }
                else if (trainerName == "Byron" && hasBadge("Mine Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Byron.");
                    _loc4 = true;
                }
                else if (trainerName == "Candice" && hasBadge("Icicle Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Candice.");
                    _loc4 = true;
                }
                else if (trainerName == "Volkner" && hasBadge("Beacon Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Volkner.");
                    _loc4 = true;
                }
                else if (trainerName == "Cilan" && hasBadge("Trio Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Cilan.");
                    _loc4 = true;
                }
                else if (trainerName == "Lenora" && hasBadge("Basic Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Lenora.");
                    _loc4 = true;
                }
                else if (trainerName == "Burgh" && hasBadge("Insect Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Burgh.");
                    _loc4 = true;
                }
                else if (trainerName == "Elesa" && hasBadge("Bolt Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Elesa.");
                    _loc4 = true;
                }
                else if (trainerName == "Clay" && hasBadge("Quake Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Clay.");
                    _loc4 = true;
                }
                else if (trainerName == "Skyla" && hasBadge("Jet Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Skyla.");
                    _loc4 = true;
                }
                else if (trainerName == "Drayden" && hasBadge("Legend Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Drayden.");
                    _loc4 = true;
                }
                else if (trainerName == "Marlon" && hasBadge("Wave Badge"))
                {
                    foundTrainer = true;
                    systemMessage("You have already defeated Marlon.");
                    _loc4 = true;
                } // end else if
            } // end else if
        } // end else if
        if (_loc5 != 0 && _loc4 == false)
        {
            if (mainGUI.globalChatT._visible == true)
            {
                mainGUI.globalChatT.htmlText = mainGUI.globalChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'#00FF00\'>You need to wait another " + calculateCooldownText(trainerData[_loc7][1], _loc6) + " before battling this trainer again.</font>");
                if (checkAutoScroll() == true)
                {
                    mainGUI.globalChatT.scroll = mainGUI.globalChatT.maxscroll;
                } // end if
            }
            else if (mainGUI.localChatT._visible == true)
            {
                mainGUI.localChatT.htmlText = mainGUI.localChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'#00FF00\'>You need to wait another " + calculateCooldownText(trainerData[_loc7][1], _loc6) + " before battling this trainer again.</font>");
                if (checkAutoScroll() == true)
                {
                    mainGUI.localChatT.scroll = mainGUI.localChatT.maxscroll;
                } // end if
            }
            else if (mainGUI.tradeChatT._visible == true)
            {
                mainGUI.tradeChatT.htmlText = mainGUI.tradeChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'#00FF00\'>You need to wait another " + calculateCooldownText(trainerData[_loc7][1], _loc6) + " before battling this trainer again.</font>");
                if (checkAutoScroll() == true)
                {
                    mainGUI.tradeChatT.scroll = mainGUI.tradeChatT.maxscroll;
                } // end if
            }
            else if (mainGUI.battleChatT._visible == true)
            {
                mainGUI.battleChatT.htmlText = mainGUI.battleChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'#00FF00\'>You need to wait another " + calculateCooldownText(trainerData[_loc7][1], _loc6) + " before battling this trainer again.</font>");
                if (checkAutoScroll() == true)
                {
                    mainGUI.battleChatT.scroll = mainGUI.battleChatT.maxscroll;
                } // end if
            }
            else if (mainGUI.nonEnglishChatT._visible == true)
            {
                mainGUI.nonEnglishChatT.htmlText = mainGUI.nonEnglishChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'#00FF00\'>You need to wait another " + calculateCooldownText(trainerData[_loc7][1], _loc6) + " before battling this trainer again.</font>");
                if (checkAutoScroll() == true)
                {
                    mainGUI.nonEnglishChatT.scroll = mainGUI.nonEnglishChatT.maxscroll;
                } // end if
            }
            else if (mainGUI.clanChatT._visible == true)
            {
                mainGUI.clanChatT.htmlText = mainGUI.clanChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'#00FF00\'>You need to wait another " + calculateCooldownText(trainerData[_loc7][1], _loc6) + " before battling this trainer again.</font>");
                if (checkAutoScroll() == true)
                {
                    mainGUI.clanChatT.scroll = mainGUI.clanChatT.maxscroll;
                } // end else if
            } // end else if
        } // end else if
        if (trainerName == "Elder Li" && hasQuestArray("Elder Li"))
        {
            foundTrainer = true;
        } // end if
        if (foundTrainer == false)
        {
            if (playerDir == undefined)
            {
                if (_loc8 == false)
                {
                    battle = true;
                    canMove = false;
                    battleType = "trainer";
                    _root.trainerId = tempArray[3];
                    _root.trainerStartingCoords = [tempArray[0], tempArray[1]];
                    _root.trainerDirection = tempArray[2];
                    getTimestamp("trainerBattle", tempArray[3]);
                    mapLayer2["npc_" + tempArray[3]].dir = tempArray[2];
                    mapLayer2["npc_" + tempArray[3]].moveMapAmount = 0;
                    mapLayer2["npc_" + tempArray[3]].nextStep = false;
                    mapLayer2["npc_" + tempArray[3]].speed = 4;
                    mapLayer2["npc_" + tempArray[3]].mArray = tempArray[4];
                    mapLayer2["npc_" + tempArray[3]].x = tempArray[0];
                    mapLayer2["npc_" + tempArray[3]].y = tempArray[1];
                    if (tempArray[2] == "down")
                    {
                        mapLayer2["npc_" + tempArray[3]].endTile = [player.tileX, player.tileY - 1];
                    }
                    else if (tempArray[2] == "up")
                    {
                        mapLayer2["npc_" + tempArray[3]].endTile = [player.tileX, player.tileY + 1];
                    }
                    else if (tempArray[2] == "left")
                    {
                        mapLayer2["npc_" + tempArray[3]].endTile = [player.tileX + 1, player.tileY];
                    }
                    else if (tempArray[2] == "right")
                    {
                        mapLayer2["npc_" + tempArray[3]].endTile = [player.tileX - 1, player.tileY];
                    } // end else if
                    mapLayer2["npc_" + tempArray[3]].trainer = true;
                    activeNPCs.push(mapLayer2["npc_" + tempArray[3]]);
                } // end if
            }
            else
            {
                battle = true;
                canMove = false;
                battleType = "trainer";
                _root.trainerId = tempArray[3];
                _root.trainerStartingCoords = [tempArray[0], tempArray[1]];
                _root.trainerDirection = tempArray[2];
                getTimestamp("trainerBattle", tempArray[3]);
                chatBox(tempArray[4], trainerName);
            } // end if
        } // end if
    } // end else if
} // End of the function
function sendChatMsg()
{
    if (_root.isBusy == false)
    {
        Selection.setFocus(null);
        mainGUI.chatBg.inputTBg._visible = true;
        typing = false;
        if (mainGUI.inputT.length > 0)
        {
            if (mainGUI.inputT.text.indexOf("/") == 0)
            {
                command = replaceChar(mainGUI.inputT.text, "/", "");
                if (command == "faq")
                {
                    getURL("https://www.pokemon-planet.com/forums/index.php?topic=32.0", "_blank");
                }
                else if (command == "highscores")
                {
                    getURL("https://pokemon-planet.com/highscores.php", "_blank");
                }
                else if (command == "forums")
                {
                    getURL("https://pokemon-planet.com/forums/index.php", "_blank");
                }
                else if (command == "fpm")
                {
                    getURL("https://www.pokemon-planet.com/forums/index.php?action=pm;sa=send", "_blank");
                }
                else if (command == "twitter")
                {
                    getURL("https://twitter.com/pokeplanetmmo", "_blank");
                }
                else if (command == "discord")
                {
                    getURL("https://discord.com/invite/rQDDGmfUdV", "_blank");
                }
                else if (command == "darkmode")
                {
                    if (_root.darkMode)
                    {
                        _root.darkMode = false;
                    }
                    else
                    {
                        _root.darkMode = true;
                        darkenScreen(_root.darkModeMapDarkenAmount);
                    } // end else if
                    systemMessage("Dark Mode: " + _root.darkMode);
                }
                else if (command == "fs" || command == "fullscreen")
                {
                    if (fullscreenMode != true)
                    {
                        fullscreenMode = true;
                    }
                    else
                    {
                        fullscreenMode = false;
                    } // end else if
                    getURL("FSCommand:fullscreen", fullscreenMode);
                }
                else if (command == "guide")
                {
                    getURL("https://pokemon-planet.com/forums/index.php?topic=18395.0", "_blank");
                }
                else if (command == "hideui")
                {
                    _root.mainGUI._visible = false;
                }
                else if (command == "coords")
                {
                    systemMessage(player.tileX + ", " + player.tileY);
                }
                else if (command.indexOf("watch") != -1)
                {
                    getTimestamp("command", command);
                }
                else if (String(command).toLowerCase() == "disableplayers")
                {
                    systemMessage("Disabled players.");
                    _root.playersEnabled = false;
                    for (var _loc3 = 0; _loc3 < players.length; ++_loc3)
                    {
                        removeMovieClip (players[_loc3]);
                        players.splice(_loc3, 1);
                        --_loc3;
                    } // end of for
                }
                else if (String(command).toLowerCase() == "enableplayers")
                {
                    systemMessage("Enabled players.");
                    _root.playersEnabled = true;
                }
                else if (command == "rules")
                {
                    getURL("https://pokemon-planet.com/forums/index.php?topic=21.0", "_blank");
                }
                else if (command == "patchnotes")
                {
                    getURL("https://pokemon-planet.com/forums/index.php?topic=22.99999999", "_blank");
                }
                else if (command == "clearchat")
                {
                    lastPM = "";
                    lastPM2 = "";
                    mainGUI.globalChatT.htmlText = "";
                    mainGUI.tradeChatT.htmlText = "";
                    mainGUI.localChatT.htmlText = "";
                    mainGUI.nonEnglishChatT.htmlText = "";
                    mainGUI.clanChatT.htmlText = "";
                    mainGUI.customChatT.htmlText = "";
                    globalChatLength = 0;
                    localChatLength = 0;
                    tradeChatLength = 0;
                    nonEnglishChatLength = 0;
                    clanChatLength = 0;
                    customChatLength = 0;
                    mainGUI.globalChatT.scroll = mainGUI.globalChatT.maxscroll;
                    mainGUI.tradeChatT.scroll = mainGUI.tradeChatT.maxscroll;
                    mainGUI.localChatT.scroll = mainGUI.localChatT.maxscroll;
                    mainGUI.nonEnglishChatT.scroll = mainGUI.nonEnglishChatT.maxscroll;
                    mainGUI.clanChatT.scroll = mainGUI.clanChatT.maxscroll;
                    mainGUI.customChatT.scroll = mainGUI.customChatT.maxscroll;
                }
                else if (command.indexOf("tp2") != -1)
                {
                    if (_root.username.toLowerCase() == "brody" || _root.username.toLowerCase() == "rory" || _root.username.toLowerCase() == "anubisius" || _root.username.toLowerCase() == "incivik" || _root.username.toLowerCase() == "starmie" || _root.username.toLowerCase() == "amazoness")
                    {
                        var _loc12 = replaceChar(mainGUI.inputT.text, "/tp2 ", "");
                        var _loc5 = _loc12.split(" ");
                        for (var _loc4 = 3; _loc4 < _loc5.length; ++_loc4)
                        {
                            _loc5[2] = _loc5[2] + (" " + _loc5[_loc4]);
                        } // end of for
                        loadMap(true, _loc5[2], Number(_loc5[0]), Number(_loc5[1]), undefined, undefined, 1);
                    } // end if
                }
                else if (command.toLowerCase() == "usage" || command.toLowerCase() == "usagestats")
                {
                    if (_root.mainGUI.usageUI._x == undefined)
                    {
                        _root.mainGUI.usageUI = _root.mainGUI.attachMovie("usageUI", "usageUI", _root.mainGUI.getNextHighestDepth());
                        addDraggableGUI(mainGUI.usageUI);
                        mainGUI.usageUI.scrollBar.onRollOver = function ()
                        {
                            this.gotoAndStop("hover");
                        };
                        mainGUI.usageUI.scrollBar.onRollOut = function ()
                        {
                            this.gotoAndStop(1);
                        };
                        mainGUI.usageUI.scrollBar.onPress = function ()
                        {
                            this.gotoAndStop("click");
                            _root.dragScrollbar = 53;
                            this.startDrag(true, this._x, mainGUI.usageUI.scrollUpB._y + mainGUI.usageUI.scrollUpB._height / 2 + this._height / 2, this._x, mainGUI.usageUI.scrollDownB._y - mainGUI.usageUI.scrollDownB._height / 2 - this._height / 2);
                        };
                        mainGUI.usageUI.scrollBar.onRelease = mainGUI.usageUI.scrollBar.onReleaseOutside = function ()
                        {
                            this.gotoAndStop(1);
                            _root.dragScrollbar = 0;
                            stopDrag ();
                        };
                        mainGUI.usageUI.scrollUpB.onRelease = mainGUI.usageUI.scrollUpB.onReleaseOutside = function ()
                        {
                            _root.dragScrollbar = 0;
                            this.gotoAndStop(1);
                        };
                        mainGUI.usageUI.scrollUpB.onPress = function ()
                        {
                            _root.dragScrollbar = 55;
                            this.gotoAndStop("click");
                        };
                        mainGUI.usageUI.scrollUpB.onRollOver = function ()
                        {
                            if (this._currentframe != 2)
                            {
                                this.gotoAndStop("hover");
                            } // end if
                        };
                        mainGUI.usageUI.scrollUpB.onRollOut = function ()
                        {
                            this.gotoAndStop(1);
                        };
                        mainGUI.usageUI.scrollDownB.onRelease = mainGUI.usageUI.scrollDownB.onReleaseOutside = function ()
                        {
                            _root.dragScrollbar = 0;
                            this.gotoAndStop(1);
                        };
                        mainGUI.usageUI.scrollDownB.onPress = function ()
                        {
                            _root.dragScrollbar = 54;
                            this.gotoAndStop("click");
                        };
                        mainGUI.usageUI.scrollDownB.onRollOver = function ()
                        {
                            if (this._currentframe != 2)
                            {
                                this.gotoAndStop("hover");
                            } // end if
                        };
                        mainGUI.usageUI.scrollDownB.onRollOut = function ()
                        {
                            this.gotoAndStop(1);
                        };
                        mainGUI.usageUI.exitB.onRollOver = function ()
                        {
                            this.gotoAndStop("hover");
                        };
                        mainGUI.usageUI.exitB.onRollOut = function ()
                        {
                            this.gotoAndStop(1);
                        };
                        mainGUI.usageUI.exitB.onPress = function ()
                        {
                            this.gotoAndStop("click");
                        };
                        mainGUI.usageUI.exitB.onRelease = function ()
                        {
                            removeMovieClip (mainGUI.usageUI);
                        };
                        showUsageStats();
                    }
                    else
                    {
                        removeMovieClip (_root.mainGUI.usageUI);
                    } // end else if
                }
                else
                {
                    getTimestamp("command", command);
                } // end else if
                mainGUI.inputT.text = "";
                lastMessage = getTimer();
            }
            else if (muted == false && encryptedMuted == calcMD5(muted + _root.kg1() + username))
            {
                if (swearFilter(mainGUI.inputT.text) == true)
                {
                    tempMsg = mainGUI.inputT.text;
                    var _loc6 = false;
                    if (tempMsg.indexOf("\"") != 0 && tempMsg.indexOf("@") != 0)
                    {
                        clanMsg = false;
                        customMsg = false;
                        _loc6 = false;
                        var _loc7 = false;
                        if (mainGUI.globalChatT._visible == true)
                        {
                            if (tempMsg.indexOf("%") == 0)
                            {
                                clanMsg = true;
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                            }
                            else if (tempMsg.indexOf("#") == 0)
                            {
                                customMsg = true;
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                            }
                            else if (tempMsg.indexOf("$") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<t>" + tempMsg;
                                _loc6 = true;
                            }
                            else if (tempMsg.indexOf("!") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<g>" + tempMsg;
                            }
                            else if (tempMsg.indexOf("*") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<l><" + _root.map + ">" + tempMsg;
                                _loc7 = true;
                            }
                            else if (tempMsg.indexOf("&") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<n>" + tempMsg;
                            }
                            else
                            {
                                tempMsg = "<g>" + tempMsg;
                            } // end else if
                        }
                        else if (mainGUI.localChatT._visible == true)
                        {
                            if (tempMsg.indexOf("%") == 0)
                            {
                                clanMsg = true;
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                            }
                            else if (tempMsg.indexOf("#") == 0)
                            {
                                customMsg = true;
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                            }
                            else if (tempMsg.indexOf("$") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<t>" + tempMsg;
                                _loc6 = true;
                            }
                            else if (tempMsg.indexOf("!") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<g>" + tempMsg;
                            }
                            else if (tempMsg.indexOf("*") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<l><" + _root.map + ">" + tempMsg;
                                _loc7 = true;
                            }
                            else if (tempMsg.indexOf("&") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<n>" + tempMsg;
                            }
                            else
                            {
                                tempMsg = "<l><" + _root.map + ">" + tempMsg;
                                _loc7 = true;
                            } // end else if
                        }
                        else if (mainGUI.tradeChatT._visible == true)
                        {
                            if (tempMsg.indexOf("%") == 0)
                            {
                                clanMsg = true;
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                            }
                            else if (tempMsg.indexOf("#") == 0)
                            {
                                customMsg = true;
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                            }
                            else if (tempMsg.indexOf("$") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<t>" + tempMsg;
                                _loc6 = true;
                            }
                            else if (tempMsg.indexOf("!") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<g>" + tempMsg;
                            }
                            else if (tempMsg.indexOf("*") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<l><" + _root.map + ">" + tempMsg;
                                _loc7 = true;
                            }
                            else if (tempMsg.indexOf("&") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<n>" + tempMsg;
                            }
                            else
                            {
                                tempMsg = "<t>" + tempMsg;
                                _loc6 = true;
                            } // end else if
                        }
                        else if (mainGUI.nonEnglishChatT._visible == true)
                        {
                            if (tempMsg.indexOf("%") == 0)
                            {
                                clanMsg = true;
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                            }
                            else if (tempMsg.indexOf("#") == 0)
                            {
                                customMsg = true;
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                            }
                            else if (tempMsg.indexOf("$") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<t>" + tempMsg;
                                _loc6 = true;
                            }
                            else if (tempMsg.indexOf("!") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<g>" + tempMsg;
                            }
                            else if (tempMsg.indexOf("*") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<l><" + _root.map + ">" + tempMsg;
                                _loc7 = true;
                            }
                            else if (tempMsg.indexOf("&") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<n>" + tempMsg;
                            }
                            else
                            {
                                tempMsg = "<n>" + tempMsg;
                            } // end else if
                        }
                        else if (mainGUI.clanChatT._visible == true)
                        {
                            if (tempMsg.indexOf("%") == 0)
                            {
                                clanMsg = true;
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                            }
                            else if (tempMsg.indexOf("#") == 0)
                            {
                                customMsg = true;
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                            }
                            else if (tempMsg.indexOf("$") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<t>" + tempMsg;
                                _loc6 = true;
                            }
                            else if (tempMsg.indexOf("!") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<g>" + tempMsg;
                            }
                            else if (tempMsg.indexOf("*") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<l><" + _root.map + ">" + tempMsg;
                                _loc7 = true;
                            }
                            else if (tempMsg.indexOf("&") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<n>" + tempMsg;
                            }
                            else
                            {
                                clanMsg = true;
                            } // end else if
                        }
                        else if (mainGUI.customChatT._visible == true)
                        {
                            if (tempMsg.indexOf("%") == 0)
                            {
                                clanMsg = true;
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                            }
                            else if (tempMsg.indexOf("#") == 0)
                            {
                                customMsg = true;
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                            }
                            else if (tempMsg.indexOf("$") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<t>" + tempMsg;
                                _loc6 = true;
                            }
                            else if (tempMsg.indexOf("!") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<g>" + tempMsg;
                            }
                            else if (tempMsg.indexOf("*") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<l><" + _root.map + ">" + tempMsg;
                                _loc7 = true;
                            }
                            else if (tempMsg.indexOf("&") == 0)
                            {
                                tempMsg = tempMsg.substr(1, tempMsg.length);
                                tempMsg = "<n>" + tempMsg;
                            }
                            else
                            {
                                customMsg = true;
                            } // end else if
                        } // end else if
                        if (clanMsg == false && customMsg == false)
                        {
                            if (hasBadge("Rainbow Badge") || memberType == "gold" || _loc7 == true)
                            {
                                if (_loc6 == true)
                                {
                                    if (getTimer() - lastTradeMessage >= 60000)
                                    {
                                        lastMessage = getTimer();
                                        lastTradeMessage = getTimer();
                                        getTimestamp("pmsg", tempMsg);
                                    }
                                    else
                                    {
                                        systemMessage("There is a 60 second cooldown for chat messages sent in the trading tab. Please wait a bit and try again.");
                                        mainGUI.inputT.text = "";
                                    } // end else if
                                }
                                else
                                {
                                    lastMessage = getTimer();
                                    getTimestamp("pmsg", tempMsg);
                                } // end else if
                            }
                            else
                            {
                                systemMessage("You need to beat Erika, the fourth Gym Leader to send a global message. Type /guide for a guide, /help for a list of commands, and /faq for a list of frequently asked questions.");
                                mainGUI.inputT.text = "";
                            } // end else if
                        }
                        else if (clanMsg == true)
                        {
                            if (_root.clan != "")
                            {
                                getTimestamp("clanMessage", tempMsg);
                                lastMessage = getTimer();
                            }
                            else
                            {
                                systemMessage("You need to be in a clan to use the clan chat.");
                            } // end else if
                        }
                        else if (customChat != "")
                        {
                            getTimestamp("customMessage", tempMsg);
                            lastMessage = getTimer();
                        }
                        else
                        {
                            systemMessage("You need to be in a custom chat to do that.");
                        } // end else if
                    }
                    else if (hasBadge("Cascade Badge") || memberType == "gold")
                    {
                        tempMsg = tempMsg.substr(1, tempMsg.length);
                        toName = tempMsg.substr(0, tempMsg.indexOf(" "));
                        lastPM = toName;
                        toName = replaceChar(toName, "-", " ");
                        tempMsg = tempMsg.substr(tempMsg.indexOf(" "), tempMsg.length);
                        var _loc13 = tempMsg;
                        getTimestamp("pm", toName, _loc13);
                        if (tempMsg.indexOf("&") != -1)
                        {
                            tempMsg = replaceChar(tempMsg, "&", "&amp;");
                        } // end if
                        if (tempMsg.indexOf("<") != -1)
                        {
                            tempMsg = replaceChar(tempMsg, "<", "&lt;");
                        } // end if
                        if (tempMsg.indexOf(">") != -1)
                        {
                            tempMsg = replaceChar(tempMsg, ">", "&gt;");
                        } // end if
                        if (tempMsg.indexOf("\"") != -1)
                        {
                            tempMsg = replaceChar(tempMsg, "\"", "&quot;");
                        } // end if
                        if (tempMsg.indexOf("\'") != -1)
                        {
                            tempMsg = replaceChar(tempMsg, "\'", "&apos;");
                        } // end if
                        if (tempMsg.indexOf("www.") != -1 || tempMsg.indexOf("http://") != -1 || tempMsg.indexOf("https://") != -1)
                        {
                            if (tempMsg.indexOf("https://") != -1)
                            {
                                var _loc9 = "https://";
                            }
                            else if (tempMsg.indexOf("http://") != -1)
                            {
                                _loc9 = "http://";
                            }
                            else
                            {
                                _loc9 = "www.";
                            } // end else if
                            var _loc10 = tempMsg.substring(tempMsg.indexOf(_loc9), tempMsg.length);
                            var _loc11 = _loc10.indexOf(" ");
                            if (_loc11 != -1)
                            {
                                var _loc8 = _loc10.substring(0, _loc11);
                            }
                            else
                            {
                                _loc8 = tempMsg.substring(tempMsg.indexOf(_loc9), tempMsg.length);
                            } // end else if
                            if (_loc9 == "www.")
                            {
                                tempMsg = replaceChar(tempMsg, _loc8, "<u><a href=\'http://" + _loc8 + "\' target=\'_BLANK\'>" + _loc8 + "</a></u>");
                            }
                            else
                            {
                                tempMsg = replaceChar(tempMsg, _loc8, "<u><a href=\'" + _loc8 + "\' target=\'_BLANK\'>" + _loc8 + "</a></u>");
                            } // end else if
                            tempMsg = replaceChar(tempMsg, "javascript:", "js:");
                        } // end if
                        mainGUI.globalChatT.htmlText = mainGUI.globalChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'#F4F400\'>[To:</font><font size=\'" + _root.chatFontSize + "\'> " + toName + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>]: " + tempMsg + "</font>");
                        mainGUI.localChatT.htmlText = mainGUI.localChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'#F4F400\'>[To:</font><font size=\'" + _root.chatFontSize + "\'> " + toName + "<font><font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>]: " + tempMsg + "</font>");
                        mainGUI.tradeChatT.htmlText = mainGUI.tradeChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'#F4F400\'>[To:</font><font size=\'" + _root.chatFontSize + "\'> " + toName + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>]: " + tempMsg + "</font>");
                        mainGUI.nonEnglishChatT.htmlText = mainGUI.nonEnglishChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'#F4F400\'>[To:</font><font size=\'" + _root.chatFontSize + "\'> " + toName + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>]: " + tempMsg + "</font>");
                        mainGUI.clanChatT.htmlText = mainGUI.clanChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'#F4F400\'>[To:</font><font size=\'" + _root.chatFontSize + "\'> " + toName + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>]: " + tempMsg + "</font>");
                        mainGUI.customChatT.htmlText = mainGUI.customChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'#F4F400\'>[To:</font><font size=\'" + _root.chatFontSize + "\'> " + toName + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>]: " + tempMsg + "</font>");
                        if (checkAutoScroll() == true)
                        {
                            mainGUI.globalChatT.scroll = mainGUI.globalChatT.maxscroll;
                            mainGUI.localChatT.scroll = mainGUI.localChatT.maxscroll;
                            mainGUI.tradeChatT.scroll = mainGUI.tradeChatT.maxscroll;
                            mainGUI.nonEnglishChatT.scroll = mainGUI.nonEnglishChatT.maxscroll;
                            mainGUI.clanChatT.scroll = mainGUI.clanChatT.maxscroll;
                            mainGUI.customChatT.scroll = mainGUI.customChatT.maxscroll;
                        } // end if
                        lastMessage = getTimer();
                    }
                    else
                    {
                        systemMessage("You need to beat Misty, the second Gym Leader to send a private message. Type /help for a list of commands, and /faq for a list of frequently asked questions.");
                        mainGUI.inputT.text = "";
                    } // end else if
                }
                else
                {
                    systemMessage("Swearing is against the rules.");
                } // end else if
                mainGUI.inputT.text = "";
            }
            else
            {
                systemMessage("You cannot talk because you are muted.");
                mainGUI.inputT.text = "";
            } // end if
        } // end else if
    } // end else if
} // End of the function
function replaceChar(s, a, b)
{
    var _loc2 = [];
    _loc2 = s.split(a);
    s = "";
    for (var _loc1 = 0; _loc1 < _loc2.length; ++_loc1)
    {
        s = s + (_loc1 < _loc2.length - 1 ? (_loc2[_loc1] + b) : (_loc2[_loc1]));
    } // end of for
    return (s);
} // End of the function
function swearFilter(msg)
{
    var _loc3 = "";
    if (msg.indexOf("\"") == 0 || msg.indexOf("@") == 0)
    {
        _loc3 = "pm";
    }
    else if (msg.indexOf("\"") == 0 || msg.indexOf("@") == 0)
    {
        _loc3 = "pm";
    }
    else if (msg.indexOf("%") == 0)
    {
        _loc3 = "clan";
    }
    else if (msg.indexOf("#") == 0)
    {
        _loc3 = "custom";
    }
    else if (msg.indexOf("$") == 0)
    {
        _loc3 = "trade";
    }
    else if (msg.indexOf("!") == 0)
    {
        _loc3 = "global";
    }
    else if (msg.indexOf("*") == 0)
    {
        _loc3 = "local";
    }
    else if (msg.indexOf("&") == 0)
    {
        _loc3 = "nonEnglish";
    }
    else if (mainGUI.globalChatT._visible == true)
    {
        _loc3 = "global";
    }
    else if (mainGUI.tradeChatT._visible == true)
    {
        _loc3 = "trade";
    }
    else if (mainGUI.localChatT._visible == true)
    {
        _loc3 = "local";
    }
    else if (mainGUI.nonEnglishChatT._visible == true)
    {
        _loc3 = "nonEnglish";
    } // end else if
    if (_loc3 == "global" || _loc3 == "trade" || _loc3 == "local" || _loc3 == "nonEnglish" || _root.allowSwearing == "0")
    {
        if (msg.indexOf("\"") != 0 && msg.indexOf("@") != 0 || (msg.indexOf("\"") == 0 || msg.indexOf("@") == 0) && _root.allowSwearing == "0")
        {
            msg = msg.toLowerCase();
            if (msg.indexOf("bellend") != -1 || msg.indexOf("prick") != -1 || msg.indexOf("wanker") != -1 || msg.indexOf("bollocks") != -1 || msg.indexOf("fuck") != -1 || msg.indexOf("fukin") != -1 || msg.indexOf("asshole") != -1 || msg.indexOf("nigger") != -1 || msg.indexOf("dickhead") != -1 || msg.indexOf("cockhead") != -1 || msg.indexOf("shithead") != -1 || msg.indexOf("bitch") != -1 || msg.indexOf("bastard") != -1 || msg.indexOf("cunt") != -1 || msg.indexOf("shit") != -1 || msg.indexOf("penishead") != -1 || msg.indexOf("cock") != -1 || msg.indexOf("pussy") != -1 || msg.indexOf("piss") != -1 || msg.indexOf("dick") != -1 || msg.indexOf("caralho") != -1 || msg.indexOf("foda se") != -1 || msg.indexOf("foda-se") != -1 || msg.indexOf("buceta") != -1 || msg.indexOf("slut") != -1 || msg.indexOf("smartass") != -1 || msg.indexOf("dumbass") != -1 || msg.indexOf("bollocks") != -1 || msg.indexOf("faggot") != -1 || msg.indexOf("nigga") != -1 || msg.indexOf("niqqa") != -1 || msg.indexOf("niqa") != -1 || msg.indexOf("n1gger") != -1 || msg.indexOf("nigg3r") != -1 || msg.indexOf("n1gg3r") != -1)
            {
                return (false);
            } // end if
            if (msg.indexOf(" ass ") != -1 || msg.indexOf(" puta ") != -1 || msg.indexOf(" cum ") != -1 || msg.indexOf(" rape ") != -1 || msg.indexOf(" fag ") != -1)
            {
                return (false);
            } // end if
        } // end if
    } // end if
    return (true);
} // End of the function
function loadGUI()
{
    if (_root.username.toLowerCase() == "brody" || _root.username.toLowerCase() == "test")
    {
        _root.mainGUI.inputT.maxChars = 3000;
    } // end if
    mainGUI.globalChatT.htmlText = "<font size=\'" + _root.chatFontSize + "\'>Welcome to Pokemon Planet.<br>Type /help for a list of commands, /rules for the game rules, /faq for a list of frequently asked questions, /guide for a link to a useful guide, and /discord for an invite to the Discord server.<br><b>Remember, all trades are final. It is not recommended to lend out any items or pokemon!<b/></font>";
    mainGUI.localChatT.htmlText = "<font size=\'" + _root.chatFontSize + "\'>Welcome to Pokemon Planet.<br>Type /help for a list of commands, /rules for the game rules, /faq for a list of frequently asked questions, /guide for a link to a useful guide, and /discord for an invite to the Discord server.<br><b>Remember, all trades are final. It is not recommended to lend out any items or pokemon!<b/></font>";
    mainGUI.tradeChatT.htmlText = "<font size=\'" + _root.chatFontSize + "\'>Welcome to Pokemon Planet.<br>Type /help for a list of commands, /rules for the game rules, /faq for a list of frequently asked questions, /guide for a link to a useful guide, and /discord for an invite to the Discord server.<br><b>Remember, all trades are final. It is not recommended to lend out any items or pokemon!<b/></font>";
    mainGUI.clanChatT.htmlText = "<font size=\'" + _root.chatFontSize + "\'>Welcome to Pokemon Planet.<br>Type /help for a list of commands, /rules for the game rules, /faq for a list of frequently asked questions, /guide for a link to a useful guide, and /discord for an invite to the Discord server.<br><b>Remember, all trades are final. It is not recommended to lend out any items or pokemon!<b/></font>";
    mainGUI.nonEnglishChatT.htmlText = "<font size=\'" + _root.chatFontSize + "\'>Welcome to Pokemon Planet.<br>Type /help for a list of commands, /rules for the game rules, /faq for a list of frequently asked questions, /guide for a link to a useful guide, and /discord for an invite to the Discord server.<br><b>Remember, all trades are final. It is not recommended to lend out any items or pokemon!<b/></font>";
    if (customChat != "")
    {
        mainGUI.customChatT.htmlText = "<font size=\'" + _root.chatFontSize + "\'>Welcome to Pokemon Planet.<br>Type /help for a list of commands, /rules for the game rules, /faq for a list of frequently asked questions, /guide for a link to a useful guide, and /discord for an invite to the Discord server.<br><b>Remember, all trades are final. It is not recommended to lend out any items or pokemon!<b/></font>";
    } // end if
    mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
    mainGUI.creditsT.htmlText = "<b>" + credits + "c</b>";
    mainGUI.mapT.htmlText = "<b>" + map;
    mainGUI.settings.percentT.htmlText = "<b>" + musicVolume + "%";
    mainGUI.trainerCard.trainerLevels.fishExpBar.setMask(mainGUI.trainerCard.trainerLevels.m);
    mainGUI.trainerCard.trainerLevels.mineExpBar.setMask(mainGUI.trainerCard.trainerLevels.m2);
    loadPokemonIcons(false);
    mainGUI.pokedex._visible = false;
    mainGUI.pokemonIcon1.pokeMenu._visible = false;
    mainGUI.pokemonIcon2.pokeMenu._visible = false;
    mainGUI.pokemonIcon3.pokeMenu._visible = false;
    mainGUI.pokemonIcon4.pokeMenu._visible = false;
    mainGUI.pokemonIcon5.pokeMenu._visible = false;
    mainGUI.pokemonIcon6.pokeMenu._visible = false;
    mainGUI.legendaryT._visible = false;
    mainGUI.dr._visible = false;
    mainGUI.w._visible = false;
    mainGUI.h._visible = false;
    mainGUI.c._visible = false;
    mainGUI.christmasBlessingSmallT._visible = false;
    mainGUI.christmasBlessingBigT._visible = false;
    mainGUI.dropRateBlessingSmallT._visible = false;
    mainGUI.dropRateBlessingBigT._visible = false;
    mainGUI.halloweenBlessingSmallT._visible = false;
    mainGUI.halloweenBlessingBigT._visible = false;
    mainGUI.worldBlessingSmallT._visible = false;
    mainGUI.worldBlessingBigT._visible = false;
    mainGUI.battleBackground.sb._visible = false;
    mainGUI.battleBackground._visible = false;
    pokeMenu._visible = false;
    mainGUI.localChatT._visible = false;
    mainGUI.tradeChatT._visible = false;
    mainGUI.battleChatT._visible = false;
    mainGUI.nonEnglishChatT._visible = false;
    mainGUI.clanChatT._visible = false;
    mainGUI.customChatT._visible = false;
    mainGUI.inventory._visible = false;
    mainGUI.settings._visible = false;
    mainGUI.chatSettings._visible = false;
    mainGUI.pokemonSummary._visible = false;
    mainGUI.pokemonSummary.moves._visible = false;
    mainGUI.pokemonSummary.moveBank._visible = false;
    mainGUI.serverRestartT._visible = false;
    mainGUI.serverRestartBackground._visible = false;
    mainGUI.people._visible = false;
    mainGUI.clanGUI._visible = false;
    mainGUI.trainerCard._visible = false;
    mainGUI.trainerCard.trainerLevels_visible = false;
    mainGUI.x2T._visible = false;
    mainGUI.x2T2._visible = false;
    mainGUI.x2T3._visible = false;
    mainGUI.altarBlessingT._visible = false;
    mainGUI.altarBlessingT2._visible = false;
    mainGUI.altarBlessingT3._visible = false;
    mainGUI.itemBox._visible = false;
    mainGUI.creditShop._visible = false;
    mainGUI.crafting._visible = false;
    mainGUI.achievements._visible = false;
    mainGUI.swarmT._visible = false;
    mainGUI.goldRushT._visible = false;
    mainGUI.clanLeaderboardT._visible = false;
    mainGUI.worldBossT._visible = false;
    makeCreditShop("Main");
    if (fastBattles == true)
    {
        mainGUI.settings.tickBox.gotoAndStop(2);
    }
    else
    {
        mainGUI.settings.tickBox.gotoAndStop(1);
    } // end else if
    if (autoscroll == true)
    {
        mainGUI.settings.tickBox2.gotoAndStop(2);
    }
    else
    {
        mainGUI.settings.tickBox2.gotoAndStop(1);
    } // end else if
    loadingT.text = "";
    loadingT._visible = false;
    _root.loadingBall.swapDepths(_root.getNextHighestDepth());
    removeMovieClip (_root.loadingBall);
    mainGUI._visible = true;
    loadedGUI = true;
    mainGUI.globalTab.gotoAndStop("click");
    mainGUI.trainerCard.trainerInfo.balance._visible = false;
    mainGUI.trainerCard.trainerInfo.beacon._visible = false;
    mainGUI.trainerCard.trainerInfo.boulder._visible = false;
    mainGUI.trainerCard.trainerInfo.cascade._visible = false;
    mainGUI.trainerCard.trainerInfo.coal._visible = false;
    mainGUI.trainerCard.trainerInfo.cobble._visible = false;
    mainGUI.trainerCard.trainerInfo.dynamo._visible = false;
    mainGUI.trainerCard.trainerInfo.earth._visible = false;
    mainGUI.trainerCard.trainerInfo.feather._visible = false;
    mainGUI.trainerCard.trainerInfo.fen._visible = false;
    mainGUI.trainerCard.trainerInfo.fog._visible = false;
    mainGUI.trainerCard.trainerInfo.forest._visible = false;
    mainGUI.trainerCard.trainerInfo.glacier._visible = false;
    mainGUI.trainerCard.trainerInfo.heat._visible = false;
    mainGUI.trainerCard.trainerInfo.hive._visible = false;
    mainGUI.trainerCard.trainerInfo.icicle._visible = false;
    mainGUI.trainerCard.trainerInfo.knuckle._visible = false;
    mainGUI.trainerCard.trainerInfo.marsh._visible = false;
    mainGUI.trainerCard.trainerInfo.mind._visible = false;
    mainGUI.trainerCard.trainerInfo.mine._visible = false;
    mainGUI.trainerCard.trainerInfo.mineral._visible = false;
    mainGUI.trainerCard.trainerInfo.plain._visible = false;
    mainGUI.trainerCard.trainerInfo.rain._visible = false;
    mainGUI.trainerCard.trainerInfo.rainbow._visible = false;
    mainGUI.trainerCard.trainerInfo.relic._visible = false;
    mainGUI.trainerCard.trainerInfo.rising._visible = false;
    mainGUI.trainerCard.trainerInfo.soul._visible = false;
    mainGUI.trainerCard.trainerInfo.stone._visible = false;
    mainGUI.trainerCard.trainerInfo.storm._visible = false;
    mainGUI.trainerCard.trainerInfo.thunder._visible = false;
    mainGUI.trainerCard.trainerInfo.volcano._visible = false;
    mainGUI.trainerCard.trainerInfo.zephyr._visible = false;
    mainGUI.trainerCard.trainerInfo.basic._visible = false;
    mainGUI.trainerCard.trainerInfo.bolt._visible = false;
    mainGUI.trainerCard.trainerInfo.wave._visible = false;
    mainGUI.trainerCard.trainerInfo.insect._visible = false;
    mainGUI.trainerCard.trainerInfo.jet._visible = false;
    mainGUI.trainerCard.trainerInfo.legend._visible = false;
    mainGUI.trainerCard.trainerInfo.quake._visible = false;
    mainGUI.trainerCard.trainerInfo.trio._visible = false;
    mainGUI.trainerCard.trainerInfo.bug._visible = false;
    mainGUI.trainerCard.trainerInfo.cliff._visible = false;
    mainGUI.trainerCard.trainerInfo.fairy._visible = false;
    mainGUI.trainerCard.trainerInfo.iceburg._visible = false;
    mainGUI.trainerCard.trainerInfo.psychic._visible = false;
    mainGUI.trainerCard.trainerInfo.plant._visible = false;
    mainGUI.trainerCard.trainerInfo.rumble._visible = false;
    mainGUI.trainerCard.trainerInfo.voltage._visible = false;
    var _loc3 = widthOffset;
    var _loc2 = heightOffset;
    mainGUI.inventoryB._x = mainGUI.inventoryB._x - _loc3;
    mainGUI.inventoryB._y = mainGUI.inventoryB._y + _loc2;
    mainGUI.peopleB._x = mainGUI.peopleB._x - _loc3;
    mainGUI.peopleB._y = mainGUI.peopleB._y + _loc2;
    mainGUI.trainerCardB._x = mainGUI.trainerCardB._x - _loc3;
    mainGUI.trainerCardB._y = mainGUI.trainerCardB._y + _loc2;
    mainGUI.settingsB._x = mainGUI.settingsB._x - _loc3;
    mainGUI.settingsB._y = mainGUI.settingsB._y + _loc2;
    mainGUI.clanB._x = mainGUI.clanB._x - _loc3;
    mainGUI.clanB._y = mainGUI.clanB._y + _loc2;
    mainGUI.creditShopB._x = mainGUI.creditShopB._x - _loc3;
    mainGUI.creditShopB._y = mainGUI.creditShopB._y + _loc2;
    mainGUI.achievementsB._x = mainGUI.achievementsB._x - _loc3;
    mainGUI.achievementsB._y = mainGUI.achievementsB._y + _loc2;
    mainGUI.battleQueueB._x = mainGUI.battleQueueB._x - _loc3;
    mainGUI.battleQueueB._y = mainGUI.battleQueueB._y + _loc2;
    mainGUI.inputT._x = mainGUI.inputT._x + _loc3;
    mainGUI.inputT._y = mainGUI.inputT._y + _loc2;
    mainGUI.chatB._x = mainGUI.chatB._x + _loc3;
    mainGUI.chatB._y = mainGUI.chatB._y + _loc2;
    mainGUI.scrollDownB._x = mainGUI.scrollDownB._x + _loc3;
    mainGUI.scrollDownB._y = mainGUI.scrollDownB._y + _loc2;
    mainGUI.scrollBar._x = mainGUI.scrollBar._x + _loc3;
    mainGUI.scrollBar._y = mainGUI.scrollBar._y + _loc2;
    mainGUI.scrollUpB._x = mainGUI.scrollUpB._x + _loc3;
    mainGUI.scrollUpB._y = mainGUI.scrollUpB._y + _loc2;
    mainGUI.nonEnglishChatT._x = mainGUI.nonEnglishChatT._x + _loc3;
    mainGUI.nonEnglishChatT._y = mainGUI.nonEnglishChatT._y + _loc2;
    mainGUI.clanChatT._x = mainGUI.clanChatT._x + _loc3;
    mainGUI.clanChatT._y = mainGUI.clanChatT._y + _loc2;
    mainGUI.localChatT._x = mainGUI.localChatT._x + _loc3;
    mainGUI.localChatT._y = mainGUI.localChatT._y + _loc2;
    mainGUI.tradeChatT._x = mainGUI.tradeChatT._x + _loc3;
    mainGUI.tradeChatT._y = mainGUI.tradeChatT._y + _loc2;
    mainGUI.globalChatT._x = mainGUI.globalChatT._x + _loc3;
    mainGUI.globalChatT._y = mainGUI.globalChatT._y + _loc2;
    mainGUI.customChatT._x = mainGUI.customChatT._x + _loc3;
    mainGUI.customChatT._y = mainGUI.customChatT._y + _loc2;
    mainGUI.chatBg._x = mainGUI.chatBg._x + _loc3;
    mainGUI.chatBg._y = mainGUI.chatBg._y + _loc2;
    mainGUI.globalTab._x = mainGUI.globalTab._x + _loc3;
    mainGUI.globalTab._y = mainGUI.globalTab._y + _loc2;
    mainGUI.localTab._x = mainGUI.localTab._x + _loc3;
    mainGUI.localTab._y = mainGUI.localTab._y + _loc2;
    mainGUI.tradeTab._x = mainGUI.tradeTab._x + _loc3;
    mainGUI.tradeTab._y = mainGUI.tradeTab._y + _loc2;
    mainGUI.clanTab._x = mainGUI.clanTab._x + _loc3;
    mainGUI.clanTab._y = mainGUI.clanTab._y + _loc2;
    mainGUI.nonEnglishTab._x = mainGUI.nonEnglishTab._x + _loc3;
    mainGUI.nonEnglishTab._y = mainGUI.nonEnglishTab._y + _loc2;
    mainGUI.customTab._x = mainGUI.customTab._x + _loc3;
    mainGUI.customTab._y = mainGUI.customTab._y + _loc2;
    mainGUI.serverRestartT._x = mainGUI.serverRestartT._x + _loc3;
    mainGUI.serverRestartT._y = mainGUI.serverRestartT._y + _loc2;
    mainGUI.serverRestartBackground._x = mainGUI.serverRestartBackground._x + _loc3;
    mainGUI.serverRestartBackground._y = mainGUI.serverRestartBackground._y + _loc2;
    mainGUI.contractB._x = mainGUI.contractB._x + _loc3;
    mainGUI.contractB._y = mainGUI.contractB._y + _loc2;
    mainGUI.expandB._x = mainGUI.expandB._x + _loc3;
    mainGUI.expandB._y = mainGUI.expandB._y + _loc2;
    mainGUI.chatSettingsB._x = mainGUI.chatSettingsB._x + _loc3;
    mainGUI.chatSettingsB._y = mainGUI.chatSettingsB._y + _loc2;
    mainGUI.hb1._x = mainGUI.hb1._x + _loc3;
    mainGUI.hb1._y = mainGUI.hb1._y + _loc2;
    mainGUI.hb2._x = mainGUI.hb2._x + _loc3;
    mainGUI.hb2._y = mainGUI.hb2._y + _loc2;
    mainGUI.hb3._x = mainGUI.hb3._x + _loc3;
    mainGUI.hb3._y = mainGUI.hb3._y + _loc2;
    mainGUI.w._x = mainGUI.w._x - _loc3;
    mainGUI.w._y = mainGUI.w._y - _loc2;
    mainGUI.h._x = mainGUI.h._x - _loc3;
    mainGUI.h._y = mainGUI.h._y - _loc2;
    mainGUI.c._x = mainGUI.c._x - _loc3;
    mainGUI.c._y = mainGUI.c._y - _loc2;
    mainGUI.dr._x = mainGUI.dr._x - _loc3;
    mainGUI.dr._y = mainGUI.dr._y - _loc2;
    mainGUI.x2T._x = mainGUI.x2T._x - _loc3;
    mainGUI.x2T._y = mainGUI.x2T._y - _loc2;
    mainGUI.x2T2._x = mainGUI.x2T2._x - _loc3;
    mainGUI.x2T2._y = mainGUI.x2T2._y - _loc2;
    mainGUI.x2T3._x = mainGUI.x2T3._x - _loc3;
    mainGUI.x2T3._y = mainGUI.x2T3._y - _loc2;
    mainGUI.worldBlessingSmallT._x = mainGUI.worldBlessingSmallT._x - _loc3;
    mainGUI.worldBlessingSmallT._y = mainGUI.worldBlessingSmallT._y - _loc2;
    mainGUI.halloweenBlessingSmallT._x = mainGUI.halloweenBlessingSmallT._x - _loc3;
    mainGUI.halloweenBlessingSmallT._y = mainGUI.halloweenBlessingSmallT._y - _loc2;
    mainGUI.christmasBlessingSmallT._x = mainGUI.christmasBlessingSmallT._x - _loc3;
    mainGUI.christmasBlessingSmallT._y = mainGUI.christmasBlessingSmallT._y - _loc2;
    mainGUI.dropRateBlessingSmallT._x = mainGUI.dropRateBlessingSmallT._x - _loc3;
    mainGUI.dropRateBlessingSmallT._y = mainGUI.dropRateBlessingSmallT._y - _loc2;
    mainGUI.altarBlessingT._x = mainGUI.altarBlessingT._x - _loc3;
    mainGUI.altarBlessingT._y = mainGUI.altarBlessingT._y - _loc2;
    mainGUI.altarBlessingT2._x = mainGUI.altarBlessingT2._x - _loc3;
    mainGUI.altarBlessingT2._y = mainGUI.altarBlessingT2._y - _loc2;
    mainGUI.altarBlessingT3._x = mainGUI.altarBlessingT3._x - _loc3;
    mainGUI.altarBlessingT3._y = mainGUI.altarBlessingT3._y - _loc2;
    mainGUI.worldBossT._x = mainGUI.worldBossT._x - _loc3;
    mainGUI.worldBossT._y = mainGUI.worldBossT._y - _loc2;
    mainGUI.swarmT._x = mainGUI.swarmT._x - _loc3;
    mainGUI.swarmT._y = mainGUI.swarmT._y - _loc2;
    mainGUI.goldRushT._x = mainGUI.goldRushT._x - _loc3;
    mainGUI.goldRushT._y = mainGUI.goldRushT._y - _loc2;
    mainGUI.mapT._x = mainGUI.mapT._x + _loc3;
    mainGUI.mapT._y = mainGUI.mapT._y - _loc2;
    mainGUI.raidT._y = mainGUI.raidT._y - _loc2;
    useItemOnPokemon._y = useItemOnPokemon._y - _loc2;
    mainGUI.clanLeaderboardT._y = mainGUI.clanLeaderboardT._y + _loc2;
} // End of the function
function loadPokedexInfo(tempId)
{
    removeMovieClip (mainGUI.pokedex.moveHolder);
    if (pokedexCaught2[tempId - 1] == "true")
    {
        mainGUI.pokedex.p._visible = true;
    }
    else
    {
        mainGUI.pokedex.p._visible = false;
    } // end else if
    if (pokedexSeen[tempId - 1] == true || pokedexSeen[tempId - 1] == "true")
    {
        mainGUI.pokedex.i.gotoAndStop(tempId);
        mainGUI.pokedex.nameT.htmlText = "<b>" + upperCase(generalInfoArray[tempId - 1][0]);
        mainGUI.pokedex.idT.htmlText = "<b>" + tempId;
    }
    else
    {
        mainGUI.pokedex.i.gotoAndStop(tempId);
        mainGUI.pokedex.nameT.htmlText = "<b>???";
        mainGUI.pokedex.idT.htmlText = "<b>???";
    } // end else if
    if (pokedexCaught[tempId - 1] == true || pokedexCaught[tempId - 1] == "true")
    {
        mainGUI.pokedex.categoryT.htmlText = "<b>" + upperCase(generalInfoArray[tempId - 1][4]);
        mainGUI.pokedex.heightT.htmlText = "<b>" + int(Number(generalInfoArray[tempId - 1][2]) / 10 * 10) / 10 + " m";
        mainGUI.pokedex.weightT.htmlText = "<b>" + int(Number(generalInfoArray[tempId - 1][3]) / 10 * 10) / 10 + " kg";
        mainGUI.pokedex.baseExpT.htmlText = "<b>" + baseExpArray[tempId - 1];
        mainGUI.pokedex.type1T.htmlText = "<b>" + upperCase(moveIdToString(typesArray[tempId - 1][0]));
        if (typesArray[tempId - 1][1] != undefined)
        {
            mainGUI.pokedex.type2T.htmlText = "<b>" + upperCase(moveIdToString(typesArray[tempId - 1][1]));
        }
        else
        {
            mainGUI.pokedex.type2T.htmlText = "";
        } // end else if
        mainGUI.pokedex.ability1T.htmlText = "<b>" + upperCase(abilityNames[abilitiesArray[tempId - 1][0] - 1]);
        if (abilitiesArray[tempId - 1][1] != undefined)
        {
            mainGUI.pokedex.ability2T.htmlText = "<b>" + upperCase(abilityNames[abilitiesArray[tempId - 1][1] - 1]);
        }
        else
        {
            mainGUI.pokedex.ability2T.htmlText = "";
        } // end else if
        mainGUI.pokedex.descriptionT.htmlText = "<b>" + test123[tempId - 1];
        mainGUI.pokedex.hpT.htmlText = "<b>" + baseStatsArray[tempId - 1][0] + " (<font color=\'#A9F1A3\'>" + baseStatsArray[tempId - 1][1] + "</font>)";
        mainGUI.pokedex.attackT.htmlText = "<b>" + baseStatsArray[tempId - 1][2] + " (<font color=\'#A9F1A3\'>" + baseStatsArray[tempId - 1][3] + "</font>)";
        mainGUI.pokedex.defenseT.htmlText = "<b>" + baseStatsArray[tempId - 1][4] + " (<font color=\'#A9F1A3\'>" + baseStatsArray[tempId - 1][5] + "</font>)";
        mainGUI.pokedex.speedT.htmlText = "<b>" + baseStatsArray[tempId - 1][10] + " (<font color=\'#A9F1A3\'>" + baseStatsArray[tempId - 1][11] + "</font>)";
        mainGUI.pokedex.specialAttackT.htmlText = "<b>" + baseStatsArray[tempId - 1][6] + " (<font color=\'#A9F1A3\'>" + baseStatsArray[tempId - 1][7] + "</font>)";
        mainGUI.pokedex.specialDefenseT.htmlText = "<b>" + baseStatsArray[tempId - 1][8] + " (<font color=\'#A9F1A3\'>" + baseStatsArray[tempId - 1][9] + "</font>)";
        mainGUI.pokedex.movesT.htmlText = "";
        mainGUI.pokedex.createEmptyMovieClip("moveHolder", mainGUI.pokedex.getNextHighestDepth());
        mainGUI.pokedex.moveHolder._x = 295;
        mainGUI.pokedex.moveHolder._y = 132;
        mainGUI.pokedex.moveHolder.setMask(mainGUI.pokedex.m3);
        movesAdded = 0;
        for (var _loc3 = movesArray.length - 1; _loc3 > -1; --_loc3)
        {
            if (movesArray[_loc3][0] == tempId)
            {
                ++movesAdded;
                var _loc1 = mainGUI.pokedex.moveHolder.attachMovie("pokedexMove", "pokdexMove_" + movesAdded, mainGUI.pokedex.moveHolder.getNextHighestDepth());
                _loc1.nameT.htmlText = "<b>" + moveIdToName(movesArray[_loc3][2]);
                _loc1.levelT.htmlText = "<b>Level " + movesArray[_loc3][1];
                if (movesAdded % 2 == 0)
                {
                    _loc1._x = 87;
                }
                else
                {
                    _loc1._x = -88;
                } // end else if
                if (movesAdded <= 2)
                {
                    _loc1._y = -146;
                    continue;
                } // end if
                if (movesAdded <= 4)
                {
                    _loc1._y = -96;
                    continue;
                } // end if
                if (movesAdded <= 6)
                {
                    _loc1._y = -46;
                    continue;
                } // end if
                if (movesAdded <= 8)
                {
                    _loc1._y = 4;
                    continue;
                } // end if
                if (movesAdded <= 10)
                {
                    _loc1._y = 54;
                    continue;
                } // end if
                if (movesAdded <= 12)
                {
                    _loc1._y = 104;
                    continue;
                } // end if
                if (movesAdded <= 14)
                {
                    _loc1._y = 154;
                    continue;
                } // end if
                if (movesAdded <= 16)
                {
                    _loc1._y = 204;
                    continue;
                } // end if
                if (movesAdded <= 18)
                {
                    _loc1._y = 254;
                    continue;
                } // end if
                if (movesAdded <= 20)
                {
                    _loc1._y = 304;
                    continue;
                } // end if
                if (movesAdded <= 22)
                {
                    _loc1._y = 354;
                    continue;
                } // end if
                if (movesAdded <= 24)
                {
                    _loc1._y = 404;
                    continue;
                } // end if
                if (movesAdded <= 26)
                {
                    _loc1._y = 454;
                    continue;
                } // end if
                if (movesAdded <= 28)
                {
                    _loc1._y = 504;
                    continue;
                } // end if
                if (movesAdded <= 30)
                {
                    _loc1._y = 554;
                } // end if
            } // end if
        } // end of for
        mainGUI.pokedex.hpBar._visible = true;
        mainGUI.pokedex.attackBar._visible = true;
        mainGUI.pokedex.defenseBar._visible = true;
        mainGUI.pokedex.specialAttackBar._visible = true;
        mainGUI.pokedex.specialDefenseBar._visible = true;
        mainGUI.pokedex.speedBar._visible = true;
        mainGUI.pokedex.hpBar._width = baseStatsArray[tempId - 1][0] / 255 * 142;
        mainGUI.pokedex.attackBar._width = baseStatsArray[tempId - 1][2] / 255 * 142;
        mainGUI.pokedex.defenseBar._width = baseStatsArray[tempId - 1][4] / 255 * 142;
        mainGUI.pokedex.specialAttackBar._width = baseStatsArray[tempId - 1][6] / 255 * 142;
        mainGUI.pokedex.specialDefenseBar._width = baseStatsArray[tempId - 1][8] / 255 * 142;
        mainGUI.pokedex.speedBar._width = baseStatsArray[tempId - 1][10] / 255 * 142;
    }
    else
    {
        mainGUI.pokedex.categoryT.htmlText = "<b>???";
        mainGUI.pokedex.heightT.htmlText = "<b>???";
        mainGUI.pokedex.weightT.htmlText = "<b>???";
        mainGUI.pokedex.baseExpT.htmlText = "<b>???";
        mainGUI.pokedex.type1T.htmlText = "<b>???";
        mainGUI.pokedex.type2T.htmlText = "<b>???";
        mainGUI.pokedex.ability1T.htmlText = "<b>???";
        mainGUI.pokedex.ability2T.htmlText = "<b>???";
        mainGUI.pokedex.descriptionT.htmlText = "<b>???";
        mainGUI.pokedex.hpT.htmlText = "<b>??? (<font color=\'#A9F1A3\'>???</font>)";
        mainGUI.pokedex.attackT.htmlText = "<b>??? (<font color=\'#A9F1A3\'>???</font>)";
        mainGUI.pokedex.defenseT.htmlText = "<b>??? (<font color=\'#A9F1A3\'>???</font>)";
        mainGUI.pokedex.speedT.htmlText = "<b>??? (<font color=\'#A9F1A3\'>???</font>)";
        mainGUI.pokedex.specialAttackT.htmlText = "<b>??? (<font color=\'#A9F1A3\'>???</font>)";
        mainGUI.pokedex.specialDefenseT.htmlText = "<b>??? (<font color=\'#A9F1A3\'>???</font>)";
        mainGUI.pokedex.movesT.htmlText = "<b>???";
        mainGUI.pokedex.hpBar._visible = false;
        mainGUI.pokedex.attackBar._visible = false;
        mainGUI.pokedex.defenseBar._visible = false;
        mainGUI.pokedex.specialAttackBar._visible = false;
        mainGUI.pokedex.specialDefenseBar._visible = false;
        mainGUI.pokedex.speedBar._visible = false;
    } // end else if
} // End of the function
function reloadPokedexIcons()
{
    if (mainGUI.pokedex.tickBox._currentframe == 1)
    {
        for (var _loc3 = 1; _loc3 <= pokemonAmount; ++_loc3)
        {
            var _loc2 = mainGUI.pokedex.m["pokedexListBg_" + _loc3];
            _loc2._x = -2.500000;
            _loc2._y = -183 + (_loc3 - 1) * 26;
            _loc2._visible = true;
            if (pokedexSeen[_loc3 - 1] == true || pokedexSeen[_loc3 - 1] == "true")
            {
                _loc2.i._brightness(0);
                _loc2.nameT.htmlText = "<b>" + upperCase(generalInfoArray[_loc3 - 1][0]);
                _loc2.pokeId = _loc3;
                _loc2.onRelease = function ()
                {
                    loadPokedexInfo(this.pokeId);
                };
                if (pokedexCaught[_loc3 - 1] == true || pokedexCaught[_loc3 - 1] == "true")
                {
                    if (pokedexCaught2[_loc3 - 1] == true || pokedexCaught2[_loc3 - 1] == "true")
                    {
                        _loc2.pokeball._brightness(0);
                    }
                    else
                    {
                        _loc2.pokeball._brightness(-50);
                    } // end else if
                }
                else
                {
                    _loc2.pokeball._brightness(-100);
                } // end else if
                continue;
            } // end if
            _loc2.i._brightness(-100);
            _loc2.nameT.htmlText = "<b>???";
            _loc2.pokeball._brightness(-100);
        } // end of for
    }
    else
    {
        loadPokedexIconsSeen();
    } // end else if
} // End of the function
function loadCustomChat()
{
    if (customChat != "")
    {
        mainGUI.customTab.chatName = customChat;
        mainGUI.customTab.nameT.htmlText = "<b>" + customChat + "</b>";
        mainGUI.customTab._visible = true;
        mainGUI.customTab.onRelease = mainGUI.customTab.onReleaseOutside = function ()
        {
            _root.chatType = "custom";
            mainGUI.customTab.gotoAndStop("click");
            mainGUI.localTab.gotoAndStop(1);
            mainGUI.tradeTab.gotoAndStop(1);
            mainGUI.battleTab.gotoAndStop(1);
            mainGUI.nonEnglishTab.gotoAndStop(1);
            mainGUI.clanTab.gotoAndStop(1);
            mainGUI.globalTab.gotoAndStop(1);
            mainGUI.customChatT._visible = true;
            mainGUI.localChatT._visible = false;
            mainGUI.tradeChatT._visible = false;
            mainGUI.battleChatT._visible = false;
            mainGUI.nonEnglishChatT._visible = false;
            mainGUI.clanChatT._visible = false;
            mainGUI.globalChatT._visible = false;
            if (mainGUI.chatSettings._visible == true)
            {
                loadChatSettings();
            } // end if
        };
        mainGUI.customTab.onRollOver = function ()
        {
            if (this._currentframe != 2)
            {
                this.gotoAndStop("hover");
            } // end if
        };
        mainGUI.customTab.onRollOut = function ()
        {
            if (this._currentframe != 2)
            {
                this.gotoAndStop(1);
            } // end if
        };
    }
    else
    {
        mainGUI.customTab._visible = false;
        mainGUI.customChatT._visible = false;
    } // end else if
} // End of the function
function loadPokemonIcons(sendUpdate)
{
    if (userPokemon[0].name == "" || userPokemon[0].name == undefined)
    {
        mainGUI.pokemonIcon1._visible = false;
    }
    else
    {
        mainGUI.pokemonIcon1._visible = true;
        mainGUI.pokemonIcon1.t.htmlText = "<b>" + userPokemon[0].name;
        mainGUI.pokemonIcon1.t2.htmlText = "<b>Lv " + userPokemon[0].level;
        if (userPokemon[0].shiny == true)
        {
            mainGUI.pokemonIcon1.i.gotoAndStop(userPokemon[0].id);
            mainGUI.pokemonIcon1.t.htmlText = "<b>[S]" + userPokemon[0].name;
        }
        else
        {
            mainGUI.pokemonIcon1.i.gotoAndStop(userPokemon[0].id);
        } // end else if
    } // end else if
    if (userPokemon[1].name == "" || userPokemon[1].name == undefined)
    {
        mainGUI.pokemonIcon2._visible = false;
    }
    else
    {
        mainGUI.pokemonIcon2._visible = true;
        mainGUI.pokemonIcon2.t.htmlText = "<b>" + userPokemon[1].name;
        mainGUI.pokemonIcon2.t2.htmlText = "<b>Lv " + userPokemon[1].level;
        if (userPokemon[1].shiny == true)
        {
            mainGUI.pokemonIcon2.i.gotoAndStop(userPokemon[1].id);
            mainGUI.pokemonIcon2.t.htmlText = "<b>[S]" + userPokemon[1].name;
        }
        else
        {
            mainGUI.pokemonIcon2.i.gotoAndStop(userPokemon[1].id);
        } // end else if
    } // end else if
    if (userPokemon[2].name == "" || userPokemon[2].name == undefined)
    {
        mainGUI.pokemonIcon3._visible = false;
    }
    else
    {
        mainGUI.pokemonIcon3._visible = true;
        mainGUI.pokemonIcon3.t.htmlText = "<b>" + userPokemon[2].name;
        mainGUI.pokemonIcon3.t2.htmlText = "<b>Lv " + userPokemon[2].level;
        if (userPokemon[2].shiny == true)
        {
            mainGUI.pokemonIcon3.i.gotoAndStop(userPokemon[2].id);
            mainGUI.pokemonIcon3.t.htmlText = "<b>[S]" + userPokemon[2].name;
        }
        else
        {
            mainGUI.pokemonIcon3.i.gotoAndStop(userPokemon[2].id);
        } // end else if
    } // end else if
    if (userPokemon[3].name == "" || userPokemon[3].name == undefined)
    {
        mainGUI.pokemonIcon4._visible = false;
    }
    else
    {
        mainGUI.pokemonIcon4._visible = true;
        mainGUI.pokemonIcon4.t.htmlText = "<b>" + userPokemon[3].name;
        mainGUI.pokemonIcon4.t2.htmlText = "<b>Lv " + userPokemon[3].level;
        if (userPokemon[3].shiny == true)
        {
            mainGUI.pokemonIcon4.i.gotoAndStop(userPokemon[3].id);
            mainGUI.pokemonIcon4.t.htmlText = "<b>[S]" + userPokemon[3].name;
        }
        else
        {
            mainGUI.pokemonIcon4.i.gotoAndStop(userPokemon[3].id);
        } // end else if
    } // end else if
    if (userPokemon[4].name == "" || userPokemon[4].name == undefined)
    {
        mainGUI.pokemonIcon5._visible = false;
    }
    else
    {
        mainGUI.pokemonIcon5._visible = true;
        mainGUI.pokemonIcon5.t.htmlText = "<b>" + userPokemon[4].name;
        mainGUI.pokemonIcon5.t2.htmlText = "<b>Lv " + userPokemon[4].level;
        if (userPokemon[4].shiny == true)
        {
            mainGUI.pokemonIcon5.i.gotoAndStop(userPokemon[4].id);
            mainGUI.pokemonIcon5.t.htmlText = "<b>[S]" + userPokemon[4].name;
        }
        else
        {
            mainGUI.pokemonIcon5.i.gotoAndStop(userPokemon[4].id);
        } // end else if
    } // end else if
    if (userPokemon[5].name == "" || userPokemon[5].name == undefined)
    {
        mainGUI.pokemonIcon6._visible = false;
    }
    else
    {
        mainGUI.pokemonIcon6._visible = true;
        mainGUI.pokemonIcon6.t.htmlText = "<b>" + userPokemon[5].name;
        mainGUI.pokemonIcon6.t2.htmlText = "<b>Lv " + userPokemon[5].level;
        if (userPokemon[5].shiny == true)
        {
            mainGUI.pokemonIcon6.i.gotoAndStop(userPokemon[5].id);
            mainGUI.pokemonIcon6.t.htmlText = "<b>[S]" + userPokemon[5].name;
        }
        else
        {
            mainGUI.pokemonIcon6.i.gotoAndStop(userPokemon[5].id);
        } // end else if
    } // end else if
    mainGUI.pokemonIcon1.i._alpha = 100;
    mainGUI.pokemonIcon2.i._alpha = 100;
    mainGUI.pokemonIcon3.i._alpha = 100;
    mainGUI.pokemonIcon4.i._alpha = 100;
    mainGUI.pokemonIcon5.i._alpha = 100;
    mainGUI.pokemonIcon6.i._alpha = 100;
    returnOldIcon(mainGUI.pokemonIcon1.i, -60, -10);
    returnOldIcon(mainGUI.pokemonIcon2.i, -60, -10);
    returnOldIcon(mainGUI.pokemonIcon3.i, -60, -10);
    returnOldIcon(mainGUI.pokemonIcon4.i, -60, -10);
    returnOldIcon(mainGUI.pokemonIcon5.i, -60, -10);
    returnOldIcon(mainGUI.pokemonIcon6.i, -60, -10);
    mainGUI.pokemonIcon1._y = -288 - heightOffset;
    mainGUI.pokemonIcon2._y = -288 - heightOffset;
    mainGUI.pokemonIcon3._y = -288 - heightOffset;
    mainGUI.pokemonIcon4._y = -288 - heightOffset;
    mainGUI.pokemonIcon5._y = -288 - heightOffset;
    mainGUI.pokemonIcon6._y = -288 - heightOffset;
    if (userPokemon.length == 1)
    {
        mainGUI.pokemonIcon1._x = -13.900000;
    }
    else if (userPokemon.length == 2)
    {
        mainGUI.pokemonIcon1._x = -97.400000;
        mainGUI.pokemonIcon2._x = 69.600000;
    }
    else if (userPokemon.length == 3)
    {
        mainGUI.pokemonIcon1._x = -180.900000;
        mainGUI.pokemonIcon2._x = -13.900000;
        mainGUI.pokemonIcon3._x = 153.100000;
    }
    else if (userPokemon.length == 4)
    {
        mainGUI.pokemonIcon1._x = -264.400000;
        mainGUI.pokemonIcon2._x = -97.400000;
        mainGUI.pokemonIcon3._x = 69.600000;
        mainGUI.pokemonIcon4._x = 236.600000;
    }
    else if (userPokemon.length == 5)
    {
        mainGUI.pokemonIcon1._x = -347.900000;
        mainGUI.pokemonIcon2._x = -180.900000;
        mainGUI.pokemonIcon3._x = -13.900000;
        mainGUI.pokemonIcon4._x = 153.100000;
        mainGUI.pokemonIcon5._x = 320.100000;
    }
    else if (userPokemon.length == 6)
    {
        mainGUI.pokemonIcon1._x = -425;
        mainGUI.pokemonIcon2._x = -255;
        mainGUI.pokemonIcon3._x = -85;
        mainGUI.pokemonIcon4._x = 85;
        mainGUI.pokemonIcon5._x = 255;
        mainGUI.pokemonIcon6._x = 425;
    } // end else if
    for (z = 0; z < 6; z++)
    {
        mainGUI["pokemonIcon" + (z + 1)].hpBar._x = userPokemon[z].currentHp / userPokemon[z].hp * 109 - 87;
        mainGUI["pokemonIcon" + (z + 1)].expBar._x = userPokemon[z].exp / getExpTNL(userPokemon[z].level) * 109 - 87;
        mainGUI["pokemonIcon" + (z + 1)].hpBar.setMask(mainGUI["pokemonIcon" + (z + 1)].hpBarMask);
        mainGUI["pokemonIcon" + (z + 1)].expBar.setMask(mainGUI["pokemonIcon" + (z + 1)].expBarMask);
        if (mainGUI["pokemonIcon" + (z + 1)].expBar._x > 22)
        {
            mainGUI["pokemonIcon" + (z + 1)].expBar._x = 22;
        } // end if
    } // end of for
    if (userPokemon[0].shiny == true)
    {
        player.followPokemonBox.followPokemonImage.gotoAndStop(userPokemon[0].id + shinyDifference);
    }
    else
    {
        player.followPokemonBox.followPokemonImage.gotoAndStop(userPokemon[0].id);
    } // end else if
    if (sendUpdate != false)
    {
        if (lastFollowPokemonUpdateId != userPokemon[0].id)
        {
            lastFollowPokemonUpdateId = userPokemon[0].id;
            getTimestamp("updateFollowPokemon");
        } // end if
    } // end if
} // End of the function
function fadeScreen()
{
    stopDrag ();
    returnOldIcon(mainGUI.pokemonIcon1.i, -60, -10);
    returnOldIcon(mainGUI.pokemonIcon2.i, -60, -10);
    returnOldIcon(mainGUI.pokemonIcon3.i, -60, -10);
    returnOldIcon(mainGUI.pokemonIcon4.i, -60, -10);
    returnOldIcon(mainGUI.pokemonIcon5.i, -60, -10);
    returnOldIcon(mainGUI.pokemonIcon6.i, -60, -10);
    if (userPokemon[0].currentHp > 0)
    {
        activePokemon = 0;
    }
    else if (userPokemon[1].currentHp > 0)
    {
        activePokemon = 1;
    }
    else if (userPokemon[2].currentHp > 0)
    {
        activePokemon = 2;
    }
    else if (userPokemon[3].currentHp > 0)
    {
        activePokemon = 3;
    }
    else if (userPokemon[4].currentHp > 0)
    {
        activePokemon = 4;
    }
    else if (userPokemon[5].currentHp > 0)
    {
        activePokemon = 5;
    }
    else
    {
        activePokemonError = true;
        activePokemon = 0;
        trace ("error, all pokemon have 0 hp");
    } // end else if
    mainGUI.battleBackground.move1B.nameT.htmlText = "<b>" + moveIdToName(userPokemon[activePokemon].moves[0]);
    mainGUI.battleBackground.move2B.nameT.htmlText = "<b>" + moveIdToName(userPokemon[activePokemon].moves[1]);
    mainGUI.battleBackground.move3B.nameT.htmlText = "<b>" + moveIdToName(userPokemon[activePokemon].moves[2]);
    mainGUI.battleBackground.move4B.nameT.htmlText = "<b>" + moveIdToName(userPokemon[activePokemon].moves[3]);
    mainGUI.battleBackground.move1B.moveName = moveIdToName(userPokemon[activePokemon].moves[0]);
    mainGUI.battleBackground.move2B.moveName = moveIdToName(userPokemon[activePokemon].moves[1]);
    mainGUI.battleBackground.move3B.moveName = moveIdToName(userPokemon[activePokemon].moves[2]);
    mainGUI.battleBackground.move4B.moveName = moveIdToName(userPokemon[activePokemon].moves[3]);
    updateBackPokemonSprite();
    mainGUI.battleBackground.swapDepths(mainGUI.getNextHighestDepth());
    mainGUI.battleBackground.bg.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.pokemonB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.fightB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.bagB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.runB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.move1B.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.move2B.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.move3B.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.move4B.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.backB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.continueB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.continueT.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.itemBg.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.useItemLeftB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.useItemRightB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.useItemB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.itemImage.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.itemTexts.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.battleT.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.moveDescriptionT.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.battleTimeT.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    for (var _loc2 = 1; _loc2 < 7; ++_loc2)
    {
        mainGUI.battleBackground["pokemon" + _loc2 + "B"].swapDepths(mainGUI.battleBackground.getNextHighestDepth());
        mainGUI.battleBackground["pokemon" + _loc2 + "B"]._visible = false;
        if (_root.userPokemon[_loc2 - 1].currentHp > 0)
        {
            mainGUI.battleBackground["pokemon" + _loc2 + "B"].bg.gotoAndStop(1);
            continue;
        } // end if
        mainGUI.battleBackground["pokemon" + _loc2 + "B"].bg.gotoAndStop("dark");
    } // end of for
    mainGUI.battleBackground.h.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.h2.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    if (_root.battleBg == "" || _root.battleBg == "blue")
    {
        _root.battleBg = "grass";
    }
    else if (_root.battleBg == "water2")
    {
        _root.battleBg = "water";
    }
    else if (_root.battleBg == "greypurple")
    {
        _root.battleBg = "grey";
    } // end else if
    if (_root.darkMode)
    {
        mainGUI.battleBackground.battleBg.gotoAndStop("darkmode");
    }
    else
    {
        mainGUI.battleBackground.battleBg.gotoAndStop(_root.battleBg);
    } // end else if
    mainGUI.battleBackground.backPokemon._x = -212;
    mainGUI.battleBackground.backPokemon._y = 60;
    mainGUI.battleBackground.wildPokemonIcon._x = 177;
    mainGUI.battleBackground.wildPokemonIcon._y = -78;
    mainGUI.battleBackground.backPokemon._visible = false;
    mainGUI.battleBackground.backPokemon2._visible = false;
    mainGUI.battleBackground.wildPokemonIcon._visible = false;
    mainGUI.battleBackground.wildPokemonIcon2._visible = false;
    mainGUI.battleBackground.move1B._visible = false;
    mainGUI.battleBackground.move2B._visible = false;
    mainGUI.battleBackground.move3B._visible = false;
    mainGUI.battleBackground.move4B._visible = false;
    mainGUI.battleBackground.runB._visible = false;
    mainGUI.battleBackground.fightB._visible = false;
    mainGUI.battleBackground.bagB._visible = false;
    mainGUI.battleBackground.pokemonB._visible = false;
    mainGUI.battleBackground.continueB._visible = false;
    mainGUI.battleBackground.continueT.continueT.text = "";
    mainGUI.battleBackground.backB._visible = false;
    mainGUI.battleBackground.enemyHp._visible = false;
    mainGUI.battleBackground.userHp._visible = false;
    mainGUI.battleBackground.itemBg._visible = false;
    mainGUI.battleBackground.useItemRightB._visible = false;
    mainGUI.battleBackground.useItemLeftB._visible = false;
    mainGUI.battleBackground.useItemB._visible = false;
    mainGUI.battleBackground.itemImage.gotoAndStop(1);
    mainGUI.battleBackground.itemTexts.itemNameT.text = "";
    mainGUI.battleBackground.itemTexts.itemAmountT.text = "";
    mainGUI.battleBackground.battleIcon1._visible = false;
    mainGUI.battleBackground.battleIcon2._visible = false;
    mainGUI.battleBackground.battleIcon3._visible = false;
    mainGUI.battleBackground.battleIcon4._visible = false;
    if (_root.bt == "d")
    {
        _root.targetUserBattleUI = _root.mainGUI.battleBackground.userHp2;
        _root.targetEnemyBattleUI = _root.mainGUI.battleBackground.enemyHp2;
    }
    else
    {
        _root.targetUserBattleUI = _root.mainGUI.battleBackground.userHp;
        _root.targetEnemyBattleUI = _root.mainGUI.battleBackground.enemyHp;
    } // end else if
    _root.targetUserBattleUI.sbn7._visible = false;
    _root.targetUserBattleUI.sb7._visible = false;
    _root.targetUserBattleUI.sbn6._visible = false;
    _root.targetUserBattleUI.sb6._visible = false;
    _root.targetUserBattleUI.sbn5._visible = false;
    _root.targetUserBattleUI.sb5._visible = false;
    _root.targetUserBattleUI.sbn4._visible = false;
    _root.targetUserBattleUI.sb4._visible = false;
    _root.targetUserBattleUI.sbn3._visible = false;
    _root.targetUserBattleUI.sb3._visible = false;
    _root.targetUserBattleUI.sbn2._visible = false;
    _root.targetUserBattleUI.sb2._visible = false;
    _root.targetUserBattleUI.sbn1._visible = false;
    _root.targetUserBattleUI.sb1._visible = false;
    _root.targetEnemyBattleUI.sbn7._visible = false;
    _root.targetEnemyBattleUI.sb7._visible = false;
    _root.targetEnemyBattleUI.sbn6._visible = false;
    _root.targetEnemyBattleUI.sb6._visible = false;
    _root.targetEnemyBattleUI.sbn5._visible = false;
    _root.targetEnemyBattleUI.sb5._visible = false;
    _root.targetEnemyBattleUI.sbn4._visible = false;
    _root.targetEnemyBattleUI.sb4._visible = false;
    _root.targetEnemyBattleUI.sbn3._visible = false;
    _root.targetEnemyBattleUI.sb3._visible = false;
    _root.targetEnemyBattleUI.sbn2._visible = false;
    _root.targetEnemyBattleUI.sb2._visible = false;
    _root.targetEnemyBattleUI.sbn1._visible = false;
    _root.targetEnemyBattleUI.sb1._visible = false;
    _root.mainGUI.battleBackground.h._visible = false;
    _root.mainGUI.battleBackground.h2._visible = false;
    _root.mainGUI.battleBackground.turnT.htmlText = "<b>0";
    if (_root.newSettings[0] != "1")
    {
        if (_root.battleWeather == "none" || _root.battleWeather == undefined)
        {
            if (_root.battleBg == "snowyforest")
            {
                _root.mainGUI.battleBackground.weather.gotoAndStop("snow");
                _root.mainGUI.battleBackground.weather._visible = true;
            }
            else
            {
                _root.mainGUI.battleBackground.weather._visible = false;
            } // end else if
        }
        else
        {
            _root.mainGUI.battleBackground.weather.gotoAndStop(_root.battleWeather);
            _root.mainGUI.battleBackground.weather._visible = true;
        } // end else if
        _root.mainGUI.battleBackground.weather.setMask(_root.mainGUI.battleBackground.mask);
    }
    else
    {
        _root.mainGUI.battleBackground.weather._visible = false;
        _root.mainGUI.battleBackground.weather.gotoAndStop(1);
    } // end else if
    mainGUI.battleBackground._visible = true;
    _root.checkForBattle = true;
    if (activePokemonError == true)
    {
        systemMessage("Error - all pokemon have 0 HP.");
        activePokemonError = false;
        endBattle();
    } // end if
} // End of the function
function handleStringResponse(resObj)
{
    if (resObj[0] == "m")
    {
        handleMovement(resObj);
    }
    else if (resObj[0] == "l")
    {
        if (_root.clientVersion == resObj[4])
        {
            _root.username = resObj[2];
            _root.id = Number(resObj[3]);
            _root.lowercaseUsername = _root.username.toLowerCase();
            _root.encryptedstepsWalked = _root.calcMD5(stepsWalked + _root.kg1() + _root.username);
            _root.encryptedMuted = _root.calcMD5(muted + _root.kg1() + _root.username);
            smartfox.getRoomList();
        }
        else
        {
            _root.error = "Client version out of date. Please download the newest one.";
            _root.gotoAndStop("errorconnecting");
        } // end else if
    }
    else if (resObj[0] == "b5")
    {
        handleUpdateMap(resObj);
    }
    else if (resObj[0] == "f")
    {
        if (resObj[2] == "u")
        {
            startCustomAnimation(_root["player_" + resObj[3]], 200, [[9, 1], [10, 1], [11, 1]]);
        }
        else if (resObj[2] == "d")
        {
            startCustomAnimation(_root["player_" + resObj[3]], 200, [[9, 0], [10, 0], [11, 0]]);
        }
        else if (resObj[2] == "l")
        {
            startCustomAnimation(_root["player_" + resObj[3]], 200, [[9, 2], [10, 2], [11, 2]]);
        }
        else if (resObj[2] == "r")
        {
            startCustomAnimation(_root["player_" + resObj[3]], 200, [[9, 3], [10, 3], [11, 3]]);
        } // end else if
    }
    else if (resObj[0] == "f2")
    {
        if (resObj[2] == "u")
        {
            startCustomAnimation(_root["player_" + resObj[3]], 200, [[9, 1], [10, 1], [11, 1], [11, 1]], 1, true);
        }
        else if (resObj[2] == "d")
        {
            startCustomAnimation(_root["player_" + resObj[3]], 200, [[9, 0], [10, 0], [11, 0], [11, 0]], 1, true);
        }
        else if (resObj[2] == "l")
        {
            startCustomAnimation(_root["player_" + resObj[3]], 200, [[9, 2], [10, 2], [11, 2], [11, 2]], 1, true);
        }
        else if (resObj[2] == "r")
        {
            startCustomAnimation(_root["player_" + resObj[3]], 200, [[9, 3], [10, 3], [11, 3], [11, 3]], 1, true);
        } // end else if
    }
    else if (resObj[0] == "f3")
    {
        clearInterval(_root["animationI_" + resObj[3]]);
        setDefaultPlayerFrame(_root["player_" + resObj[3]], resObj[2]);
    }
    else if (resObj[0] == "a")
    {
        handleAddPlayer(resObj, true);
    }
    else if (resObj[0] == "b")
    {
        handleAddPlayer(resObj, false);
    }
    else if (resObj[0] == "c")
    {
        handleBattleMove(resObj);
    }
    else if (resObj[0] == "d")
    {
        handleBattleMovePvP(resObj);
    }
    else if (resObj[0] == "e")
    {
        battleEnd = true;
        battleText = [[_root.username + " ran from the battle.", "", "", _root.username, "", ""]];
        displayBattleText();
    }
    else if (resObj[0] == "bl")
    {
        _root.temporaryMap = resObj[2];
        encryptedMap = resObj[3];
        _root.tempTileX = Number(resObj[4]);
        _root.tempTileY = Number(resObj[5]);
        battleLost = true;
    }
    else if (resObj[0] == "w")
    {
        handleWildBattle(resObj);
    }
    else if (resObj[0] == "b79e")
    {
        handleTrainerBattleCooldownError(resObj);
    }
    else if (resObj[0] == "w2")
    {
        handleWildBattle(resObj, true);
    }
    else if (resObj[0] == "ab")
    {
        badges.push(resObj[2]);
    }
    else if (resObj[0] == "ui")
    {
        handleUseItem2(resObj);
    }
    else if (resObj[0] == "td")
    {
        var _loc3 = parseMultiArray(resObj[2]);
        for (var _loc6 = 0; _loc6 < _loc3.length; ++_loc6)
        {
            _loc3[_loc6][0] = Number(_loc3[_loc6][0]);
            _loc3[_loc6][1] = Number(_loc3[_loc6][1]);
            if (_loc3[_loc6][2] == "true" || _loc3[_loc6][2] == true)
            {
                _loc3[_loc6][2] = true;
                continue;
            } // end if
            _loc3[_loc6][2] = false;
        } // end of for
        _root.trainerData = _loc3;
        trainerDataLoaded = true;
    }
    else if (resObj[0] == "r1")
    {
        resObj[2] = Number(resObj[2]);
        resObj[3] = Number(resObj[3]);
        if (_root.inventory[resObj[2]].length > 2)
        {
            oldItem1 = [_root.inventory[resObj[2]][0], _root.inventory[resObj[2]][1], _root.inventory[resObj[2]][2]];
        }
        else
        {
            oldItem1 = [_root.inventory[resObj[2]][0], _root.inventory[resObj[2]][1]];
        } // end else if
        if (_root.inventory[resObj[3]].length > 2)
        {
            oldItem2 = [_root.inventory[resObj[3]][0], _root.inventory[resObj[3]][1], _root.inventory[resObj[3]][2]];
        }
        else
        {
            oldItem2 = [_root.inventory[resObj[3]][0], _root.inventory[resObj[3]][1]];
        } // end else if
        _root.inventory[resObj[2]] = oldItem2;
        _root.inventory[resObj[3]] = oldItem1;
        remakeInventory();
    }
    else if (resObj[0] == "r4")
    {
        resObj[2] = Number(resObj[2]);
        resObj[3] = Number(resObj[3]);
        _root.userPokemon[resObj[2]].heldItem = inventory[resObj[3]][0];
        if (_root.userPokemon[resObj[2]].heldItem.indexOf("TM") == -1 && _root.userPokemon[resObj[2]].heldItem.indexOf("HM") == -1)
        {
            _root.mainGUI.pokemonSummary.stats.i2.gotoAndStop(_root.userPokemon[resObj[2]].heldItem);
        }
        else
        {
            _root.mainGUI.pokemonSummary.stats.i2.gotoAndStop("tmhm");
        } // end else if
        _root.mainGUI.pokemonSummary.stats.itemNameT.htmlText = "<b>" + _root.userPokemon[resObj[2]].heldItem;
        removeItem(_root.inventory[resObj[3]][0], 1);
        remakeInventory();
    }
    else if (resObj[0] == "r5")
    {
        resObj[2] = Number(resObj[2]);
        addInventoryItem(_root.userPokemon[resObj[2]].heldItem, 1);
        remakeInventory();
        _root.userPokemon[resObj[2]].heldItem = "none";
        _root.mainGUI.pokemonSummary.stats.i2.gotoAndStop(_root.userPokemon[resObj[2]].heldItem);
        _root.mainGUI.pokemonSummary.stats.itemNameT.htmlText = "<b>" + _root.userPokemon[resObj[2]].heldItem;
    }
    else if (resObj[0] == "r6")
    {
        resObj[2] = Number(resObj[2]);
        addInventoryItem("Squirtbottle", 1);
        remakeInventory();
    }
    else if (resObj[0] == "r10")
    {
        if (_root.init == false)
        {
            _root.init = true;
            handleGetStartingInfo(resObj);
        } // end if
    }
    else if (resObj[0] == "r12")
    {
        resObj[2] = Number(resObj[2]);
        _root.userPokemon[resObj[2]].moves = resObj[3].split(",");
        _root.pokemonSummaryMoves = ["", "", "", ""];
        for (var _loc5 = 0; _loc5 < _root.userPokemon[resObj[2]].moves.length; ++_loc5)
        {
            _root.pokemonSummaryMoves[_loc5] = moveIdToName(_root.userPokemon[resObj[2]].moves[_loc5]);
        } // end of for
        _root.mainGUI.pokemonSummary.moves.name1T.htmlText = "<b>" + _root.pokemonSummaryMoves[0];
        _root.mainGUI.pokemonSummary.moves.name2T.htmlText = "<b>" + _root.pokemonSummaryMoves[1];
        _root.mainGUI.pokemonSummary.moves.name3T.htmlText = "<b>" + _root.pokemonSummaryMoves[2];
        _root.mainGUI.pokemonSummary.moves.name4T.htmlText = "<b>" + _root.pokemonSummaryMoves[3];
    }
    else if (resObj[0] == "r13")
    {
        _root.friends.push(resObj[2]);
    }
    else if (resObj[0] == "b195")
    {
        removeMovieClip (_root.friendInviteBox);
        removeMovieClip (_root.darkScreen);
        systemMessage("You sent a friend request.");
    }
    else if (resObj[0] == "r14")
    {
        _root.ignore.push(resObj[2]);
        removeMovieClip (_root.ignoreInviteBox);
        removeMovieClip (_root.darkScreen);
        _root.mainGUI.people.friendsTab.gotoAndStop(1);
        _root.mainGUI.people.ignoreTab.gotoAndStop(2);
        _root.mainGUI.people.onlineTab.gotoAndStop(1);
        _root.mainGUI.people.nameT.htmlText = "";
        _root.mainGUI.people.namesT.htmlText = "";
        _root.mainGUI.people.namesT._height = 253;
        _root.mainGUI.people.addT._visible = true;
        _root.mainGUI.people.removeT._visible = true;
        _root.mainGUI.people.addB._visible = true;
        _root.mainGUI.people.removeB._visible = true;
        for (var _loc4 = 0; _loc4 < _root.ignore.length; ++_loc4)
        {
            if (_loc4 == 0)
            {
                _root.mainGUI.people.namesT.htmlText = "<b>" + _root.ignore[_loc4];
                continue;
            } // end if
            _root.mainGUI.people.namesT.htmlText = _root.mainGUI.people.namesT.htmlText + ("<b>" + _root.ignore[_loc4]);
        } // end of for
    }
    else if (resObj[0] == "r15")
    {
        for (var _loc7 = 0; _loc7 < _root.friends.length; ++_loc7)
        {
            if (_root.friends[_loc7].toLowerCase() == resObj[2].toLowerCase())
            {
                systemMessage("You removed " + _root.friends[_loc7] + " as a friend.");
                _root.friends.splice(_loc7, 1);
                _root.friendsOnline.splice(_loc7, 1);
                break;
            } // end if
        } // end of for
        removeMovieClip (_root.friendInviteBox);
        removeMovieClip (_root.darkScreen);
        loadFriendsList();
    }
    else if (resObj[0] == "b197")
    {
        for (var _loc7 = 0; _loc7 < _root.friends.length; ++_loc7)
        {
            if (_root.friends[_loc7].toLowerCase() == resObj[2].toLowerCase())
            {
                _root.friends.splice(_loc7, 1);
                _root.friendsOnline.splice(_loc7, 1);
                break;
            } // end if
        } // end of for
        systemMessage(resObj[2] + " removed you as a friend.");
    }
    else if (resObj[0] == "r16")
    {
        for (var _loc7 = 0; _loc7 < _root.ignore.length; ++_loc7)
        {
            if (String(_root.ignore[_loc7]).toLowerCase() == String(resObj[2]).toLowerCase())
            {
                _root.ignore.splice(_loc7, 1);
                break;
            } // end if
        } // end of for
        removeMovieClip (_root.ignoreInviteBox);
        removeMovieClip (_root.darkScreen);
        _root.mainGUI.people.friendsTab.gotoAndStop(1);
        _root.mainGUI.people.ignoreTab.gotoAndStop(2);
        _root.mainGUI.people.onlineTab.gotoAndStop(1);
        _root.mainGUI.people.nameT.htmlText = "";
        _root.mainGUI.people.namesT.htmlText = "";
        _root.mainGUI.people.namesT._height = 253;
        _root.mainGUI.people.addT._visible = true;
        _root.mainGUI.people.removeT._visible = true;
        _root._root.mainGUI.people.addB._visible = true;
        mainGUI.people.removeB._visible = true;
        for (var _loc4 = 0; _loc4 < _root.ignore.length; ++_loc4)
        {
            if (_loc4 == 0)
            {
                _root.mainGUI.people.namesT.htmlText = "<b>" + _root.ignore[_loc4];
                continue;
            } // end if
            _root.mainGUI.people.namesT.htmlText = _root.mainGUI.people.namesT.htmlText + ("<b>" + _root.ignore[_loc4]);
        } // end of for
    }
    else if (resObj[0] == "r17")
    {
        handleMessageFromServer(resObj);
    }
    else if (resObj[0] == "r18")
    {
        removeMovieClip (_root.merchantBox);
        removeMovieClip (_root.darkScreen);
        _root.guiUp = false;
        _root.money = Number(resObj[4]);
        _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(_root.money) + "</b>";
        _root.johtoSafariTime = Number(resObj[2]);
        clearInterval(_root.johtoSafariTimeOverI);
        _root.johtoSafariTime2 = Number(resObj[3]);
        _root.johtoSafariTimeOverI = setInterval(johtoSafariTimeOver, _root.johtoSafariTime2 * 1000);
        _root.npcArray[0] = [2, 6, "right", "", "johtoSafariZoneTicket", "", ["Your Safari Zone ticket expires in " + Math.floor(_root.johtoSafariTime2 / 3600) + " hours. You can purchase more and extend the time."], 0];
        _root.mapExits.push([5, 2, "Johto Safari Zone Savannah", 19, 35]);
        _root.customTiles = [];
        _root.guiUp = false;
        _root.canMove = true;
    }
    else if (resObj[0] == "b117")
    {
        removeMovieClip (_root.merchantBox);
        removeMovieClip (_root.darkScreen);
        _root.guiUp = false;
        _root.money = Number(resObj[4]);
        _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(_root.money) + "</b>";
        _root.hoennSafariTime = Number(resObj[2]);
        clearInterval(_root.hoennSafariTimeOverI);
        _root.hoennSafariTime2 = Number(resObj[3]);
        _root.hoennSafariTimeOverI = setInterval(hoennSafariTimeOver, _root.hoennSafariTime2 * 1000);
        _root.npcArray[0] = [2, 6, "right", "", "hoennSafariZoneTicket", "", ["Your Hoenn Safari Zone ticket expires in " + Math.floor(_root.hoennSafariTime2 / 3600) + " hours. You can purchase more and extend the time."], 0];
        _root.mapExits.push([5, 2, "Hoenn Safari Zone", 67, 96]);
        _root.customTiles = [];
        _root.guiUp = false;
        _root.canMove = true;
    }
    else if (resObj[0] == "r19")
    {
        if (resObj[2] != undefined)
        {
            loadMap(true, resObj[2], Number(resObj[4]), Number(resObj[5]));
        }
        else
        {
            if (_root.map == "Johto Safari Zone Entrance")
            {
                _root.npcArray[0] = [2, 6, "right", "", "johtoSafariZoneTicket", "", ["You don’t have a Johto Safari Zone ticket. You can purchase one here."], 0];
                _root.customTiles.push([4, 1, "You need a Safari Pass."]);
                _root.mapExits.splice(1, 1);
            } // end if
            _root.canMove = true;
        } // end else if
        _root.johtoSafariTime2 = 0;
        _root.johtoSafariTimeUp = false;
    }
    else if (resObj[0] == "b118")
    {
        if (resObj[2] != undefined)
        {
            loadMap(true, resObj[2], Number(resObj[4]), Number(resObj[5]));
        }
        else
        {
            if (_root.map == "Hoenn Safari Zone Entrance")
            {
                _root.npcArray[0] = [3, 9, "right", "", "hoennSafariZoneTicket", "Ticket Seller", ["You don’t have a Hoenn Safari Zone ticket. You can purchase one here."], 0];
                _root.customTiles.push([5, 2, "You need a Hoenn Safari Ticket."]);
                _root.mapExits.splice(1, 1);
            } // end if
            _root.canMove = true;
        } // end else if
        _root.hoennSafariTime2 = 0;
        _root.hoennSafariTimeUp = false;
    }
    else if (resObj[0] == "r23")
    {
        handlePPBuy(resObj);
    }
    else if (resObj[0] == "r25")
    {
        handleListItemSell(resObj);
    }
    else if (resObj[0] == "r26")
    {
        removeMovieClip (_root.mainGUI.darkScreen);
        _root.marketplaceListings.splice(Number(resObj[2]), 1);
        if (resObj[3] == "inv")
        {
            addInventoryItem(resObj[4], Number(resObj[5]));
            remakeInventory();
        }
        else if (resObj[3] == "pokemon")
        {
            _root.userPokemon.push(parsePokemon(resObj[4]));
            loadPokemonIcons(false);
        }
        else if (resObj[3] == "m")
        {
            money = Number(resObj[4]);
            mainGUI.inventory.moneyT.htmlText = "<b>" + format(money);
            _root.marketplace.sell.moneyT.htmlText = "<b>" + format(_root.money);
        } // end else if
        makeMarketplaceListings();
    }
    else if (resObj[0] == "r27")
    {
        handleMarketplaceSearch2(resObj);
    }
    else if (resObj[0] == "r28")
    {
        removeMovieClip (mainGUI.darkScreen);
        if (resObj[2] == "item")
        {
            systemMessage("You purchased " + resObj[4] + " " + resObj[3] + ". The item(s) have been added to your item box.");
            addToItemBox(resObj[3], Number(resObj[4]));
            _root.money = Number(resObj[5]);
            _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(_root.money) + "</b>";
            _root.marketplace.auction.moneyT.htmlText = "<b>" + format(_root.money);
            _root.marketplace.buy.moneyT.htmlText = "<b>" + format(_root.money);
            _root.marketplace.sell.moneyT.htmlText = "<b>" + format(_root.money);
            searchMarketplaceListings.splice(_root.selectedNum, 1);
            makeMarketplaceBuyListings();
        }
        else if (resObj[2] == "pokemon")
        {
            var _loc13 = parsePokemon(resObj[3]);
            addToPokemonBox(_loc13, false);
            systemMessage("You purchased a Lv " + _loc13.level + " " + _loc13.name + ". The pokemon has been added to your item box.");
            _root.money = Number(resObj[4]);
            _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(_root.money) + "</b>";
            _root.marketplace.auction.moneyT.htmlText = "<b>" + format(_root.money);
            _root.marketplace.buy.moneyT.htmlText = "<b>" + format(_root.money);
            _root.marketplace.sell.moneyT.htmlText = "<b>" + format(_root.money);
            searchMarketplaceListings.splice(selectedNum, 1);
            makeMarketplaceBuyListings();
        } // end else if
        _root.selectedPrice = undefined;
        _root.selectedTradeId = undefined;
        _root.selectedNum = undefined;
    }
    else if (resObj[0] == "r29")
    {
        systemMessage(resObj[2] + " purchased your " + format(marketplaceListings[Number(resObj[4])][1]) + " " + marketplaceListings[Number(resObj[4])][0] + " for $" + format(Number(resObj[3])) + ". The money has been added to your item box.");
        addToItemBox("Money", Number(resObj[3]));
        marketplaceListings.splice(Number(resObj[4]), 1);
        if (marketplace._x != undefined)
        {
            makeMarketplaceListings();
        } // end if
    }
    else if (resObj[0] == "r30")
    {
        searchMarketplaceListings.splice(selectedNum, 1);
        makeMarketplaceBuyListings();
        okBox = mainGUI.attachMovie("okBox", "okBox", mainGUI.getNextHighestDepth());
        assignMouseEvents(okBox.confirmB);
        assignMouseEvents(okBox.exitB);
        okBox.msgT.htmlText = "<b>The item you were trying to buy is no longer available.";
        okBox.exitB.onRelease = function ()
        {
            removeMovieClip (mainGUI.darkScreen);
            removeMovieClip (okBox);
        };
        okBox.confirmB.onRelease = function ()
        {
            removeMovieClip (mainGUI.darkScreen);
            removeMovieClip (okBox);
        };
    }
    else if (resObj[0] == "r32")
    {
        handleMarketplaceSearch(resObj);
    }
    else if (resObj[0] == "r33")
    {
        money = Number(resObj[2]);
        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
        marketplace.auction.moneyT.htmlText = "<b>" + format(money);
        marketplace.buy.moneyT.htmlText = "<b>" + format(money);
        marketplace.sell.moneyT.htmlText = "<b>" + format(money);
        for (var _loc6 in searchMarketplaceListings)
        {
            if (searchMarketplaceListings[_loc6][9] == selectedTradeId)
            {
                searchMarketplaceListings[_loc6][4] = Number(resObj[3]);
                searchMarketplaceListings[_loc6][5] = _root.username;
                searchMarketplaceListings[_loc6][8] = Number(resObj[4]);
            } // end if
        } // end of for...in
        makeMarketplaceAuctionListings();
        systemMessage("You successfully placed your bid of $" + format(Number(resObj[3])));
        removeMovieClip (mainGUI.darkScreen);
    }
    else if (resObj[0] == "r34")
    {
        money = Number(resObj[3]);
        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
        marketplace.auction.moneyT.htmlText = "<b>" + format(money);
        marketplace.buy.moneyT.htmlText = "<b>" + format(money);
        marketplace.sell.moneyT.htmlText = "<b>" + format(money);
        systemMessage("Someone has placed a higher bid on " + resObj[4] + ", your bid has been refunded. Old money: $" + format(Number(resObj[2])) + ", new money: $" + format(money));
    }
    else if (resObj[0] == "r35")
    {
        for (var _loc6 in marketplaceListings)
        {
            if (marketplaceListings[_loc6][4] == Number(resObj[4]))
            {
                marketplaceListings.splice(_loc6, 1);
                break;
            } // end if
        } // end of for...in
        if (marketplace._x != undefined)
        {
            makeMarketplaceListings();
        } // end if
        makeMarketplaceAuctionListings();
        systemMessage("Your auction of " + resObj[2] + " has ended and $" + format(resObj[3]) + " has been added to your Item Box.");
        addToItemBox("Money", Number(resObj[3]));
    }
    else if (resObj[0] == "r36")
    {
        handlePM(resObj);
    }
    else if (resObj[0] == "r37")
    {
        systemMessage("You have won the auction of " + resObj[3] + " " + resObj[2] + ", and has been placed in your Item Box.");
        addToItemBox(resObj[2], Number(resObj[3]));
    }
    else if (resObj[0] == "r38")
    {
        _loc13 = parsePokemon(resObj[2]);
        systemMessage("You have won the auction of Lv " + _loc13.level + " " + _loc13.name + ". It has been added to your Item Box.");
        addToPokemonBox(_loc13);
    }
    else if (resObj[0] == "r39")
    {
        handleAuctionWinPokemon(resObj);
    }
    else if (resObj[0] == "r40")
    {
        systemMessage("Your Altering Cave ticket has expired.");
        if (resObj[2] != undefined)
        {
            loadMap(true, resObj[2], Number(resObj[4]), Number(resObj[5]));
        }
        else
        {
            if (map == "Route 103")
            {
                _root.customTiles.push([87, 7, "You need an Altering Cave Pass."]);
                _root.mapExits.splice(0, 1);
            } // end if
            canMove = true;
        } // end else if
        acTime2 = 0;
        acTimeUp = false;
    }
    else if (resObj[0] == "r41")
    {
        handleClanWarsStarting(resObj);
    }
    else if (resObj[0] == "r42")
    {
        handleClanWarsEnding(resObj);
    }
    else if (resObj[0] == "r43")
    {
        systemMessage("<b>" + resObj[2] + " Clan War Tokens have been added to your Item Box.<b>", "#FFFFFF");
        systemMessage("<b>Your clan finished with " + resObj[3] + " BP.<b>", "#FFFFFF");
        addToItemBox("Clan War Token", Number(resObj[2]));
    }
    else if (resObj[0] == "r44")
    {
        money = Number(resObj[2]);
        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money);
        addInventoryItem(resObj[3], 1);
        remakeInventory();
    }
    else if (resObj[0] == "r45")
    {
        customChat = resObj[2];
        systemMessage("You made the " + customChat + " chat.");
        loadCustomChat();
    }
    else if (resObj[0] == "r46")
    {
        handleCustomChatMessage(resObj);
    }
    else if (resObj[0] == "r47")
    {
        showChatRequest(resObj[2], resObj[3]);
    }
    else if (resObj[0] == "r48")
    {
        customChat = resObj[2];
        loadCustomChat();
    }
    else if (resObj[0] == "r49")
    {
        customChat = "";
        loadCustomChat();
    }
    else if (resObj[0] == "r50")
    {
        credits = credits + 1000;
        mainGUI.creditsT.htmlText = "<b>" + format(credits) + "c</b>";
        mainGUI.creditShop.creditsT.htmlText = "<b>" + format(credits) + "c";
        masterShopAccess = true;
        systemMessage("Congratulations, you have won the weekly experience competition!");
    }
    else if (resObj[0] == "r51")
    {
        if (_root.username.toLowerCase() == "brody" || _root.username.toLowerCase() == "rory" || _root.username.toLowerCase() == "anubisius")
        {
            loadMap(true, resObj[4], Number(resObj[2]), Number(resObj[3]));
        } // end if
    }
    else if (resObj[0] == "r52")
    {
        if (altarGUI._x != undefined)
        {
            currentAltarAmount = Number(resObj[2]);
            currentAltarAmount2 = Number(resObj[3]);
            currentAltarAmount3 = Number(resObj[4]);
            altarGUI.b._width = currentAltarAmount / 4000000 * 257;
            altarGUI.donationsT.htmlText = "<b>$" + format(currentAltarAmount) + " / $4,000,000</b>";
            altarGUI.b2._width = currentAltarAmount2 / 4000000 * 257;
            altarGUI.donationsT2.htmlText = "<b>$" + format(currentAltarAmount2) + " / $4,000,000</b>";
            altarGUI.b3._width = currentAltarAmount3 / 4000000 * 257;
            altarGUI.donationsT3.htmlText = "<b>$" + format(currentAltarAmount3) + " / $4,000,000</b>";
        } // end if
    }
    else if (resObj[0] == "r53")
    {
        if (resObj[4] == "1")
        {
            mainGUI.x2T._visible = true;
            mainGUI.altarBlessingT.htmlText = "<b>Arceus Altar Blessing Active +100% Exp (" + resObj[2] + ", " + resObj[3] + ")";
            mainGUI.altarBlessingT._visible = true;
            systemMessage("Arceus Blessing Activated - Double Experience For 1 Hour");
        }
        else if (resObj[4] == "2")
        {
            mainGUI.x2T2._visible = true;
            mainGUI.altarBlessingT2.htmlText = "<b>Kyogre Altar Blessing Active +100% Fish Exp (" + resObj[2] + ", " + resObj[3] + ")";
            mainGUI.altarBlessingT2._visible = true;
            systemMessage("Kyogre Blessing Activated - Double Fishing Experience For 1 Hour");
        }
        else if (resObj[4] == "3")
        {
            mainGUI.x2T3._visible = true;
            mainGUI.altarBlessingT3.htmlText = "<b>Diancie Altar Blessing Active +100% Mine Exp (" + resObj[2] + ", " + resObj[3] + ")";
            mainGUI.altarBlessingT3._visible = true;
            systemMessage("Diancie Blessing Activated - Double Mining Experience For 1 Hour");
        } // end else if
    }
    else if (resObj[0] == "r54")
    {
        money = Number(resObj[2]);
        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
        if (altarGUI._x != undefined)
        {
            if (resObj[4] == "1")
            {
                altarGUI.b._width = Number(resObj[3]) / 4000000 * 257;
                altarGUI.donationsT.htmlText = "<b>$" + format(Number(resObj[3])) + " / $4,000,000</b>";
                currentAltarAmount = Number(resObj[3]);
            }
            else if (resObj[4] == "2")
            {
                altarGUI.b2._width = Number(resObj[3]) / 4000000 * 257;
                altarGUI.donationsT2.htmlText = "<b>$" + format(Number(resObj[3])) + " / $4,000,000</b>";
                currentAltarAmount2 = Number(resObj[3]);
            }
            else if (resObj[4] == "3")
            {
                altarGUI.b3._width = Number(resObj[3]) / 4000000 * 257;
                altarGUI.donationsT3.htmlText = "<b>$" + format(Number(resObj[3])) + " / $4,000,000</b>";
                currentAltarAmount3 = Number(resObj[3]);
            } // end else if
        } // end else if
    }
    else if (resObj[0] == "r55")
    {
        if (resObj[2] == "1")
        {
            mainGUI.x2T._visible = false;
            mainGUI.altarBlessingT._visible = false;
            systemMessage("Altar Blessing (Arceus) has ended.");
        }
        else if (resObj[2] == "2")
        {
            mainGUI.x2T2._visible = false;
            mainGUI.altarBlessingT2._visible = false;
            systemMessage("Altar Blessing (Kyogre) has ended.");
        }
        else if (resObj[2] == "3")
        {
            mainGUI.x2T3._visible = false;
            mainGUI.altarBlessingT3._visible = false;
            systemMessage("Altar Blessing (Diancie) has ended.");
        } // end else if
    }
    else if (resObj[0] == "r56")
    {
        credits = Number(resObj[2]);
        mainGUI.creditsT.htmlText = "<b>" + format(credits) + "c</b>";
        mainGUI.creditShop.creditsT.htmlText = "<b>" + format(credits) + "c";
        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
        if (altarGUI._x != undefined)
        {
            if (resObj[4] == "1")
            {
                altarGUI.b._width = Number(resObj[3]) / 4000000 * 257;
                altarGUI.donationsT.htmlText = "<b>$" + format(Number(resObj[3])) + " / $4,000,000</b>";
            }
            else if (resObj[4] == "2")
            {
                altarGUI.b2._width = Number(resObj[3]) / 4000000 * 257;
                altarGUI.donationsT2.htmlText = "<b>$" + format(Number(resObj[3])) + " / $4,000,000</b>";
            }
            else if (resObj[4] == "3")
            {
                altarGUI.b3._width = Number(resObj[3]) / 4000000 * 257;
                altarGUI.donationsT3.htmlText = "<b>$" + format(Number(resObj[3])) + " / $4,000,000</b>";
            } // end else if
        } // end else if
        currentAltarAmount = Number(resObj[3]);
    }
    else if (resObj[0] == "r57")
    {
        okBox = mainGUI.attachMovie("okBox", "okBox", mainGUI.getNextHighestDepth());
        assignMouseEvents(okBox.confirmB);
        assignMouseEvents(okBox.exitB);
        okBox.msgT.htmlText = "<b>This pokemon is too high of a level for you to bid on.";
        okBox.exitB.onRelease = function ()
        {
            removeMovieClip (mainGUI.darkScreen);
            removeMovieClip (okBox);
        };
        okBox.confirmB.onRelease = function ()
        {
            removeMovieClip (mainGUI.darkScreen);
            removeMovieClip (okBox);
        };
    }
    else if (resObj[0] == "pmsg")
    {
        handlePublicMessage(resObj);
    }
    else if (resObj[0] == "r58")
    {
        canMove = true;
    }
    else if (resObj[0] == "r59")
    {
        handleClanMessage(resObj);
    }
    else if (resObj[0] == "avn")
    {
        if (_root.username == "Brody" || _root.username.toLowerCase() == "amazoness" || _root.username.toLowerCase() == "anubisius")
        {
            systemMessage("<b>M: " + resObj[2] + ", " + resObj[3] + "(" + resObj[4] + ")");
        } // end if
    }
    else if (resObj[0] == "avm")
    {
        if (_root.username == "Brody" || _root.username.toLowerCase() == "amazoness" || _root.username.toLowerCase() == "anubisius")
        {
            systemMessage("<b>K: " + resObj[2] + ", " + "(" + resObj[3] + ")");
        } // end if
    }
    else if (resObj[0] == "r61")
    {
        _root.avatarType = 1;
        _root.createCharacter = true;
    }
    else if (resObj[0] == "r62")
    {
        for (var _loc7 = 0; _loc7 < players.length; ++_loc7)
        {
            if (players[_loc7].name == resObj[2])
            {
                clearInterval(_root["animationI_" + players[_loc7].name]);
                removeMovieClip (players[_loc7]);
                players.splice(_loc7, 1);
                break;
            } // end if
        } // end of for
    }
    else if (resObj[0] == "r63")
    {
        _root["player_" + resObj[2]].followPokemonBox.followPokemonImage.gotoAndStop(Number(resObj[3]));
    }
    else if (resObj[0] == "r65")
    {
        var _loc9 = resObj[2].split("|");
        _root.userPokemon = [];
        for (var _loc6 = 0; _loc6 < _loc9.length; ++_loc6)
        {
            userPokemon.push(parsePokemon(_loc9[_loc6]));
        } // end of for
        _root.closeBattle = true;
        endBattle();
    }
    else if (resObj[0] == "r66")
    {
        _loc9 = resObj[2].split("|");
        _root.userPokemon = [];
        for (var _loc6 = 0; _loc6 < _loc9.length; ++_loc6)
        {
            userPokemon.push(parsePokemon(_loc9[_loc6]));
        } // end of for
        _root.closeBattle = true;
        _root.canMove = false;
        if (resObj[3] != "1")
        {
            loadMap(true, _root.temporaryMap, _root.tempTileX, _root.tempTileY, undefined, _root.map);
        } // end if
        endBattle();
    }
    else if (resObj[0] == "r67")
    {
        getTimestamp("endBattleDisconnect");
    }
    else if (resObj[0] == "r68")
    {
        getTimestamp("endTradeDisconnect");
    }
    else if (resObj[0] == "r69")
    {
        systemMessage(resObj[2]);
        removeMovieClip (mainGUI.tradeBox);
        Selection.setFocus(null);
        _root.buttonClicked = false;
        _root.trading = false;
        _root.canMove = true;
        _root.guiUp = false;
    }
    else if (resObj[0] == "r70")
    {
        getTimestamp("endBattleDisconnect2");
    }
    else if (resObj[0] == "r71")
    {
        systemMessage("World Blessing has expired.");
        mainGUI.worldBlessingBigT._visible = false;
        mainGUI.w._visible = false;
        mainGUI.worldBlessingSmallT._visible = false;
    }
    else if (resObj[0] == "r74")
    {
        systemMessage("Drop Rate Blessing has expired.");
        mainGUI.dropRateBlessingBigT._visible = false;
        mainGUI.dr._visible = false;
        mainGUI.dropRateBlessingSmallT._visible = false;
    }
    else if (resObj[0] == "r75")
    {
        _root.itemBox = [];
        _root.money = Number(resObj[2]);
        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
        var _loc8 = parseMultiArray(resObj[3]);
        for (var _loc6 = 0; _loc6 < _loc8.length; ++_loc6)
        {
            if (_loc8[_loc6][0] != "Money")
            {
                addInventoryItem(_loc8[_loc6][0], _loc8[_loc6][1]);
            } // end if
        } // end of for
        remakeInventory();
        if (mainGUI.itemBox._visible == true && mainGUI.itemBox.itemsTab._currentframe == 2)
        {
            makeItemBox();
        } // end if
    }
    else if (resObj[0] == "r76")
    {
        systemMessage("Pokemon have been added to your PC storage.");
        _root.pokemonBox = [];
        if (mainGUI.itemBox._visible == true && mainGUI.itemBox.pokemonTab._currentframe == 2)
        {
            makePokemonBox();
        } // end if
    }
    else if (resObj[0] == "r77")
    {
        storagePokemon.push(parsePokemon(resObj[2]));
    }
    else if (resObj[0] == "r78")
    {
        pokedexSeen = resObj[2].split(",");
        pokedexCaught = resObj[3].split(",");
        reloadPokedexIcons();
        _root.pokedexSeenAmount = 0;
        _root.pokedexCaughtAmount = 0;
        for (var _loc7 = 0; _loc7 < pokedexSeen.length; ++_loc7)
        {
            if (pokedexSeen[_loc7] == "true" || pokedexSeen[_loc7] == true)
            {
                ++_root.pokedexSeenAmount;
            } // end if
            if (pokedexCaught[_loc7] == "true" || pokedexCaught[_loc7] == true)
            {
                ++_root.pokedexCaughtAmount;
            } // end if
        } // end of for
    }
    else if (resObj[0] == "b85")
    {
        resObj[2] = resObj[2].split(",");
        if (isNaN(Number(resObj[3])))
        {
            for (var _loc7 = 0; _loc7 < resObj[2].length; ++_loc7)
            {
                removeItem(resObj[2][_loc7], 1);
            } // end of for
            resObj[3] = resObj[3].split(",");
            for (var _loc7 = 0; _loc7 < resObj[3].length; ++_loc7)
            {
                addInventoryItem(resObj[3][_loc7], 1);
            } // end of for
        }
        else
        {
            _root.inventory[Number(resObj[3])] = [_root.inventory[Number(resObj[3])][0], _root.inventory[Number(resObj[3])][1]];
            for (var _loc7 = 0; _loc7 < resObj[2].length; ++_loc7)
            {
                removeItem(resObj[2][_loc7], 1);
            } // end of for
        } // end else if
        remakeInventory();
        removeMovieClip (darkScreen);
    }
    else if (resObj[0] == "b2")
    {
        var _loc18 = userPokemon[Number(resObj[2])];
        var _loc17 = userPokemon[Number(resObj[3])];
        userPokemon[Number(resObj[2])] = _loc17;
        userPokemon[Number(resObj[3])] = _loc18;
        if (pokemonSummaryType == "normal" && mainGUI.pokemonSummary._visible == true && (mainGUI.pokemonSummary.slot == Number(resObj[2]) || mainGUI.pokemonSummary.slot == Number(resObj[3])))
        {
            setPokemonSummary(mainGUI.pokemonSummary.slot);
        } // end if
        loadPokemonIcons();
    }
    else if (resObj[0] == "b86")
    {
        resObj[2] = resObj[2].split(",");
        addInventoryItem(resObj[2][0], Number(resObj[2][1]));
        remakeInventory();
    }
    else if (resObj[0] == "b87")
    {
        resObj[2] = resObj[2].split(",");
        removeItem(resObj[2][0], Number(resObj[2][1]));
        remakeInventory();
    }
    else if (resObj[0] == "b88")
    {
        getTimestamp("updateMap", _root.map);
    }
    else if (resObj[0] == "b89")
    {
        var _loc12 = resObj[2].split("%");
        _root["player_" + resObj[3]].hat = _loc12[0];
        if (_loc12[1] != undefined)
        {
            var _loc14 = _loc12[1].split("-");
            var _loc10 = [];
            _loc10 = _loc10.concat([_loc14[0] / 100, 0, 0, 0, 0]);
            _loc10 = _loc10.concat([0, _loc14[1] / 100, 0, 0, 0]);
            _loc10 = _loc10.concat([0, 0, _loc14[2] / 100, 0, 0]);
            _loc10 = _loc10.concat([0, 0, 0, 1, 0]);
            _root["player_" + resObj[3]].hatFilter = new flash.filters.ColorMatrixFilter(_loc10);
        }
        else
        {
            _root["player_" + resObj[3]].hatFilter = undefined;
        } // end else if
        drawPlayer(_root["player_" + resObj[3]], _root["player_" + resObj[3]].frameX, _root["player_" + resObj[3]].frameY);
    }
    else if (resObj[0] == "b90")
    {
        handleSendWingGoto(resObj);
    }
    else if (resObj[0] == "b91")
    {
        handleSendTailGoto(resObj);
    }
    else if (resObj[0] == "b92")
    {
        getTimestamp("sendHatGoto");
    }
    else if (resObj[0] == "b93")
    {
        getTimestamp("sendWingGoto");
    }
    else if (resObj[0] == "b94")
    {
        getTimestamp("sendTailGoto");
    }
    else if (resObj[0] == "b933")
    {
        getTimestamp("sendNeckGoto");
    }
    else if (resObj[0] == "b933_2")
    {
        getTimestamp("sendCostumeGoto");
    }
    else if (resObj[0] == "b934")
    {
        getTimestamp("sendShirtGoto");
    }
    else if (resObj[0] == "b935")
    {
        getTimestamp("sendPantsGoto");
    }
    else if (resObj[0] == "b95")
    {
        for (var _loc6 = 0; _loc6 < _root.userPokemon.length; ++_loc6)
        {
            _root.userPokemon[_loc6].currentHp = _root.userPokemon[_loc6].hp;
            _root.userPokemon[_loc6].ailment = "";
            _root.userPokemon[_loc6].ailmentLength = 0;
            mainGUI["pokemonIcon" + (_loc6 + 1)].hpBar._x = userPokemon[_loc6].currentHp / userPokemon[_loc6].hp * 109 - 87;
        } // end of for
    }
    else if (resObj[0] == "b96")
    {
        processQueue();
    }
    else if (resObj[0] == "b98")
    {
        var _loc11 = true;
        for (var _loc6 = 0; _loc6 < userPokemon.length; ++_loc6)
        {
            if (userPokemon[_loc6].currentHp > 0)
            {
                _loc11 = false;
                break;
            } // end if
        } // end of for
        if (_loc11 == true || _root.map.indexOf("Clan Wars ") != -1 || _root.map.indexOf("Faraway Island") != -1)
        {
            _root.temporaryMap = resObj[2];
            encryptedMap = resObj[3];
            loadMap(true, _root.temporaryMap, 19, 14);
        } // end if
    }
    else if (resObj[0] == "b99")
    {
        handlePVPLobbyTrue(resObj);
    }
    else if (resObj[0] == "b100")
    {
        _root.pvpLobbyOpen = false;
        if (map == "PVP Center")
        {
            _root.mapExits = [[22, 22, "Vermilion City", 14, 38]];
        } // end if
        delete _root.tournamentType;
    }
    else if (resObj[0] == "b101")
    {
        _root.pvpLobbyOpen = false;
        if (map == "PVP Arena")
        {
            _root.mapExits = [[24, 33, "PVP Center", 16, 25]];
        } // end if
    }
    else if (resObj[0] == "b102")
    {
        systemMessage("Your tournament prize has been added to your item box.");
        addToItemBox("PvP Token", 20);
    }
    else if (resObj[0] == "b103")
    {
        systemMessage("Your tournament prize has been added to your item box.");
        if (resObj[2] == "1")
        {
            credits = credits + 400;
            systemMessage("400 Credits have been added to your account.");
            addToItemBox("PvP Token", 250);
            var _loc15 = resObj[3].split(",");
            addToItemBox(_loc15[0], Number(_loc15[1]));
        }
        else
        {
            credits = credits + 100;
            systemMessage("100 Credits have been added to your account.");
            addToItemBox("PvP Token", 100);
        } // end else if
        mainGUI.creditsT.htmlText = "<b>" + format(credits) + "c</b>";
        mainGUI.creditShop.creditsT.htmlText = "<b>" + format(credits) + "c";
    }
    else if (resObj[0] == "b105")
    {
        handleCreateMap(resObj);
    }
    else if (resObj[0] == "b106")
    {
        _root.customMaps = parseArray(resObj[2]);
        canMove = true;
        systemMessage("Custom maps have been loaded.");
        showCreateMapGUI();
    }
    else if (resObj[0] == "b107")
    {
        if (resObj[2] == "0")
        {
            systemMessage("Invalid map width.");
        }
        else if (resObj[2] == "1")
        {
            systemMessage("Invalid map height.");
        }
        else if (resObj[2] == "2")
        {
            systemMessage("Map name already taken.");
        }
        else if (resObj[2] == "3")
        {
            systemMessage("Invalid map name.");
        }
        else if (resObj[2] == "4")
        {
            systemMessage("You have already created 3 maps.");
        }
        else if (resObj[2] == "5")
        {
            systemMessage("Invalid map password.");
        }
        else if (resObj[2] == "6")
        {
            systemMessage("Failed to update database.");
        } // end else if
        _root.creatingMap = false;
        canMove = true;
        guiUp = false;
        removeMovieClip (createMapGUI);
    }
    else if (resObj[0] == "b108")
    {
        for (var _loc6 = 0; _loc6 < customMaps.length; ++_loc6)
        {
            if (customMaps[_loc6] == resObj[2])
            {
                customMaps.splice(_loc6, 1);
                break;
            } // end if
        } // end of for
        canMove = true;
        guiUp = false;
        systemMessage("Map deleted.");
    }
    else if (resObj[0] == "b109")
    {
        delete _root.loadingTargetMap;
        guiUp = false;
        loadMap(true, "Custom_" + resObj[2], 0, 0, true);
        removeMovieClip (enterMapGUI);
    }
    else if (resObj[0] == "b110")
    {
        systemMessage("Invalid map credentials.");
        delete _root.loadingTargetMap;
        enterMapGUI.mapPassword = undefined;
    }
    else if (resObj[0] == "b111")
    {
        if (map.indexOf("Custom_") != -1)
        {
            systemMessage("The custom map you were on has been deleted.");
            loadMap(true, "Vermilion City", 17, 8);
        } // end if
    }
    else if (resObj[0] == "b113")
    {
        _loc15 = resObj[2].split(",");
        addToItemBox(_loc15[0], Number(_loc15[1]));
    }
    else if (resObj[0] == "b114")
    {
        systemMessage("Map saved.");
    }
    else if (resObj[0] == "b115")
    {
        _root.clanBank = Number(resObj[2]);
        _root.mainGUI.clanGUI.clanBg.bankT.htmlText = "<b>$" + format(_root.clanBank);
    }
    else if (resObj[0] == "b116")
    {
        handleGetUserList(resObj);
    }
    else if (resObj[0] == "b119")
    {
        userPokemon = parseMultiPokemon(resObj[2]);
        loadPokemonIcons(false);
    }
    else if (resObj[0] == "b120")
    {
        _root.questArray = parseMultiArray(resObj[2]);
        parseQuestArray();
    }
    else if (resObj[0] == "b121")
    {
        handleHook(resObj);
    }
    else if (resObj[0] == "b123")
    {
        _root.pokedexCaught2[Number(resObj[2]) - 1] = "true";
        ++_root.caughtAmount2;
    }
    else if (resObj[0] == "b124")
    {
        handleAchievementCompleted(resObj);
    }
    else if (resObj[0] == "b125")
    {
        if (resObj[4] == undefined)
        {
            achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        }
        else
        {
            achievementData[Number(resObj[2])] = parseArray(resObj[3]);
        } // end else if
        selectAchievement(_root.selectedAchievement);
        _root.mainGUI.achievements.itemList["achievementBar" + resObj[2]].startedB.gotoAndStop(2);
    }
    else if (resObj[0] == "b128")
    {
        handleItemBomb(resObj);
    }
    else if (resObj[0] == "b129")
    {
        handleBattleMovePvPError(resObj);
    }
    else if (resObj[0] == "b130")
    {
        var _loc16 = _root.mapLayer1.attachMovie("portablePC", "portablePC_" + Number(resObj[2]) + "_" + Number(resObj[3]), _root.mapLayer1.getNextHighestDepth());
        _loc16._x = Number(resObj[2]) * 32;
        _loc16._y = Number(resObj[3]) * 32;
        systemMessage("<b>" + resObj[4] + " placed a Portable PC on this map!</b>", "#FFFFFF");
        _root.portablePCArray.push([Number(resObj[2]), Number(resObj[3]), resObj[4]]);
    }
    else if (resObj[0] == "b132")
    {
        handlePortablePcExpired(resObj);
    }
    else if (resObj[0] == "b133")
    {
        getTimestamp("sendFace2Goto");
    }
    else if (resObj[0] == "b134")
    {
        getTimestamp("sendCapeGoto");
    }
    else if (resObj[0] == "b135")
    {
        handleSendFace2Goto(resObj);
    }
    else if (resObj[0] == "b136")
    {
        handleSendCapeGoto(resObj);
    }
    else if (resObj[0] == "b1366")
    {
        handleSendNeckGoto(resObj);
    }
    else if (resObj[0] == "b1369")
    {
        handleSendCostumeGoto(resObj);
    }
    else if (resObj[0] == "b1367")
    {
        handleSendShirtGoto(resObj);
    }
    else if (resObj[0] == "b1368")
    {
        handleSendPantsGoto(resObj);
    }
    else if (resObj[0] == "b137")
    {
        handleDye(resObj);
    }
    else if (resObj[0] == "b138")
    {
        removeItem("Seashell", resObj[2]);
        addInventoryItem(resObj[3], 1);
        remakeInventory();
        systemMessage(resObj[4]);
    }
    else if (resObj[0] == "b191")
    {
        handleUpdateMount(resObj);
    }
    else if (resObj[0] == "b139")
    {
        systemMessage("Level has been lowered.");
        _root.userPokemon[Number(resObj[2])] = parsePokemon(resObj[3]);
        loadPokemonIcons(false);
    }
    else if (resObj[0] == "b141")
    {
        _root.error = "This account has been banned.";
        _root.gotoAndStop("errorconnecting");
    }
    else if (resObj[0] == "b141_2")
    {
        _root.error = "This account has been banned. See the forums for more details.";
        _root.gotoAndStop("errorconnecting");
    }
    else if (resObj[0] == "blg")
    {
        trace ("incorrect user/pass");
        loginBusy = false;
        login.errorT.text = "Error: incorrect username/password!";
        removeLoginErrorText();
    }
    else if (resObj[0] == "blg2")
    {
        trace ("incorrect user/pass");
        loginBusy = false;
        login.errorT.text = "Error logging in - please try again.";
        removeLoginErrorText();
    }
    else if (resObj[0] == "b143")
    {
        _root.mewtwoRaidActive = true;
        systemMessage("<b>Mewtwo raids have started! Visit Cerulean Cave F4 to participate.", "#FFFFFF");
    }
    else if (resObj[0] == "b145")
    {
        if (_root.waitingForRaid == true)
        {
            delete _root.waitingForRaid;
            guiUp = false;
            removeMovieClip (allButtonBox);
            loadMap(true, "Mewtwo Raid Lobby", 12, 12);
        } // end if
    }
    else if (resObj[0] == "b146")
    {
        _root.raidTime = 30;
        mainGUI.raidT.htmlText = "<b>Raid Status: Starting in 30 seconds";
        _root.updateRateTextI = setInterval(updateRaidText, 1000);
    }
    else if (resObj[0] == "b147")
    {
        clearInterval(_root.updateRateTextI);
        delete _root.raidTime;
        delete _root.updateRateTextI;
        loadMap(true, "Cerulean Cave F5", 10, 7);
    }
    else if (resObj[0] == "b148")
    {
        handleReleasePokemonStorage(resObj);
    }
    else if (resObj[0] == "b149")
    {
        removeItem("Brains", resObj[2]);
        addInventoryItem(resObj[3], 1);
        remakeInventory();
        systemMessage(resObj[4]);
    }
    else if (resObj[0] == "b151")
    {
        _root.queueingForBattle = "casual";
        systemMessage("You started queueing for a casual battle.");
        _root.mainGUI.battleQueue.cancelSearchB._visible = true;
    }
    else if (resObj[0] == "b152")
    {
        if (resObj[2] == "0")
        {
            closeBattleQueue();
        } // end if
        systemMessage("You stopped queueing for a casual battle.");
        _root.mainGUI.battleQueue.cancelSearchB._visible = false;
        delete _root.queueingForBattle;
    }
    else if (resObj[0] == "b153")
    {
        _root.queueingForBattle = "ranked";
        systemMessage("You started queueing for a ranked battle.");
        _root.mainGUI.battleQueue.cancelSearchB._visible = true;
    }
    else if (resObj[0] == "b154")
    {
        if (resObj[2] == "0")
        {
            closeBattleQueue();
        } // end if
        systemMessage("You stopped queueing for a ranked battle.");
        _root.mainGUI.battleQueue.cancelSearchB._visible = false;
        delete _root.queueingForBattle;
    }
    else if (resObj[0] == "b155")
    {
        _root.battleQueueRating = Number(resObj[2]);
        _root.competitivePoints = Number(resObj[3]);
        ++_root.weeklyBattles;
        setRankIcon();
    }
    else if (resObj[0] == "b156")
    {
        battleEnd = true;
    }
    else if (resObj[0] == "b157")
    {
        _root.battleQueueHighscores = parseMultiArray(resObj[2]);
        setBattleQueueHighscores();
    }
    else if (resObj[0] == "b158")
    {
        if (resObj[4] != "1" && resObj[4] != "23" && resObj[4] != "24" && resObj[4] != "25" && resObj[4] != "26" && resObj[4] != "27" && resObj[4] != "28" && resObj[4] != "29" && resObj[4] != "30" && resObj[4] != "31" && resObj[4] != "32" && resObj[4] != "33" && resObj[4] != "34")
        {
            addInventoryItem(resObj[2], 1);
            remakeInventory();
            _root.competitivePoints = Number(resObj[4]);
        }
        else
        {
            _root.userPokemon = parseMultiPokemon(resObj[2]);
            loadPokemonIcons(false);
            _root.competitivePoints = Number(resObj[5]);
        } // end else if
        systemMessage(resObj[3]);
        _root.mainGUI.battleQueue.cpT.htmlText = "Competitive Points: " + format(_root.competitivePoints);
    }
    else if (resObj[0] == "b161")
    {
        handlePurchaseSinnohSafariZoneTicket(resObj);
    }
    else if (resObj[0] == "b162")
    {
        handleSinnohSafariTimeOver(resObj);
    }
    else if (resObj[0] == "b164")
    {
        handleMiningRockDepleted(resObj);
    }
    else if (resObj[0] == "b165")
    {
        handleMiningRockRestored(resObj);
    }
    else if (resObj[0] == "b166")
    {
        stopMining();
    }
    else if (resObj[0] == "b167")
    {
        handleFinishMining(resObj);
    }
    else if (resObj[0] == "b168")
    {
        handleSoldGemstones(resObj);
    }
    else if (resObj[0] == "b169")
    {
        handleSwarmStarted(resObj);
    }
    else if (resObj[0] == "b170")
    {
        handleGoldRushStarted(resObj);
    }
    else if (resObj[0] == "b171")
    {
        handleSwarmEnded(resObj);
    }
    else if (resObj[0] == "b172")
    {
        handleGoldRushEnded(resObj);
    }
    else if (resObj[0] == "b173")
    {
        finishLoadingClanRoster(resObj);
    }
    else if (resObj[0] == "b174")
    {
        handleMembershipExpiration(resObj);
    }
    else if (resObj[0] == "b175")
    {
        handleDeoxysFormChange(resObj);
    }
    else if (resObj[0] == "b177")
    {
        _root.error = "Client out of date";
        _root.gotoAndStop("errorconnecting");
    }
    else if (resObj[0] == "b178")
    {
        handleb178(resObj);
    }
    else if (resObj[0] == "b179")
    {
        showBattleRequest(resObj);
    }
    else if (resObj[0] == "b180")
    {
        handleUpdateMoney(resObj);
    }
    else if (resObj[0] == "b181")
    {
        handleBattleQueuePrize(resObj);
    }
    else if (resObj[0] == "b182")
    {
        handleEliteBuy(resObj);
    }
    else if (resObj[0] == "b183")
    {
        handleQuestUpdate(resObj);
    }
    else if (resObj[0] == "b184")
    {
        handleQuestComplete(resObj);
    }
    else if (resObj[0] == "sw")
    {
        userPokemon[0].happiness = Number(resObj[2]);
    }
    else if (resObj[0] == "b185")
    {
        showTradeRequest(resObj[2]);
    }
    else if (resObj[0] == "b186")
    {
        handleOpenEliteChest(resObj);
    }
    else if (resObj[0] == "b187")
    {
        handleRemoveEliteChest(resObj);
    }
    else if (resObj[0] == "b188")
    {
        handleAddEliteChest(resObj);
    }
    else if (resObj[0] == "b189")
    {
        handleUpdateInventory(resObj);
    }
    else if (resObj[0] == "b190")
    {
        handleResendFishing(resObj);
    }
    else if (resObj[0] == "b192")
    {
        showFriendRequest(resObj);
    }
    else if (resObj[0] == "b196")
    {
        handleLoadFriends(resObj);
    }
    else if (resObj[0] == "b199")
    {
        handleBattleTowerPrizeBuy(resObj);
    }
    else if (resObj[0] == "b200")
    {
        handleClanWarLeaderboard(resObj);
    }
    else if (resObj[0] == "b201")
    {
        handleWorldBossStarted(resObj);
    }
    else if (resObj[0] == "b202")
    {
        handleWorldBossHp(resObj);
    }
    else if (resObj[0] == "b203")
    {
        handleWorldBossEnd(resObj);
    }
    else if (resObj[0] == "sr")
    {
        handleServerRestart(true);
    }
    else if (resObj[0] == "b204")
    {
        handleMoveBankUpdate(resObj);
    }
    else if (resObj[0] == "rl6")
    {
        removeMovieClip (_root.allButtonBox);
        showRelearnList6(parseArray(resObj[2]));
    }
    else if (resObj[0] == "b206")
    {
        handleGotUsageStats(resObj);
    } // end else if
} // End of the function
function handleGotUsageStats(resObj)
{
    _root.usageStats = resObj[2];
    showUsageStats();
} // End of the function
function handleMoveBankUpdate(resObj)
{
    var _loc4 = Number(resObj[2]);
    var _loc5 = parseArray(resObj[3]);
    var _loc6 = Number(resObj[4]);
    _root.userPokemon[_loc4].moves = _loc5;
    _root.pokemonSummaryMoves = ["", "", "", ""];
    for (var _loc2 = 0; _loc2 < _root.userPokemon[resObj[2]].moves.length; ++_loc2)
    {
        _root.pokemonSummaryMoves[_loc2] = moveIdToName(_root.userPokemon[resObj[2]].moves[_loc2]);
    } // end of for
    _root.mainGUI.pokemonSummary.moves.name1T.htmlText = "<b>" + _root.pokemonSummaryMoves[0];
    _root.mainGUI.pokemonSummary.moves.name2T.htmlText = "<b>" + _root.pokemonSummaryMoves[1];
    _root.mainGUI.pokemonSummary.moves.name3T.htmlText = "<b>" + _root.pokemonSummaryMoves[2];
    _root.mainGUI.pokemonSummary.moves.name4T.htmlText = "<b>" + _root.pokemonSummaryMoves[3];
    systemMessage("Your " + _root.userPokemon[_loc4].name + " learned " + moveIdToName(_loc6) + ".");
} // End of the function
function handleServerRestart(updateText)
{
    mainGUI.serverRestartT._visible = true;
    mainGUI.serverRestartBackground._visible = true;
    if (updateText)
    {
        systemMessage("The server will be restarted in 10 minutes for an update.", "#FFCC00");
        serverRestartCount = 11;
        serverRestartText();
        serverRestartI = setInterval(serverRestartText, 60000);
    }
    else
    {
        systemMessage("The server will be restarted in less than 10 minutes for an update.", "#FFCC00");
        mainGUI.serverRestartT.htmlText = "<b>Server Restarting Soon</b>";
    } // end else if
} // End of the function
function handleWorldBossEnd(resObj)
{
    systemMessage("<b>" + resObj[4] + " defeated the World Boss!", "#FFFFFF");
    systemMessage("<b>Most Damage: " + resObj[2] + " - " + format(resObj[3]), "#FFFFFF");
    systemMessage("<b>2nd Most Damage: " + resObj[5] + " - " + format(resObj[6]), "#FFFFFF");
    systemMessage("<b>3rd Most Damage: " + resObj[7] + " - " + format(resObj[8]), "#FFFFFF");
    mainGUI.worldBossT.text = "";
    mainGUI.worldBossT._visible = false;
    delete _root.worldBossMap;
} // End of the function
function handleWorldBossHp(resObj)
{
} // End of the function
function handleClanWarLeaderboard(resObj)
{
    if (_root.map == "Clan Wars T1" || _root.map == "Clan Wars T2" || _root.map == "Clan Wars T3")
    {
        var _loc3 = parseMultiArray(resObj[2]);
        mainGUI.clanLeaderboardT.htmlText = "";
        for (var _loc2 = 0; _loc2 < _loc3.length; ++_loc2)
        {
            mainGUI.clanLeaderboardT.htmlText = mainGUI.clanLeaderboardT.htmlText + (_loc3[_loc2][0] + " - " + _loc3[_loc2][1] + "<br>");
        } // end of for
        _loc3[1][0] + " - " + _loc3[1][1] + "<br>" + _loc3[2][0] + " - " + _loc3[2][1] + "<br>" + _loc3[3][0] + " - " + _loc3[3][1] + "<br>" + _loc3[4][0] + " - " + _loc3[4][1] + "<br>";
        mainGUI.clanLeaderboardT._visible = true;
        clearInterval(_root.refreshClanLeaderboardsI);
        _root.refreshClanLeaderboardsI = setInterval(refreshClanLeaderboards, 60000);
    } // end if
} // End of the function
function refreshClanLeaderboards()
{
    getTimestamp("clanWarLeaderboards");
} // End of the function
function handleBattleTowerPrizeBuy(resObj)
{
    if (resObj[4] != "1" && resObj[4] != "8" && resObj[4] != "9" && resObj[4] != "10" && resObj[4] != "11" && resObj[4] != "12" && resObj[4] != "13" && resObj[4] != "14" && resObj[4] != "15")
    {
        addInventoryItem(resObj[2], 1);
    }
    else
    {
        _root.userPokemon = parseMultiPokemon(resObj[2]);
        loadPokemonIcons(false);
    } // end else if
    if (resObj[4] == "1")
    {
        removeItem("Tower Token", 30000);
    }
    else if (resObj[4] == "2")
    {
        removeItem("Tower Token", 15000);
    }
    else if (resObj[4] == "3")
    {
        removeItem("Tower Token", 6000);
    }
    else if (resObj[4] == "4")
    {
        removeItem("Tower Token", 7500);
    }
    else if (resObj[4] == "5")
    {
        removeItem("Tower Token", 3000);
    }
    else if (resObj[4] == "6")
    {
        removeItem("Tower Token", 3000);
    }
    else if (resObj[4] == "7")
    {
        removeItem("Tower Token", 500);
    }
    else if (resObj[4] == "8")
    {
        removeItem("Tower Token", 1000);
    }
    else if (resObj[4] == "9")
    {
        removeItem("Tower Token", 600);
    }
    else if (resObj[4] == "10")
    {
        removeItem("Tower Token", 350);
    }
    else if (resObj[4] == "11")
    {
        removeItem("Tower Token", 300);
    }
    else if (resObj[4] == "12")
    {
        removeItem("Tower Token", 200);
    }
    else if (resObj[4] == "13")
    {
        removeItem("Tower Token", 50);
    }
    else if (resObj[4] == "14")
    {
        removeItem("Tower Token", 22500);
    }
    else if (resObj[4] == "15")
    {
        removeItem("Tower Token", 25000);
    } // end else if
    remakeInventory();
    systemMessage(resObj[3]);
} // End of the function
function handleLoadFriends(resObj)
{
    _root.friendsOnline = parseArray(resObj[2]);
    loadFriendsList();
} // End of the function
function loadFriendsList()
{
    mainGUI.people.namesT.htmlText = "";
    for (z = 0; z < _root.friendsOnline.length; z++)
    {
        if (z == 0)
        {
            if (_root.friendsOnline[z] == "1")
            {
                mainGUI.people.namesT.htmlText = "<b>" + friends[z];
            }
            else
            {
                mainGUI.people.namesT.htmlText = "<b><font color=\'#7D7D7D\'>" + friends[z];
            } // end else if
            continue;
        } // end if
        if (_root.friendsOnline[z] == "1")
        {
            mainGUI.people.namesT.htmlText = mainGUI.people.namesT.htmlText + ("<b>" + friends[z]);
            continue;
        } // end if
        mainGUI.people.namesT.htmlText = mainGUI.people.namesT.htmlText + ("<b><font color=\'#7D7D7D\'>" + friends[z]);
    } // end of for
} // End of the function
function showFriendRequest(resObj)
{
    confirmBox = _root.mainGUI.attachMovie("confirmBox", "confirmBox", _root.mainGUI.getNextHighestDepth());
    assignMouseEvents(confirmBox.confirmB);
    assignMouseEvents(confirmBox.cancelB);
    assignMouseEvents(confirmBox.exitB);
    confirmBox.yesT.htmlText = "<b>Accept";
    confirmBox.noT.htmlText = "<b>Decline";
    confirmBox.msgT.htmlText = "<b>" + resObj[2] + " wants to be your friend :)";
    confirmBox.confirmB.onRelease = function ()
    {
        removeMovieClip (confirmBox);
        removeMovieClip (darkScreen);
        getTimestamp("acceptFriend");
    };
    confirmBox.cancelB.onRelease = function ()
    {
        removeMovieClip (confirmBox);
        removeMovieClip (darkScreen);
        getTimestamp("declineFriend");
    };
    confirmBox.exitB.onRelease = function ()
    {
        removeMovieClip (confirmBox);
        removeMovieClip (darkScreen);
        getTimestamp("declineFriend");
    };
} // End of the function
function fixPPText()
{
    if (_root.ppM[0] != 0)
    {
        mainGUI.battleBackground.move1B.ppT.htmlText = "<b>" + _root.ppC[0] + "/" + _root.ppM[0];
        mainGUI.battleBackground.move1B.pp = _root.ppC[0] + "/" + _root.ppM[0];
        mainGUI.battleBackground.move1B.ppN = _root.ppC[0];
    }
    else
    {
        mainGUI.battleBackground.move1B.ppN = 0;
        mainGUI.battleBackground.move1B.pp = "";
        mainGUI.battleBackground.move1B.ppT.htmlText = "<b>";
    } // end else if
    if (_root.ppM[1] != 0)
    {
        mainGUI.battleBackground.move2B.ppT.htmlText = "<b>" + _root.ppC[1] + "/" + _root.ppM[1];
        mainGUI.battleBackground.move2B.pp = _root.ppC[1] + "/" + _root.ppM[1];
        mainGUI.battleBackground.move2B.ppN = _root.ppC[1];
    }
    else
    {
        mainGUI.battleBackground.move2B.ppN = 0;
        mainGUI.battleBackground.move2B.pp = "";
        mainGUI.battleBackground.move2B.ppT.htmlText = "<b>";
    } // end else if
    if (_root.ppM[2] != 0)
    {
        mainGUI.battleBackground.move3B.ppT.htmlText = "<b>" + _root.ppC[2] + "/" + _root.ppM[2];
        mainGUI.battleBackground.move3B.pp = _root.ppC[2] + "/" + _root.ppM[2];
        mainGUI.battleBackground.move3B.ppN = _root.ppC[2];
    }
    else
    {
        mainGUI.battleBackground.move3B.ppN = 0;
        mainGUI.battleBackground.move3B.pp = "";
        mainGUI.battleBackground.move3B.ppT.htmlText = "<b>";
    } // end else if
    if (_root.ppM[3] != 0)
    {
        mainGUI.battleBackground.move4B.ppT.htmlText = "<b>" + _root.ppC[3] + "/" + _root.ppM[3];
        mainGUI.battleBackground.move4B.pp = _root.ppC[3] + "/" + _root.ppM[3];
        mainGUI.battleBackground.move4B.ppN = _root.ppC[3];
    }
    else
    {
        mainGUI.battleBackground.move4B.ppN = 0;
        mainGUI.battleBackground.move4B.pp = "";
        mainGUI.battleBackground.move4B.ppT.htmlText = "<b>";
    } // end else if
} // End of the function
function unfadeScreen()
{
    if (_root.disableBattleMusic == false)
    {
        _root.oldMusicTime = _root.mySound.position;
        fadeMusic("Battle.mp3", false);
    } // end if
    _root.battleReady = false;
    _root.checkForBattle = false;
    _root.voltSwitching = false;
    _root.opponentVoltSwitching = false;
    fixEnemyHpBar();
    fixPlayerHpBar();
    _root.mainGUI.battleBackground.userT.htmlText = "<b>" + _root.username;
    if (_root.bt == "d")
    {
        mainGUI.battleBackground.userHp2.i.gotoAndStop(userPokemon[activePokemon].heldItem);
        mainGUI.battleBackground.userHp2.ii.gotoAndStop(userPokemon[activePokemon2].heldItem);
        mainGUI.battleBackground.enemyHp2.wildPokemonHpBar._visible = true;
        mainGUI.battleBackground.enemyHp2.wildPokemonHpBar2._visible = true;
        mainGUI.battleBackground.userHp2.userPokemonHpBar._visible = true;
        mainGUI.battleBackground.userHp2.userPokemonHpBar2._visible = true;
        if (_root.setLevel != 0)
        {
            mainGUI.battleBackground.enemyHp2.wildPokemonLevelT.htmlText = "<b>Lv: " + _root.setLevel;
            mainGUI.battleBackground.enemyHp2.wildPokemonLevelT2.htmlText = "<b>Lv: " + _root.setLevel;
            mainGUI.battleBackground.userHp2.userPokemonLevelT.htmlText = "<b>Lv: " + _root.setLevel;
            mainGUI.battleBackground.userHp2.userPokemonLevelT2.htmlText = "<b>Lv: " + _root.setLevel;
        }
        else
        {
            mainGUI.battleBackground.enemyHp2.wildPokemonLevelT.htmlText = "<b>Lv: " + wildPokemon.level;
            mainGUI.battleBackground.enemyHp2.wildPokemonLevelT2.htmlText = "<b>Lv: " + wildPokemon2.level;
            mainGUI.battleBackground.userHp2.userPokemonLevelT.htmlText = "<b>Lv: " + userPokemon[activePokemon].level;
            mainGUI.battleBackground.userHp2.userPokemonLevelT2.htmlText = "<b>Lv: " + userPokemon[activePokemon2].level;
        } // end else if
    }
    else
    {
        mainGUI.battleBackground.userHp.i.gotoAndStop(userPokemon[activePokemon].heldItem);
        mainGUI.battleBackground.enemyHp.wildPokemonHpBar._visible = true;
        mainGUI.battleBackground.userHp.userPokemonHpBar._visible = true;
        if (_root.setLevel != 0)
        {
            mainGUI.battleBackground.enemyHp.wildPokemonLevelT.htmlText = "<b>Lv: " + _root.setLevel;
            mainGUI.battleBackground.userHp.userPokemonLevelT.htmlText = "<b>Lv: " + _root.setLevel;
        }
        else
        {
            mainGUI.battleBackground.enemyHp.wildPokemonLevelT.htmlText = "<b>Lv: " + wildPokemon.level;
            mainGUI.battleBackground.userHp.userPokemonLevelT.htmlText = "<b>Lv: " + userPokemon[activePokemon].level;
        } // end else if
    } // end else if
    setWildPokemonIcon();
    updateHpBattleText();
    if (userPokemon[activePokemon].heldItem == "Hunter Charm" && _root.money >= 50)
    {
        _root.money = _root.money - 50;
        mainGUI.inventory.moneyT.htmlText = "<b>" + format(_root.money) + "</b>";
    } // end if
    if (userPokemon[activePokemon].ailment != "" && userPokemon[activePokemon].ailment != undefined && userPokemon[activePokemon].ailment != "undefined")
    {
        mainGUI.battleBackground.battleIcon1.gotoAndStop(userPokemon[activePokemon].ailment);
        mainGUI.battleBackground.battleIcon1._visible = true;
    }
    else
    {
        mainGUI.battleBackground.battleIcon1._visible = false;
    } // end else if
    if (wildPokemon.ailment != "" && wildPokemon.ailment != undefined && wildPokemon.ailment != "undefined")
    {
        mainGUI.battleBackground.battleIcon2.gotoAndStop(wildPokemon.ailment);
        mainGUI.battleBackground.battleIcon2._visible = true;
    }
    else
    {
        mainGUI.battleBackground.battleIcon2._visible = false;
    } // end else if
    for (var _loc2 = 0; _loc2 < 6; ++_loc2)
    {
        _root.targetEnemyBattleUI["bp" + (_loc2 + 1)]._visible = false;
        _root.targetEnemyBattleUI["i" + (_loc2 + 1)]._visible = false;
    } // end of for
    for (var _loc2 = 0; _loc2 < _root.opponentPokemonArray.length; ++_loc2)
    {
        if (Number(_root.opponentPokemonArray[_loc2][1]) > 0)
        {
            _root.targetEnemyBattleUI["bp" + (_loc2 + 1)].gotoAndStop(1);
        }
        else
        {
            _root.targetEnemyBattleUI["bp" + (_loc2 + 1)].gotoAndStop(2);
        } // end else if
        _root.targetEnemyBattleUI["bp" + (_loc2 + 1)]._visible = true;
        _root.targetEnemyBattleUI["i" + (_loc2 + 1)].gotoAndStop(_root.opponentPokemonArray[_loc2][0]);
        _root.targetEnemyBattleUI["i" + (_loc2 + 1)]._visible = true;
    } // end of for
    if (battleType2 == "gymLeader" || map.indexOf("Clan Wars ") != -1 || map == "PVP Arena" || _root.queueingForBattle != undefined || battleType == "pvp" || battleType == "trainer")
    {
        mainGUI.battleBackground.bagB.gotoAndStop("dark");
        mainGUI.battleBackground.runB.gotoAndStop("dark");
    }
    else
    {
        mainGUI.battleBackground.bagB.gotoAndStop(1);
        mainGUI.battleBackground.runB.gotoAndStop(1);
    } // end else if
    updateUserBattleX();
    updateEnemyBattleX();
    if (battleType == "wild")
    {
        if (wildPokemon.elite == "true")
        {
            battleText.unshift(["A wild Elite " + wildPokemon.name + " appeared!", "", "", "", "", ""]);
        }
        else
        {
            battleText.unshift(["A wild " + wildPokemon.name + " appeared!", "", "", "", "", ""]);
        } // end else if
        mainGUI.battleBackground.battleT._visible = false;
        if ((wildPokemon.shiny == "true" || wildPokemon.shiny == true) && wildPokemon.elite == "true")
        {
            _root.mainGUI.battleBackground.opponentT.htmlText = "<b>Wild [S][E]" + wildPokemon.name;
        }
        else if (wildPokemon.elite == "true")
        {
            _root.mainGUI.battleBackground.opponentT.htmlText = "<b>Wild [E]" + wildPokemon.name;
        }
        else if (wildPokemon.shiny == "true" || wildPokemon.shiny == true)
        {
            _root.mainGUI.battleBackground.opponentT.htmlText = "<b>Wild [S]" + wildPokemon.name;
        }
        else
        {
            _root.mainGUI.battleBackground.opponentT.htmlText = "<b>Wild " + wildPokemon.name;
        } // end else if
    }
    else if (battleType == "trainer")
    {
        battleText.unshift([_root.trainerName + " sent out " + wildPokemon.name + ".", "", "", "", "", ""]);
        mainGUI.battleBackground.battleT._visible = false;
        _root.mainGUI.battleBackground.opponentT.htmlText = "<b>" + _root.trainerName;
    }
    else if (battleType == "pvp")
    {
        battleText.unshift([_root.trainerName + " sent out " + wildPokemon.name + ".", "", "", "", "", ""]);
        mainGUI.battleBackground.battleT._visible = false;
        _root.mainGUI.battleBackground.opponentT.htmlText = "<b>" + _root.trainerName;
    } // end else if
    for (var _loc2 = 0; _loc2 < 6; ++_loc2)
    {
        if (userPokemon[_loc2] != undefined)
        {
            if (userPokemon[_loc2].currentHp > 0)
            {
                _root.targetUserBattleUI["bp" + (_loc2 + 1)].gotoAndStop(1);
            }
            else
            {
                _root.targetUserBattleUI["bp" + (_loc2 + 1)].gotoAndStop(2);
            } // end else if
            _root.targetUserBattleUI["bp" + (_loc2 + 1)]._visible = true;
            _root.targetUserBattleUI["i" + (_loc2 + 1)].gotoAndStop(_root.userPokemon[_loc2].id);
            _root.targetUserBattleUI["i" + (_loc2 + 1)]._visible = true;
            continue;
        } // end if
        _root.targetUserBattleUI["bp" + (_loc2 + 1)]._visible = false;
        _root.targetUserBattleUI["i" + (_loc2 + 1)]._visible = false;
    } // end of for
    if (_root.dungeonBattle == true && _root.map.indexOf("Safari Zone") == -1)
    {
        mainGUI.battleBackground.runB.gotoAndStop("dark");
    } // end if
    if (battleType == "wild")
    {
        if (_root.pokedexCaught2[wildPokemon.id - 1] == "true")
        {
            _root.targetEnemyBattleUI.p._visible = true;
        }
        else
        {
            _root.targetEnemyBattleUI.p._visible = false;
        } // end else if
    }
    else
    {
        _root.targetEnemyBattleUI.p._visible = false;
    } // end else if
    setUserRollOver();
    fixPPText();
    if (_root.closeBattle == true)
    {
        _root.closeBattle = false;
        endBattle();
    } // end if
    mainGUI.battleBackground.backPokemon._visible = true;
    mainGUI.battleBackground.wildPokemonIcon._visible = true;
    if (_root.bt == "d")
    {
        mainGUI.battleBackground.backPokemon2._visible = true;
        mainGUI.battleBackground.wildPokemonIcon2._visible = true;
    } // end if
    battleAnimation = 1;
} // End of the function
function reloadBattleGUI(hpAmount)
{
    if (hpAmount != undefined)
    {
        _root.userStartingHp = hpAmount;
    } // end if
    _root.targetUserBattleUI.i.gotoAndStop(userPokemon[activePokemon].heldItem);
    mainGUI.battleBackground.move1B.nameT.htmlText = "<b>" + moveIdToName(userPokemon[activePokemon].battleMoves[0]);
    mainGUI.battleBackground.move2B.nameT.htmlText = "<b>" + moveIdToName(userPokemon[activePokemon].battleMoves[1]);
    mainGUI.battleBackground.move3B.nameT.htmlText = "<b>" + moveIdToName(userPokemon[activePokemon].battleMoves[2]);
    mainGUI.battleBackground.move4B.nameT.htmlText = "<b>" + moveIdToName(userPokemon[activePokemon].battleMoves[3]);
    mainGUI.battleBackground.move1B.moveName = moveIdToName(userPokemon[activePokemon].battleMoves[0]);
    mainGUI.battleBackground.move2B.moveName = moveIdToName(userPokemon[activePokemon].battleMoves[1]);
    mainGUI.battleBackground.move3B.moveName = moveIdToName(userPokemon[activePokemon].battleMoves[2]);
    mainGUI.battleBackground.move4B.moveName = moveIdToName(userPokemon[activePokemon].battleMoves[3]);
    fixPPText();
    if (userPokemon[activePokemon].shiny == true)
    {
        mainGUI.battleBackground.backPokemon.gotoAndStop(userPokemon[activePokemon].id + _root.shinyDifference);
        if (userPokemon[activePokemon].form != "default" && userPokemon[activePokemon].form != undefined && userPokemon[activePokemon].form != "undefined")
        {
            _root.targetUserBattleUI.userPokemonT.htmlText = "<b>[S]" + userPokemon[activePokemon].name + " (" + upperCase(userPokemon[activePokemon].form) + ")";
        }
        else
        {
            _root.targetUserBattleUI.userPokemonT.htmlText = "<b>[S]" + userPokemon[activePokemon].name;
        } // end else if
    }
    else
    {
        mainGUI.battleBackground.backPokemon.gotoAndStop(userPokemon[activePokemon].id);
        if (userPokemon[activePokemon].form != "default" && userPokemon[activePokemon].form != undefined && userPokemon[activePokemon].form != "undefined")
        {
            _root.targetUserBattleUI.userPokemonT.htmlText = "<b>" + userPokemon[activePokemon].name + " (" + upperCase(userPokemon[activePokemon].form) + ")";
        }
        else
        {
            _root.targetUserBattleUI.userPokemonT.htmlText = "<b>" + userPokemon[activePokemon].name;
        } // end else if
    } // end else if
    mainGUI.battleBackground.backPokemon._alpha = 100;
    if (userPokemon[activePokemon].form != "default" && userPokemon[activePokemon].form != undefined && userPokemon[activePokemon].form != "undefined")
    {
        mainGUI.battleBackground.backPokemon.i.gotoAndStop(userPokemon[activePokemon].form);
    }
    else
    {
        mainGUI.battleBackground.backPokemon.i.gotoAndStop(1);
    } // end else if
    setUserRollOver();
    mainGUI.battleBackground.bg.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.pokemonB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.fightB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.bagB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.runB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.move1B.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.move2B.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.move3B.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.move4B.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.continueB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.continueT.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.itemBg.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.useItemRightB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.useItemLeftB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.useItemB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.backB.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.itemImage.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.itemTexts.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.battleT.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.moveDescriptionT.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    mainGUI.battleBackground.battleTimeT.swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    for (var _loc2 = 1; _loc2 < 7; ++_loc2)
    {
        mainGUI.battleBackground["pokemon" + _loc2 + "B"].swapDepths(mainGUI.battleBackground.getNextHighestDepth());
    } // end of for
    fixPlayerHpBar();
    setWildPokemonIcon();
    if (_root.setLevel > 0)
    {
        mainGUI.battleBackground.enemyHp.wildPokemonLevelT.htmlText = "<b>Lv: " + _root.setLevel;
        _root.targetUserBattleUI.userPokemonLevelT.htmlText = "<b>Lv: " + _root.setLevel;
    }
    else
    {
        mainGUI.battleBackground.enemyHp.wildPokemonLevelT.htmlText = "<b>Lv: " + wildPokemon.level;
        _root.targetUserBattleUI.userPokemonLevelT.htmlText = "<b>Lv: " + userPokemon[activePokemon].level;
    } // end else if
    if (userPokemon[activePokemon].ailment != "" && userPokemon[activePokemon].ailment != undefined && userPokemon[activePokemon].ailment != "undefined")
    {
        mainGUI.battleBackground.battleIcon1.gotoAndStop(userPokemon[activePokemon].ailment);
        mainGUI.battleBackground.battleIcon1._visible = true;
    }
    else
    {
        mainGUI.battleBackground.battleIcon1._visible = false;
    } // end else if
    mainGUI.battleBackground.battleIcon3._visible = false;
    if (_root.newSettings[0] != "1")
    {
        if (_root.battleWeather == "none" || _root.battleWeather == undefined)
        {
            if (_root.battleBg == "snowyforest")
            {
                _root.mainGUI.battleBackground.weather.gotoAndStop("snow");
                _root.mainGUI.battleBackground.weather._visible = true;
            }
            else
            {
                _root.mainGUI.battleBackground.weather._visible = false;
            } // end else if
        }
        else
        {
            _root.mainGUI.battleBackground.weather.gotoAndStop(_root.battleWeather);
            _root.mainGUI.battleBackground.weather._visible = true;
        } // end if
    } // end else if
    for (var _loc2 = 1; _loc2 <= 7; ++_loc2)
    {
        _root.targetUserBattleUI["sbn" + _loc2]._visible = false;
        _root.targetUserBattleUI["sb" + _loc2]._visible = false;
    } // end of for
    updateUserBattleX();
    if (_root.continueButtonText != "<b>Opponent is choosing their next pokemon.")
    {
        _root.continueButtonText = "";
        _root.continueButton = false;
    } // end if
} // End of the function
function holdButtonMoveMap()
{
    if (wDown == true && canWalkOnTile(collisionArray[player.tileY - 1][player.tileX]) && canMove == true)
    {
        if (moveType == "surf")
        {
            if (collisionArray[player.tileY - 1][player.tileX] == 2 || collisionArray[player.tileY - 1][player.tileX] == 24 || collisionArray[player.tileY - 1][player.tileX] == 25 || collisionArray[player.tileY - 1][player.tileX] == 12 || collisionArray[player.tileY - 1][player.tileX] == 15)
            {
                moveMapSurf("up");
            }
            else
            {
                fadeMusic(undefined, true);
                moveType = "";
                moveMapSpeed = 8 * movementSpeedMod;
                if (!useMount())
                {
                    delete _root.player.mount;
                    getTimestamp("updateMount", _root.player.mount);
                } // end if
                moveMap("up");
            } // end else if
        }
        else
        {
            moveMap("up");
        } // end else if
        player.moveMapAmount = player.moveMapAmount + moveMapSpeed;
        mapLayer1._y = mapLayer1._y + moveMapSpeed;
        mapLayer1_2._y = mapLayer1_2._y + moveMapSpeed;
        mapLayer2._y = mapLayer2._y + moveMapSpeed;
        mapLayer3._y = mapLayer3._y + moveMapSpeed;
        lightMap._y = lightMap._y + moveMapSpeed;
        for (z = 0; z < players.length; z++)
        {
            players[z]._y = players[z]._y + moveMapSpeed;
        } // end of for
    }
    else if (sDown == true && canWalkOnTile(collisionArray[player.tileY + 1][player.tileX]) && canMove == true)
    {
        if (moveType == "surf")
        {
            if (collisionArray[player.tileY + 1][player.tileX] == 2 || collisionArray[player.tileY + 1][player.tileX] == 24 || collisionArray[player.tileY + 1][player.tileX] == 25 || collisionArray[player.tileY + 1][player.tileX] == 12 || collisionArray[player.tileY + 1][player.tileX] == 15)
            {
                moveMapSurf("down");
            }
            else
            {
                fadeMusic(undefined, true);
                moveType = "";
                moveMapSpeed = 8 * movementSpeedMod;
                if (!useMount())
                {
                    delete _root.player.mount;
                    getTimestamp("updateMount", _root.player.mount);
                } // end if
                moveMap("down");
            } // end else if
        }
        else
        {
            moveMap("down");
        } // end else if
        player.moveMapAmount = player.moveMapAmount + moveMapSpeed;
        mapLayer1._y = mapLayer1._y - moveMapSpeed;
        mapLayer1_2._y = mapLayer1_2._y - moveMapSpeed;
        mapLayer2._y = mapLayer2._y - moveMapSpeed;
        mapLayer3._y = mapLayer3._y - moveMapSpeed;
        lightMap._y = lightMap._y - moveMapSpeed;
        for (z = 0; z < players.length; z++)
        {
            players[z]._y = players[z]._y - moveMapSpeed;
        } // end of for
    }
    else if (aDown == true && canWalkOnTile(collisionArray[player.tileY][player.tileX - 1]) && canMove == true)
    {
        if (moveType == "surf")
        {
            if (collisionArray[player.tileY][player.tileX - 1] == 2 || collisionArray[player.tileY][player.tileX - 1] == 24 || collisionArray[player.tileY][player.tileX - 1] == 25 || collisionArray[player.tileY][player.tileX - 1] == 12 || collisionArray[player.tileY][player.tileX - 1] == 15)
            {
                moveMapSurf("left");
            }
            else
            {
                fadeMusic(undefined, true);
                moveType = "";
                moveMapSpeed = 8 * movementSpeedMod;
                if (!useMount())
                {
                    delete _root.player.mount;
                    getTimestamp("updateMount", _root.player.mount);
                } // end if
                moveMap("left");
            } // end else if
        }
        else
        {
            moveMap("left");
        } // end else if
        player.moveMapAmount = player.moveMapAmount + moveMapSpeed;
        mapLayer1._x = mapLayer1._x + moveMapSpeed;
        mapLayer1_2._x = mapLayer1_2._x + moveMapSpeed;
        mapLayer2._x = mapLayer2._x + moveMapSpeed;
        mapLayer3._x = mapLayer3._x + moveMapSpeed;
        lightMap._x = lightMap._x + moveMapSpeed;
        for (z = 0; z < players.length; z++)
        {
            players[z]._x = players[z]._x + moveMapSpeed;
        } // end of for
    }
    else if (dDown == true && canWalkOnTile(collisionArray[player.tileY][player.tileX + 1]) && canMove == true)
    {
        if (moveType == "surf")
        {
            if (collisionArray[player.tileY][player.tileX + 1] == 2 || collisionArray[player.tileY][player.tileX + 1] == 24 || collisionArray[player.tileY][player.tileX + 1] == 25 || collisionArray[player.tileY][player.tileX + 1] == 12 || collisionArray[player.tileY][player.tileX + 1] == 15)
            {
                moveMapSurf("right");
            }
            else
            {
                fadeMusic(undefined, true);
                moveType = "";
                moveMapSpeed = 8 * movementSpeedMod;
                if (!useMount())
                {
                    delete _root.player.mount;
                    getTimestamp("updateMount", _root.player.mount);
                } // end if
                moveMap("right");
            } // end else if
        }
        else
        {
            moveMap("right");
        } // end else if
        player.moveMapAmount = player.moveMapAmount + moveMapSpeed;
        mapLayer1._x = mapLayer1._x - moveMapSpeed;
        mapLayer1_2._x = mapLayer1_2._x - moveMapSpeed;
        mapLayer2._x = mapLayer2._x - moveMapSpeed;
        mapLayer3._x = mapLayer3._x - moveMapSpeed;
        lightMap._x = lightMap._x - moveMapSpeed;
        for (z = 0; z < players.length; z++)
        {
            players[z]._x = players[z]._x - moveMapSpeed;
        } // end of for
    }
    else
    {
        moving = false;
        movingMapUp = false;
        movingMapDown = false;
        movingMapRight = false;
        movingMapLeft = false;
        player.moveMapAmount = 0;
    } // end else if
} // End of the function
function reloadEnemyBattleGUI(hpVar)
{
    fixEnemyHpBar();
    _root.targetEnemyBattleUI.wildPokemonHpBar._visible = true;
    if (wildPokemon.shiny == true)
    {
        mainGUI.battleBackground.wildPokemonIcon.gotoAndStop(wildPokemon.id + shinyDifference);
        if (wildPokemon.form != "default")
        {
            _root.targetEnemyBattleUI.wildPokemonT.htmlText = "<b>[S]" + wildPokemon.name + " (" + upperCase(wildPokemon.form) + ")";
            mainGUI.battleBackground.wildPokemonIcon.i.gotoAndStop(wildPokemon.form);
        }
        else
        {
            mainGUI.battleBackground.wildPokemonIcon.i.gotoAndStop(1);
            _root.targetEnemyBattleUI.wildPokemonT.htmlText = "<b>[S]" + wildPokemon.name;
        } // end else if
    }
    else
    {
        mainGUI.battleBackground.wildPokemonIcon.gotoAndStop(wildPokemon.id);
        if (wildPokemon.form != "default")
        {
            _root.targetEnemyBattleUI.wildPokemonT.htmlText = "<b>" + wildPokemon.name + " (" + upperCase(wildPokemon.form) + ")";
            mainGUI.battleBackground.wildPokemonIcon.i.gotoAndStop(wildPokemon.form);
        }
        else
        {
            mainGUI.battleBackground.wildPokemonIcon.i.gotoAndStop(1);
            _root.targetEnemyBattleUI.wildPokemonT.htmlText = "<b>" + wildPokemon.name;
        } // end else if
    } // end else if
    if (_root.setLevel > 0)
    {
        _root.targetEnemyBattleUI.wildPokemonLevelT.htmlText = "<b>Lv: " + _root.setLevel;
    }
    else
    {
        _root.targetEnemyBattleUI.wildPokemonLevelT.htmlText = "<b>Lv: " + wildPokemon.level;
    } // end else if
    if (newPokemon.ailment != "" && newPokemon.ailment != undefined && newPokemon.ailment != "undefined")
    {
        mainGUI.battleBackground.battleIcon2.gotoAndStop(newPokemon.ailment);
        mainGUI.battleBackground.battleIcon2._visible = true;
    }
    else
    {
        mainGUI.battleBackground.battleIcon2._visible = false;
    } // end else if
    mainGUI.battleBackground.battleIcon4._visible = false;
    if (_root.newSettings[0] != "1")
    {
        if (_root.battleWeather == "none" || _root.battleWeather == undefined)
        {
            if (_root.battleBg == "snowyforest")
            {
                _root.mainGUI.battleBackground.weather.gotoAndStop("snow");
                _root.mainGUI.battleBackground.weather._visible = true;
            }
            else
            {
                _root.mainGUI.battleBackground.weather._visible = false;
            } // end else if
        }
        else
        {
            _root.mainGUI.battleBackground.weather.gotoAndStop(_root.battleWeather);
            _root.mainGUI.battleBackground.weather._visible = true;
        } // end if
    } // end else if
    for (var _loc2 = 1; _loc2 <= 7; ++_loc2)
    {
        _root.targetEnemyBattleUI["sbn" + _loc2]._visible = false;
        _root.targetEnemyBattleUI["sb" + _loc2]._visible = false;
    } // end of for
    _root.mainGUI.battleBackground.h.msgT.htmlText = _root.targetEnemyBattleUI.wildPokemonT.htmlText;
    _root.mainGUI.battleBackground.h.t1.gotoAndStop(wildPokemon.type);
    if (wildPokemon.type2 != 0)
    {
        _root.mainGUI.battleBackground.h.t2.gotoAndStop(wildPokemon.type2);
        _root.mainGUI.battleBackground.h.t2._visible = true;
    }
    else
    {
        _root.mainGUI.battleBackground.h.t2._visible = false;
    } // end else if
    _root.mainGUI.battleBackground.h.t1._x = Math.round(_root.mainGUI.battleBackground.h.msgT.textWidth + _root.mainGUI.battleBackground.h.t1._width / 2 + 10);
    _root.mainGUI.battleBackground.h.t2._x = _root.mainGUI.battleBackground.h.t1._x + 42;
    if (_root.mainGUI.battleBackground.h.t2._visible == false)
    {
        _root.mainGUI.battleBackground.h.bg._width = _root.mainGUI.battleBackground.h.t1._x + 24;
    }
    else
    {
        _root.mainGUI.battleBackground.h.bg._width = _root.mainGUI.battleBackground.h.t2._x + 24;
    } // end else if
    _root.mainGUI.battleBackground.wildPokemonIcon.onRollOver = function ()
    {
        var _loc2 = {x: _xmouse, y: _ymouse};
        _root.mainGUI.battleBackground.globalToLocal(_loc2);
        _root.mainGUI.battleBackground.h._x = Math.round(_loc2.x) + 10;
        _root.mainGUI.battleBackground.h._y = Math.round(_loc2.y) - 5;
        _root.mainGUI.battleBackground.h.startDrag();
        _root.mainGUI.battleBackground.h._visible = true;
    };
    _root.mainGUI.battleBackground.wildPokemonIcon.onRollOut = function ()
    {
        _root.mainGUI.battleBackground.h.stopDrag();
        _root.mainGUI.battleBackground.h._visible = false;
    };
    _root.mainGUI.battleBackground.wildPokemonIcon.onReleaseOutside = function ()
    {
        _root.mainGUI.battleBackground.h.stopDrag();
        _root.mainGUI.battleBackground.h._visible = false;
    };
    fixMoveEText();
    mainGUI.battleBackground.wildPokemonIcon._visible = true;
    updateEnemyBattleX();
} // End of the function
function moveIdToName(id)
{
    if (id != undefined && id != 0)
    {
        for (n = 0; n < moveList.length; n++)
        {
            if (moveList[n][0] == id)
            {
                return (moveList[n][1]);
                break;
            } // end if
        } // end of for
    }
    else
    {
        return ("");
    } // end else if
} // End of the function
function moveNameToId(name)
{
    if (name != undefined && name != "")
    {
        for (n = 0; n < moveList.length; n++)
        {
            if (moveList[n][1] == name)
            {
                return (moveList[n][0]);
                break;
            } // end if
        } // end of for
    }
    else
    {
        return ("");
    } // end else if
} // End of the function
function grassAnimation(tempX, tempY)
{
    var _loc2 = _root.mapLayer2.getNextHighestDepth();
    _root["grassAnimation_" + _loc2] = _root.mapLayer2.attachMovie("grassAnimation", "grassAnimation_" + _loc2, _loc2);
    if (tempX == undefined || tempY == undefined)
    {
        _root["grassAnimation_" + _loc2]._x = player.tileX * 64;
        _root["grassAnimation_" + _loc2]._y = player.tileY * 64;
    }
    else
    {
        _root["grassAnimation_" + _loc2]._x = tempX * 64;
        _root["grassAnimation_" + _loc2]._y = tempY * 64;
    } // end else if
    if (smallMap == false)
    {
        _root["grassAnimation_" + _loc2]._width = _root["grassAnimation_" + _loc2]._width * 2;
        _root["grassAnimation_" + _loc2]._height = _root["grassAnimation_" + _loc2]._height * 2;
    } // end if
} // End of the function
function snowAnimation(tempX, tempY)
{
    var _loc2 = _root.mapLayer2.getNextHighestDepth();
    _root["snowAnimation_" + _loc2] = _root.mapLayer2.attachMovie("snowAnimation", "snowAnimation_" + _loc2, _loc2);
    if (tempX == undefined || tempY == undefined)
    {
        _root["snowAnimation_" + _loc2]._x = player.tileX * 64;
        _root["snowAnimation_" + _loc2]._y = player.tileY * 64;
    }
    else
    {
        _root["snowAnimation_" + _loc2]._x = tempX * 64;
        _root["snowAnimation_" + _loc2]._y = tempY * 64;
    } // end else if
    if (smallMap == false)
    {
        _root["snowAnimation_" + _loc2]._width = _root["snowAnimation_" + _loc2]._width * 2;
        _root["snowAnimation_" + _loc2]._height = _root["snowAnimation_" + _loc2]._height * 2;
    } // end if
} // End of the function
function fixEnemyHpBar(amount, targetPokemon)
{
    if (amount != undefined)
    {
        if (targetPokemon == 1 || targetPokemon == undefined)
        {
            _root.wildPokemon.startingHp = _root.wildPokemon.startingHp - amount;
            updateEnemyHpBars(1);
        }
        else if (targetPokemon == 2)
        {
            _root.wildPokemon2.startingHp = _root.wildPokemon2.startingHp - amount;
            updateEnemyHpBars(2);
        } // end else if
    }
    else
    {
        updateEnemyHpBars(1);
        updateEnemyHpBars(2);
    } // end else if
} // End of the function
function updateEnemyHpBars(barNum)
{
    if (_root.bt == "d")
    {
        if (barNum == 1)
        {
            var _loc3 = mainGUI.battleBackground.enemyHp2.wildPokemonHpBar;
            var _loc4 = mainGUI.battleBackground.enemyHp2.hpT;
            var _loc2 = _root.wildPokemon;
        }
        else
        {
            _loc3 = mainGUI.battleBackground.enemyHp2.wildPokemonHpBar2;
            _loc4 = mainGUI.battleBackground.enemyHp2.hpT2;
            _loc2 = _root.wildPokemon2;
        } // end else if
    }
    else
    {
        _loc3 = mainGUI.battleBackground.enemyHp.wildPokemonHpBar;
        _loc4 = mainGUI.battleBackground.enemyHp.hpT;
        _loc2 = _root.wildPokemon;
    } // end else if
    if (_loc2.startingHp >= _loc2.hp)
    {
        _loc3._width = 183;
        _loc3._visible = true;
        _loc2.startingHp = _loc2.hp;
    }
    else if (_loc2.startingHp <= 0)
    {
        _loc3._width = 183;
        _loc3._visible = false;
        _loc2.startingHp = 0;
    }
    else
    {
        _loc3._width = _loc2.startingHp / _loc2.hp * 183;
        _loc3._visible = true;
    } // end else if
    _loc4.htmlText = "<b>" + int(_loc2.startingHp / _loc2.hp * 100 * 100) / 100 + "%";
} // End of the function
function updateUserHpBars(barNum)
{
    if (_root.bt == "d")
    {
        if (barNum == 1)
        {
            var _loc3 = mainGUI.battleBackground.userHp2.userPokemonHpBar;
            var _loc5 = mainGUI.battleBackground.userHp2.hpT;
            var _loc4 = _root.userPokemon[activePokemon];
            var _loc2 = _root.userStartingHp;
        }
        else
        {
            _loc3 = mainGUI.battleBackground.userHp2.userPokemonHpBar2;
            _loc5 = mainGUI.battleBackground.userHp2.hpT2;
            _loc4 = _root.userPokemon[activePokemon2];
            _loc2 = _root.userStartingHp2;
        } // end else if
    }
    else
    {
        _loc3 = mainGUI.battleBackground.userHp.userPokemonHpBar;
        _loc5 = mainGUI.battleBackground.userHp.hpT;
        _loc4 = _root.userPokemon[activePokemon];
        _loc2 = _root.userStartingHp;
    } // end else if
    if (_loc2 >= _loc4.hp)
    {
        _loc3._width = 183;
        _loc3._visible = true;
        _loc2 = _loc4.hp;
    }
    else if (_loc2 <= 0)
    {
        _loc3._width = 183;
        _loc3._visible = false;
        _loc2 = 0;
    }
    else
    {
        _loc3._width = _loc2 / _loc4.hp * 183;
        _loc3._visible = true;
    } // end else if
    _loc5.htmlText = "<b>" + int(_loc2 / _loc4.hp * 100 * 100) / 100 + "%";
} // End of the function
function fixPlayerHpBar(amount)
{
    if (amount != undefined)
    {
        if (targetPokemon == 1 || targetPokemon == undefined)
        {
            _root.userStartingHp = _root.userStartingHp - amount;
            updateUserHpBars(1);
        }
        else if (targetPokemon == 2)
        {
            _root.userStartingHp2 = _root.userStartingHp2 - amount;
            updateUserHpBars(2);
        } // end else if
    }
    else
    {
        updateUserHpBars(1);
        updateUserHpBars(2);
    } // end else if
} // End of the function
function systemMessage(msg, fontColor)
{
    if (fontColor == undefined)
    {
        fontColor = "#00FF00";
    } // end if
    mainGUI.globalChatT.htmlText = mainGUI.globalChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'" + fontColor + "\'>" + msg + "</font>");
    mainGUI.localChatT.htmlText = mainGUI.localChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'" + fontColor + "\'>" + msg + "</font>");
    mainGUI.tradeChatT.htmlText = mainGUI.tradeChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'" + fontColor + "\'>" + msg + "</font>");
    mainGUI.nonEnglishChatT.htmlText = mainGUI.nonEnglishChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'" + fontColor + "\'>" + msg + "</font>");
    mainGUI.clanChatT.htmlText = mainGUI.clanChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'" + fontColor + "\'>" + msg + "</font>");
    if (customChat != "")
    {
        mainGUI.customChatT.htmlText = mainGUI.customChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'" + fontColor + "\'>" + msg + "</font>");
    } // end if
    if (checkAutoScroll() == true)
    {
        mainGUI.globalChatT.scroll = mainGUI.globalChatT.maxscroll;
        mainGUI.localChatT.scroll = mainGUI.localChatT.maxscroll;
        mainGUI.tradeChatT.scroll = mainGUI.tradeChatT.maxscroll;
        mainGUI.battleChatT.scroll = mainGUI.battleChatT.maxscroll;
        mainGUI.nonEnglishChatT.scroll = mainGUI.nonEnglishChatT.maxscroll;
        mainGUI.clanChatT.scroll = mainGUI.clanChatT.maxscroll;
        mainGUI.customChatT.scroll = mainGUI.customChatT.maxscroll;
    } // end if
    ++globalChatLength;
    ++localChatLength;
    ++tradeChatLength;
    ++nonEnglishChatLength;
    ++customChatLength;
    ++clanChatLength;
    deleteText();
} // End of the function
function serverRestartText()
{
    --serverRestartCount;
    mainGUI.serverRestartT.htmlText = "<b>Server Restart in " + serverRestartCount + " Minutes</b>";
    if (serverRestartCount <= 0)
    {
        clearInterval(serverRestartI);
    } // end if
} // End of the function
function loadIcons(target)
{
    if (userPokemon[0].name == "" || userPokemon[0].name == undefined)
    {
        target.poke1._visible = false;
    }
    else
    {
        target.poke1._visible = true;
        if (userPokemon[0].shiny == true)
        {
            target.poke1.gotoAndStop(userPokemon[0].id + shinyDifference);
        }
        else
        {
            target.poke1.gotoAndStop(userPokemon[0].id);
        } // end else if
    } // end else if
    if (userPokemon[1].name == "" || userPokemon[1].name == undefined)
    {
        target.poke2._visible = false;
    }
    else
    {
        target.poke2._visible = true;
        if (userPokemon[1].shiny == true)
        {
            target.poke2.gotoAndStop(userPokemon[1].id + shinyDifference);
        }
        else
        {
            target.poke2.gotoAndStop(userPokemon[1].id);
        } // end else if
    } // end else if
    if (userPokemon[2].name == "" || userPokemon[2].name == undefined)
    {
        target.poke3._visible = false;
    }
    else
    {
        target.poke3._visible = true;
        if (userPokemon[2].shiny == true)
        {
            target.poke3.gotoAndStop(userPokemon[2].id + shinyDifference);
        }
        else
        {
            target.poke3.gotoAndStop(userPokemon[2].id);
        } // end else if
    } // end else if
    if (userPokemon[3].name == "" || userPokemon[3].name == undefined)
    {
        target.poke4._visible = false;
    }
    else
    {
        target.poke4._visible = true;
        if (userPokemon[3].shiny == true)
        {
            target.poke4.gotoAndStop(userPokemon[3].id + shinyDifference);
        }
        else
        {
            target.poke4.gotoAndStop(userPokemon[3].id);
        } // end else if
    } // end else if
    if (userPokemon[4].name == "" || userPokemon[4].name == undefined)
    {
        target.poke5._visible = false;
    }
    else
    {
        target.poke5._visible = true;
        if (userPokemon[4].shiny == true)
        {
            target.poke5.gotoAndStop(userPokemon[4].id + shinyDifference);
        }
        else
        {
            target.poke5.gotoAndStop(userPokemon[4].id);
        } // end else if
    } // end else if
    if (userPokemon[5].name == "" || userPokemon[5].name == undefined)
    {
        target.poke6._visible = false;
    }
    else
    {
        target.poke6._visible = true;
        if (userPokemon[5].shiny == true)
        {
            target.poke6.gotoAndStop(userPokemon[5].id + shinyDifference);
        }
        else
        {
            target.poke6.gotoAndStop(userPokemon[5].id);
        } // end else if
    } // end else if
} // End of the function
function showChatRequest(fromName, chatName)
{
    canMove = false;
    guiUp = true;
    chatRequest = _root.attachMovie("chatRequest", "chatRequest", _root.getNextHighestDepth());
    chatRequest.msgT.htmlText = "<b>" + fromName + " has invited you to join the " + chatName + " chat.";
    chatRequest._x = newWidth / 2;
    chatRequest._y = newHeight / 2;
    chatRequest.yesB.chatName = chatName;
    chatRequest.yesB.onRelease = function ()
    {
        if (_root.isBusy == false)
        {
            getTimestamp("acceptChatRequest", this.chatName);
            removeMovieClip (chatRequest);
            guiUp = false;
            canMove = true;
        } // end if
    };
    chatRequest.yesB.onPress = function ()
    {
        this.gotoAndStop("click");
    };
    chatRequest.yesB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    chatRequest.yesB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    chatRequest.noB.fromName = fromName;
    chatRequest.noB.onRelease = function ()
    {
        if (_root.isBusy == false)
        {
            canMove = true;
            guiUp = false;
            getTimestamp("declineChatRequest", this.fromName);
            removeMovieClip (chatRequest);
        } // end if
    };
    chatRequest.noB.onPress = function ()
    {
        this.gotoAndStop("click");
    };
    chatRequest.noB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    chatRequest.noB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    chatRequest.exitB.fromName = fromName;
    chatRequest.exitB.onRelease = function ()
    {
        canMove = true;
        guiUp = false;
        getTimestamp("declineChatRequest", this.fromName);
        removeMovieClip (chatRequest);
    };
    chatRequest.exitB.onPress = function ()
    {
        this.gotoAndStop("click");
    };
    chatRequest.exitB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    chatRequest.exitB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
} // End of the function
function showBattleRequest(resObj)
{
    canMove = false;
    guiUp = true;
    battleRequest = _root.attachMovie("battleRequest", "battleRequest", _root.getNextHighestDepth());
    if (resObj[5] != undefined && resObj[5] != "")
    {
        battleRequest.msgT.htmlText = "<b>" + resObj[2] + " would like to start a $" + format(resObj[5]) + " wager battle with you.";
        battleRequest.levelT.htmlText = "";
        battleRequest.yesB.wager = resObj[5];
    }
    else
    {
        if (resObj[6] != "d")
        {
            battleRequest.msgT.htmlText = "<b>" + resObj[2] + " would like to battle you.";
        }
        else
        {
            battleRequest.msgT.htmlText = "<b>" + resObj[2] + " would like to double battle you.";
        } // end else if
        if (resObj[4] != undefined && resObj[4] != "")
        {
            battleRequest.levelT.htmlText = "<b>Set Level " + resObj[4];
        }
        else
        {
            battleRequest.levelT.htmlText = "<b>Highest Level: " + resObj[3];
        } // end else if
    } // end else if
    battleRequest._x = newWidth / 2;
    battleRequest._y = newHeight / 2;
    _root.requestTime = getTimer();
    battleRequest.yesB.onRelease = function ()
    {
        if (this.wager != undefined)
        {
            if (_root.confirmBox._x == undefined)
            {
                confirmBox = _root.attachMovie("confirmBox", "confirmBox", _root.getNextHighestDepth());
                confirmBox._x = newWidth / 2;
                confirmBox._y = newHeight / 2;
                confirmBox.msgT.htmlText = "<b>Are you sure you want to start a $" + format(this.wager) + " wager battle?";
                assignMouseEvents(confirmBox.confirmB);
                assignMouseEvents(confirmBox.cancelB);
                assignMouseEvents(confirmBox.exitB);
                confirmBox.confirmB.onRelease = function ()
                {
                    delete _root.requestTime;
                    if (battle == false)
                    {
                        getTimestamp("acceptBattle");
                    }
                    else
                    {
                        systemMessage("You are already in a battle!");
                    } // end else if
                    removeMovieClip (confirmBox);
                    removeMovieClip (battleRequest);
                    guiUp = false;
                };
                confirmBox.cancelB.onRelease = function ()
                {
                    _root.requestTime2 = getTimer() - _root.requestTime;
                    checkRequestTime();
                    canMove = true;
                    guiUp = false;
                    getTimestamp("declineBattle");
                    removeMovieClip (confirmBox);
                    removeMovieClip (battleRequest);
                };
                confirmBox.exitB.onRelease = function ()
                {
                    _root.requestTime2 = getTimer() - _root.requestTime;
                    checkRequestTime();
                    canMove = true;
                    guiUp = false;
                    getTimestamp("declineBattle");
                    removeMovieClip (confirmBox);
                    removeMovieClip (battleRequest);
                };
            } // end if
        }
        else
        {
            delete _root.requestTime;
            if (battle == false)
            {
                getTimestamp("acceptBattle");
            }
            else
            {
                systemMessage("You are already in a battle!");
            } // end else if
            removeMovieClip (battleRequest);
            guiUp = false;
        } // end else if
    };
    battleRequest.yesB.onPress = function ()
    {
        this.gotoAndStop("click");
    };
    battleRequest.yesB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    battleRequest.yesB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    battleRequest.noB.onRelease = function ()
    {
        _root.requestTime2 = getTimer() - _root.requestTime;
        checkRequestTime();
        canMove = true;
        guiUp = false;
        getTimestamp("declineBattle");
        removeMovieClip (battleRequest);
        removeMovieClip (confirmBox);
    };
    battleRequest.noB.onPress = function ()
    {
        this.gotoAndStop("click");
    };
    battleRequest.noB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    battleRequest.noB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    battleRequest.exitB.onRelease = function ()
    {
        _root.requestTime2 = getTimer() - _root.requestTime;
        checkRequestTime();
        canMove = true;
        guiUp = false;
        getTimestamp("declineBattle");
        removeMovieClip (battleRequest);
        removeMovieClip (confirmBox);
    };
    battleRequest.exitB.onPress = function ()
    {
        this.gotoAndStop("click");
    };
    battleRequest.exitB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    battleRequest.exitB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
} // End of the function
function checkRequestTime()
{
    delete _root.requestTime;
    if (_root.requestTime2 >= 600000)
    {
        if (_root.movementPresses >= 500 || _root.mouseClicks >= 500)
        {
            getTimestamp("b142", _root.requestTime2, _root.movementPresses, _root.mouseClicks);
        } // end if
    } // end if
    _root.movementPresses = 0;
    _root.mouseClicks = 0;
} // End of the function
function showTradeRequest(fromName)
{
    canMove = false;
    guiUp = true;
    tradeRequest = _root.attachMovie("tradeRequest", "tradeRequest", _root.getNextHighestDepth());
    tradeRequest.msgT.htmlText = "<b>" + fromName + " would like to trade with you.";
    tradeRequest._x = newWidth / 2;
    tradeRequest._y = newHeight / 2;
    _root.requestTime = getTimer();
    tradeRequest.yesB.onRelease = function ()
    {
        delete _root.requestTime;
        if (battle == false && trading == false)
        {
            trading = true;
            getTimestamp("acceptTrade");
        }
        else
        {
            systemMessage("You are busy.");
        } // end else if
        removeMovieClip (tradeRequest);
    };
    tradeRequest.yesB.onPress = function ()
    {
        this.gotoAndStop("click");
    };
    tradeRequest.yesB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    tradeRequest.yesB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    tradeRequest.noB.onRelease = function ()
    {
        _root.requestTime2 = getTimer() - _root.requestTime;
        checkRequestTime();
        guiUp = false;
        if (_root.battle == false)
        {
            canMove = true;
        } // end if
        Selection.setFocus(null);
        trading = false;
        buttonClicked = false;
        getTimestamp("declineTrade");
        removeMovieClip (tradeRequest);
    };
    tradeRequest.noB.onPress = function ()
    {
        this.gotoAndStop("click");
    };
    tradeRequest.noB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    tradeRequest.noB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    tradeRequest.exitB.onRelease = function ()
    {
        _root.requestTime2 = getTimer() - _root.requestTime;
        checkRequestTime();
        guiUp = false;
        canMove = true;
        Selection.setFocus(null);
        trading = false;
        buttonClicked = false;
        getTimestamp("declineTrade");
        removeMovieClip (tradeRequest);
    };
    tradeRequest.exitB.onPress = function ()
    {
        this.gotoAndStop("click");
    };
    tradeRequest.exitB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    tradeRequest.exitB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
} // End of the function
function showClanInvite(fromName, fromClan)
{
    canMove = false;
    guiUp = true;
    clanInviteRequest = _root.attachMovie("clanInviteRequest", "clanInviteRequest", _root.getNextHighestDepth());
    clanInviteRequest.msgT.htmlText = "<b>" + fromName + " is inviting you to join " + fromClan + ".";
    clanInviteRequest._x = newWidth / 2;
    clanInviteRequest._y = newHeight / 2;
    clanInviteRequest.yesB.onRelease = function ()
    {
        canMove = true;
        guiUp = false;
        getTimestamp("acceptClanInvite");
        removeMovieClip (clanInviteRequest);
    };
    clanInviteRequest.yesB.onPress = function ()
    {
        this.gotoAndStop("click");
    };
    clanInviteRequest.yesB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    clanInviteRequest.yesB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    clanInviteRequest.noB.onRelease = function ()
    {
        canMove = true;
        guiUp = false;
        getTimestamp("declineClanInvite");
        removeMovieClip (clanInviteRequest);
    };
    clanInviteRequest.noB.onPress = function ()
    {
        this.gotoAndStop("click");
    };
    clanInviteRequest.noB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    clanInviteRequest.noB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    clanInviteRequest.exitB.onRelease = function ()
    {
        canMove = true;
        guiUp = false;
        getTimestamp("declineClanInvite");
        removeMovieClip (clanInviteRequest);
    };
    clanInviteRequest.exitB.onPress = function ()
    {
        this.gotoAndStop("click");
    };
    clanInviteRequest.exitB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    clanInviteRequest.exitB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
} // End of the function
function showTrade(fromName, level1, level2)
{
    canMove = false;
    guiUp = true;
    trading = true;
    tradeBox = mainGUI.attachMovie("tradeBox", "tradeBox", mainGUI.getNextHighestDepth());
    tradeBox.dark1._visible = false;
    tradeBox.dark2._visible = false;
    tradeBox.dark3._visible = false;
    tradeBox.dark4._visible = false;
    tradeBox.tradeT.htmlText = "<b>Trading with " + fromName;
    tradeBox.name1T.htmlText = "<b>" + _root.username;
    tradeBox.name2T.htmlText = "<b>" + fromName;
    tradeBox.maxLevel1T.htmlText = "<b>" + level1;
    tradeBox.maxLevel2T.htmlText = "<b>" + level2;
    tradeBox.cashBoxUp = false;
    if (mainGUI.inventory._visible == false)
    {
        mainGUI.inventory._visible = true;
        mainGUI.inventoryB.gotoAndStop("click");
    } // end if
    tradeBox.exitB.onRelease = function ()
    {
        if (buttonClicked == false && tradeBox.cashBoxUp != true && _root.isBusy == false)
        {
            buttonClicked = true;
            getTimestamp("cancelTrade");
            removeMovieClip (tradeBox);
            canMove = true;
            guiUp = false;
            trading = false;
            buttonClicked = false;
            Selection.setFocus(null);
        } // end if
    };
    tradeBox.exitB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    tradeBox.exitB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    tradeBox.exitB.onPress = function ()
    {
        this.gotoAndStop("click");
    };
    tradeBox.confirmB.onRelease = function ()
    {
        if (this._currentframe != 4 && isBusy == false)
        {
            this.gotoAndStop("confirmed");
            tradeBox.cashB.gotoAndStop("confirmed");
            tradeBox.dark1._visible = true;
            tradeBox.dark2._visible = true;
            getTimestamp("confirmTrade");
        } // end if
    };
    tradeBox.confirmB.onPress = function ()
    {
        if (this._currentframe != 4)
        {
            this.gotoAndStop("click");
        } // end if
    };
    tradeBox.confirmB.onRollOver = function ()
    {
        if (this._currentframe != 4)
        {
            this.gotoAndStop("hover");
        } // end if
    };
    tradeBox.confirmB.onRollOut = function ()
    {
        if (this._currentframe != 4)
        {
            this.gotoAndStop(1);
        } // end if
    };
    tradeBox.cashB.onRelease = function ()
    {
        if (tradeBox.cashBoxUp == false && this._currentframe != 4)
        {
            this.gotoAndStop(1);
            tradeBox.cashBoxUp = true;
            darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
            darkScreen._width = Stage.width;
            darkScreen._height = Stage.height;
            darkScreen._alpha = 70;
            darkScreen._x = newWidth / 2;
            darkScreen._y = newHeight / 2;
            cashBox = _root.attachMovie("cashBox", "cashBox", _root.getNextHighestDepth());
            cashBox._x = 540;
            cashBox._y = 290;
            cashBox.moneyT.restrict = "0-9";
            Selection.setFocus(_root.cashBox.moneyT);
            cashBox.confirmB.onRelease = function ()
            {
                if (isBusy == false && cashBox.moneyT.text != "")
                {
                    if (Number(cashBox.moneyT.text) <= money)
                    {
                        Selection.setFocus(null);
                        getTimestamp("addCash", Number(cashBox.moneyT.text));
                        tradeBox.money1T.htmlText = "<b>" + format(Number(cashBox.moneyT.text));
                        removeMovieClip (cashBox);
                        removeMovieClip (darkScreen);
                        tradeBox.cashBoxUp = false;
                    }
                    else
                    {
                        Selection.setFocus(null);
                        cashBox.moneyT.text = money;
                    } // end if
                } // end else if
            };
            cashBox.cancelB.onRelease = function ()
            {
                tradeBox.cashBoxUp = false;
                removeMovieClip (cashBox);
                removeMovieClip (darkScreen);
            };
            cashBox.exitB.onRelease = function ()
            {
                tradeBox.cashBoxUp = false;
                removeMovieClip (cashBox);
                removeMovieClip (darkScreen);
            };
            assignMouseEvents(cashBox.confirmB);
            assignMouseEvents(cashBox.cancelB);
            assignMouseEvents(cashBox.exitB);
        } // end if
    };
    tradeBox.cashB.onPress = function ()
    {
        if (this._currentframe != 4)
        {
            this.gotoAndStop("click");
        } // end if
    };
    tradeBox.cashB.onRollOver = function ()
    {
        if (this._currentframe != 4)
        {
            this.gotoAndStop("hover");
        } // end if
    };
    tradeBox.cashB.onRollOut = function ()
    {
        if (this._currentframe != 4)
        {
            this.gotoAndStop(1);
        } // end if
    };
    addDraggableGUI(tradeBox);
    for (var _loc3 = 0; _loc3 < 16; ++_loc3)
    {
        tradeBox["i" + (_loc3 + 1)].itemNum = _loc3;
        tradeBox["i" + (_loc3 + 1)].onRelease = function ()
        {
            if (this._currentframe != 1 && isBusy == false)
            {
                getTimestamp("removeTradeItem", this.itemNum);
            } // end if
        };
    } // end of for
} // End of the function
function showEvolve(slot, id)
{
    _root.evolving = true;
    darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
    darkScreen._width = Stage.width;
    darkScreen._height = Stage.height;
    darkScreen._alpha = 70;
    darkScreen._x = newWidth / 2;
    darkScreen._y = newHeight / 2;
    evolveUI = _root.attachMovie("askEvolve", "evolveUI", _root.getNextHighestDepth());
    if (_root.battle == true)
    {
        evolveUI._visible = false;
        darkScreen._visible = false;
    }
    else
    {
        canMove = false;
    } // end else if
    evolveUI.p1.gotoAndStop(userPokemon[slot].id);
    evolveUI.p2.gotoAndStop(id);
    evolveUI.messageT.htmlText = "<b>" + userPokemon[slot].name + " is evolving!";
    evolveUI._x = newWidth / 2;
    evolveUI._y = 279;
    evolveUI.yesB.onRelease = function ()
    {
        this.gotoAndStop(1);
        if (isBusy == false)
        {
            getTimestamp("acceptEvolve");
        } // end if
    };
    evolveUI.yesB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    evolveUI.yesB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    evolveUI.yesB.onPress = function ()
    {
        this.gotoAndStop("click");
    };
    evolveUI.noB.onRelease = function ()
    {
        this.gotoAndStop(1);
        if (isBusy == false)
        {
            getTimestamp("declineEvolve");
        } // end if
    };
    evolveUI.noB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    evolveUI.noB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    evolveUI.noB.onPress = function ()
    {
        this.gotoAndStop("click");
    };
} // End of the function
function sendFish(rodType)
{
    if (_root.isBusy == false && _root.battle == false && _root.trading == false && _root.mainGUI.battleBackground._visible == false && _root.updatedMap == true)
    {
        if (!(battleRequest instanceof MovieClip))
        {
            getTimestamp("fish", rodType);
        }
        else
        {
            systemMessage("Please close your battle request window before fishing again.");
        } // end if
    } // end else if
} // End of the function
function sendMine(pickaxeType)
{
    if (_root.isBusy == false && _root.battle == false && _root.trading == false && _root.mainGUI.battleBackground._visible == false && _root.updatedMap == true)
    {
        if (!(battleRequest instanceof MovieClip))
        {
            getTimestamp("mine", pickaxeType);
        }
        else
        {
            systemMessage("Please close your battle request window before mining again.");
        } // end if
    } // end else if
} // End of the function
function canFishOnMap()
{
    if (map == "Safari Zone" || map == "Safari Zone East" || map == "Safari Zone West" || map == "Safari Zone North")
    {
        if (fishingLevel < 15)
        {
            systemMessage("You need at least Lv 15 fishing to fish in these waters.");
            return (false);
        } // end if
    }
    else if (map == "Turtle Cove")
    {
        if (fishingLevel < 20)
        {
            systemMessage("You need at least Lv 20 fishing to fish in these waters.");
            return (false);
        } // end if
    }
    else if (map == "Cerulean Cave F4" || map == "Water Labyrinth")
    {
        if (fishingLevel < 25)
        {
            systemMessage("You need at least Lv 25 fishing to fish in these waters.");
            return (false);
        } // end if
    }
    else if (map == "Toto Cave" || map == "Whirl Islands")
    {
        if (fishingLevel < 30)
        {
            systemMessage("You need at least Lv 30 fishing to fish in these waters.");
            return (false);
        } // end if
    }
    else if (map.indexOf("Johto Safari Zone") != -1 && map != "Johto Safari Zone Entrance" && map != "Johto Safari Zone")
    {
        if (fishingLevel < 35)
        {
            systemMessage("You need at least Lv 35 fishing to fish in these waters.");
            return (false);
        } // end if
    }
    else if (map == "Dragons Den")
    {
        if (fishingLevel < 40)
        {
            systemMessage("You need at least Lv 40 fishing to fish in these waters.");
            return (false);
        } // end if
    }
    else if (map.indexOf("Altering Cave") != -1)
    {
        if (fishingLevel < 45)
        {
            systemMessage("You need at least Lv 45 fishing to fish in these waters.");
            return (false);
        } // end if
    }
    else if (map == "Hoenn Safari Zone")
    {
        if (fishingLevel < 50)
        {
            systemMessage("You need at least Lv 50 fishing to fish in these waters.");
            return (false);
        } // end if
    }
    else if (map == "Ancient Cavern R2" || map == "Ancient Cavern R4")
    {
        if (fishingLevel < 55)
        {
            systemMessage("You need at least Lv 55 fishing to fish in these waters.");
            return (false);
        } // end if
    }
    else if (map.indexOf("Sinnoh Safari Zone") != -1 && map != "Sinnoh Safari Zone Entrance")
    {
        if (fishingLevel < 60)
        {
            systemMessage("You need at least Lv 60 fishing to fish in these waters.");
            return (false);
        } // end if
    }
    else if (map == "Fight Area" || map == "Resort Area" || map == "Survival Area" || map == "Route 225" || map == "Route 226" || map == "Route 227" || map == "Route 228" || map == "Route 229" || map == "Route 230" || map == "Full Moon Island" || map == "New Moon Island")
    {
        if (fishingLevel < 70)
        {
            systemMessage("You need at least Lv 70 fishing to fish in these waters.");
            return (false);
        } // end if
    }
    else if (map == "Ancient Dungeon")
    {
        if (fishingLevel < 80)
        {
            systemMessage("You need at least Lv 80 fishing to fish in these waters.");
            return (false);
        } // end if
    }
    else if (map == "Mossy Cave")
    {
        if (fishingLevel < 75)
        {
            systemMessage("You need at least Lv 75 fishing to fish in these waters.");
            return (false);
        } // end if
    }
    else if (map == "Water Temple")
    {
        if (fishingLevel < 80)
        {
            systemMessage("You need at least Lv 80 fishing to fish in these waters.");
            return (false);
        } // end if
    }
    else if (map.indexOf("Clan Wars") != -1)
    {
        systemMessage("You can\'t fish on this map, go battle some people!");
        return (false);
    } // end else if
    return (true);
} // End of the function
function checkFish(invNum, silent)
{
    if (silent == undefined)
    {
        silent = false;
    } // end if
    if (badges.length >= 1)
    {
        if (battle == false)
        {
            clearInterval(_root.fishingI);
            if (dir == "up")
            {
                if (collisionArray[player.tileY - 1][player.tileX] == 2 || collisionArray[player.tileY - 1][player.tileX] == 18 || collisionArray[player.tileY - 1][player.tileX] == 24 || collisionArray[player.tileY - 1][player.tileX] == 25 || collisionArray[player.tileY - 1][player.tileX] == 12 || collisionArray[player.tileY - 1][player.tileX] == 15)
                {
                    if (canFishOnMap())
                    {
                        fishing = true;
                        var _loc4 = 2100 - fishingLevel * 10;
                        _root.fishingI = setInterval(sendFish, _loc4, inventory[invNum][0]);
                        if (silent != true)
                        {
                            systemMessage("You cast your line into the water. (" + inventory[invNum][0] + ")");
                            startCustomAnimation(player, 200, [[9, 1], [10, 1], [11, 1]]);
                            getTimestamp("sendFishAnimation");
                        } // end if
                    } // end if
                }
                else if (silent != true)
                {
                    systemMessage("You need to be facing water to fish!");
                } // end else if
            }
            else if (dir == "down")
            {
                if (collisionArray[player.tileY + 1][player.tileX] == 2 || collisionArray[player.tileY + 1][player.tileX] == 18 || collisionArray[player.tileY + 1][player.tileX] == 24 || collisionArray[player.tileY + 1][player.tileX] == 25 || collisionArray[player.tileY + 1][player.tileX] == 12 || collisionArray[player.tileY + 1][player.tileX] == 15)
                {
                    if (canFishOnMap())
                    {
                        fishing = true;
                        _loc4 = 2100 - fishingLevel * 10;
                        _root.fishingI = setInterval(sendFish, _loc4, inventory[invNum][0]);
                        if (silent != true)
                        {
                            systemMessage("You cast your line into the water. (" + inventory[invNum][0] + ")");
                            startCustomAnimation(player, 200, [[9, 0], [10, 0], [11, 0]]);
                            getTimestamp("sendFishAnimation");
                        } // end if
                    } // end if
                }
                else if (silent != true)
                {
                    systemMessage("You need to be facing water to fish!");
                } // end else if
            }
            else if (dir == "left")
            {
                if (collisionArray[player.tileY][player.tileX - 1] == 2 || collisionArray[player.tileY][player.tileX - 1] == 18 || collisionArray[player.tileY][player.tileX - 1] == 24 || collisionArray[player.tileY][player.tileX - 1] == 25 || collisionArray[player.tileY][player.tileX - 1] == 12 || collisionArray[player.tileY][player.tileX - 1] == 15)
                {
                    if (canFishOnMap())
                    {
                        fishing = true;
                        _loc4 = 2100 - fishingLevel * 10;
                        _root.fishingI = setInterval(sendFish, _loc4, inventory[invNum][0]);
                        if (silent != true)
                        {
                            systemMessage("You cast your line into the water. (" + inventory[invNum][0] + ")");
                            startCustomAnimation(player, 200, [[9, 2], [10, 2], [11, 2]]);
                            getTimestamp("sendFishAnimation");
                        } // end if
                    } // end if
                }
                else if (silent != true)
                {
                    systemMessage("You need to be facing water to fish!");
                } // end else if
            }
            else if (dir == "right")
            {
                if (collisionArray[player.tileY][player.tileX + 1] == 2 || collisionArray[player.tileY][player.tileX + 1] == 18 || collisionArray[player.tileY][player.tileX + 1] == 24 || collisionArray[player.tileY][player.tileX + 1] == 25 || collisionArray[player.tileY][player.tileX + 1] == 12 || collisionArray[player.tileY][player.tileX + 1] == 15)
                {
                    if (canFishOnMap())
                    {
                        fishing = true;
                        _loc4 = 2100 - fishingLevel * 10;
                        _root.fishingI = setInterval(sendFish, _loc4, inventory[invNum][0]);
                        if (silent != true)
                        {
                            systemMessage("You cast your line into the water. (" + inventory[invNum][0] + ")");
                            startCustomAnimation(player, 200, [[9, 3], [10, 3], [11, 3]]);
                            getTimestamp("sendFishAnimation");
                        } // end if
                    } // end if
                }
                else if (silent != true)
                {
                    systemMessage("You need to be facing water to fish!");
                } // end else if
            } // end else if
        } // end else if
    }
    else if (silent != true)
    {
        systemMessage("You need the Boulder Badge before fishing.");
    } // end else if
} // End of the function
function checkMine(invNum, silent)
{
    if (silent == undefined)
    {
        silent = false;
    } // end if
    if (battle == false)
    {
        var _loc2 = true;
        if (_root.currentRock[2] == "Red")
        {
            if (miningLevel < 1)
            {
                systemMessage("You need a mining level of 1 to mine that.");
                _loc2 = false;
            } // end if
        }
        else if (_root.currentRock[2] == "Blue")
        {
            if (miningLevel < 10)
            {
                systemMessage("You need a mining level of 10 to mine that.");
                _loc2 = false;
            } // end if
        }
        else if (_root.currentRock[2] == "Green")
        {
            if (miningLevel < 20)
            {
                systemMessage("You need a mining level of 20 to mine that.");
                _loc2 = false;
            } // end if
        }
        else if (_root.currentRock[2] == "Prism")
        {
            if (miningLevel < 35)
            {
                systemMessage("You need a mining level of 35 to mine that.");
                _loc2 = false;
            } // end if
        }
        else if (_root.currentRock[2] == "Pale")
        {
            if (miningLevel < 50)
            {
                systemMessage("You need a mining level of 50 to mine that.");
                _loc2 = false;
            } // end if
        }
        else if (_root.currentRock[2] == "Dark")
        {
            if (miningLevel < 65)
            {
                systemMessage("You need a mining level of 65 to mine that.");
                _loc2 = false;
            } // end if
        }
        else if (_root.currentRock[2] == "Rainbow")
        {
            if (miningLevel < 80)
            {
                systemMessage("You need a mining level of 80 to mine that.");
                _loc2 = false;
            } // end else if
        } // end else if
        if (_loc2)
        {
            clearInterval(_root.miningI);
            _root.mining = true;
            var _loc3 = 2500 - miningLevel * 12;
            _root.miningI = setInterval(sendMine, _loc3, inventory[invNum][0]);
            if (silent != true)
            {
                if (dir == "up")
                {
                    startCustomAnimation(player, 200, [[9, 1], [10, 1], [11, 1], [11, 1]], 1, true);
                }
                else if (dir == "down")
                {
                    startCustomAnimation(player, 200, [[9, 0], [10, 0], [11, 0], [11, 0]], 1, true);
                }
                else if (dir == "left")
                {
                    startCustomAnimation(player, 200, [[9, 2], [10, 2], [11, 2], [11, 2]], 1, true);
                }
                else
                {
                    startCustomAnimation(player, 200, [[9, 3], [10, 3], [11, 3], [11, 3]], 1, true);
                } // end else if
                getTimestamp("sendMineAnimation");
            } // end if
        } // end if
    } // end if
} // End of the function
function startCustomAnimation(target, speed, frameArray, overlayNum, repeat)
{
    clearInterval(_root["animationI_" + target.name]);
    target.aCounter = 0;
    _root["animationI_" + target.name] = setInterval(handleCustomAnimation, speed, target, frameArray, overlayNum, repeat);
} // End of the function
function handleCustomAnimation(target, frameArray, overlayNum, repeat)
{
    if (target.aCounter < frameArray.length)
    {
        drawPlayer(target, frameArray[target.aCounter][0], frameArray[target.aCounter][1], overlayNum);
        ++target.aCounter;
    }
    else if (repeat != true)
    {
        clearInterval(_root["animationI_" + target.name]);
        delete target.aCounter;
    }
    else
    {
        drawPlayer(target, frameArray[0][0], frameArray[0][1], overlayNum);
        target.aCounter = 1;
    } // end else if
} // End of the function
function unMute()
{
    muted = false;
    encryptedMuted = calcMD5(muted + _root.kg1() + username);
    clearInterval(unMuteI);
    systemMessage("You have been unmuted.");
} // End of the function
function useInventoryItem(n)
{
    if (learnMoves == false && mainGUI.pokedex._visible != true)
    {
        if (trading == false && battle == false && darkScreen._x == undefined)
        {
            if (n.indexOf("Rod") != -1 && n.indexOf("Rod") != undefined && moving == false)
            {
                if (fishing == false)
                {
                    if (typing == false && moving == false)
                    {
                        if (n == "Master Rod")
                        {
                            if (fishingLevel >= 100)
                            {
                                fishItemNum = getItemPos("Master Rod");
                                checkFish(fishItemNum);
                            }
                            else
                            {
                                systemMessage("You need Lv 100 fishing to use a Master Rod!");
                            } // end else if
                        }
                        else if (n == "AFK Rod")
                        {
                            if (fishingLevel >= 50)
                            {
                                fishItemNum = getItemPos("AFK Rod");
                                checkFish(fishItemNum);
                            }
                            else
                            {
                                systemMessage("You need Lv 50 fishing to use an AFK Rod!");
                            } // end else if
                        }
                        else if (n == "Steel Rod")
                        {
                            if (fishingLevel >= 50)
                            {
                                fishItemNum = getItemPos("Steel Rod");
                                checkFish(fishItemNum);
                            }
                            else
                            {
                                systemMessage("You need Lv 50 fishing to use a Steel Rod!");
                            } // end else if
                        }
                        else if (n == "Super Rod")
                        {
                            if (fishingLevel >= 20)
                            {
                                fishItemNum = getItemPos("Super Rod");
                                checkFish(fishItemNum);
                            }
                            else
                            {
                                systemMessage("You need Lv 20 fishing to use a Super Rod!");
                            } // end else if
                        }
                        else if (n == "Good Rod")
                        {
                            if (fishingLevel >= 5)
                            {
                                fishItemNum = getItemPos("Good Rod");
                                checkFish(fishItemNum);
                            }
                            else
                            {
                                systemMessage("You need Lv 5 fishing to use a Good Rod!");
                            } // end else if
                        }
                        else if (n == "Old Rod")
                        {
                            fishItemNum = getItemPos("Old Rod");
                            checkFish(fishItemNum);
                        } // end else if
                    } // end else if
                }
                else
                {
                    stopFishing();
                } // end else if
            }
            else if (n == "Escape Rope")
            {
                if (guiUp != true)
                {
                    canMove = false;
                    guiUp = true;
                    darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                    darkScreen._width = Stage.width;
                    darkScreen._height = Stage.height;
                    darkScreen._alpha = 70;
                    darkScreen._x = newWidth / 2;
                    darkScreen._y = newHeight / 2;
                    confirmBox = _root.attachMovie("merchantBox", "confirmBox", _root.getNextHighestDepth());
                    confirmBox._x = newWidth / 2;
                    confirmBox._y = newHeight / 2;
                    confirmBox.i.gotoAndStop(n);
                    confirmBox.nameT.htmlText = "<b>" + n;
                    confirmBox.msgT.htmlText = "<b>Use the " + n + "? (" + _root.nearestPokecenter + ")";
                    confirmBox.yesB.n = n;
                    confirmBox.yesB.onRelease = function ()
                    {
                        if (isBusy == false)
                        {
                            getTimestamp("useItem2", 0, this.n);
                            removeMovieClip (confirmBox);
                            removeMovieClip (darkScreen);
                            canMove = true;
                            guiUp = false;
                        } // end if
                    };
                    confirmBox.noB.onRelease = function ()
                    {
                        canMove = true;
                        guiUp = false;
                        removeMovieClip (confirmBox);
                        removeMovieClip (darkScreen);
                    };
                }
                else
                {
                    systemMessage("Please finish what you are doing before using an escape rope.");
                } // end else if
            }
            else if (n == "Mystery Box" || n == "TM Box" || n == "Evolutional Stone Box")
            {
                if (confirmBox._x == undefined)
                {
                    canMove = false;
                    guiUp = true;
                    _root.lootBoxType = n;
                    darkScreen = _root.mainGUI.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                    darkScreen._width = Stage.width;
                    darkScreen._height = Stage.height;
                    darkScreen._alpha = 70;
                    confirmBox = _root.mainGUI.attachMovie("lootboxUI", "confirmBox", _root.getNextHighestDepth());
                    confirmBox.titleT.htmlText = "<b>" + n;
                    if (guaranteedItemData[n][0].indexOf("TM") == -1)
                    {
                        confirmBox.i.gotoAndStop(guaranteedItemData[n][0]);
                    }
                    else
                    {
                        confirmBox.i.gotoAndStop("tmhm");
                    } // end else if
                    updateGuaranteedItemText(n);
                    var _loc6 = getInventoryAmount(n);
                    if (_loc6 > 5)
                    {
                        _loc6 = 5;
                    } // end if
                    for (var _loc4 = 0; _loc4 < _loc6; ++_loc4)
                    {
                        confirmBox["box" + (_loc4 + 1)].gotoAndStop(n);
                        confirmBox["box" + (_loc4 + 1)].n = n;
                        confirmBox["box" + (_loc4 + 1)].num = _loc4 + 1;
                        confirmBox["box" + (_loc4 + 1)].onRelease = function ()
                        {
                            if (isBusy == false && this.n != 0)
                            {
                                getTimestamp("useItem2", 0, this.n);
                                this.n = 0;
                                _root.lootBoxNum = this.num;
                            } // end if
                        };
                        confirmBox["box" + (_loc4 + 1)]._visible = true;
                    } // end of for
                    confirmBox.exitB.onRelease = function ()
                    {
                        canMove = true;
                        guiUp = false;
                        removeMovieClip (confirmBox);
                        removeMovieClip (darkScreen);
                    };
                    assignMouseEvents(confirmBox.exitB);
                    confirmBox.i.n = guaranteedItemData[n][0];
                    confirmBox.i.onRollOver = function ()
                    {
                        var _loc2 = {x: _xmouse, y: _ymouse};
                        this._parent.globalToLocal(_loc2);
                        confirmBox.hoverText._x = _loc2.x + 10;
                        confirmBox.hoverText._y = _loc2.y;
                        confirmBox.hoverText.nameT.htmlText = "<b>" + this.n;
                        confirmBox.hoverText.startDrag();
                        confirmBox.hoverText._visible = true;
                    };
                    confirmBox.i.onRollOut = confirmBox.i.onReleaseOutside = function ()
                    {
                        confirmBox.hoverText.stopDrag();
                        confirmBox.hoverText._visible = false;
                    };
                } // end if
            }
            else if (n == "Beautiful Christmas Present" || n == "Pokemon Box" || n == "Yveltal Egg" || n == "Giratina Egg" || n == "Common Egg" || n == "Uncommon Egg" || n == "Rare Egg" || n == "Very Rare Egg" || n == "Extremely Rare Egg" || n == "Articuno Egg" || n == "Zapdos Egg" || n == "Moltres Egg" || n == "Raikou Egg" || n == "Entei Egg" || n == "Suicune Egg" || n == "Latios Egg" || n == "Latias Egg" || n == "Azelf Egg" || n == "Mesprit Egg" || n == "Uxie Egg" || n == "Cresselia Egg" || n == "Heatran Egg" || n == "Regigigas Egg" || n == "Mew Egg" || n == "Darkrai Egg" || n == "Shaymin Egg" || n == "Cherish Ball" || n == "Honey" || n == "Item Bomb (Enhanced)" || n == "Portable PC" || n == "30 Day GM Ticket (untradeable)" || n == "Master Shop Ticket" || n == "Altering Cave Ticket" || n == "1 Year GM Ticket" || n == "7 Day GM Ticket (untradeable)" || n == "3 Day GM Ticket (untradeable)" || n == "1 Day GM Ticket (untradeable)" || n == "1 Day GM Ticket" || n == "7 Day GM Ticket" || n == "30 Day GM Ticket" || n == "Easter Egg" || n == "World Blessing" || n == "World Blessing (Enhanced)" || n == "Drop Rate Blessing" || n == "Christmas Blessing" || n == "Repel" || n == "Max Repel" || n == "Cosmetic Box" || n == "Decorative Box" || n == "Ice Pokemon Box" || n == "Bike Voucher" || n == "Halloween Blessing" || n == "Item Bomb" || n == "Trick Or Treat Bag" || n == "Water Balloon" || n == "Strange Liquid" || n == "Appearance Reset" || n == "Appearance Reset (untradeable)")
            {
                canMove = false;
                guiUp = true;
                darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                darkScreen._width = Stage.width;
                darkScreen._height = Stage.height;
                darkScreen._alpha = 70;
                darkScreen._x = newWidth / 2;
                darkScreen._y = newHeight / 2;
                confirmBox = _root.attachMovie("merchantBox", "confirmBox", _root.getNextHighestDepth());
                confirmBox._x = newWidth / 2;
                confirmBox._y = newHeight / 2;
                confirmBox.i.gotoAndStop(n);
                confirmBox.nameT.htmlText = "<b>" + n;
                confirmBox.msgT.htmlText = "<b>Use the " + n + "?";
                confirmBox.yesB.n = n;
                confirmBox.yesB.onRelease = function ()
                {
                    if (isBusy == false)
                    {
                        getTimestamp("useItem2", 0, this.n);
                        removeMovieClip (confirmBox);
                        removeMovieClip (darkScreen);
                        canMove = true;
                        guiUp = false;
                    } // end if
                };
                confirmBox.noB.onRelease = function ()
                {
                    canMove = true;
                    guiUp = false;
                    removeMovieClip (confirmBox);
                    removeMovieClip (darkScreen);
                };
            }
            else if (inArray(_root.mounts, n))
            {
                if (moving == false)
                {
                    if (moveType == "")
                    {
                        moveType = "bike";
                        moveMapSpeed = 16 * movementSpeedMod;
                        if (_root.map == "Clan Wars T1" || _root.map == "Clan Wars T2" || _root.map == "Clan Wars T3")
                        {
                            _root.player.mount = "Bike";
                        }
                        else
                        {
                            _root.player.mount = n;
                        } // end else if
                        if (dir == "up")
                        {
                            drawPlayer(player, 6, 1);
                        }
                        else if (dir == "down")
                        {
                            drawPlayer(player, 6, 0);
                        }
                        else if (dir == "left")
                        {
                            drawPlayer(player, 6, 2);
                        }
                        else if (dir == "right")
                        {
                            drawPlayer(player, 6, 3);
                        } // end else if
                    }
                    else if (moveType == "bike")
                    {
                        moveType = "";
                        moveMapSpeed = 8 * movementSpeedMod;
                        delete _root.player.mount;
                        if (dir == "up")
                        {
                            drawPlayer(player, 0, 1);
                        }
                        else if (dir == "down")
                        {
                            drawPlayer(player, 0, 0);
                        }
                        else if (dir == "left")
                        {
                            drawPlayer(player, 0, 2);
                        }
                        else if (dir == "right")
                        {
                            drawPlayer(player, 0, 3);
                        } // end else if
                    } // end else if
                    getTimestamp("updateMount", _root.player.mount);
                } // end if
            }
            else if (n == "Map")
            {
                if (chatBoxOpen == false)
                {
                    if (kantoMap._x == undefined)
                    {
                        if (_root.mapType == undefined || _root.mapType == "Kanto")
                        {
                            _root.mapType2 = "Kanto";
                            kantoMap = _root.mainGUI.attachMovie("kantoMap", "kantoMap", _root.getNextHighestDepth());
                            setMapRollOvers();
                        }
                        else if (_root.mapType == "Johto")
                        {
                            _root.mapType2 = "Johto";
                            kantoMap = _root.mainGUI.attachMovie("johtoMap", "kantoMap", _root.getNextHighestDepth());
                            setJohtoMapRollOvers();
                        }
                        else if (_root.mapType == "Hoenn")
                        {
                            _root.mapType2 = "Hoenn";
                            kantoMap = _root.mainGUI.attachMovie("hoennMap", "kantoMap", _root.getNextHighestDepth());
                            setHoennMapRollOvers();
                        }
                        else if (_root.mapType == "Sinnoh")
                        {
                            _root.mapType2 = "Sinnoh";
                            kantoMap = _root.mainGUI.attachMovie("sinnohMap", "kantoMap", _root.getNextHighestDepth());
                            setSinnohMapRollOvers();
                        }
                        else
                        {
                            _root.mapType2 = "Unova";
                            kantoMap = _root.mainGUI.attachMovie("unovaMap", "kantoMap", _root.getNextHighestDepth());
                            setUnovaMapRollOvers();
                        } // end else if
                        setMapStuff();
                    }
                    else
                    {
                        removeMovieClip (kantoMap);
                        mainGUI.mapB.gotoAndStop(1);
                    } // end else if
                }
                else
                {
                    systemMessage("You can\'t use the map right now.");
                } // end else if
            }
            else if (n == "Pokedex")
            {
                if (typing == false)
                {
                    if (mainGUI.pokedex._visible == false)
                    {
                        mainGUI.pokedex.swapDepths(mainGUI.getNextHighestDepth());
                        mainGUI.pokedex._visible = true;
                        mainGUI.pokedex.seenT.htmlText = "<b>" + pokedexSeenAmount;
                        mainGUI.pokedex.caughtT.htmlText = "<b>" + pokedexCaughtAmount;
                        mainGUI.pokedex.caught2T.htmlText = "<b>" + _root.caughtAmount2;
                    }
                    else
                    {
                        mainGUI.pokedex._visible = false;
                    } // end if
                } // end else if
            }
            else if (n == "Altering Cave Scroll" || n == "Eon Ticket" || n == "Lunar Ticket" || n == "Power Ticket")
            {
                getTimestamp("useItem2", 0, n);
            }
            else if (n == "Dye")
            {
                if (guiUp != true)
                {
                    canMove = false;
                    guiUp = true;
                    showDyeUI();
                } // end if
            }
            else if (n == "Christmas Present 2020")
            {
                guiUp = true;
                canMove = false;
                darkScreen = mainGUI.attachMovie("darkScreen", "darkScreen", mainGUI.getNextHighestDepth());
                darkScreen._width = Stage.width;
                darkScreen._height = Stage.height;
                darkScreen._alpha = 70;
                giftBox = _root.attachMovie("giftBox", "giftBox", _root.getNextHighestDepth());
                giftBox._x = newWidth / 2;
                giftBox._y = newHeight / 2;
                Selection.setFocus(giftBox.nameT);
                giftBox.sendB.onRelease = function ()
                {
                    if (isBusy == false && giftBox.nameT.text != "" && String(giftBox.nameT.text).toLowerCase() != username.toLowerCase())
                    {
                        Selection.setFocus(null);
                        getTimestamp("sendGift", giftBox.nameT.text);
                        removeMovieClip (giftBox);
                        removeMovieClip (darkScreen);
                        Selection.setFocus(null);
                        canMove = true;
                        guiUp = false;
                    } // end if
                };
                giftBox.cancelB.onRelease = function ()
                {
                    guiUp = false;
                    canMove = true;
                    removeMovieClip (giftBox);
                    removeMovieClip (darkScreen);
                    Selection.setFocus(null);
                };
                giftBox.exitB.onRelease = function ()
                {
                    guiUp = false;
                    canMove = true;
                    removeMovieClip (giftBox);
                    removeMovieClip (darkScreen);
                    Selection.setFocus(null);
                };
                assignMouseEvents(giftBox.sendB);
                assignMouseEvents(giftBox.cancelB);
                assignMouseEvents(giftBox.exitB);
            }
            else if (n == "Rose")
            {
                guiUp = true;
                canMove = false;
                darkScreen = mainGUI.attachMovie("darkScreen", "darkScreen", mainGUI.getNextHighestDepth());
                darkScreen._width = Stage.width;
                darkScreen._height = Stage.height;
                darkScreen._alpha = 70;
                giftBox = _root.mainGUI.attachMovie("giftBox", "giftBox", _root.mainGUI.getNextHighestDepth());
                giftBox.titleT.htmlText = "<b>Send a Rose";
                Selection.setFocus(giftBox.nameT);
                giftBox.sendB.onRelease = function ()
                {
                    if (isBusy == false && giftBox.nameT.text != "" && String(giftBox.nameT.text).toLowerCase() != username.toLowerCase())
                    {
                        Selection.setFocus(null);
                        getTimestamp("sendRose", giftBox.nameT.text);
                        removeMovieClip (giftBox);
                        removeMovieClip (darkScreen);
                        Selection.setFocus(null);
                        canMove = true;
                        guiUp = false;
                    } // end if
                };
                giftBox.cancelB.onRelease = function ()
                {
                    guiUp = false;
                    canMove = true;
                    removeMovieClip (giftBox);
                    removeMovieClip (darkScreen);
                    Selection.setFocus(null);
                };
                giftBox.exitB.onRelease = function ()
                {
                    guiUp = false;
                    canMove = true;
                    removeMovieClip (giftBox);
                    removeMovieClip (darkScreen);
                    Selection.setFocus(null);
                };
                assignMouseEvents(giftBox.sendB);
                assignMouseEvents(giftBox.cancelB);
                assignMouseEvents(giftBox.exitB);
            }
            else if ((n == "HP IV Reset" || n == "Attack IV Reset" || n == "Defense IV Reset" || n == "Special Attack IV Reset" || n == "Special Defense IV Reset" || n == "Speed IV Reset" || n == "HP IV Deductor" || n == "Attack IV Deductor" || n == "Defense IV Deductor" || n == "Special Attack IV Deductor" || n == "Special Defense IV Deductor" || n == "Speed IV Deductor" || n == "Sachet" || n == "Whipped Dream" || n == "Oval Stone" || n == "Ability Capsule (untradeable)" || n == "IV Reset (untradeable)" || n == "EV Reset (untradeable)" || n == "Amie Stone" || n == "Potion" || n == "Super Potion" || n == "Hyper Potion" || n == "Revive" || n == "Max Revive" || n == "Fire Stone" || n == "Water Stone" || n == "Coronet Rock" || n == "Thunder Stone" || n == "Leaf Stone" || n == "Sun Stone" || n == "Shiny Stone" || n == "Dusk Stone" || n == "Dawn Stone" || n == "Kings Rock" || n == "Metal Coat" || n == "Dragon Scale" || n == "Electirizer" || n == "Magmarizer" || n == "Protector" || n == "IV Reset" || n == "Rare Candy" || n == "Halloween Candy" || n == "Soda Pop" || n == "Lemonade" || n == "Moon Stone" || n == "EV Reset" || n == "Ev Reset" || n == "Ability Capsule" || n == "Prism Scale" || n == "Moss Rock" || n == "Ice Rock" || n == "Up-Grade" || n == "Dubious Disc" || n == "HP Up" || n == "Hp Up" || n == "Protein" || n == "Iron" || n == "Calcium" || n == "Zinc" || n == "Carbos" || n == "Reaper Cloth" || n == "Razor Claw" || n == "Deep Sea Scale" || n == "Deep Sea Tooth" || n == "Razor Fang" || n.indexOf("HM") != -1 || n.indexOf("TM") != -1 && n != "TM Box") && guiUp == false)
            {
                guiUp = true;
                canMove = false;
                itemOnPokemon = true;
                _root.itemOnPokemonName = n;
                darkScreen = mainGUI.attachMovie("darkScreen", "darkScreen", mainGUI.getNextHighestDepth());
                darkScreen._width = Stage.width;
                darkScreen._height = Stage.height;
                darkScreen._alpha = 70;
                darkScreen.onRelease = function ()
                {
                    removeMovieClip (darkScreen);
                    removeMovieClip (itemImageDrag);
                    useItemOnPokemon._visible = false;
                    for (var _loc2 = 1; _loc2 < 7; ++_loc2)
                    {
                        mainGUI["pokemonIcon" + _loc2].highlightBg._visible = false;
                    } // end of for
                    guiUp = false;
                    canMove = true;
                    itemOnPokemon = false;
                    _root.itemOnPokemonName = "";
                };
                useItemOnPokemon.swapDepths(_root.getNextHighestDepth());
                useItemOnPokemon._visible = true;
                for (var _loc4 = 1; _loc4 < 7; ++_loc4)
                {
                    mainGUI["pokemonIcon" + _loc4].swapDepths(mainGUI.getNextHighestDepth());
                } // end of for
                itemImageDrag = _root.attachMovie("itemImage", "itemImageDrag", _root.getNextHighestDepth());
                itemImageDrag._x = _xmouse;
                itemImageDrag._y = _ymouse;
                itemImageDrag.gotoAndStop(n);
                if (n.indexOf("TM") != -1 && n != "TM Box" || n.indexOf("HM") != -1)
                {
                    itemImageDrag.gotoAndStop("tmhm");
                } // end if
            }
            else if (n == "Surgical Mask" || n == "Heart Glasses" || n == "Santa Beard" || n == "Money Glasses" || n == "Googly Eye Glasses" || n == "Pig Nose" || n == "Squirtle Glasses" || n == "Omanyte Beard" || n == "Brawly Glasses" || n == "Hipster Glasses" || n == "Snorkel" || n == "Totem Mask" || n == "Red Nose" || n == "Sunglasses" || n == "Black Fox Mask" || n == "White Fox Mask" || n == "Aviator Sunglasses" || n == "Guy Fawkes Mask" || n == "Skeleton Mask" || n == "Oni Mask")
            {
                assignEquippableState(player.face2);
                if (player.face2 == n)
                {
                    player.face2 = "";
                    player.face2Filter = undefined;
                    player.face2Colors = undefined;
                }
                else
                {
                    player.face2 = n;
                    if (inventory[itemNum][2] != undefined)
                    {
                        player.face2Colors = inventory[itemNum][2];
                        var _loc8 = inventory[itemNum][2].split("-");
                        var _loc5 = [];
                        _loc5 = _loc5.concat([_loc8[0] / 100, 0, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, _loc8[1] / 100, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, _loc8[2] / 100, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, 0, 1, 0]);
                        player.face2Filter = new flash.filters.ColorMatrixFilter(_loc5);
                    }
                    else
                    {
                        player.face2Filter = undefined;
                        player.face2Colors = undefined;
                    } // end else if
                } // end else if
                getTimestamp("equipFace2");
                assignEquippedState(player.face2);
                drawPlayer(player, player.frameX, player.frameY);
            }
            else if (n.indexOf(" Ears") != -1 || n.indexOf(" Head") != -1 || n.indexOf(" Mask") != -1 || n.indexOf(" Hat") != -1 || n == "Red Butterfly Headphones" || n == "Blue Butterfly Headphones" || n == "Green Butterfly Headphones" || n == "Plague Doctor Mask" || n == "Motorcycle Helmet" || n == "White Beanie" || n == "Headband" || n == "Headphones" || n == "Neko Headphones" || n == "Lion Mask" || n == "Lickitung Mask" || n == "Hooded Mask" || n == "Shark Head" || n == "Marshmallow Head" || n == "Space Helmet" || n == "Slowking Crown" || n == "Pichu Ears" || n == "Beanie" || n == "Frosty Head" || n == "Milo Mask" || n == "Houndoom Horns" || n == "Skitty Ears" || n == "Litten Ears" || n == "Diggersby Ears" || n == "Bunnelby Ears" || n == "Crown" || n == "Antlers" || n == "Mewtwo Mask" || n == "Mew Mask" || n == "Delibird Mask" || n == "Bandana" || n == "Bandana 2" || n == "Bunny Ears" || n == "Aqua Bandana" || n == "Backward Cap" || n == "Cap" || n == "Chinchou Antennae" || n == "Fedora" || n == "Magma Hood" || n == "Panda Head" || n == "Togepi" || n == "Litwick" || n == "Budew" || n == "Chikorita Leaf" || n == "Ninja Mask" || n == "Backwards Cap" || n == "Halo" || n == "Pumpkin Head" || n == "Gastly Head" || n == "Cubone Mask" || n == "Valentines Tophat" || n == "Hair Ribbon 3" || n == "Steampunk Helmet" || n == "Knight Helmet" || n == "Bisharp Helmet" || n == "Pinsir Horns" || n == "Mining Helmet" || n == "Kings Rock Crown" || n == "Rainbow Flag" || n == "Tiara" || n == "Charizard Mask" || n == "Santa Hat" || n == "Hair Ribbon" || n == "Hair Ribbon 2" || n == "Duskull Mask" || n == "Rams Ribbon" || n == "Rems Ribbon" || n == "Bat Hair Clip" || n == "Diving Helmet")
            {
                assignEquippableState(player.hat);
                if (player.hat == n)
                {
                    player.hat = "";
                    player.hatFilter = undefined;
                    player.hatColors = undefined;
                }
                else
                {
                    player.hat = n;
                    if (inventory[itemNum][2] != undefined)
                    {
                        player.hatColors = inventory[itemNum][2];
                        _loc8 = inventory[itemNum][2].split("-");
                        _loc5 = [];
                        _loc5 = _loc5.concat([_loc8[0] / 100, 0, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, _loc8[1] / 100, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, _loc8[2] / 100, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, 0, 1, 0]);
                        player.hatFilter = new flash.filters.ColorMatrixFilter(_loc5);
                    }
                    else
                    {
                        player.hatFilter = undefined;
                        player.hatColors = undefined;
                    } // end else if
                } // end else if
                getTimestamp("equipHat");
                assignEquippedState(player.hat);
                drawPlayer(player, player.frameX, player.frameY);
            }
            else if (n.indexOf(" Backpack") != -1 || n == "Dracula Cloak" || n == "Valentines Bow" || n == "Katana" || n == "Dual Katanas" || n == "Scythe" || n == "Plasma Blade" || n == "Dual Plasma Blades" || n == "Pizza Cape" || n == "Balloon" || n == "Jetpack" || n == "Gold Cape" || n == "Master Cape" || n == "Backpack" || n == "Duck Inner Tube" || n == "Inner Tube" || n == "Candy Canes")
            {
                assignEquippableState(player.cape);
                if (player.cape == n)
                {
                    player.cape = "";
                    player.capeFilter = undefined;
                    player.capeColors = undefined;
                }
                else
                {
                    player.cape = n;
                    if (inventory[itemNum][2] != undefined)
                    {
                        player.capeColors = inventory[itemNum][2];
                        _loc8 = inventory[itemNum][2].split("-");
                        _loc5 = [];
                        _loc5 = _loc5.concat([_loc8[0] / 100, 0, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, _loc8[1] / 100, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, _loc8[2] / 100, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, 0, 1, 0]);
                        player.capeFilter = new flash.filters.ColorMatrixFilter(_loc5);
                    }
                    else
                    {
                        player.capeFilter = undefined;
                        player.capeColors = undefined;
                    } // end else if
                } // end else if
                getTimestamp("equipCape");
                assignEquippedState(player.cape);
                drawPlayer(player, player.frameX, player.frameY);
            }
            else if (n.indexOf("Wings") != -1 || n == "Cofagrigus Arms")
            {
                assignEquippableState(player.wings);
                if (player.wings == n)
                {
                    player.wings = "";
                    player.wingsFilter = undefined;
                    player.wingsColors = undefined;
                }
                else
                {
                    player.wings = n;
                    if (inventory[itemNum][2] != undefined)
                    {
                        player.wingsColors = inventory[itemNum][2];
                        _loc8 = inventory[itemNum][2].split("-");
                        _loc5 = [];
                        _loc5 = _loc5.concat([_loc8[0] / 100, 0, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, _loc8[1] / 100, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, _loc8[2] / 100, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, 0, 1, 0]);
                        player.wingsFilter = new flash.filters.ColorMatrixFilter(_loc5);
                    }
                    else
                    {
                        player.wingsFilter = undefined;
                        player.wingsColors = undefined;
                    } // end else if
                } // end else if
                getTimestamp("equipWings");
                assignEquippedState(player.wings);
                drawPlayer(player, player.frameX, player.frameY);
            }
            else if (n.indexOf(" Shirt") != -1)
            {
                if (n == "Trainer Shirt")
                {
                    if (player.body.indexOf("Male") != -1)
                    {
                        n = "Male Trainer";
                    }
                    else
                    {
                        n = "Female Trainer";
                    } // end if
                } // end else if
                assignEquippableState(player.shirt);
                if (player.shirt == n)
                {
                    player.shirt = "";
                    player.shirtFilter = undefined;
                    player.shirtColors = undefined;
                }
                else
                {
                    player.shirt = n;
                    if (inventory[itemNum][2] != undefined)
                    {
                        player.shirtColors = inventory[itemNum][2];
                        _loc8 = inventory[itemNum][2].split("-");
                        _loc5 = [];
                        _loc5 = _loc5.concat([_loc8[0] / 100, 0, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, _loc8[1] / 100, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, _loc8[2] / 100, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, 0, 1, 0]);
                        player.shirtFilter = new flash.filters.ColorMatrixFilter(_loc5);
                    }
                    else
                    {
                        player.shirtFilter = undefined;
                        player.shirtColors = undefined;
                    } // end else if
                } // end else if
                getTimestamp("equipShirt");
                if (n.indexOf("Trainer Shirt") != -1)
                {
                    assignEquippedState("Trainer Shirt");
                }
                else
                {
                    assignEquippedState(player.shirt);
                } // end else if
                drawPlayer(player, player.frameX, player.frameY);
            }
            else if (n.indexOf(" Pants") != -1)
            {
                if (n == "Trainer Pants")
                {
                    if (player.body.indexOf("Male") != -1)
                    {
                        n = "Male Trainer";
                    }
                    else
                    {
                        n = "Female Trainer";
                    } // end if
                } // end else if
                assignEquippableState(player.pants);
                if (player.pants == n)
                {
                    player.pants = "";
                    player.pantsFilter = undefined;
                    player.pantsColors = undefined;
                }
                else
                {
                    player.pants = n;
                    if (inventory[itemNum][2] != undefined)
                    {
                        player.shirtColors = inventory[itemNum][2];
                        _loc8 = inventory[itemNum][2].split("-");
                        _loc5 = [];
                        _loc5 = _loc5.concat([_loc8[0] / 100, 0, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, _loc8[1] / 100, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, _loc8[2] / 100, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, 0, 1, 0]);
                        player.pantsFilter = new flash.filters.ColorMatrixFilter(_loc5);
                    }
                    else
                    {
                        player.pantsFilter = undefined;
                        player.pantsColors = undefined;
                    } // end else if
                } // end else if
                getTimestamp("equipPants");
                if (n.indexOf("Trainer Pants") != -1)
                {
                    assignEquippedState("Trainer Pants");
                }
                else
                {
                    assignEquippedState(player.pants);
                } // end else if
                drawPlayer(player, player.frameX, player.frameY);
            }
            else if (n == "Tie" || n == "Bowtie" || n == "Christmas Scarf" || n == "Greninja Scarf" || n == "Flower Scarf")
            {
                assignEquippableState(player.neck);
                if (player.neck == n)
                {
                    player.neck = "";
                    player.neckFilter = undefined;
                    player.neckColors = undefined;
                }
                else
                {
                    player.neck = n;
                    if (inventory[itemNum][2] != undefined)
                    {
                        player.neckColors = inventory[itemNum][2];
                        _loc8 = inventory[itemNum][2].split("-");
                        _loc5 = [];
                        _loc5 = _loc5.concat([_loc8[0] / 100, 0, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, _loc8[1] / 100, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, _loc8[2] / 100, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, 0, 1, 0]);
                        player.neckFilter = new flash.filters.ColorMatrixFilter(_loc5);
                    }
                    else
                    {
                        player.neckFilter = undefined;
                        player.neckColors = undefined;
                    } // end else if
                } // end else if
                getTimestamp("equipNeck");
                assignEquippedState(player.neck);
                drawPlayer(player, player.frameX, player.frameY);
            }
            else if (n == "Zombie Costume" || n == "Skeleton Costume" || n == "Gingerbread Costume" || n == "Bunny Costume")
            {
                assignEquippableState(player.costume);
                if (player.costume == n)
                {
                    player.costume = "";
                    player.costumeFilter = undefined;
                    player.costumeColors = undefined;
                }
                else
                {
                    player.costume = n;
                    if (inventory[itemNum][2] != undefined)
                    {
                        player.costumeColors = inventory[itemNum][2];
                        _loc8 = inventory[itemNum][2].split("-");
                        _loc5 = [];
                        _loc5 = _loc5.concat([_loc8[0] / 100, 0, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, _loc8[1] / 100, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, _loc8[2] / 100, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, 0, 1, 0]);
                        player.costumeFilter = new flash.filters.ColorMatrixFilter(_loc5);
                    }
                    else
                    {
                        player.costumeFilter = undefined;
                        player.costumeColors = undefined;
                    } // end else if
                } // end else if
                getTimestamp("equipCostume");
                assignEquippedState(player.costume);
                drawPlayer(player, player.frameX, player.frameY);
            }
            else if (n == "Marill Tail" || n == "Mew Tail" || n == "Pikachu Tail" || n == "Ampharos Tail" || n == "Bunny Tail" || n == "Pachirisu Tail" || n == "Mewtwo Tail" || n == "Umbreon Tail" || n == "Chimchar Tail")
            {
                assignEquippableState(player.tail);
                if (player.tail == n)
                {
                    player.tail = "";
                    player.tailFilter = undefined;
                    player.tailColors = undefined;
                }
                else
                {
                    player.tail = n;
                    if (inventory[itemNum][2] != undefined)
                    {
                        player.tailColors = inventory[itemNum][2];
                        _loc8 = inventory[itemNum][2].split("-");
                        _loc5 = [];
                        _loc5 = _loc5.concat([_loc8[0] / 100, 0, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, _loc8[1] / 100, 0, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, _loc8[2] / 100, 0, 0]);
                        _loc5 = _loc5.concat([0, 0, 0, 1, 0]);
                        player.tailFilter = new flash.filters.ColorMatrixFilter(_loc5);
                    }
                    else
                    {
                        player.tailFilter = undefined;
                        player.tailColors = undefined;
                    } // end else if
                } // end else if
                getTimestamp("equipTail");
                assignEquippedState(player.tail);
                drawPlayer(player, player.frameX, player.frameY);
            } // end else if
        }
        else if (battle == false && darkScreen._x == undefined)
        {
            if (inventory[itemNum][1] <= 1)
            {
                getTimestamp("useItem2", 0);
            }
            else if (tradeAmountBox._x == undefined)
            {
                darkScreen = _root.mainGUI.attachMovie("darkScreen", "darkScreen", _root.mainGUI.getNextHighestDepth());
                darkScreen._width = Stage.width;
                darkScreen._height = Stage.height;
                darkScreen._alpha = 70;
                tradeAmountBox = _root.mainGUI.attachMovie("tradeAmountBox", "tradeAmountBox", _root.mainGUI.getNextHighestDepth());
                tradeAmountBox.moneyT.restrict = "0-9";
                Selection.setFocus(_root.tradeAmountBox.moneyT);
                tradeAmountBox.confirmB.onRelease = function ()
                {
                    if (tradeAmountBox.moneyT.text != "")
                    {
                        if (Number(tradeAmountBox.moneyT.text) <= inventory[invNum][1])
                        {
                            if (Number(tradeAmountBox.moneyT.text) > 0)
                            {
                                getTimestamp("useItem2", 0, undefined, Number(tradeAmountBox.moneyT.text));
                                Selection.setFocus(null);
                                removeMovieClip (_root.mainGUI.tradeAmountBox);
                                removeMovieClip (darkScreen);
                            }
                            else
                            {
                                tradeAmountBox.moneyT.text = 1;
                            } // end else if
                        }
                        else
                        {
                            Selection.setFocus(null);
                            tradeAmountBox.moneyT.text = inventory[invNum][1];
                        } // end if
                    } // end else if
                };
                tradeAmountBox.cancelB.onRelease = function ()
                {
                    tradeBox.tradeAmountBoxUp = false;
                    removeMovieClip (_root.mainGUI.tradeAmountBox);
                    removeMovieClip (darkScreen);
                };
                tradeAmountBox.exitB.onRelease = function ()
                {
                    tradeBox.tradeAmountBoxUp = false;
                    removeMovieClip (_root.mainGUI.tradeAmountBox);
                    removeMovieClip (darkScreen);
                };
                assignMouseEvents(tradeAmountBox.confirmB);
                assignMouseEvents(tradeAmountBox.cancelB);
                assignMouseEvents(tradeAmountBox.exitB);
            } // end if
        } // end else if
    } // end else if
} // End of the function
function setPokemonSummary(slot)
{
    pokemonSummaryType = "normal";
    mainGUI.pokemonSummary.slot = slot;
    mainGUI.pokemonSummary.stats._visible = true;
    mainGUI.pokemonSummary.moves._visible = false;
    mainGUI.pokemonSummary.moveBank._visible = false;
    mainGUI.pokemonSummary.stats.statsTab.gotoAndStop(2);
    mainGUI.pokemonSummary.stats.movesTab.gotoAndStop(1);
    mainGUI.pokemonSummary.stats.moveBankTab.gotoAndStop(1);
    mainGUI.pokemonSummary.moves.statsTab.gotoAndStop(1);
    mainGUI.pokemonSummary.moves.movesTab.gotoAndStop(1);
    mainGUI.pokemonSummary.moves.moveBankTab.gotoAndStop(1);
    mainGUI.pokemonSummary.moveBank.statsTab.gotoAndStop(1);
    mainGUI.pokemonSummary.moveBank.movesTab.gotoAndStop(1);
    mainGUI.pokemonSummary.moveBank.moveBankTab.gotoAndStop(1);
    mainGUI.pokemonSummary.swapDepths(mainGUI.getNextHighestDepth());
    if (userPokemon[slot].shiny != true)
    {
        mainGUI.pokemonSummary.stats.i.gotoAndStop(userPokemon[slot].id);
        mainGUI.pokemonSummary.stats.nameT.htmlText = "<b>Lv " + userPokemon[slot].level + " " + upperCase(userPokemon[slot].name);
    }
    else
    {
        mainGUI.pokemonSummary.stats.i.gotoAndStop(userPokemon[slot].id + shinyDifference);
        mainGUI.pokemonSummary.stats.nameT.htmlText = "<b>Lv " + userPokemon[slot].level + " [S]" + upperCase(userPokemon[slot].name);
    } // end else if
    mainGUI.pokemonSummary.stats.hpBar._x = userPokemon[slot].currentHp / userPokemon[slot].hp * 164 - 244.500000;
    mainGUI.pokemonSummary.stats.expBar._x = userPokemon[slot].exp / getExpTNL(userPokemon[slot].level) * 164 - 244.500000;
    if (userPokemon[slot].exp / getExpTNL(userPokemon[slot].level) > 1)
    {
        mainGUI.pokemonSummary.stats.expBar._x = -80.500000;
    } // end if
    if (userPokemon[slot].form != "undefined" && userPokemon[slot].form != undefined && userPokemon[slot].form != "default")
    {
        mainGUI.pokemonSummary.stats.formT.htmlText = "<b>(" + upperCase(String(userPokemon[slot].form)) + ")";
        mainGUI.pokemonSummary.stats.i.i.gotoAndStop(userPokemon[slot].form);
    }
    else
    {
        mainGUI.pokemonSummary.stats.formT.htmlText = "";
        mainGUI.pokemonSummary.stats.i.i.gotoAndStop(1);
    } // end else if
    mainGUI.pokemonSummary.stats.hpBar.setMask(mainGUI.pokemonSummary.stats.hpBarMask);
    mainGUI.pokemonSummary.stats.expBar.setMask(mainGUI.pokemonSummary.stats.expBarMask);
    mainGUI.pokemonSummary.stats.pokedexT.htmlText = "<b>" + userPokemon[slot].id;
    mainGUI.pokemonSummary.stats.typeT.htmlText = "<b>" + upperCase(moveIdToString(userPokemon[slot].type));
    mainGUI.pokemonSummary.stats.natureT.htmlText = "<b>" + upperCase(userPokemon[slot].nature);
    mainGUI.pokemonSummary.stats.hpT.htmlText = "<b>" + userPokemon[slot].currentHp + "/" + userPokemon[slot].hp + " <font color=\'#EDE98D\'>(" + userPokemon[slot].hpIV + ")</font> <font color=\'#A9F1A3\'>(" + userPokemon[slot].hpEV + ")";
    if (userPokemon[slot].level >= 100)
    {
        mainGUI.pokemonSummary.stats.expT.htmlText = "<b>" + format(userPokemon[slot].exp);
    }
    else
    {
        mainGUI.pokemonSummary.stats.expT.htmlText = "<b>" + format(userPokemon[slot].exp) + "/" + format(getExpTNL(userPokemon[slot].level));
    } // end else if
    mainGUI.pokemonSummary.stats.catcherT.htmlText = "<b>" + userPokemon[slot].originalCatcher;
    mainGUI.pokemonSummary.stats.attackT.htmlText = "<b>" + userPokemon[slot].attack + " <font color=\'#EDE98D\'>(" + userPokemon[slot].attackIV + ")</font> <font color=\'#A9F1A3\'>(" + userPokemon[slot].attackEV + ")";
    mainGUI.pokemonSummary.stats.specialAttackT.htmlText = "<b>" + userPokemon[slot].specialAttack + " <font color=\'#EDE98D\'>(" + userPokemon[slot].specialAttackIV + ")</font> <font color=\'#A9F1A3\'>(" + userPokemon[slot].specialAttackEV + ")";
    mainGUI.pokemonSummary.stats.defenseT.htmlText = "<b>" + userPokemon[slot].defense + " <font color=\'#EDE98D\'>(" + userPokemon[slot].defenseIV + ")</font> <font color=\'#A9F1A3\'>(" + userPokemon[slot].defenseEV + ")";
    mainGUI.pokemonSummary.stats.specialDefenseT.htmlText = "<b>" + userPokemon[slot].specialDefense + " <font color=\'#EDE98D\'>(" + userPokemon[slot].specialDefenseIV + ")</font> <font color=\'#A9F1A3\'>(" + userPokemon[slot].specialDefenseEV + ")";
    mainGUI.pokemonSummary.stats.speedT.htmlText = "<b>" + userPokemon[slot].speed + " <font color=\'#EDE98D\'>(" + userPokemon[slot].speedIV + ")</font> <font color=\'#A9F1A3\'>(" + userPokemon[slot].speedEV + ")";
    mainGUI.pokemonSummary.stats.happinessT.htmlText = "<b>" + userPokemon[slot].happiness;
    mainGUI.pokemonSummary.stats.abilityT.htmlText = "<b>" + abilityNames[userPokemon[slot].ability - 1];
    if (userPokemon[slot].type2 != 0)
    {
        mainGUI.pokemonSummary.stats.typeT.htmlText = mainGUI.pokemonSummary.stats.typeT.htmlText + ("<b>, " + upperCase(moveIdToString(userPokemon[slot].type2)));
    } // end if
    mainGUI.pokemonSummary.stats.releaseB._visible = true;
    assignMouseEvents(mainGUI.pokemonSummary.stats.releaseB);
    mainGUI.pokemonSummary.stats.releaseB.onRelease = function ()
    {
        this.gotoAndStop(1);
        if (map != "Clan Building" && map != "Clan Wars T1" && map != "Clan Wars T2" && map != "Clan Wars T3" && map != "PVP Center")
        {
            if (darkScreen._x == undefined && userPokemon.length > 1 && isBusy == false && trading == false && battle == false && _root.mainGUI.marketplace._x == undefined)
            {
                if (userPokemon[slot].heldItem == "none")
                {
                    canMove = false;
                    darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                    darkScreen._width = Stage.width;
                    darkScreen._height = Stage.height;
                    darkScreen._alpha = 70;
                    darkScreen._x = newWidth / 2;
                    darkScreen._y = newHeight / 2;
                    confirmBox = _root.attachMovie("merchantBox", "confirmBox", _root.getNextHighestDepth());
                    confirmBox._x = newWidth / 2;
                    confirmBox._y = newHeight / 2;
                    releasePokemonIcon = confirmBox.attachMovie("smallPokemonIcon", "releasePokemonIcon", confirmBox.getNextHighestDepth());
                    releasePokemonIcon.gotoAndStop(userPokemon[slot].id);
                    releasePokemonIcon._x = -69;
                    releasePokemonIcon._y = -47;
                    confirmBox.nameT.htmlText = "<b>Release " + userPokemon[slot].name;
                    confirmBox.msgT.htmlText = "<b>Are you sure you want to release " + userPokemon[slot].name + "?";
                    confirmBox.yesB.slot = slot;
                    confirmBox.yesB.onRelease = function ()
                    {
                        if (isBusy == false && canReleasePokemon == true && battle == false && trading == false && _root.mainGUI.marketplace._x == undefined)
                        {
                            canReleasePokemon = false;
                            getTimestamp("releasePokemon", this.slot);
                        } // end if
                    };
                    confirmBox.noB.onRelease = function ()
                    {
                        canMove = true;
                        removeMovieClip (confirmBox);
                        removeMovieClip (darkScreen);
                    };
                    assignMouseEvents(confirmBox.yesB);
                    assignMouseEvents(confirmBox.noB);
                }
                else
                {
                    systemMessage("You can\'t release a pokemon that\'s holding an item.");
                } // end if
            } // end else if
        }
        else
        {
            systemMessage("You can\'t release pokemon on this map.");
        } // end else if
    };
    mainGUI.pokemonSummary.stats.hitBox._visible = true;
    if (userPokemon[slot].heldItem.indexOf("TM") == -1 && userPokemon[slot].heldItem.indexOf("HM") == -1)
    {
        mainGUI.pokemonSummary.stats.i2.gotoAndStop(userPokemon[slot].heldItem);
    }
    else
    {
        mainGUI.pokemonSummary.stats.i2.gotoAndStop("tmhm");
    } // end else if
    mainGUI.pokemonSummary.stats.itemNameT.htmlText = "<b>" + userPokemon[slot].heldItem;
    mainGUI.pokemonSummary.stats.hitBox.onPress = function ()
    {
        mainGUI.pokemonSummary.swapDepths(mainGUI.getNextHighestDepth());
        if (userPokemon[pokemonSummaryNum].heldItem != "none")
        {
            mainGUI.pokemonSummary.stats.i2.startDrag();
        } // end if
    };
    mainGUI.pokemonSummary.stats.hitBox.onRelease = mainGUI.pokemonSummary.stats.hitBox.onReleaseOutside = function ()
    {
        if (userPokemon[pokemonSummaryNum].heldItem != "none")
        {
            mainGUI.pokemonSummary.stats.i2.stopDrag();
            if (mainGUI.pokemonSummary.stats.i2.hitTest(mainGUI.inventory.maskBg))
            {
                if (isBusy == false && trading == false && battle == false)
                {
                    getTimestamp("unequipItem", pokemonSummaryNum);
                } // end if
            } // end if
            mainGUI.pokemonSummary.stats.i2._x = -159;
            mainGUI.pokemonSummary.stats.i2._y = 127;
        } // end if
    };
    pokemonSummaryMoves = ["", "", "", ""];
    pokemonSummaryMoveBank = [];
    for (var _loc3 = 0; _loc3 < userPokemon[pokemonSummaryNum].moves.length; ++_loc3)
    {
        pokemonSummaryMoves[_loc3] = moveIdToName(userPokemon[pokemonSummaryNum].moves[_loc3]);
    } // end of for
    for (var _loc3 = 0; _loc3 < userPokemon[pokemonSummaryNum].moveBank.length; ++_loc3)
    {
        pokemonSummaryMoveBank[_loc3] = moveIdToName(userPokemon[pokemonSummaryNum].moveBank[_loc3]);
    } // end of for
    setPokemonSummaryNatureRollover(userPokemon[slot]);
    setPokemonSummaryAbilityRollover(userPokemon[slot]);
    setPokemonSummaryMoveRollovers(userPokemon[slot], mainGUI.pokemonSummary.moves);
    setPokemonSummaryMoveRollovers(userPokemon[slot], mainGUI.pokemonSummary.moveBank.itemList);
} // End of the function
function setPokemonSummaryTrade(tradePoke, tabNumber, pokeNum)
{
    pokemonSummaryType = "trade";
    mainGUI.pokemonSummary.stats._visible = true;
    mainGUI.pokemonSummary.moves._visible = false;
    mainGUI.pokemonSummary.moveBank._visible = false;
    mainGUI.pokemonSummary.stats.statsTab.gotoAndStop(2);
    mainGUI.pokemonSummary.stats.movesTab.gotoAndStop(1);
    mainGUI.pokemonSummary.stats.moveBankTab.gotoAndStop(1);
    mainGUI.pokemonSummary.swapDepths(mainGUI.getNextHighestDepth());
    if (tradePoke.shiny != true)
    {
        mainGUI.pokemonSummary.stats.i.gotoAndStop(tradePoke.id);
        mainGUI.pokemonSummary.stats.nameT.htmlText = "<b>Lv " + tradePoke.level + " " + upperCase(tradePoke.name);
    }
    else
    {
        mainGUI.pokemonSummary.stats.i.gotoAndStop(tradePoke.id + shinyDifference);
        mainGUI.pokemonSummary.stats.nameT.htmlText = "<b>Lv " + tradePoke.level + "[S]" + upperCase(tradePoke.name);
    } // end else if
    mainGUI.pokemonSummary.stats.hpBar._x = tradePoke.currentHp / tradePoke.hp * 164 - 244.500000;
    mainGUI.pokemonSummary.stats.expBar._x = tradePoke.exp / getExpTNL(tradePoke.level) * 164 - 244.500000;
    if (tradePoke.exp / getExpTNL(tradePoke.level) > 1)
    {
        mainGUI.pokemonSummary.stats.expBar._x = -80.500000;
    } // end if
    if (tradePoke.form != "undefined" && tradePoke.form != undefined && tradePoke.form != "default")
    {
        mainGUI.pokemonSummary.stats.formT.htmlText = "<b>(" + upperCase(String(tradePoke.form)) + ")";
        mainGUI.pokemonSummary.stats.i.i.gotoAndStop(tradePoke.form);
    }
    else
    {
        mainGUI.pokemonSummary.stats.formT.htmlText = "";
        mainGUI.pokemonSummary.stats.i.i.gotoAndStop(1);
    } // end else if
    mainGUI.pokemonSummary.stats.hpBar.setMask(mainGUI.pokemonSummary.stats.hpBarMask);
    mainGUI.pokemonSummary.stats.expBar.setMask(mainGUI.pokemonSummary.stats.expBarMask);
    mainGUI.pokemonSummary.stats.pokedexT.htmlText = "<b>" + tradePoke.id;
    mainGUI.pokemonSummary.stats.typeT.htmlText = "<b>" + upperCase(moveIdToString(tradePoke.type));
    mainGUI.pokemonSummary.stats.natureT.htmlText = "<b>" + upperCase(tradePoke.nature);
    mainGUI.pokemonSummary.stats.hpT.htmlText = "<b>" + tradePoke.currentHp + "/" + tradePoke.hp + " <font color=\'#EDE98D\'>(" + tradePoke.hpIV + ")</font> <font color=\'#A9F1A3\'>(" + tradePoke.hpEV + ")";
    if (tradePoke.level >= 100)
    {
        mainGUI.pokemonSummary.stats.expT.htmlText = "<b>" + format(tradePoke.exp);
    }
    else
    {
        mainGUI.pokemonSummary.stats.expT.htmlText = "<b>" + format(tradePoke.exp) + "/" + getExpTNL(tradePoke.level);
    } // end else if
    mainGUI.pokemonSummary.stats.catcherT.htmlText = "<b>" + tradePoke.originalCatcher;
    mainGUI.pokemonSummary.stats.attackT.htmlText = "<b>" + tradePoke.attack + " <font color=\'#EDE98D\'>(" + tradePoke.attackIV + ")</font> <font color=\'#A9F1A3\'>(" + tradePoke.attackEV + ")";
    mainGUI.pokemonSummary.stats.specialAttackT.htmlText = "<b>" + tradePoke.specialAttack + " <font color=\'#EDE98D\'>(" + tradePoke.specialAttackIV + ")</font> <font color=\'#A9F1A3\'>(" + tradePoke.specialAttackEV + ")";
    mainGUI.pokemonSummary.stats.defenseT.htmlText = "<b>" + tradePoke.defense + " <font color=\'#EDE98D\'>(" + tradePoke.defenseIV + ")</font> <font color=\'#A9F1A3\'>(" + tradePoke.defenseEV + ")";
    mainGUI.pokemonSummary.stats.specialDefenseT.htmlText = "<b>" + tradePoke.specialDefense + " <font color=\'#EDE98D\'>(" + tradePoke.specialDefenseIV + ")</font> <font color=\'#A9F1A3\'>(" + tradePoke.specialDefenseEV + ")";
    mainGUI.pokemonSummary.stats.speedT.htmlText = "<b>" + tradePoke.speed + " <font color=\'#EDE98D\'>(" + tradePoke.speedIV + ")</font> <font color=\'#A9F1A3\'>(" + tradePoke.speedEV + ")";
    mainGUI.pokemonSummary.stats.happinessT.htmlText = "<b>" + tradePoke.happiness;
    mainGUI.pokemonSummary.stats.abilityT.htmlText = "<b>" + abilityNames[tradePoke.ability - 1];
    if (tradePoke.type2 != 0)
    {
        mainGUI.pokemonSummary.stats.typeT.htmlText = mainGUI.pokemonSummary.stats.typeT.htmlText + ("<b>, " + upperCase(moveIdToString(tradePoke.type2)));
    } // end if
    if (tabNumber != undefined)
    {
        mainGUI.pokemonSummary.stats.releaseB._visible = true;
        assignMouseEvents(mainGUI.pokemonSummary.stats.releaseB);
        mainGUI.pokemonSummary.stats.releaseB.onRelease = function ()
        {
            this.gotoAndStop(1);
            if (map != "Clan Building" && map != "Clan Wars T1" && map != "Clan Wars T2" && map != "Clan Wars T3" && map != "PVP Center")
            {
                if (darkScreen._x == undefined && isBusy == false && trading == false && battle == false)
                {
                    if (tradePoke.heldItem == "none")
                    {
                        canMove = false;
                        darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                        darkScreen._width = Stage.width;
                        darkScreen._height = Stage.height;
                        darkScreen._alpha = 70;
                        darkScreen._x = newWidth / 2;
                        darkScreen._y = newHeight / 2;
                        confirmBox = _root.attachMovie("merchantBox", "confirmBox", _root.getNextHighestDepth());
                        confirmBox._x = newWidth / 2;
                        confirmBox._y = newHeight / 2;
                        releasePokemonIcon = confirmBox.attachMovie("smallPokemonIcon", "releasePokemonIcon", confirmBox.getNextHighestDepth());
                        releasePokemonIcon.gotoAndStop(tradePoke.id);
                        releasePokemonIcon._x = -69;
                        releasePokemonIcon._y = -47;
                        confirmBox.nameT.htmlText = "<b>Release " + tradePoke.name;
                        confirmBox.msgT.htmlText = "<b>Are you sure you want to release " + tradePoke.name + "?";
                        confirmBox.yesB.tabNumber = tabNumber;
                        confirmBox.yesB.pokeNum = pokeNum;
                        confirmBox.yesB.onRelease = function ()
                        {
                            if (isBusy == false && canReleasePokemon == true && battle == false && trading == false)
                            {
                                canReleasePokemon = false;
                                getTimestamp("releasePokemon", this.tabNumber, this.pokeNum);
                            } // end if
                        };
                        confirmBox.noB.onRelease = function ()
                        {
                            canMove = true;
                            removeMovieClip (confirmBox);
                            removeMovieClip (darkScreen);
                        };
                        assignMouseEvents(confirmBox.yesB);
                        assignMouseEvents(confirmBox.noB);
                    }
                    else
                    {
                        systemMessage("You can\'t release a pokemon that\'s holding an item.");
                    } // end if
                } // end else if
            }
            else
            {
                systemMessage("You can\'t release pokemon on this map.");
            } // end else if
        };
    }
    else
    {
        mainGUI.pokemonSummary.stats.releaseB.onRelease = function ()
        {
            this.gotoAndStop(1);
        };
    } // end else if
    mainGUI.pokemonSummary.stats.hitBox._visible = false;
    mainGUI.pokemonSummary.stats.i2.gotoAndStop(tradePoke.heldItem);
    mainGUI.pokemonSummary.stats.itemNameT.htmlText = "<b>" + tradePoke.heldItem;
    pokemonSummaryMoves = ["", "", "", ""];
    pokemonSummaryMoveBank = [];
    for (var _loc3 = 0; _loc3 < tradePoke.moves.length; ++_loc3)
    {
        pokemonSummaryMoves[_loc3] = moveIdToName(tradePoke.moves[_loc3]);
    } // end of for
    for (var _loc3 = 0; _loc3 < tradePoke.moveBank.length; ++_loc3)
    {
        pokemonSummaryMoveBank[_loc3] = moveIdToName(tradePoke.moveBank[_loc3]);
    } // end of for
    setPokemonSummaryNatureRollover(tradePoke);
    setPokemonSummaryAbilityRollover(tradePoke);
    setPokemonSummaryMoveRollovers(tradePoke, mainGUI.pokemonSummary.moves);
} // End of the function
function upperCase(str)
{
    str = String(str);
    var _loc2 = str.substr(0, 1);
    var _loc4 = str.substr(1, str.length);
    var _loc3 = _loc2.toUpperCase() + _loc4.toLowerCase();
    return (_loc3);
} // End of the function
function darkenScreen(alphaValue)
{
    removeMovieClip (darkScreenMap);
    darkScreenMap = _root.attachMovie("darkScreen", "darkScreenMap", _root.getNextHighestDepth());
    darkScreenMap._width = Stage.width;
    darkScreenMap._height = Stage.height;
    fixDepths();
    darkScreenMap._x = newWidth / 2;
    darkScreenMap._y = newHeight / 2;
    darkScreenMap._alpha = alphaValue;
} // End of the function
function blueScreen(alphaValue)
{
    darkScreenMap = _root.attachMovie("blueScreen", "darkScreenMap", _root.getNextHighestDepth());
    darkScreenMap._width = Stage.width;
    darkScreenMap._height = Stage.height;
    fixDepths();
    darkScreenMap._x = newWidth / 2;
    darkScreenMap._y = newHeight / 2;
    darkScreenMap._alpha = alphaValue;
} // End of the function
function getUTCTimestamp()
{
    myDate = new Date();
    return (Math.round((myDate.getTime() + myDate.getTimezoneOffset() * 60000) / 1000));
} // End of the function
function safariTimeOver()
{
    safariTime2 = 0;
    if (battle == true)
    {
        safariTimeUp = true;
    }
    else
    {
        canMove = false;
        getTimestamp("safariTimeOver");
    } // end else if
    clearInterval(safariTimeOverI);
} // End of the function
function johtoSafariTimeOver()
{
    johtoSafariTime2 = 0;
    if (battle == true)
    {
        johtoSafariTimeUp = true;
    }
    else
    {
        canMove = false;
        getTimestamp("johtoSafariTimeOver");
    } // end else if
    clearInterval(johtoSafariTimeOverI);
} // End of the function
function hoennSafariTimeOver()
{
    hoennSafariTime2 = 0;
    if (battle == true)
    {
        hoennSafariTimeUp = true;
    }
    else
    {
        canMove = false;
        getTimestamp("hoennSafariTimeOver");
    } // end else if
    clearInterval(hoennSafariTimeOverI);
} // End of the function
function sinnohSafariTimeOver()
{
    sinnohSafariTime2 = 0;
    if (battle == true)
    {
        sinnohSafariTimeUp = true;
    }
    else
    {
        canMove = false;
        getTimestamp("sinnohSafariTimeOver");
    } // end else if
    clearInterval(sinnohSafariTimeOverI);
} // End of the function
function acTimeOver()
{
    acTime2 = 0;
    if (battle == true)
    {
        acTimeUp = true;
    }
    else
    {
        canMove = false;
        getTimestamp("acTimeOver");
    } // end else if
    clearInterval(acTimeOverI);
} // End of the function
function checkAutoScroll()
{
    if (autoscroll == true)
    {
        return (true);
    }
    else if (mainGUI.globalChatT._visible == true)
    {
        if (mainGUI.globalChatT.scroll == mainGUI.globalChatT.maxscroll - 1)
        {
            return (true);
        } // end if
    }
    else if (mainGUI.localChatT._visible == true)
    {
        if (mainGUI.localChatT.scroll == mainGUI.localChatT.maxscroll - 1)
        {
            return (true);
        } // end if
    }
    else if (mainGUI.tradeChatT._visible == true)
    {
        if (mainGUI.tradeChatT.scroll == mainGUI.tradeChatT.maxscroll - 1)
        {
            return (true);
        } // end if
    }
    else if (mainGUI.nonEnglishChatT._visible == true)
    {
        if (mainGUI.nonEnglishChatT.scroll == mainGUI.nonEnglishChatT.maxscroll - 1)
        {
            return (true);
        } // end if
    }
    else if (mainGUI.clanChatT._visible == true)
    {
        if (mainGUI.clanChatT.scroll == mainGUI.clanChatT.maxscroll - 1)
        {
            return (true);
        } // end if
    }
    else if (mainGUI.customChatT._visible == true)
    {
        if (mainGUI.customChatT.scroll == mainGUI.customChatT.maxscroll - 1)
        {
            return (true);
        } // end else if
    } // end else if
    return (false);
} // End of the function
function clearWorldBlessing()
{
    mainGUI.worldBlessingBigT._visible = false;
    clearInterval(clearWorldBlessingMessageI);
} // End of the function
function clearDropRateBlessing()
{
    mainGUI.dropRateBlessingBigT._visible = false;
    clearInterval(clearDropRateBlessingMessageI);
} // End of the function
function showCasino()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        casinoGUI = _root.mainGUI.attachMovie("casinoGUI", "casinoGUI", _root.mainGUI.getNextHighestDepth());
        mainGUI.casinoGUI.icon1.stop();
        mainGUI.casinoGUI.icon2.stop();
        mainGUI.casinoGUI.icon3.stop();
        casinoGUI.play1B.onRelease = function ()
        {
            if (money >= 100)
            {
                if (isBusy == false && canUseSlots == true)
                {
                    canUseSlots = false;
                    mainGUI.casinoGUI.icon1.play();
                    mainGUI.casinoGUI.icon2.play();
                    mainGUI.casinoGUI.icon3.play();
                    mainGUI.casinoGUI.play1B._visible = false;
                    mainGUI.casinoGUI.play2B._visible = false;
                    mainGUI.casinoGUI.play3B._visible = false;
                    mainGUI.casinoGUI.play4B._visible = false;
                    mainGUI.casinoGUI.t1.htmlText = "";
                    mainGUI.casinoGUI.t2.htmlText = "";
                    mainGUI.casinoGUI.t3.htmlText = "";
                    mainGUI.casinoGUI.t4.htmlText = "";
                    mainGUI.casinoGUI.nameT.htmlText = "";
                    getTimestamp("slotSpin", 1);
                } // end if
            }
            else
            {
                systemMessage("You don\'t have enough money!");
            } // end else if
        };
        casinoGUI.play2B.onRelease = function ()
        {
            if (money >= 1000)
            {
                if (isBusy == false && canUseSlots == true)
                {
                    canUseSlots = false;
                    mainGUI.casinoGUI.icon1.play();
                    mainGUI.casinoGUI.icon2.play();
                    mainGUI.casinoGUI.icon3.play();
                    mainGUI.casinoGUI.play1B._visible = false;
                    mainGUI.casinoGUI.play2B._visible = false;
                    mainGUI.casinoGUI.play3B._visible = false;
                    mainGUI.casinoGUI.play4B._visible = false;
                    mainGUI.casinoGUI.t1.htmlText = "";
                    mainGUI.casinoGUI.t2.htmlText = "";
                    mainGUI.casinoGUI.t3.htmlText = "";
                    mainGUI.casinoGUI.t4.htmlText = "";
                    mainGUI.casinoGUI.nameT.htmlText = "";
                    getTimestamp("slotSpin", 2);
                } // end if
            }
            else
            {
                systemMessage("You don\'t have enough money!");
            } // end else if
        };
        casinoGUI.play3B.onRelease = function ()
        {
            if (money >= 10000)
            {
                if (isBusy == false && canUseSlots == true)
                {
                    canUseSlots = false;
                    mainGUI.casinoGUI.icon1.play();
                    mainGUI.casinoGUI.icon2.play();
                    mainGUI.casinoGUI.icon3.play();
                    mainGUI.casinoGUI.play1B._visible = false;
                    mainGUI.casinoGUI.play2B._visible = false;
                    mainGUI.casinoGUI.play3B._visible = false;
                    mainGUI.casinoGUI.play4B._visible = false;
                    mainGUI.casinoGUI.t1.htmlText = "";
                    mainGUI.casinoGUI.t2.htmlText = "";
                    mainGUI.casinoGUI.t3.htmlText = "";
                    mainGUI.casinoGUI.t4.htmlText = "";
                    mainGUI.casinoGUI.nameT.htmlText = "";
                    getTimestamp("slotSpin", 3);
                } // end if
            }
            else
            {
                systemMessage("You don\'t have enough money!");
            } // end else if
        };
        casinoGUI.play4B.onRelease = function ()
        {
            if (money >= 100000)
            {
                if (isBusy == false && canUseSlots == true)
                {
                    canUseSlots = false;
                    mainGUI.casinoGUI.icon1.play();
                    mainGUI.casinoGUI.icon2.play();
                    mainGUI.casinoGUI.icon3.play();
                    mainGUI.casinoGUI.play1B._visible = false;
                    mainGUI.casinoGUI.play2B._visible = false;
                    mainGUI.casinoGUI.play3B._visible = false;
                    mainGUI.casinoGUI.play4B._visible = false;
                    mainGUI.casinoGUI.t1.htmlText = "";
                    mainGUI.casinoGUI.t2.htmlText = "";
                    mainGUI.casinoGUI.t3.htmlText = "";
                    mainGUI.casinoGUI.t4.htmlText = "";
                    mainGUI.casinoGUI.nameT.htmlText = "";
                    getTimestamp("slotSpin", 4);
                } // end if
            }
            else
            {
                systemMessage("You don\'t have enough money!");
            } // end else if
        };
        addDraggableGUI(casinoGUI);
        casinoGUI.exitB.onRelease = function ()
        {
            guiUp = false;
            canMove = true;
            removeMovieClip (casinoGUI);
        };
        assignMouseEvents(casinoGUI.exitB);
    } // end if
} // End of the function
function battleBackButton()
{
    if (mainGUI.battleBackground.move1B._visible == true)
    {
        mainGUI.battleBackground.fightB._visible = true;
        mainGUI.battleBackground.bagB._visible = true;
        mainGUI.battleBackground.pokemonB._visible = true;
        mainGUI.battleBackground.runB._visible = true;
        mainGUI.battleBackground.move1B._visible = false;
        mainGUI.battleBackground.move2B._visible = false;
        mainGUI.battleBackground.move3B._visible = false;
        mainGUI.battleBackground.move4B._visible = false;
        mainGUI.battleBackground.backB._visible = false;
    }
    else if (mainGUI.battleBackground.pokemon1B._visible == true)
    {
        mainGUI.battleBackground.fightB._visible = true;
        mainGUI.battleBackground.bagB._visible = true;
        mainGUI.battleBackground.pokemonB._visible = true;
        mainGUI.battleBackground.runB._visible = true;
        for (var _loc1 = 1; _loc1 < 7; ++_loc1)
        {
            mainGUI.battleBackground["pokemon" + _loc1 + "B"]._visible = false;
        } // end of for
        mainGUI.battleBackground.backB._visible = false;
        mainGUI.battleBackground.bg.gotoAndStop(1);
    }
    else if (mainGUI.battleBackground.itemBg._visible == true)
    {
        mainGUI.battleBackground.fightB._visible = true;
        mainGUI.battleBackground.bagB._visible = true;
        mainGUI.battleBackground.pokemonB._visible = true;
        mainGUI.battleBackground.runB._visible = true;
        mainGUI.battleBackground.itemBg._visible = false;
        mainGUI.battleBackground.useItemRightB._visible = false;
        mainGUI.battleBackground.useItemLeftB._visible = false;
        mainGUI.battleBackground.useItemB._visible = false;
        mainGUI.battleBackground.itemImage.gotoAndStop(1);
        mainGUI.battleBackground.itemTexts.itemNameT.text = "";
        mainGUI.battleBackground.itemTexts.itemAmountT.text = "";
        mainGUI.battleBackground.backB._visible = false;
    } // end else if
    mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = "";
} // End of the function
function showMoveButtons()
{
    if (userPokemon[activePokemon].currentHp > 0)
    {
        if (isWaiting == false)
        {
            mainGUI.battleBackground.fightB._visible = false;
            mainGUI.battleBackground.bagB._visible = false;
            mainGUI.battleBackground.pokemonB._visible = false;
            mainGUI.battleBackground.runB._visible = false;
            mainGUI.battleBackground.move1B._visible = true;
            mainGUI.battleBackground.move2B._visible = true;
            mainGUI.battleBackground.move3B._visible = true;
            mainGUI.battleBackground.move4B._visible = true;
            mainGUI.battleBackground.backB._visible = true;
        } // end if
    } // end if
} // End of the function
function hidePokemonButtons()
{
    for (var _loc1 = 1; _loc1 < 7; ++_loc1)
    {
        mainGUI.battleBackground["pokemon" + _loc1 + "B"]._visible = false;
    } // end of for
} // End of the function
function useBattleMove(moveNum, moveButton)
{
    if (moveButton.moveName != "" && isWaiting == false && userPokemon[activePokemon].currentHp > 0 && (moveButton.ppN > 0 || mainGUI.battleBackground.move1B.ppN <= 0 && mainGUI.battleBackground.move2B.ppN <= 0 && mainGUI.battleBackground.move3B.ppN <= 0 && mainGUI.battleBackground.move4B.ppN <= 0))
    {
        if (battleType == "wild" || battleType == "trainer")
        {
            mainGUI.battleBackground.move1B._visible = false;
            mainGUI.battleBackground.move2B._visible = false;
            mainGUI.battleBackground.move3B._visible = false;
            mainGUI.battleBackground.move4B._visible = false;
            mainGUI.battleBackground.backB._visible = false;
            mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = "";
            if (userPokemon[activePokemon].battleMoves[moveNum] == 369 || userPokemon[activePokemon].battleMoves[moveNum] == 521 || userPokemon[activePokemon].battleMoves[moveNum] == 226 || userPokemon[activePokemon].battleMoves[moveNum] == 361)
            {
                switchMove = true;
                switchMoveNum = moveNum;
                var _loc5 = false;
                for (var _loc3 = 0; _loc3 < userPokemon.length; ++_loc3)
                {
                    if (userPokemon[_loc3].currentHp > 0 && _loc3 != activePokemon)
                    {
                        _loc5 = true;
                        break;
                    } // end if
                } // end of for
                if (_loc5 == true)
                {
                    for (var _loc2 = 1; _loc2 < 7; ++_loc2)
                    {
                        if (userPokemon[_loc2 - 1] != undefined)
                        {
                            mainGUI.battleBackground["pokemon" + _loc2 + "B"].i.gotoAndStop(userPokemon[_loc2 - 1].id);
                            mainGUI.battleBackground["pokemon" + _loc2 + "B"].nameT.htmlText = "<b>" + userPokemon[_loc2 - 1].name;
                            mainGUI.battleBackground["pokemon" + _loc2 + "B"]._visible = true;
                        } // end if
                    } // end of for
                }
                else
                {
                    isWaiting = true;
                    getTimestamp("battleMove", moveNum, "");
                } // end else if
            }
            else
            {
                isWaiting = true;
                getTimestamp("battleMove", moveNum, "");
            } // end else if
        }
        else if (battleType == "pvp")
        {
            mainGUI.battleBackground.move1B._visible = false;
            mainGUI.battleBackground.move2B._visible = false;
            mainGUI.battleBackground.move3B._visible = false;
            mainGUI.battleBackground.move4B._visible = false;
            mainGUI.battleBackground.backB._visible = false;
            mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = "";
            if (userPokemon[activePokemon].battleMoves[moveNum] == 361)
            {
                switchMove = true;
                switchMoveNum = moveNum;
                _loc5 = false;
                for (var _loc3 = 0; _loc3 < userPokemon.length; ++_loc3)
                {
                    if (userPokemon[_loc3].currentHp > 0 && _loc3 != activePokemon)
                    {
                        _loc5 = true;
                        break;
                    } // end if
                } // end of for
                if (_loc5 == true)
                {
                    for (var _loc2 = 1; _loc2 < 7; ++_loc2)
                    {
                        if (userPokemon[_loc2 - 1] != undefined)
                        {
                            mainGUI.battleBackground["pokemon" + _loc2 + "B"].i.gotoAndStop(userPokemon[_loc2 - 1].id);
                            mainGUI.battleBackground["pokemon" + _loc2 + "B"].nameT.htmlText = "<b>" + userPokemon[_loc2 - 1].name;
                            mainGUI.battleBackground["pokemon" + _loc2 + "B"]._visible = true;
                        } // end if
                    } // end of for
                }
                else
                {
                    isWaiting = true;
                    mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                    mainGUI.battleBackground.battleT._visible = true;
                    getTimestamp("battleMovePvp", moveNum, "");
                } // end else if
            }
            else if (_root.bt != "d")
            {
                isWaiting = true;
                mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                mainGUI.battleBackground.battleT._visible = true;
                getTimestamp("battleMovePvp", moveNum, "");
            }
            else
            {
                mainGUI.battleBackground.targetSelection.i1.gotoAndStop(wildPokemon.id);
                mainGUI.battleBackground.targetSelection.i2.gotoAndStop(wildPokemon2.id);
                mainGUI.battleBackground.targetSelection.i3.gotoAndStop(userPokemon[activePokemon].id);
                mainGUI.battleBackground.targetSelection.i4.gotoAndStop(userPokemon[activePokemon2].id);
                mainGUI.battleBackground.targetSelection.exitB.onRelease = function ()
                {
                };
                mainGUI.battleBackground.targetSelection._visible = true;
            } // end else if
        } // end else if
    } // end else if
} // End of the function
function showBattleBag()
{
    if (_root.battleType == "wild" && battleType2 != "gymLeader" && map.indexOf("Clan Wars ") == -1 && map != "PVP Arena" && _root.queueingForBattle == undefined)
    {
        mainGUI.battleBackground.bagB.gotoAndStop(1);
        if (isWaiting == false && userPokemon[activePokemon].currentHp > 0)
        {
            mainGUI.battleBackground.fightB._visible = false;
            mainGUI.battleBackground.bagB._visible = false;
            mainGUI.battleBackground.pokemonB._visible = false;
            mainGUI.battleBackground.runB._visible = false;
            mainGUI.battleBackground.itemBg._visible = true;
            mainGUI.battleBackground.useItemRightB._visible = true;
            mainGUI.battleBackground.useItemLeftB._visible = true;
            mainGUI.battleBackground.useItemB._visible = true;
            mainGUI.battleBackground.backB._visible = true;
            itemsInBattle = [];
            itemsInBattleIndex = 0;
            for (var _loc2 = 0; _loc2 < inventory.length; ++_loc2)
            {
                if (inventory[_loc2][0] == "Quick Ball" || inventory[_loc2][0] == "Dive Ball" || inventory[_loc2][0] == "Net Ball" || inventory[_loc2][0] == "Nest Ball" || inventory[_loc2][0] == "Repeat Ball" || inventory[_loc2][0] == "Fast Ball" || inventory[_loc2][0] == "Moon Ball" || inventory[_loc2][0] == "Lure Ball" || inventory[_loc2][0] == "Level Ball" || inventory[_loc2][0] == "Safari Ball" || inventory[_loc2][0] == "Poke Ball (untradeable)" || inventory[_loc2][0] == "Great Ball (untradeable)" || inventory[_loc2][0] == "Ultra Ball (untradeable)" || inventory[_loc2][0] == "Potion" || inventory[_loc2][0] == "Super Potion" || inventory[_loc2][0] == "Hyper Potion" || inventory[_loc2][0] == "Poke Ball" || inventory[_loc2][0] == "Great Ball" || inventory[_loc2][0] == "Ultra Ball" || inventory[_loc2][0] == "Master Ball" || inventory[_loc2][0] == "Halloween Ball" || inventory[_loc2][0] == "Halloween Candy" || inventory[_loc2][0] == "Soda Pop" || inventory[_loc2][0] == "Lemonade")
                {
                    itemsInBattle.push([inventory[_loc2][0], inventory[_loc2][1], _loc2]);
                } // end if
            } // end of for
            if (itemsInBattle.length > 0)
            {
                mainGUI.battleBackground.itemImage.gotoAndStop(itemsInBattle[0][0]);
                mainGUI.battleBackground.itemTexts.itemNameT.htmlText = "<b>" + itemsInBattle[0][0];
                mainGUI.battleBackground.itemTexts.itemAmountT.htmlText = "<b>" + itemsInBattle[0][1];
            } // end if
            mainGUI.battleBackground.itemImage._visible = true;
            mainGUI.battleBackground.itemTexts._visible = true;
        } // end if
    } // end if
} // End of the function
function kg1()
{
    return ("fadsg7980g08b4asbaudy-ds2d378hubfhgbaoeubf0-hzzvc3");
} // End of the function
function kg2()
{
    return ("fadsg7980g08b4asbaudy-ds2d378hubfhgbaoeubf0-hzzvc3");
} // End of the function
function kg3(t, packetKey)
{
    return (calcMD5(packetKey + _root.kg2() + t));
} // End of the function
function makeCreditShop(category)
{
    mainGUI.creditShop.scrollBar._y = -159;
    removeMovieClip (mainGUI.creditShop.itemList);
    mainGUI.creditShop.attachMovie("itemList", "itemList", mainGUI.creditShop.getNextHighestDepth());
    mainGUI.creditShop.creditsT.htmlText = "<b>" + format(credits) + "c";
    mainGUI.creditShop.itemList.setMask(mainGUI.creditShop.maskBg);
    var _loc4 = 0;
    if (category == "Main")
    {
        var a = 0;
        while (a < _root.creditShopArray.length)
        {
            if (a % 3 == 0 && a != 0)
            {
                ++_loc4;
            } // end if
            var _loc3 = mainGUI.creditShop.itemList.attachMovie("creditShopBox", "creditShopBox_" + a, mainGUI.creditShop.itemList.getNextHighestDepth());
            _loc3._x = -207 + (a - 3 * _loc4) * 192;
            _loc3._y = -130 + _loc4 * 142;
            _loc3.nameT.htmlText = "<b>" + _root.creditShopArray[a][0];
            _loc3.descriptionT.htmlText = "<b>" + _root.creditShopArray[a][1];
            _loc3.priceT.htmlText = "<b>" + _root.creditShopArray[a][2];
            _loc3.i.gotoAndStop(_root.creditShopArray[a][0]);
            _loc3.buyB.a = a;
            _loc3.buyB.onRelease = function ()
            {
                this.gotoAndStop(1);
                if (credits >= _root.creditShopArray[this.a][2] && inputBox._x == undefined && confirmBox._x == undefined && giftBox._x == undefined)
                {
                    darkenScreen2();
                    var inputBox = _root.attachMovie("friendRemoveBox", "inputBox", _root.getNextHighestDepth());
                    inputBox._x = newWidth / 2;
                    inputBox._y = newHeight / 2;
                    inputBox.titleT.htmlText = "<b>" + _root.creditShopArray[this.a][0];
                    inputBox.labelT.htmlText = "<b>Amount";
                    inputBox.nameT.restrict = "0-9";
                    inputBox.a = this.a;
                    Selection.setFocus(inputBox.nameT);
                    inputBox.confirmB.onRelease = function ()
                    {
                        if (inputBox.nameT.text != "" && Number(inputBox.nameT.text) > 0)
                        {
                            if (_root.credits >= Number(inputBox.nameT.text) * _root.creditShopArray[this._parent.a][2])
                            {
                                Selection.setFocus(null);
                                var confirmBox = _root.attachMovie("merchantBox", "confirmBox", _root.getNextHighestDepth());
                                confirmBox._x = newWidth / 2;
                                confirmBox._y = newHeight / 2;
                                confirmBox.i.gotoAndStop(_root.creditShopArray[this._parent.a][0]);
                                confirmBox.nameT.htmlText = "<b>" + _root.creditShopArray[this._parent.a][0];
                                confirmBox.msgT.htmlText = "<b>Are you sure you want to buy x" + Number(inputBox.nameT.text) + " " + _root.creditShopArray[this._parent.a][0] + " (" + format(Number(inputBox.nameT.text) * _root.creditShopArray[this._parent.a][2]) + "c)?";
                                confirmBox.amount = Number(inputBox.nameT.text);
                                confirmBox.yesB.a = this._parent.a;
                                confirmBox.yesB.onRelease = function ()
                                {
                                    if (isBusy == false)
                                    {
                                        canBuyItem = false;
                                        getTimestamp("creditShopBuy", _root.creditShopArray[this.a][0], undefined, undefined, undefined, this._parent.amount);
                                    } // end if
                                };
                                assignMouseEvents(confirmBox.yesB);
                                confirmBox.noB.onRelease = function ()
                                {
                                    removeMovieClip (confirmBox);
                                    removeMovieClip (darkScreen);
                                };
                                assignMouseEvents(confirmBox.noB);
                                removeMovieClip (inputBox);
                            }
                            else
                            {
                                systemMessage("You don\'t have enough credits for that many.");
                            } // end else if
                        }
                        else
                        {
                            systemMessage("Please enter a valid amount.");
                        } // end else if
                    };
                    inputBox.cancelB.onRelease = function ()
                    {
                        removeMovieClip (inputBox);
                        removeMovieClip (darkScreen);
                    };
                    inputBox.exitB.onRelease = function ()
                    {
                        removeMovieClip (inputBox);
                        removeMovieClip (darkScreen);
                    };
                    assignMouseEvents(inputBox.confirmB);
                    assignMouseEvents(inputBox.cancelB);
                    assignMouseEvents(inputBox.exitB);
                } // end if
            };
            assignMouseEvents(_loc3.buyB);
            _loc3.giftB.a = a;
            _loc3.giftB.onRelease = function ()
            {
                this.gotoAndStop(1);
                if (inputBox._x == undefined && confirmBox._x == undefined && giftBox._x == undefined)
                {
                    var _loc3 = false;
                    if (credits >= _root.creditShopArray[this.a][2])
                    {
                        _loc3 = true;
                    } // end if
                    guiUp = true;
                    darkScreen = _root.mainGUI.attachMovie("darkScreen", "darkScreen", _root.mainGUI.getNextHighestDepth());
                    darkScreen._width = Stage.width;
                    darkScreen._height = Stage.height;
                    darkScreen._alpha = 70;
                    giftBox = _root.mainGUI.attachMovie("creditGiftBox", "giftBox", _root.mainGUI.getNextHighestDepth());
                    Selection.setFocus(giftBox.nameT);
                    giftBox.tickBox.onRelease = function ()
                    {
                        if (this._currentframe == 1)
                        {
                            this.gotoAndStop(2);
                        }
                        else
                        {
                            this.gotoAndStop(1);
                        } // end else if
                    };
                    giftBox.sendB.a = this.a;
                    giftBox.sendB.onRelease = function ()
                    {
                        if (isBusy == false && giftBox.nameT.text != "" && String(giftBox.nameT.text).toLowerCase() != username.toLowerCase() && canBuyItem == true)
                        {
                            canBuyItem = false;
                            getTimestamp("creditShopBuy", _root.creditShopArray[this.a][0], 1, giftBox.tickBox._currentframe, giftBox.nameT.text);
                        } // end if
                    };
                    giftBox.cancelB.onRelease = function ()
                    {
                        guiUp = false;
                        removeMovieClip (giftBox);
                        removeMovieClip (darkScreen);
                        Selection.setFocus(null);
                    };
                    giftBox.exitB.onRelease = function ()
                    {
                        guiUp = false;
                        removeMovieClip (giftBox);
                        removeMovieClip (darkScreen);
                        Selection.setFocus(null);
                    };
                    assignMouseEvents(giftBox.sendB);
                    assignMouseEvents(giftBox.cancelB);
                    assignMouseEvents(giftBox.exitB);
                } // end if
            };
            assignMouseEvents(_loc3.giftB);
            ++a;
        } // end while
    }
    else if (category == "Decorative")
    {
        var a = 0;
        while (a < _root.creditShopDecorativeArray.length)
        {
            if (a % 3 == 0 && a != 0)
            {
                ++_loc4;
            } // end if
            _loc3 = mainGUI.creditShop.itemList.attachMovie("creditShopBox", "creditShopBox_" + a, mainGUI.creditShop.itemList.getNextHighestDepth());
            _loc3._x = -207 + (a - 3 * _loc4) * 192;
            _loc3._y = -130 + _loc4 * 142;
            _loc3.nameT.htmlText = "<b>" + _root.creditShopDecorativeArray[a][0];
            _loc3.descriptionT.htmlText = "<b>" + _root.creditShopDecorativeArray[a][1];
            _loc3.priceT.htmlText = "<b>" + _root.creditShopDecorativeArray[a][2];
            _loc3.i.gotoAndStop(_root.creditShopDecorativeArray[a][0]);
            _loc3.buyB.a = a;
            _loc3.buyB.onRelease = function ()
            {
                this.gotoAndStop(1);
                var _loc4 = false;
                if (credits >= _root.creditShopDecorativeArray[this.a][2])
                {
                    _loc4 = true;
                } // end if
                if (_loc4 == true && inputBox._x == undefined && confirmBox._x == undefined && giftBox._x == undefined)
                {
                    darkenScreen2();
                    var confirmBox = _root.attachMovie("merchantBox", "confirmBox", _root.getNextHighestDepth());
                    confirmBox._x = newWidth / 2;
                    confirmBox._y = newHeight / 2;
                    confirmBox.i.gotoAndStop(_root.creditShopDecorativeArray[this.a][0]);
                    confirmBox.nameT.htmlText = "<b>" + _root.creditShopDecorativeArray[this.a][0];
                    var _loc3 = _root.creditShopDecorativeArray[this.a][0].toLowerCase().charAt(0);
                    if (_loc3 == "a" || _loc3 == "e" || _loc3 == "u" || _loc3 == "i" || _loc3 == "o")
                    {
                        confirmBox.msgT.htmlText = "<b>Are you sure you want to buy an " + _root.creditShopDecorativeArray[this.a][0] + " (" + _root.creditShopDecorativeArray[this.a][2] + "c)?";
                    }
                    else
                    {
                        confirmBox.msgT.htmlText = "<b>Are you sure you want to buy a " + _root.creditShopDecorativeArray[this.a][0] + " (" + _root.creditShopDecorativeArray[this.a][2] + "c)?";
                    } // end else if
                    confirmBox.yesB.a = this.a;
                    confirmBox.yesB.onRelease = function ()
                    {
                        if (isBusy == false && canBuyItem == true)
                        {
                            canBuyItem = false;
                            getTimestamp("creditShopBuy", _root.creditShopDecorativeArray[this.a][0]);
                        } // end if
                    };
                    assignMouseEvents(confirmBox.yesB);
                    confirmBox.noB.onRelease = function ()
                    {
                        removeMovieClip (confirmBox);
                        removeMovieClip (darkScreen);
                    };
                    assignMouseEvents(confirmBox.noB);
                } // end if
            };
            assignMouseEvents(_loc3.buyB);
            _loc3.giftB.a = a;
            _loc3.giftB.onRelease = function ()
            {
                this.gotoAndStop(1);
                if (inputBox._x == undefined && confirmBox._x == undefined && giftBox._x == undefined)
                {
                    var _loc3 = false;
                    if (credits >= _root.creditShopDecorativeArray[this.a][2])
                    {
                        _loc3 = true;
                    } // end if
                    guiUp = true;
                    darkScreen = _root.mainGUI.attachMovie("darkScreen", "darkScreen", _root.mainGUI.getNextHighestDepth());
                    darkScreen._width = Stage.width;
                    darkScreen._height = Stage.height;
                    darkScreen._alpha = 70;
                    giftBox = _root.mainGUI.attachMovie("creditGiftBox", "giftBox", _root.mainGUI.getNextHighestDepth());
                    Selection.setFocus(giftBox.nameT);
                    giftBox.tickBox.onRelease = function ()
                    {
                        if (this._currentframe == 1)
                        {
                            this.gotoAndStop(2);
                        }
                        else
                        {
                            this.gotoAndStop(1);
                        } // end else if
                    };
                    giftBox.sendB.a = this.a;
                    giftBox.sendB.onRelease = function ()
                    {
                        if (isBusy == false && giftBox.nameT.text != "" && String(giftBox.nameT.text).toLowerCase() != username.toLowerCase() && canBuyItem == true)
                        {
                            canBuyItem = false;
                            getTimestamp("creditShopBuy", _root.creditShopDecorativeArray[this.a][0], 1, giftBox.tickBox._currentframe, giftBox.nameT.text);
                        } // end if
                    };
                    giftBox.cancelB.onRelease = function ()
                    {
                        guiUp = false;
                        removeMovieClip (giftBox);
                        removeMovieClip (darkScreen);
                        Selection.setFocus(null);
                    };
                    giftBox.exitB.onRelease = function ()
                    {
                        guiUp = false;
                        removeMovieClip (giftBox);
                        removeMovieClip (darkScreen);
                        Selection.setFocus(null);
                    };
                    assignMouseEvents(giftBox.sendB);
                    assignMouseEvents(giftBox.cancelB);
                    assignMouseEvents(giftBox.exitB);
                } // end if
            };
            assignMouseEvents(_loc3.giftB);
            ++a;
        } // end while
    }
    else if (category == "Event")
    {
        var a = 0;
        while (a < _root.creditShopEventArray.length)
        {
            if (a % 3 == 0 && a != 0)
            {
                ++_loc4;
            } // end if
            _loc3 = mainGUI.creditShop.itemList.attachMovie("creditShopBox", "creditShopBox_" + a, mainGUI.creditShop.itemList.getNextHighestDepth());
            _loc3._x = -207 + (a - 3 * _loc4) * 192;
            _loc3._y = -130 + _loc4 * 142;
            _loc3.nameT.htmlText = "<b>" + _root.creditShopEventArray[a][0];
            _loc3.descriptionT.htmlText = "<b>" + _root.creditShopEventArray[a][1];
            _loc3.priceT.htmlText = "<b>" + _root.creditShopEventArray[a][2];
            _loc3.i.gotoAndStop(_root.creditShopEventArray[a][0]);
            _loc3.buyB.a = a;
            _loc3.buyB.onRelease = function ()
            {
                this.gotoAndStop(1);
                var _loc4 = false;
                if (credits >= _root.creditShopEventArray[this.a][2])
                {
                    _loc4 = true;
                } // end if
                if (_loc4 == true && inputBox._x == undefined && confirmBox._x == undefined && giftBox._x == undefined)
                {
                    darkenScreen2();
                    var confirmBox = _root.attachMovie("merchantBox", "confirmBox", _root.getNextHighestDepth());
                    confirmBox._x = newWidth / 2;
                    confirmBox._y = newHeight / 2;
                    confirmBox.i.gotoAndStop(_root.creditShopEventArray[this.a][0]);
                    confirmBox.nameT.htmlText = "<b>" + _root.creditShopEventArray[this.a][0];
                    var _loc3 = _root.creditShopEventArray[this.a][0].toLowerCase().charAt(0);
                    if (_loc3 == "a" || _loc3 == "e" || _loc3 == "u" || _loc3 == "i" || _loc3 == "o")
                    {
                        confirmBox.msgT.htmlText = "<b>Are you sure you want to buy an " + _root.creditShopEventArray[this.a][0] + " (" + _root.creditShopEventArray[this.a][2] + "c)?";
                    }
                    else
                    {
                        confirmBox.msgT.htmlText = "<b>Are you sure you want to buy a " + _root.creditShopEventArray[this.a][0] + " (" + _root.creditShopEventArray[this.a][2] + "c)?";
                    } // end else if
                    confirmBox.yesB.a = this.a;
                    confirmBox.yesB.onRelease = function ()
                    {
                        if (isBusy == false && canBuyItem == true)
                        {
                            canBuyItem = false;
                            getTimestamp("creditShopBuy", _root.creditShopEventArray[this.a][0]);
                        } // end if
                    };
                    assignMouseEvents(confirmBox.yesB);
                    confirmBox.noB.onRelease = function ()
                    {
                        removeMovieClip (confirmBox);
                        removeMovieClip (darkScreen);
                    };
                    assignMouseEvents(confirmBox.noB);
                } // end if
            };
            assignMouseEvents(_loc3.buyB);
            _loc3.giftB.a = a;
            _loc3.giftB.onRelease = function ()
            {
                this.gotoAndStop(1);
                if (inputBox._x == undefined && confirmBox._x == undefined && giftBox._x == undefined)
                {
                    var _loc3 = false;
                    if (credits >= _root.creditShopEventArray[this.a][2])
                    {
                        _loc3 = true;
                    } // end if
                    guiUp = true;
                    darkScreen = _root.mainGUI.attachMovie("darkScreen", "darkScreen", _root.mainGUI.getNextHighestDepth());
                    darkScreen._width = Stage.width;
                    darkScreen._height = Stage.height;
                    darkScreen._alpha = 70;
                    giftBox = _root.mainGUI.attachMovie("creditGiftBox", "giftBox", _root.mainGUI.getNextHighestDepth());
                    Selection.setFocus(giftBox.nameT);
                    giftBox.tickBox.onRelease = function ()
                    {
                        if (this._currentframe == 1)
                        {
                            this.gotoAndStop(2);
                        }
                        else
                        {
                            this.gotoAndStop(1);
                        } // end else if
                    };
                    giftBox.sendB.a = this.a;
                    giftBox.sendB.onRelease = function ()
                    {
                        if (isBusy == false && giftBox.nameT.text != "" && String(giftBox.nameT.text).toLowerCase() != username.toLowerCase() && canBuyItem == true)
                        {
                            canBuyItem = false;
                            getTimestamp("creditShopBuy", _root.creditShopEventArray[this.a][0], 1, giftBox.tickBox._currentframe, giftBox.nameT.text);
                        } // end if
                    };
                    giftBox.cancelB.onRelease = function ()
                    {
                        guiUp = false;
                        removeMovieClip (giftBox);
                        removeMovieClip (darkScreen);
                        Selection.setFocus(null);
                    };
                    giftBox.exitB.onRelease = function ()
                    {
                        guiUp = false;
                        removeMovieClip (giftBox);
                        removeMovieClip (darkScreen);
                        Selection.setFocus(null);
                    };
                    assignMouseEvents(giftBox.sendB);
                    assignMouseEvents(giftBox.cancelB);
                    assignMouseEvents(giftBox.exitB);
                } // end if
            };
            assignMouseEvents(_loc3.giftB);
            ++a;
        } // end while
    }
    else if (category == "Mount")
    {
        var a = 0;
        while (a < _root.creditShopMountArray.length)
        {
            if (a % 3 == 0 && a != 0)
            {
                ++_loc4;
            } // end if
            _loc3 = mainGUI.creditShop.itemList.attachMovie("creditShopBox", "creditShopBox_" + a, mainGUI.creditShop.itemList.getNextHighestDepth());
            _loc3._x = -207 + (a - 3 * _loc4) * 192;
            _loc3._y = -130 + _loc4 * 142;
            _loc3.nameT.htmlText = "<b>" + _root.creditShopMountArray[a][0];
            _loc3.descriptionT.htmlText = "<b>" + _root.creditShopMountArray[a][1];
            _loc3.priceT.htmlText = "<b>" + _root.creditShopMountArray[a][2];
            _loc3.i.gotoAndStop(_root.creditShopMountArray[a][0]);
            _loc3.buyB.a = a;
            _loc3.buyB.onRelease = function ()
            {
                this.gotoAndStop(1);
                var _loc4 = false;
                if (credits >= _root.creditShopMountArray[this.a][2])
                {
                    _loc4 = true;
                } // end if
                if (_loc4 == true && inputBox._x == undefined && confirmBox._x == undefined && giftBox._x == undefined)
                {
                    darkenScreen2();
                    var confirmBox = _root.attachMovie("merchantBox", "confirmBox", _root.getNextHighestDepth());
                    confirmBox._x = newWidth / 2;
                    confirmBox._y = newHeight / 2;
                    confirmBox.i.gotoAndStop(_root.creditShopMountArray[this.a][0]);
                    confirmBox.nameT.htmlText = "<b>" + _root.creditShopMountArray[this.a][0];
                    var _loc3 = _root.creditShopMountArray[this.a][0].toLowerCase().charAt(0);
                    if (_loc3 == "a" || _loc3 == "e" || _loc3 == "u" || _loc3 == "i" || _loc3 == "o")
                    {
                        confirmBox.msgT.htmlText = "<b>Are you sure you want to buy an " + _root.creditShopMountArray[this.a][0] + " (" + _root.creditShopMountArray[this.a][2] + "c)?";
                    }
                    else
                    {
                        confirmBox.msgT.htmlText = "<b>Are you sure you want to buy a " + _root.creditShopMountArray[this.a][0] + " (" + _root.creditShopMountArray[this.a][2] + "c)?";
                    } // end else if
                    confirmBox.yesB.a = this.a;
                    confirmBox.yesB.onRelease = function ()
                    {
                        if (isBusy == false && canBuyItem == true)
                        {
                            canBuyItem = false;
                            getTimestamp("creditShopBuy", _root.creditShopMountArray[this.a][0]);
                        } // end if
                    };
                    assignMouseEvents(confirmBox.yesB);
                    confirmBox.noB.onRelease = function ()
                    {
                        removeMovieClip (confirmBox);
                        removeMovieClip (darkScreen);
                    };
                    assignMouseEvents(confirmBox.noB);
                } // end if
            };
            assignMouseEvents(_loc3.buyB);
            _loc3.giftB.a = a;
            _loc3.giftB.onRelease = function ()
            {
                this.gotoAndStop(1);
                if (inputBox._x == undefined && confirmBox._x == undefined && giftBox._x == undefined)
                {
                    var _loc3 = false;
                    if (credits >= _root.creditShopMountArray[this.a][2])
                    {
                        _loc3 = true;
                    } // end if
                    guiUp = true;
                    darkScreen = _root.mainGUI.attachMovie("darkScreen", "darkScreen", _root.mainGUI.getNextHighestDepth());
                    darkScreen._width = Stage.width;
                    darkScreen._height = Stage.height;
                    darkScreen._alpha = 70;
                    giftBox = _root.mainGUI.attachMovie("creditGiftBox", "giftBox", _root.mainGUI.getNextHighestDepth());
                    Selection.setFocus(giftBox.nameT);
                    giftBox.tickBox.onRelease = function ()
                    {
                        if (this._currentframe == 1)
                        {
                            this.gotoAndStop(2);
                        }
                        else
                        {
                            this.gotoAndStop(1);
                        } // end else if
                    };
                    giftBox.sendB.a = this.a;
                    giftBox.sendB.onRelease = function ()
                    {
                        if (isBusy == false && giftBox.nameT.text != "" && String(giftBox.nameT.text).toLowerCase() != username.toLowerCase() && canBuyItem == true)
                        {
                            canBuyItem = false;
                            getTimestamp("creditShopBuy", _root.creditShopMountArray[this.a][0], 1, giftBox.tickBox._currentframe, giftBox.nameT.text);
                        } // end if
                    };
                    giftBox.cancelB.onRelease = function ()
                    {
                        guiUp = false;
                        removeMovieClip (giftBox);
                        removeMovieClip (darkScreen);
                        Selection.setFocus(null);
                    };
                    giftBox.exitB.onRelease = function ()
                    {
                        guiUp = false;
                        removeMovieClip (giftBox);
                        removeMovieClip (darkScreen);
                        Selection.setFocus(null);
                    };
                    assignMouseEvents(giftBox.sendB);
                    assignMouseEvents(giftBox.cancelB);
                    assignMouseEvents(giftBox.exitB);
                } // end if
            };
            assignMouseEvents(_loc3.giftB);
            ++a;
        } // end while
    } // end else if
} // End of the function
function returnOldIcon(target, x, y)
{
    target._x = x;
    target._y = y;
    target._alpha = 100;
} // End of the function
function runFromBattle()
{
    if (isWaiting == false && userPokemon[activePokemon].currentHp > 0 && battleType == "wild" && _root.isBusy == false && (_root.dungeonBattle == false || _root.map.indexOf("Safari Zone") != -1))
    {
        getTimestamp("escapeBattle");
    } // end if
} // End of the function
function moveIdToString(type)
{
    switch (Number(type))
    {
        case 1:
        {
            return ("normal");
            break;
        } 
        case 2:
        {
            return ("fighting");
            break;
        } 
        case 3:
        {
            return ("flying");
            break;
        } 
        case 4:
        {
            return ("poison");
            break;
        } 
        case 5:
        {
            return ("ground");
            break;
        } 
        case 6:
        {
            return ("rock");
            break;
        } 
        case 7:
        {
            return ("bug");
            break;
        } 
        case 8:
        {
            return ("ghost");
            break;
        } 
        case 9:
        {
            return ("steel");
            break;
        } 
        case 10:
        {
            return ("fire");
            break;
        } 
        case 11:
        {
            return ("water");
            break;
        } 
        case 12:
        {
            return ("grass");
            break;
        } 
        case 13:
        {
            return ("electric");
            break;
        } 
        case 14:
        {
            return ("psychic");
            break;
        } 
        case 15:
        {
            return ("ice");
            break;
        } 
        case 16:
        {
            return ("dragon");
            break;
        } 
        case 17:
        {
            return ("dark");
            break;
        } 
        case 18:
        {
            return ("fairy");
            break;
        } 
    } // End of switch
} // End of the function
function antiSpeedHack()
{
    myDate2 = new Date();
    timeDifference = Math.round(myDate2.getTime() + myDate2.getTimezoneOffset() * 60000) - oldTime;
    oldTime = Math.round(myDate2.getTime() + myDate2.getTimezoneOffset() * 60000);
    if (timeDifference < 850)
    {
        ++slowMessage;
        if (slowMessage >= 15)
        {
            _root.error = "Speedhack Problem";
            _root.gotoAndStop("errorconnecting");
        } // end if
    } // end if
} // End of the function
function antiSpeedHack2()
{
    slowMessage = 0;
} // End of the function
function stopBW()
{
    delete mouseListener;
} // End of the function
function format(num)
{
    var _loc5 = num.toString();
    var _loc1 = _loc5.slice(0, deciPos);
    var _loc2 = _loc1.length;
    if (_loc2 <= 3)
    {
        return (String(num));
    }
    else if (_loc2 > 3 && _loc2 < 7)
    {
        var _loc8 = _loc1.slice(0, -3);
        var _loc3 = _loc1.slice(-3);
        var _loc6 = _loc8 + "," + _loc3;
    }
    else if (_loc2 > 6 && _loc2 < 10)
    {
        _loc8 = _loc1.slice(0, -6);
        _loc3 = _loc1.slice(-6, -3);
        var _loc7 = _loc1.slice(-3);
        _loc6 = _loc8 + "," + _loc3 + "," + _loc7;
    }
    else if (_loc2 > 9 && _loc2 < 13)
    {
        _loc8 = _loc1.slice(0, -9);
        _loc3 = _loc1.slice(-9, -6);
        _loc7 = _loc1.slice(-6, -3);
        var _loc4 = _loc1.slice(-3);
        _loc6 = _loc8 + "," + _loc3 + "," + _loc7 + "," + _loc4;
    } // end else if
    return (_loc6);
} // End of the function
function makeItemBox()
{
    for (var _loc2 = 0; _loc2 < 20; ++_loc2)
    {
        mainGUI.itemBox["i" + _loc2].gotoAndStop(1);
        mainGUI.itemBox["p" + _loc2]._visible = false;
        mainGUI.itemBox["t" + _loc2].htmlText = "";
    } // end of for
    for (var _loc2 = 0; _loc2 < _root.itemBox.length; ++_loc2)
    {
        if (_root.itemBox[_loc2][0].indexOf("HM") != -1 || _root.itemBox[_loc2][0].indexOf("TM") != -1 && _root.itemBox[_loc2][0] != "TM Box")
        {
            mainGUI.itemBox["i" + _loc2].gotoAndStop("tmhm");
        }
        else
        {
            mainGUI.itemBox["i" + _loc2].gotoAndStop(_root.itemBox[_loc2][0]);
        } // end else if
        mainGUI.itemBox["t" + _loc2].htmlText = "<b>" + _root.itemBox[_loc2][1];
        if (_loc2 == 19)
        {
            break;
        } // end if
    } // end of for
} // End of the function
function makePokemonBox()
{
    for (var _loc2 = 0; _loc2 < 20; ++_loc2)
    {
        mainGUI.itemBox["i" + _loc2].gotoAndStop(1);
        mainGUI.itemBox["p" + _loc2]._visible = false;
        mainGUI.itemBox["t" + _loc2].htmlText = "";
    } // end of for
    for (var _loc2 = 0; _loc2 < _root.pokemonBox.length; ++_loc2)
    {
        mainGUI.itemBox["p" + _loc2].gotoAndStop(_root.pokemonBox[_loc2].id);
        mainGUI.itemBox["p" + _loc2]._visible = true;
        mainGUI.itemBox["t" + _loc2].htmlText = "<b>1";
        if (_loc2 == 19)
        {
            break;
        } // end if
    } // end of for
} // End of the function
function loadChatSettings()
{
    if (mainGUI.globalChatT._visible == true)
    {
        mainGUI.chatSettings.nameT.htmlText = "<b>English Chat Settings";
        if (englishChatSettings[0] == "0")
        {
            mainGUI.chatSettings.tickBox1.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox1.gotoAndStop(2);
        } // end else if
        if (englishChatSettings[1] == "0")
        {
            mainGUI.chatSettings.tickBox2.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox2.gotoAndStop(2);
        } // end else if
        if (englishChatSettings[2] == "0")
        {
            mainGUI.chatSettings.tickBox3.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox3.gotoAndStop(2);
        } // end else if
        if (englishChatSettings[3] == "0")
        {
            mainGUI.chatSettings.tickBox4.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox4.gotoAndStop(2);
        } // end else if
        if (englishChatSettings[4] == "0")
        {
            mainGUI.chatSettings.tickBox5.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox5.gotoAndStop(2);
        } // end else if
        if (englishChatSettings[5] == "0")
        {
            mainGUI.chatSettings.tickBox6.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox6.gotoAndStop(2);
        } // end else if
    }
    else if (mainGUI.tradeChatT._visible == true)
    {
        mainGUI.chatSettings.nameT.htmlText = "<b>Trading Chat Settings";
        if (tradingChatSettings[0] == "0")
        {
            mainGUI.chatSettings.tickBox1.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox1.gotoAndStop(2);
        } // end else if
        if (tradingChatSettings[1] == "0")
        {
            mainGUI.chatSettings.tickBox2.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox2.gotoAndStop(2);
        } // end else if
        if (tradingChatSettings[2] == "0")
        {
            mainGUI.chatSettings.tickBox3.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox3.gotoAndStop(2);
        } // end else if
        if (tradingChatSettings[3] == "0")
        {
            mainGUI.chatSettings.tickBox4.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox4.gotoAndStop(2);
        } // end else if
        if (tradingChatSettings[4] == "0")
        {
            mainGUI.chatSettings.tickBox5.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox5.gotoAndStop(2);
        } // end else if
        if (tradingChatSettings[5] == "0")
        {
            mainGUI.chatSettings.tickBox6.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox6.gotoAndStop(2);
        } // end else if
    }
    else if (mainGUI.localChatT._visible == true)
    {
        mainGUI.chatSettings.nameT.htmlText = "<b>Local Chat Settings";
        if (localChatSettings[0] == "0")
        {
            mainGUI.chatSettings.tickBox1.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox1.gotoAndStop(2);
        } // end else if
        if (localChatSettings[1] == "0")
        {
            mainGUI.chatSettings.tickBox2.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox2.gotoAndStop(2);
        } // end else if
        if (localChatSettings[2] == "0")
        {
            mainGUI.chatSettings.tickBox3.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox3.gotoAndStop(2);
        } // end else if
        if (localChatSettings[3] == "0")
        {
            mainGUI.chatSettings.tickBox4.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox4.gotoAndStop(2);
        } // end else if
        if (localChatSettings[4] == "0")
        {
            mainGUI.chatSettings.tickBox5.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox5.gotoAndStop(2);
        } // end else if
        if (localChatSettings[5] == "0")
        {
            mainGUI.chatSettings.tickBox6.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox6.gotoAndStop(2);
        } // end else if
    }
    else if (mainGUI.nonEnglishChatT._visible == true)
    {
        mainGUI.chatSettings.nameT.htmlText = "<b>Non English Chat Settings";
        if (nonEnglishChatSettings[0] == "0")
        {
            mainGUI.chatSettings.tickBox1.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox1.gotoAndStop(2);
        } // end else if
        if (nonEnglishChatSettings[1] == "0")
        {
            mainGUI.chatSettings.tickBox2.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox2.gotoAndStop(2);
        } // end else if
        if (nonEnglishChatSettings[2] == "0")
        {
            mainGUI.chatSettings.tickBox3.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox3.gotoAndStop(2);
        } // end else if
        if (nonEnglishChatSettings[3] == "0")
        {
            mainGUI.chatSettings.tickBox4.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox4.gotoAndStop(2);
        } // end else if
        if (nonEnglishChatSettings[4] == "0")
        {
            mainGUI.chatSettings.tickBox5.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox5.gotoAndStop(2);
        } // end else if
        if (nonEnglishChatSettings[5] == "0")
        {
            mainGUI.chatSettings.tickBox6.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox6.gotoAndStop(2);
        } // end else if
    }
    else if (mainGUI.clanChatT._visible == true)
    {
        mainGUI.chatSettings.nameT.htmlText = "<b>Clan Chat Settings";
        if (clanChatSettings[0] == "0")
        {
            mainGUI.chatSettings.tickBox1.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox1.gotoAndStop(2);
        } // end else if
        if (clanChatSettings[1] == "0")
        {
            mainGUI.chatSettings.tickBox2.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox2.gotoAndStop(2);
        } // end else if
        if (clanChatSettings[2] == "0")
        {
            mainGUI.chatSettings.tickBox3.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox3.gotoAndStop(2);
        } // end else if
        if (clanChatSettings[3] == "0")
        {
            mainGUI.chatSettings.tickBox4.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox4.gotoAndStop(2);
        } // end else if
        if (clanChatSettings[4] == "0")
        {
            mainGUI.chatSettings.tickBox5.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox5.gotoAndStop(2);
        } // end else if
        if (clanChatSettings[5] == "0")
        {
            mainGUI.chatSettings.tickBox6.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox6.gotoAndStop(2);
        } // end else if
    }
    else if (mainGUI.customChatT._visible == true)
    {
        mainGUI.chatSettings.nameT.htmlText = "<b>Custom Chat Settings";
        if (customChatSettings[0] == "0")
        {
            mainGUI.chatSettings.tickBox1.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox1.gotoAndStop(2);
        } // end else if
        if (customChatSettings[1] == "0")
        {
            mainGUI.chatSettings.tickBox2.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox2.gotoAndStop(2);
        } // end else if
        if (customChatSettings[2] == "0")
        {
            mainGUI.chatSettings.tickBox3.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox3.gotoAndStop(2);
        } // end else if
        if (customChatSettings[3] == "0")
        {
            mainGUI.chatSettings.tickBox4.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox4.gotoAndStop(2);
        } // end else if
        if (customChatSettings[4] == "0")
        {
            mainGUI.chatSettings.tickBox5.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox5.gotoAndStop(2);
        } // end else if
        if (customChatSettings[5] == "0")
        {
            mainGUI.chatSettings.tickBox6.gotoAndStop(1);
        }
        else
        {
            mainGUI.chatSettings.tickBox6.gotoAndStop(2);
        } // end else if
    } // end else if
    mainGUI.chatSettings.swapDepths(mainGUI.getNextHighestDepth());
    mainGUI.chatSettings._visible = true;
} // End of the function
function getTimestamp(type, p1, p2, p3, p4, p5)
{
    if (_root.isBusy == false)
    {
        if (!(type == "getStartingInfo" && _root.inited == true))
        {
            if (type != "sendMovement" && type != "updateXYZ" && type != "sendFace2Goto" && type != "sendCapeGoto" && type != "sendHatGoto" && type != "sendWingGoto" && type != "sendTailGoto" && type != "asf8n2fs" && type != "asf8n2fa" && type != "sendMineAnimation" && type != "sendStopMineAnimation" && type != "sendFishAnimation" && type != "r" && type != "saveData" && type != "loadCustomMaps" && type != "sendNeckGoto" && type != "updateMount" && type != "sendShirtGoto" && type != "sendPantsGoto" && type != "sendCostumeGoto")
            {
                if (_root.isBusyEnabled == true)
                {
                    _root.isBusy = true;
                } // end if
            } // end if
            if (type == "forgetMove" || type == "useItem" || type == "command" || type == "updateMap" || type == "reorderStoragePokemon" || type == "choosePokemon" || type == "buyItem" || type == "christmasBuy" || type == "summerBuy" || type == "halloweenBuy" || type == "removeTradeItem" || type == "declineBattle" || type == "acceptBattle" || type == "acceptTrade" || type == "declineTrade" || type == "acceptEvolve" || type == "declineEvolve" || type == "acceptMerchantItem" || type == "getSSTicket" || type == "getHM" || type == "getItem" || type == "purchaseSafariZoneTicket" || type == "safariTimeOver" || type == "cancelTrade" || type == "confirmTrade" || type == "finalConfirm" || type == "addCash" || type == "relearnList" || type == "relearnList2" || type == "relearnList3" || type == "relearnList4" || type == "relearnMove" || type == "relearnMove2" || type == "relearnMove3" || type == "relearnMove4" || type == "stepsWalked" || type == "releasePokemon" || type == "createClan" || type == "depositClanBank" || type == "withdrawClanBank" || type == "kickClanMember" || type == "sendClanInvite" || type == "acceptClanInvite" || type == "declineClanInvite" || type == "disbandClan" || type == "leaveClan" || type == "promoteMember" || type == "upgradeRoster" || type == "sendGift" || type == "exchangeShards" || type == "casinoBuy" || type == "slotSpin" || type == "clanWarBuy" || type == "pvpShopBuy")
            {
                var _loc2 = {};
                _loc2.te = getTimer();
                _loc2.pk = generateRandomString(rand(5, 20));
                _loc2.pke = _root.kg3(_loc2.te, _loc2.pk);
                var _loc10 = finishBuildingXMLPacket(type, _loc2, p1, p2, p3, p4);
                smartfox.sendXtMessage("PokemonPlanetExt", _loc10[1], _loc10[0], "xml");
            }
            else if (type == "useItem2")
            {
                _loc2 = {};
                _loc2.te = getTimer();
                _loc2.pk = generateRandomString(rand(5, 20));
                _loc2.pke = _root.kg3(_loc2.te, _loc2.pk);
                if (trading == false)
                {
                    _loc2.p = p1;
                    _loc2.i = p2;
                    if (p2 == "Portable PC")
                    {
                        if (player.tileX != undefined)
                        {
                            _loc2.x = player.tileX;
                            _loc2.y = player.tileY;
                        }
                        else
                        {
                            _loc2.x = _root.tileX;
                            _loc2.y = _root.tileY;
                        } // end if
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "b11", _loc2, "xml");
                }
                else if (inventory[_root.itemNum][0] != player.hat && inventory[_root.itemNum][0] != player.wings && inventory[_root.itemNum][0] != player.tail && inventory[_root.itemNum][0] != player.face2 && inventory[_root.itemNum][0] != player.cape && inventory[_root.itemNum][0] != player.neck && inventory[_root.itemNum][0] != player.costume)
                {
                    _loc2.i = _root.itemNum;
                    _loc2.a = false;
                    if (p2 == true)
                    {
                        _loc2.a = p2;
                        _loc2.i = p1;
                    } // end if
                    if (p3 != undefined)
                    {
                        _loc2.n = p3;
                    }
                    else
                    {
                        _loc2.n = 1;
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "b12", _loc2, "xml");
                }
                else
                {
                    _root.isBusy = false;
                } // end else if
            }
            else if (type == "saveData")
            {
                smartfox.sendXtMessage("PokemonPlanetExt", "b26", {}, "xml");
            }
            else if (type == "sendMovement")
            {
                _loc2 = [];
                if (_root.dir == "up")
                {
                    _loc2.push("u");
                }
                else if (_root.dir == "down")
                {
                    _loc2.push("d");
                }
                else if (_root.dir == "left")
                {
                    _loc2.push("l");
                }
                else if (_root.dir == "right")
                {
                    _loc2.push("r");
                } // end else if
                if (moveType != "")
                {
                    if (moveType == "bike")
                    {
                        _loc2.push("b");
                    }
                    else if (moveType == "surf")
                    {
                        if (_root.moveMapSpeed >= 16)
                        {
                            _loc2.push("z");
                        }
                        else
                        {
                            _loc2.push("s");
                        } // end if
                    } // end else if
                } // end else if
                smartfox.sendXtMessage("PokemonPlanetExt", "m", _loc2, "str");
            }
            else if (type == "sendFishAnimation")
            {
                _loc2 = [];
                if (_root.dir == "up")
                {
                    _loc2.push("u");
                }
                else if (_root.dir == "down")
                {
                    _loc2.push("d");
                }
                else if (_root.dir == "left")
                {
                    _loc2.push("l");
                }
                else if (_root.dir == "right")
                {
                    _loc2.push("r");
                } // end else if
                smartfox.sendXtMessage("PokemonPlanetExt", "f", _loc2, "str");
            }
            else if (type == "sendMineAnimation")
            {
                _loc2 = [];
                if (_root.dir == "up")
                {
                    _loc2.push("u");
                }
                else if (_root.dir == "down")
                {
                    _loc2.push("d");
                }
                else if (_root.dir == "left")
                {
                    _loc2.push("l");
                }
                else if (_root.dir == "right")
                {
                    _loc2.push("r");
                } // end else if
                smartfox.sendXtMessage("PokemonPlanetExt", "f2", _loc2, "str");
            }
            else if (type == "sendStopMineAnimation")
            {
                _loc2 = [];
                if (_root.dir == "up")
                {
                    _loc2.push("u");
                }
                else if (_root.dir == "down")
                {
                    _loc2.push("d");
                }
                else if (_root.dir == "left")
                {
                    _loc2.push("l");
                }
                else if (_root.dir == "right")
                {
                    _loc2.push("r");
                } // end else if
                smartfox.sendXtMessage("PokemonPlanetExt", "f3", _loc2, "str");
            }
            else if (type == "loadCustomMaps")
            {
                smartfox.sendXtMessage("PokemonPlanetExt", "b106", [], "str");
            }
            else if (type == "updateXYZ")
            {
                _loc2 = [];
                _loc2.push(player.tileX);
                _loc2.push(player.tileY);
                _loc2.push(_root.encryptedTileX);
                _loc2.push(_root.encryptedTileY);
                _loc2.push(_root.tileZ);
                _loc2.push(_root.map);
                smartfox.sendXtMessage("PokemonPlanetExt", "r8", _loc2, "str");
            }
            else if (type == "r")
            {
                smartfox.sendXtMessage("PokemonPlanetExt", "r", [], "str");
            }
            else if (type == "asf8n2fs")
            {
                _loc2 = [];
                _loc2.push(p1);
                _loc2.push(p2);
                _loc2.push(p3);
                _loc2.push(_root.bWT);
                smartfox.sendXtMessage("PokemonPlanetExt", "b68", _loc2, "str");
            }
            else if (type == "asf8n2fa")
            {
                _loc2 = [];
                _loc2.push(p1);
                _loc2.push(p2);
                _loc2.push(_root.bWT);
                smartfox.sendXtMessage("PokemonPlanetExt", "b69", _loc2, "str");
            }
            else if (type == "sendHatGoto")
            {
                smartfox.sendXtMessage("PokemonPlanetExt", "b89", [], "str");
            }
            else if (type == "sendWingGoto")
            {
                smartfox.sendXtMessage("PokemonPlanetExt", "b90", [], "str");
            }
            else if (type == "sendTailGoto")
            {
                smartfox.sendXtMessage("PokemonPlanetExt", "b91", [], "str");
            }
            else if (type == "sendFace2Goto")
            {
                smartfox.sendXtMessage("PokemonPlanetExt", "b135", [], "str");
            }
            else if (type == "sendCapeGoto")
            {
                smartfox.sendXtMessage("PokemonPlanetExt", "b136", [], "str");
            }
            else if (type == "sendNeckGoto")
            {
                smartfox.sendXtMessage("PokemonPlanetExt", "b1366", [], "str");
            }
            else if (type == "sendCostumeGoto")
            {
                smartfox.sendXtMessage("PokemonPlanetExt", "b1369", [], "str");
            }
            else if (type == "sendShirtGoto")
            {
                smartfox.sendXtMessage("PokemonPlanetExt", "b1367", [], "str");
            }
            else if (type == "sendPantsGoto")
            {
                smartfox.sendXtMessage("PokemonPlanetExt", "b1368", [], "str");
            }
            else if (type == "updateMount")
            {
                if (p1 == undefined)
                {
                    p1 = 0;
                } // end if
                smartfox.sendXtMessage("PokemonPlanetExt", "b191", [p1], "str");
            }
            else
            {
                _loc2 = [];
                _loc2.push(getTimer());
                _loc2.push(generateRandomString(rand(5, 20)));
                _loc2.push(_root.kg3(_loc2[0], _loc2[1]));
                if (type == "battleMovePvp")
                {
                    stopBattleTimer();
                    _loc2.push(p1);
                    if (p2 != undefined)
                    {
                        _loc2.push(p2);
                    }
                    else
                    {
                        _loc2.push(" ");
                    } // end else if
                    if (p3 != undefined)
                    {
                        _loc2.push(p3);
                    }
                    else
                    {
                        _loc2.push(" ");
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "b", _loc2, "str");
                }
                else if (type == "battleMovePvpVS")
                {
                    stopBattleTimer();
                    _loc2.push(p1);
                    if (p2 != undefined)
                    {
                        _loc2.push(p2);
                    }
                    else
                    {
                        _loc2.push(" ");
                    } // end else if
                    if (p3 != undefined)
                    {
                        _loc2.push(p3);
                    }
                    else
                    {
                        _loc2.push(" ");
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "b_2", _loc2, "str");
                }
                else if (type == "battleMoveVS")
                {
                    _loc2.push(p1);
                    if (p2 != undefined)
                    {
                        _loc2.push(p2);
                    }
                    else
                    {
                        _loc2.push(" ");
                    } // end else if
                    if (p3 != undefined)
                    {
                        _loc2.push(p3);
                    }
                    else
                    {
                        _loc2.push(" ");
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "b76_2", _loc2, "str");
                }
                else if (type == "getStartingInfo")
                {
                    loadingT.htmlText = "<b>Loading Game Data";
                    _root.inited = true;
                    _loc2.push(_root.hashpassword);
                    _loc2.push(2);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b61", _loc2, "str");
                }
                else if (type == "sendAddPlayer")
                {
                    _loc2.push(_root.player.tileX);
                    _loc2.push(_root.player.tileY);
                    _loc2.push(_root.dir);
                    _loc2.push(_root.moveType);
                    if (_root.mapInstance != -1 && _root.mapInstance != undefined)
                    {
                        _loc2.push(_root.map + " (" + _root.mapInstance + ")");
                    }
                    else
                    {
                        _loc2.push(_root.map);
                    } // end else if
                    if (_root.fishing == true)
                    {
                        _loc2.push(1);
                    }
                    else
                    {
                        _loc2.push(0);
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "b55", _loc2, "str");
                }
                else if (type == "sendAddPlayerTarget")
                {
                    _loc2.push(_root.player.tileX);
                    _loc2.push(_root.player.tileY);
                    _loc2.push(_root.dir);
                    _loc2.push(_root.moveType);
                    _loc2.push(p1.toLowerCase());
                    _loc2.push(p2);
                    if (_root.fishing == true)
                    {
                        _loc2.push(1);
                    }
                    else
                    {
                        _loc2.push(0);
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "b56", _loc2, "str");
                }
                else if (type == "reorderInventory")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b57", _loc2, "str");
                }
                else if (type == "r2")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r2", _loc2, "str");
                }
                else if (type == "r3")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r3", _loc2, "str");
                }
                else if (type == "equipItem")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b58", _loc2, "str");
                }
                else if (type == "unequipItem")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b59", _loc2, "str");
                }
                else if (type == "getSquirtbottle")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b60", _loc2, "str");
                }
                else if (type == "toggleFastBattles")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "r7", [], "str");
                }
                else if (type == "removeMoney")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r11", _loc2, "str");
                }
                else if (type == "reorderMoves")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    _loc2.push(p3);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r12", _loc2, "str");
                }
                else if (type == "addFriend")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r13", _loc2, "str");
                }
                else if (type == "addIgnore")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r14", _loc2, "str");
                }
                else if (type == "removeFriend")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r15", _loc2, "str");
                }
                else if (type == "removeIgnore")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r16", _loc2, "str");
                }
                else if (type == "purchaseJohtoSafariZoneTicket")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r18", _loc2, "str");
                }
                else if (type == "purchaseHoennSafariZoneTicket")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b117", _loc2, "str");
                }
                else if (type == "purchaseSinnohSafariZoneTicket")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b161", _loc2, "str");
                }
                else if (type == "johtoSafariTimeOver")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r19", _loc2, "str");
                }
                else if (type == "hoennSafariTimeOver")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b118", _loc2, "str");
                }
                else if (type == "sinnohSafariTimeOver")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b162", _loc2, "str");
                }
                else if (type == "equipHat")
                {
                    if (player.hatColors != undefined)
                    {
                        _loc2.push(player.hat + "%" + player.hatColors);
                    }
                    else
                    {
                        _loc2.push(player.hat);
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "r20", _loc2, "str");
                }
                else if (type == "equipFace2")
                {
                    if (player.face2Colors != undefined)
                    {
                        _loc2.push(player.face2 + "%" + player.face2Colors);
                    }
                    else
                    {
                        _loc2.push(player.face2);
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "b133", _loc2, "str");
                }
                else if (type == "equipCape")
                {
                    if (player.capeColors != undefined)
                    {
                        _loc2.push(player.cape + "%" + player.capeColors);
                    }
                    else
                    {
                        _loc2.push(player.cape);
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "b134", _loc2, "str");
                }
                else if (type == "equipWings")
                {
                    if (player.wingsColors != undefined)
                    {
                        _loc2.push(player.wings + "%" + player.wingsColors);
                    }
                    else
                    {
                        _loc2.push(player.wings);
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "r21", _loc2, "str");
                }
                else if (type == "equipShirt")
                {
                    if (player.shirtColors != undefined)
                    {
                        _loc2.push(player.shirt + "%" + player.shirtColors);
                    }
                    else
                    {
                        _loc2.push(player.shirt);
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "r213", _loc2, "str");
                }
                else if (type == "equipPants")
                {
                    if (player.pantsColors != undefined)
                    {
                        _loc2.push(player.pants + "%" + player.pantsColors);
                    }
                    else
                    {
                        _loc2.push(player.pants);
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "r214", _loc2, "str");
                }
                else if (type == "equipNeck")
                {
                    if (player.neckColors != undefined)
                    {
                        _loc2.push(player.neck + "%" + player.neckColors);
                    }
                    else
                    {
                        _loc2.push(player.neck);
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "r212", _loc2, "str");
                }
                else if (type == "equipCostume")
                {
                    if (player.costumeColors != undefined)
                    {
                        _loc2.push(player.costume + "%" + player.costumeColors);
                    }
                    else
                    {
                        _loc2.push(player.costume);
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "r212_2", _loc2, "str");
                }
                else if (type == "equipTail")
                {
                    if (player.tailColors != undefined)
                    {
                        _loc2.push(player.tail + "%" + player.tailColors);
                    }
                    else
                    {
                        _loc2.push(player.tail);
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "r22", _loc2, "str");
                }
                else if (type == "ppBuy")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r23", _loc2, "str");
                }
                else if (type == "saveSettings")
                {
                    _loc2.push(_root.musicVolume);
                    _loc2.push(fastBattles);
                    _loc2.push(_root.disableBattleMusic);
                    _loc2.push(_root.showMoveInfo);
                    _loc2.push(_root.allowSwearing);
                    _loc2.push(_root.disableGlobalNotifications);
                    _loc2.push(_root.disableBattleAnimations);
                    _loc2.push(_root.disableFriendRequests);
                    _loc2.push(_root.showCredits);
                    _loc2.push(stringifyArray(_root.newSettings));
                    smartfox.sendXtMessage("PokemonPlanetExt", "r24", _loc2, "str");
                }
                else if (type == "listItemSell")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    _loc2.push(p3);
                    _loc2.push(p4);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r25", _loc2, "str");
                }
                else if (type == "cancelListItem")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r26", _loc2, "str");
                }
                else if (type == "marketplaceSearch")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r27", _loc2, "str");
                }
                else if (type == "marketplaceBuy")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r28", _loc2, "str");
                }
                else if (type == "startAuction")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    _loc2.push(p3);
                    _loc2.push(p4);
                    _loc2.push(Number(marketplace.sell.listingDetails.durationT.text));
                    smartfox.sendXtMessage("PokemonPlanetExt", "r31", _loc2, "str");
                }
                else if (type == "marketplaceSearchAuction")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r32", _loc2, "str");
                }
                else if (type == "marketplaceBid")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r33", _loc2, "str");
                }
                else if (type == "pm")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r36", _loc2, "str");
                }
                else if (type == "acTimeOver")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "r40", _loc2, "str");
                }
                else if (type == "clanWarBattle")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r42", _loc2, "str");
                }
                else if (type == "masterShopBuy")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r43", _loc2, "str");
                }
                else if (type == "customMessage")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r46", _loc2, "str");
                }
                else if (type == "declineChatRequest")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r47", _loc2, "str");
                }
                else if (type == "acceptChatRequest")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "r48", _loc2, "str");
                }
                else if (type == "altarAmount")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b62", _loc2, "str");
                }
                else if (type == "altarMoneyDonate")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b63", _loc2, "str");
                }
                else if (type == "altarCreditDonate")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b64", _loc2, "str");
                }
                else if (type == "pvpArenaBattle")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b65", _loc2, "str");
                }
                else if (type == "pmsg")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b66", _loc2, "str");
                }
                else if (type == "removePlayer")
                {
                    _loc2.push(_root.username);
                    if (p1 != undefined)
                    {
                        _loc2.push(p1);
                    } // end if
                    smartfox.sendXtMessage("PokemonPlanetExt", "b74", _loc2, "str");
                }
                else if (type == "clanMessage")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b67", _loc2, "str");
                }
                else if (type == "fish")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b70", _loc2, "str");
                }
                else if (type == "goodHook")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b122", _loc2, "str");
                }
                else if (type == "createCharacter")
                {
                    _loc2.push(body);
                    _loc2.push(eyes);
                    _loc2.push(hair);
                    _loc2.push(pants);
                    _loc2.push(shirt);
                    _loc2.push(hairRa);
                    _loc2.push(hairGa);
                    _loc2.push(hairBa);
                    _loc2.push(eyeRa);
                    _loc2.push(eyeGa);
                    _loc2.push(eyeBa);
                    _loc2.push(shirtRa);
                    _loc2.push(shirtGa);
                    _loc2.push(shirtBa);
                    _loc2.push(pantsRa);
                    _loc2.push(pantsGa);
                    _loc2.push(pantsBa);
                    _loc2.push(face);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b71", _loc2, "str");
                }
                else if (type == "oiqwbr")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b72", _loc2, "str");
                }
                else if (type == "oiqwbrv")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b73", _loc2, "str");
                }
                else if (type == "updateFollowPokemon")
                {
                    if (userPokemon[0].shiny == true)
                    {
                        _loc2.push(userPokemon[0].id + shinyDifference);
                    }
                    else
                    {
                        _loc2.push(userPokemon[0].id);
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "b75", _loc2, "str");
                }
                else if (type == "battleMove")
                {
                    _loc2.push(p1);
                    if (p2 != undefined && p2 != "")
                    {
                        _loc2.push(p2);
                    }
                    else
                    {
                        _loc2.push("z");
                    } // end else if
                    if (p3 != undefined && p3 != "")
                    {
                        _loc2.push(p3);
                    }
                    else
                    {
                        _loc2.push("z");
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "b76", _loc2, "str");
                }
                else if (type == "escapeBattle")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b77", _loc2, "str");
                }
                else if (type == "wildBattle")
                {
                    _loc2.push(_root.map);
                    _loc2.push(_root.moveType);
                    _loc2.push(_root.encryptedMap);
                    if (collisionArray[player.tileY][player.tileX] == undefined)
                    {
                        _loc2.push(1);
                    } // end if
                    smartfox.sendXtMessage("PokemonPlanetExt", "b78", _loc2, "str");
                }
                else if (type == "trainerBattle")
                {
                    _loc2.push(p1);
                    _loc2.push(_root.trainerName);
                    _loc2.push(_root.map);
                    _loc2.push(_root.encryptedMap);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b79", _loc2, "str");
                }
                else if (type == "switchPokemon")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b80", _loc2, "str");
                }
                else if (type == "endBattleDisconnect")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b81", _loc2, "str");
                }
                else if (type == "endTradeDisconnect")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b97", _loc2, "str");
                }
                else if (type == "endBattleDisconnect2")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b82", _loc2, "str");
                }
                else if (type == "endBattleChoseMove")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b82_2", _loc2, "str");
                }
                else if (type == "receiveItemBox")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b83", _loc2, "str");
                }
                else if (type == "receivePokemonBox")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b84", _loc2, "str");
                }
                else if (type == "creditShopBuy")
                {
                    _loc2.push(p1);
                    if (p2 != undefined)
                    {
                        _loc2.push(p2);
                        _loc2.push(p3);
                        _loc2.push(p4);
                    } // end if
                    if (p5 != undefined)
                    {
                        _loc2.push(p5);
                    } // end if
                    smartfox.sendXtMessage("PokemonPlanetExt", "b31", _loc2, "str");
                }
                else if (type == "craft")
                {
                    _loc2.push(p1);
                    if (p2 != undefined)
                    {
                        _loc2.push(p2);
                    }
                    else
                    {
                        _loc2.push(-1);
                    } // end else if
                    if (p3 != undefined)
                    {
                        _loc2.push(p3);
                    }
                    else
                    {
                        _loc2.push(-1);
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "b85", _loc2, "str");
                }
                else if (type == "reorderPokemon")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b2", _loc2, "str");
                }
                else if (type == "tpToPc")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b98", _loc2, "str");
                }
                else if (type == "createMap")
                {
                    _loc2.push(createMapGUI.mapName);
                    _loc2.push(createMapGUI.mapWidth);
                    _loc2.push(createMapGUI.mapHeight);
                    _loc2.push(createMapGUI.mapPassword);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b105", _loc2, "str");
                }
                else if (type == "deleteMap")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b108", _loc2, "str");
                }
                else if (type == "loadTargetMap")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b109", _loc2, "str");
                }
                else if (type == "saveChatSettings")
                {
                    _loc2.push(englishChatSettings);
                    _loc2.push(tradingChatSettings);
                    _loc2.push(localChatSettings);
                    _loc2.push(nonEnglishChatSettings);
                    _loc2.push(clanChatSettings);
                    _loc2.push(customChatSettings);
                    _loc2.push(Number(_root.mainGUI.chatSettings.chatFontSizeT.text));
                    _loc2.push(Math.round(_root.mainGUI.chatBg.chatBg._width));
                    _loc2.push(Math.round(_root.mainGUI.chatBg.chatBg._height));
                    smartfox.sendXtMessage("PokemonPlanetExt", "b112", _loc2, "str");
                }
                else if (type == "saveMap")
                {
                    _loc2.push(stringifyMultiArray(_root.mapData));
                    _loc2.push(stringifyMultiArray(_root.mapData2));
                    _loc2.push(stringifyMultiArray(_root.mapData3));
                    _loc2.push(_root.map);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b114", _loc2, "str");
                }
                else if (type == "getUserList")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b116", _loc2, "str");
                }
                else if (type == "portablePcHeal")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b131", _loc2, "str");
                }
                else if (type == "dye")
                {
                    _loc2.push(_root.mainGUI.dyeGUI.itemName);
                    if (_root.mainGUI.dyeGUI.dyeRa != undefined)
                    {
                        _loc2.push(_root.mainGUI.dyeGUI.dyeRa);
                    }
                    else
                    {
                        _loc2.push(40);
                    } // end else if
                    if (_root.mainGUI.dyeGUI.dyeGa != undefined)
                    {
                        _loc2.push(_root.mainGUI.dyeGUI.dyeGa);
                    }
                    else
                    {
                        _loc2.push(40);
                    } // end else if
                    if (_root.mainGUI.dyeGUI.dyeBa != undefined)
                    {
                        _loc2.push(_root.mainGUI.dyeGUI.dyeBa);
                    }
                    else
                    {
                        _loc2.push(40);
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "b137", _loc2, "str");
                }
                else if (type == "resetLevel")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b139", _loc2, "str");
                }
                else if (type == "b140")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    _loc2.push(p3);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b140", _loc2, "str");
                }
                else if (type == "b142")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    _loc2.push(p3);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b142", _loc2, "str");
                }
                else if (type == "mewtwoRaid")
                {
                    _root.waitingForRaid = true;
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b144", _loc2, "str");
                }
                else if (type == "casualBattleQueue")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b150", _loc2, "str");
                }
                else if (type == "stopQueueingCasual")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b152", _loc2, "str");
                }
                else if (type == "rankedBattleQueue")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b153", _loc2, "str");
                }
                else if (type == "stopQueueingRanked")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b154", _loc2, "str");
                }
                else if (type == "battleQueueHighscores")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b157", _loc2, "str");
                }
                else if (type == "battleQueuePrizeBuy")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b158", _loc2, "str");
                }
                else if (type == "relearnList5")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b159", _loc2, "str");
                }
                else if (type == "relearnList6")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b159_2", _loc2, "str");
                }
                else if (type == "relearnMove5")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b160", _loc2, "str");
                }
                else if (type == "relearnMove6")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b160_2", _loc2, "str");
                }
                else if (type == "mine")
                {
                    _loc2.push(p1);
                    _loc2.push(_root.currentRock[0]);
                    _loc2.push(_root.currentRock[1]);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b163", _loc2, "str");
                }
                else if (type == "sellGemstones")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b168", _loc2, "str");
                }
                else if (type == "loadClanRoster")
                {
                    var _loc8 = [];
                    for (var _loc6 = 0; _loc6 < _root.clanRoster.length; ++_loc6)
                    {
                        _loc8.push(_root.clanRoster[_loc6][0]);
                    } // end of for
                    _loc2.push(stringifyArray(_loc8));
                    smartfox.sendXtMessage("PokemonPlanetExt", "b173", _loc2, "str");
                }
                else if (type == "membershipExpiration")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b174", _loc2, "str");
                }
                else if (type == "deoxysFormChange")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b175", _loc2, "str");
                }
                else if (type == "b176")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b176", _loc2, "str");
                }
                else if (type == "b178")
                {
                    if (typeof(_root[p1]) == "object")
                    {
                        if (_root[p1][0].length != undefined)
                        {
                            _loc2.push(stringifyMultiArray(_root[p1]));
                        }
                        else
                        {
                            stringifyArray(_root[p1]);
                        } // end else if
                    }
                    else
                    {
                        _loc2.push(_root[p1]);
                    } // end else if
                    smartfox.sendXtMessage("PokemonPlanetExt", "b178", _loc2, "str");
                }
                else if (type == "eliteBuy")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b182", _loc2, "str");
                }
                else if (type == "acceptQuest")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b183", _loc2, "str");
                }
                else if (type == "completeQuest")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b184", _loc2, "str");
                }
                else if (type == "openChest")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b186", _loc2, "str");
                }
                else if (type == "acceptFriend")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b193", _loc2, "str");
                }
                else if (type == "declineFriend")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b194", _loc2, "str");
                }
                else if (type == "loadFriends")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b196", _loc2, "str");
                }
                else if (type == "sendRose")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b198", _loc2, "str");
                }
                else if (type == "battleTowerPrizeBuy")
                {
                    _loc2.push(p1);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b199", _loc2, "str");
                }
                else if (type == "clanWarLeaderboards")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b200", _loc2, "str");
                }
                else if (type == "getWorldBossHp")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b202", _loc2, "str");
                }
                else if (type == "moveBankMove")
                {
                    _loc2.push(p1);
                    _loc2.push(p2);
                    _loc2.push(p3);
                    smartfox.sendXtMessage("PokemonPlanetExt", "b204", _loc2, "str");
                }
                else if (type == "exitRelearnList")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b205", _loc2, "str");
                }
                else if (type == "getUsageStats")
                {
                    smartfox.sendXtMessage("PokemonPlanetExt", "b206", _loc2, "str");
                } // end else if
            } // end else if
        } // end else if
    }
    else
    {
        _root.clientQueue.push([type, p1, p2, p3, p4]);
    } // end else if
} // End of the function
function useBattleItem()
{
    isWaiting = true;
    if (battleType == "wild" || battleType == "trainer")
    {
        getTimestamp("battleMove", 0, "i", itemsInBattle[itemsInBattleIndex][2]);
    }
    else if (battleType == "pvp")
    {
        mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
        mainGUI.battleBackground.battleT._visible = true;
        getTimestamp("battleMovePvp", 0, "i", itemsInBattle[itemsInBattleIndex][2]);
    } // end else if
    mainGUI.battleBackground.itemBg._visible = false;
    mainGUI.battleBackground.useItemRightB._visible = false;
    mainGUI.battleBackground.useItemLeftB._visible = false;
    mainGUI.battleBackground.useItemB._visible = false;
    mainGUI.battleBackground.itemImage.gotoAndStop(1);
    mainGUI.battleBackground.itemTexts.itemNameT.htmlText = "<b>";
    mainGUI.battleBackground.itemTexts.itemAmountT.htmlText = "<b>";
} // End of the function
function setMapRollOvers()
{
    kantoMap.route1.bg._alpha = 0;
    kantoMap.route2.bg._alpha = 0;
    kantoMap.route3.bg._alpha = 0;
    kantoMap.route4.bg._alpha = 0;
    kantoMap.route5.bg._alpha = 0;
    kantoMap.route6.bg._alpha = 0;
    kantoMap.route7.bg._alpha = 0;
    kantoMap.route8.bg._alpha = 0;
    kantoMap.route9.bg._alpha = 0;
    kantoMap.route10.bg._alpha = 0;
    kantoMap.route11.bg._alpha = 0;
    kantoMap.route12.bg._alpha = 0;
    kantoMap.route13.bg._alpha = 0;
    kantoMap.route14.bg._alpha = 0;
    kantoMap.route15.bg._alpha = 0;
    kantoMap.route16.bg._alpha = 0;
    kantoMap.route17.bg._alpha = 0;
    kantoMap.route18.bg._alpha = 0;
    kantoMap.route19.bg._alpha = 0;
    kantoMap.route20.bg._alpha = 0;
    kantoMap.route21.bg._alpha = 0;
    kantoMap.route22.bg._alpha = 0;
    kantoMap.route23.bg._alpha = 0;
    kantoMap.route24.bg._alpha = 0;
    kantoMap.route25.bg._alpha = 0;
    kantoMap.indigoPlateau.bg._alpha = 0;
    kantoMap.viridianCity.bg._alpha = 0;
    kantoMap.pewterCity.bg._alpha = 0;
    kantoMap.ceruleanCity.bg._alpha = 0;
    kantoMap.saffronCity.bg._alpha = 0;
    kantoMap.lavenderTown.bg._alpha = 0;
    kantoMap.vermilionCity.bg._alpha = 0;
    kantoMap.fuchsiaCity.bg._alpha = 0;
    kantoMap.cinnabarIsland.bg._alpha = 0;
    kantoMap.palletTown.bg._alpha = 0;
    kantoMap.celadonCity.bg._alpha = 0;
    kantoMap.victoryRoad.bg._alpha = 0;
    kantoMap.viridianForest.bg._alpha = 0;
    kantoMap.diglettsCave1.bg._alpha = 0;
    kantoMap.diglettsCave2.bg._alpha = 0;
    kantoMap.mtMoon.bg._alpha = 0;
    kantoMap.powerPlant.bg._alpha = 0;
    kantoMap.rockTunnel.bg._alpha = 0;
    kantoMap.route3_2.bg._alpha = 0;
    kantoMap.lavenderTower.bg._alpha = 0;
    kantoMap.seafoamIslands.bg._alpha = 0;
    kantoMap.indigoPlateau.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Indigo Plateau";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.indigoPlateau.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.viridianCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Viridian City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.viridianCity.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.pewterCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Pewter City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.pewterCity.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.ceruleanCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Cerulean City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.ceruleanCity.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.saffronCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Saffron City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.saffronCity.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.lavenderTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Lavender Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.lavenderTown.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.vermilionCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Vermilion City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.vermilionCity.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.fuchsiaCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Fuchsia City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.fuchsiaCity.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.cinnabarIsland.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Cinnabar Island";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.cinnabarIsland.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.palletTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Pallet Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.palletTown.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.celadonCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Celadon City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.celadonCity.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route1.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 1";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route1.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route2.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 2";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route2.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route3.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 3";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route3.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route4.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 4";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route4.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route5.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 5";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route5.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route6.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 6";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route6.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route7.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 7";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route7.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route8.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 8";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route8.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route9.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 9";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route9.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route10.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 10";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route10.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route11.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 11";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route11.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route12.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 12";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route12.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route13.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 13";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route13.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route14.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 14";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route14.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route15.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 15";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route15.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route16.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 16";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route16.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route17.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 17";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route17.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route18.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 18";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route18.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route19.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 19";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route19.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route20.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 20";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route20.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route21.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 21";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route21.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route22.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 22";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route22.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route23.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 23";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route23.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route24.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 24";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route24.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route25.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 25";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route25.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.victoryRoad.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Victory Road";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.victoryRoad.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.viridianForest.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Viridian Forest";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.viridianForest.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.diglettsCave1.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Diglett\'s Cave";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.diglettsCave1.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.diglettsCave2.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Diglett\'s Cave";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.diglettsCave2.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.mtMoon.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Mt Moon";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.mtMoon.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.powerPlant.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Power Plant";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.powerPlant.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.rockTunnel.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Rock Tunnel";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.rockTunnel.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route3_2.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 3";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route3_2.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.lavenderTower.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Pokemon Tower";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.lavenderTower.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.seafoamIslands.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Seafoam Islands";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.seafoamIslands.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
} // End of the function
function setJohtoMapRollOvers()
{
    kantoMap.route26.bg._alpha = 0;
    kantoMap.route29.bg._alpha = 0;
    kantoMap.route30.bg._alpha = 0;
    kantoMap.route31.bg._alpha = 0;
    kantoMap.route32.bg._alpha = 0;
    kantoMap.route33.bg._alpha = 0;
    kantoMap.route34.bg._alpha = 0;
    kantoMap.route35.bg._alpha = 0;
    kantoMap.route36.bg._alpha = 0;
    kantoMap.route37.bg._alpha = 0;
    kantoMap.route38.bg._alpha = 0;
    kantoMap.route39.bg._alpha = 0;
    kantoMap.route40.bg._alpha = 0;
    kantoMap.route41.bg._alpha = 0;
    kantoMap.route42.bg._alpha = 0;
    kantoMap.route42_2.bg._alpha = 0;
    kantoMap.route43.bg._alpha = 0;
    kantoMap.route44.bg._alpha = 0;
    kantoMap.route45.bg._alpha = 0;
    kantoMap.route46.bg._alpha = 0;
    kantoMap.newBarkTown.bg._alpha = 0;
    kantoMap.cherrygroveCity.bg._alpha = 0;
    kantoMap.violetCity.bg._alpha = 0;
    kantoMap.azaleaTown.bg._alpha = 0;
    kantoMap.goldenrodCity.bg._alpha = 0;
    kantoMap.ecruteakCity.bg._alpha = 0;
    kantoMap.olivineCity.bg._alpha = 0;
    kantoMap.cianwoodCity.bg._alpha = 0;
    kantoMap.mahogonyTown.bg._alpha = 0;
    kantoMap.blackthornCity.bg._alpha = 0;
    kantoMap.unionCave.bg._alpha = 0;
    kantoMap.ilexForest.bg._alpha = 0;
    kantoMap.nationalPark.bg._alpha = 0;
    kantoMap.whirlpoolIslands.bg._alpha = 0;
    kantoMap.mtMortar.bg._alpha = 0;
    kantoMap.mtSilver.bg._alpha = 0;
    kantoMap.icePath.bg._alpha = 0;
    kantoMap.lakeOfRage.bg._alpha = 0;
    kantoMap.route28.bg._alpha = 0;
    kantoMap.darkCave.bg._alpha = 0;
    kantoMap.ruinsOfAlph.bg._alpha = 0;
    kantoMap.battleFrontier.bg._alpha = 0;
    kantoMap.dragonsDen.bg._alpha = 0;
    kantoMap.route28.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 28";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route28.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.darkCave.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Dark Cave";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.darkCave.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.ruinsOfAlph.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Ruins Of Alph";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.ruinsOfAlph.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.battleFrontier.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Battle Frontier";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.battleFrontier.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.dragonsDen.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Dragons Den";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.dragonsDen.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route26.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 26";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route26.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route29.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 29";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route29.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route30.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 30";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route30.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route31.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 31";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route31.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route32.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 32";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route32.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route33.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 33";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route33.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route33.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 33";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route33.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route34.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 34";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route34.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route35.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 35";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route35.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route36.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 36";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route36.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route37.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 37";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route37.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route38.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 38";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route38.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route39.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 39";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route39.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route40.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 40";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route40.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route41.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 41";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route41.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route42.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 42";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route42.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route42_2.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 42";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route42_2.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route43.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 43";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route43.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route44.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 44";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route44.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route45.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 45";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route45.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.route46.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route 46";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route46.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.newBarkTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "New Bark Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.newBarkTown.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.cherrygroveCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Cherrygrove City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.cherrygroveCity.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.violetCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Violet City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.violetCity.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.azaleaTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Azalea Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.azaleaTown.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.goldenrodCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Goldenrod City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.geldenrodCity.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.ecruteakCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Ecruteak City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.ecruteakCity.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.olivineCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Olivine City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.olivineCity.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.cianwoodCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Cianwood City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.cianwoodCity.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.mahogonyTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Mahogany Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.mahogonyTown.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.blackthornCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Blackthorn City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.blackthornCity.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.unionCave.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Union Cave";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.unionCave.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.ilexForest.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Ilex Forest";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.ilexForest.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.nationalPark.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "National Park";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.nationalPark.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.whirlpoolIslands.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Whirlpool Islands";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.whirlpoolIslands.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.mtMortar.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Mt Mortar";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.mtMortar.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.mtSilver.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Mt Silver";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.mtSilver.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.icePath.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Ice Path";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.icePath.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
    kantoMap.lakeOfRage.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Lake Of Rage";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.lakeOfRage.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
} // End of the function
function setHoennMapRollOvers()
{
    kantoMap.route101.bg._alpha = 0;
    kantoMap.route102.bg._alpha = 0;
    kantoMap.route103.bg._alpha = 0;
    kantoMap.route104.bg._alpha = 0;
    kantoMap.route105.bg._alpha = 0;
    kantoMap.route106.bg._alpha = 0;
    kantoMap.route107.bg._alpha = 0;
    kantoMap.route108.bg._alpha = 0;
    kantoMap.route109.bg._alpha = 0;
    kantoMap.route110.bg._alpha = 0;
    kantoMap.route111.bg._alpha = 0;
    kantoMap.route112.bg._alpha = 0;
    kantoMap.route113.bg._alpha = 0;
    kantoMap.route114.bg._alpha = 0;
    kantoMap.route115.bg._alpha = 0;
    kantoMap.route116.bg._alpha = 0;
    kantoMap.route117.bg._alpha = 0;
    kantoMap.route118.bg._alpha = 0;
    kantoMap.route119.bg._alpha = 0;
    kantoMap.route120.bg._alpha = 0;
    kantoMap.route121.bg._alpha = 0;
    kantoMap.route122.bg._alpha = 0;
    kantoMap.route123.bg._alpha = 0;
    kantoMap.route124.bg._alpha = 0;
    kantoMap.route125.bg._alpha = 0;
    kantoMap.route126.bg._alpha = 0;
    kantoMap.route127.bg._alpha = 0;
    kantoMap.route128.bg._alpha = 0;
    kantoMap.route129.bg._alpha = 0;
    kantoMap.route130.bg._alpha = 0;
    kantoMap.route131.bg._alpha = 0;
    kantoMap.route132.bg._alpha = 0;
    kantoMap.route133.bg._alpha = 0;
    kantoMap.route134.bg._alpha = 0;
    kantoMap.littlerootTown.bg._alpha = 0;
    kantoMap.oldaleTown.bg._alpha = 0;
    kantoMap.petalburgCity.bg._alpha = 0;
    kantoMap.rustboroCity.bg._alpha = 0;
    kantoMap.dewfordTown.bg._alpha = 0;
    kantoMap.slateportCity.bg._alpha = 0;
    kantoMap.mauvilleCity.bg._alpha = 0;
    kantoMap.verdanturfTown.bg._alpha = 0;
    kantoMap.fallarborTown.bg._alpha = 0;
    kantoMap.lavaridgeTown.bg._alpha = 0;
    kantoMap.fortreeCity.bg._alpha = 0;
    kantoMap.lilycoveCity.bg._alpha = 0;
    kantoMap.pacifidlogTown.bg._alpha = 0;
    kantoMap.everGrandeCity.bg._alpha = 0;
    kantoMap.mossdeepCity.bg._alpha = 0;
    kantoMap.sootopolisCity.bg._alpha = 0;
    var i = 101;
    while (i <= 134)
    {
        kantoMap["route" + i].i = i;
        kantoMap["route" + i].onRollOver = function ()
        {
            kantoMap.mapText.nameT.text = "Route " + this.i;
            kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
            kantoMap.mapText._visible = true;
        };
        kantoMap["route" + i].onRollOut = function ()
        {
            kantoMap.mapText._visible = false;
        };
        ++i;
    } // end while
    kantoMap.littlerootTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Littleroot Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.oldaleTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Oldale Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.petalburgCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Petalburg City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.rustboroCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Rustboro City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.dewfordTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Dewford Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.slateportCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Slateport City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.mauvilleCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Mauville City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.verdanturfTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Verdanturf Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.fallarborTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Fallarbor Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.lavaridgeTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Lavaridge Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.fortreeCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Fortree City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.lilycoveCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Lilycove City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.pacifidlogTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Pacifidlog Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.everGrandeCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Ever Grande City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.mossdeepCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Mossdeep City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.sootopolisCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Sootopolis City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.littlerootTown.onRollOut = kantoMap.oldaleTown.onRollOut = kantoMap.petalburgCity.onRollOut = kantoMap.rustboroCity.onRollOut = kantoMap.dewfordTown.onRollOut = kantoMap.slateportCity.onRollOut = kantoMap.mauvilleCity.onRollOut = kantoMap.verdanturfTown.onRollOut = kantoMap.fallarborTown.onRollOut = kantoMap.lavaridgeTown.onRollOut = kantoMap.fortreeCity.onRollOut = kantoMap.lilycoveCity.onRollOut = kantoMap.pacifidlogTown.onRollOut = kantoMap.everGrandeCity.onRollOut = kantoMap.mossdeepCity.onRollOut = kantoMap.sootopolisCity.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
} // End of the function
function setSinnohMapRollOvers()
{
    var i = 201;
    while (i <= 230)
    {
        kantoMap["route" + i].bg._alpha = 0;
        kantoMap["route" + i].i = i;
        kantoMap["route" + i].onRollOver = function ()
        {
            kantoMap.mapText.nameT.text = "Route " + this.i;
            kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
            kantoMap.mapText._visible = true;
        };
        kantoMap["route" + i].onRollOut = function ()
        {
            kantoMap.mapText._visible = false;
        };
        ++i;
    } // end while
    kantoMap.fullMoonIsland.bg._alpha = 0;
    kantoMap.newMoonIsland.bg._alpha = 0;
    kantoMap.ironIsland.bg._alpha = 0;
    kantoMap.twinleafTown.bg._alpha = 0;
    kantoMap.lakeVerity.bg._alpha = 0;
    kantoMap.sandgemTown.bg._alpha = 0;
    kantoMap.palPark.bg._alpha = 0;
    kantoMap.jubilifeCity.bg._alpha = 0;
    kantoMap.canalaveCity.bg._alpha = 0;
    kantoMap.oreburghCity.bg._alpha = 0;
    kantoMap.floaromaTown.bg._alpha = 0;
    kantoMap.feugoIronworks.bg._alpha = 0;
    kantoMap.eternaCity.bg._alpha = 0;
    kantoMap.snowpointCity.bg._alpha = 0;
    kantoMap.celesticTown.bg._alpha = 0;
    kantoMap.hearthomeCity.bg._alpha = 0;
    kantoMap.solaceonTown.bg._alpha = 0;
    kantoMap.veilstoneCity.bg._alpha = 0;
    kantoMap.pastoriaCity.bg._alpha = 0;
    kantoMap.sunnyshoreCity.bg._alpha = 0;
    kantoMap.victoryRoad.bg._alpha = 0;
    kantoMap.pokemonLeague.bg._alpha = 0;
    kantoMap.seabreakPath.bg._alpha = 0;
    kantoMap.flowerParadise.bg._alpha = 0;
    kantoMap.mtCoronet1.bg._alpha = 0;
    kantoMap.mtCoronet2.bg._alpha = 0;
    kantoMap.turnbackCave.bg._alpha = 0;
    kantoMap.resortArea.bg._alpha = 0;
    kantoMap.fightArea.bg._alpha = 0;
    kantoMap.survivalArea.bg._alpha = 0;
    kantoMap.starkMountain.bg._alpha = 0;
    kantoMap.fullMoonIsland.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Full Moon Island";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.newMoonIsland.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "New Moon Island";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.ironIsland.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Iron Island";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.twinleafTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Twinleaf Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.lakeVerity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Lake Verity";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.sandgemTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Sandgem Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.palPark.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Pal Park";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.jubilifeCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Jubilife City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.canalaveCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Canalave City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.oreburghCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Oreburgh City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.floaromaTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Floaroma Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.feugoIronworks.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Fuego Ironworks";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.eternaCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Eterna City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.snowpointCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Snowpoint City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.celesticTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Celestic Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.hearthomeCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Hearthome City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.solaceonTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Solaceon Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.veilstoneCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Veilstone City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.pastoriaCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Pastoria City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.sunnyshoreCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Sunnyshore City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.victoryRoad.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Sinnoh Victory Road";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.pokemonLeague.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Sinnoh Pokemon League";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.seabreakPath.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Seabreak Path";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.flowerParadise.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Flower Paradise";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.mtCoronet1.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Mt Coronet";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.mtCoronet2.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Mt Coronet";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.turnbackCave.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Turnback Cave";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.resortArea.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Resort Area";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.fightArea.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Fight Area";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.survivalArea.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Survival Area";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.starkMountain.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Stark Mountain";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.fullMoonIsland.onRollOut = kantoMap.newMoonIsland.onRollOut = kantoMap.ironIsland.onRollOut = kantoMap.twinleafTown.onRollOut = kantoMap.lakeVerity.onRollOut = kantoMap.sandgemTown.onRollOut = kantoMap.palPark.onRollOut = kantoMap.jubilifeCity.onRollOut = kantoMap.canalaveCity.onRollOut = kantoMap.oreburghCity.onRollOut = kantoMap.floaromaTown.onRollOut = kantoMap.feugoIronworks.onRollOut = kantoMap.eternaCity.onRollOut = kantoMap.snowpointCity.onRollOut = kantoMap.celesticTown.onRollOut = kantoMap.hearthomeCity.onRollOut = kantoMap.solaceonTown.onRollOut = kantoMap.veilstoneCity.onRollOut = kantoMap.pastoriaCity.onRollOut = kantoMap.sunnyshoreCity.onRollOut = kantoMap.victoryRoad.onRollOut = kantoMap.pokemonLeague.onRollOut = kantoMap.seabreakPath.onRollOut = kantoMap.flowerParadise.onRollOut = kantoMap.mtCoronet1.onRollOut = kantoMap.mtCoronet2.onRollOut = kantoMap.turnbackCave.onRollOut = kantoMap.resortArea.onRollOut = kantoMap.fightArea.onRollOut = kantoMap.survivalArea.onRollOut = kantoMap.starkMountain.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
} // End of the function
function setUnovaMapRollOvers()
{
    var i = 1;
    while (i <= 23)
    {
        kantoMap["route" + i].bg._alpha = 0;
        kantoMap["route" + i].i = i;
        kantoMap["route" + i].onRollOver = function ()
        {
            kantoMap.mapText.nameT.text = "Route " + this.i;
            kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
            kantoMap.mapText._visible = true;
        };
        kantoMap["route" + i].onRollOut = function ()
        {
            kantoMap.mapText._visible = false;
        };
        ++i;
    } // end while
    kantoMap.route18.bg._alpha = 0;
    kantoMap.nuvemaTown.bg._alpha = 0;
    kantoMap.route1.bg._alpha = 0;
    kantoMap.accumulaTown.bg._alpha = 0;
    kantoMap.route2.bg._alpha = 0;
    kantoMap.striatonCity.bg._alpha = 0;
    kantoMap.route3.bg._alpha = 0;
    kantoMap.nacreneCity.bg._alpha = 0;
    kantoMap.skyArrowBridge.bg._alpha = 0;
    kantoMap.casteliaCity.bg._alpha = 0;
    kantoMap.relicPassage.bg._alpha = 0;
    kantoMap.virbankCity.bg._alpha = 0;
    kantoMap.route20.bg._alpha = 0;
    kantoMap.floccesyTown.bg._alpha = 0;
    kantoMap.aspertiaCity.bg._alpha = 0;
    kantoMap.pwt.bg._alpha = 0;
    kantoMap.pokewood.bg._alpha = 0;
    kantoMap.route4.bg._alpha = 0;
    kantoMap.desertResort.bg._alpha = 0;
    kantoMap.route4_2.bg._alpha = 0;
    kantoMap.nimbasaCity.bg._alpha = 0;
    kantoMap.route16.bg._alpha = 0;
    kantoMap.route15.bg._alpha = 0;
    kantoMap.whiteForest.bg._alpha = 0;
    kantoMap.route14.bg._alpha = 0;
    kantoMap.route5.bg._alpha = 0;
    kantoMap.driftveilCity.bg._alpha = 0;
    kantoMap.route6.bg._alpha = 0;
    kantoMap.mistraltonCity.bg._alpha = 0;
    kantoMap.route7.bg._alpha = 0;
    kantoMap.icirrusCity.bg._alpha = 0;
    kantoMap.route8.bg._alpha = 0;
    kantoMap.route9.bg._alpha = 0;
    kantoMap.opelucidCity.bg._alpha = 0;
    kantoMap.route11.bg._alpha = 0;
    kantoMap.route12.bg._alpha = 0;
    kantoMap.lacunosaTown.bg._alpha = 0;
    kantoMap.route13.bg._alpha = 0;
    kantoMap.undellaTown.bg._alpha = 0;
    kantoMap.reversalMountain.bg._alpha = 0;
    kantoMap.lentimasTown.bg._alpha = 0;
    kantoMap.marineTube.bg._alpha = 0;
    kantoMap.marineTube_2.bg._alpha = 0;
    kantoMap.marineTube_3.bg._alpha = 0;
    kantoMap.route21.bg._alpha = 0;
    kantoMap.humilauCity.bg._alpha = 0;
    kantoMap.route22.bg._alpha = 0;
    kantoMap.route23.bg._alpha = 0;
    kantoMap.victoryRoad.bg._alpha = 0;
    kantoMap.pokemonLeague.bg._alpha = 0;
    kantoMap.nuvemaTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Nuvema Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.accumulaTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Accumula Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.striatonCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Striaton City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.nacreneCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Nacrene City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.skyArrowBridge.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Sky Arrow Bridge";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.casteliaCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Castelia City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.relicPassage.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Relic Passage";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.virbankCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Virbank City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.floccesyTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Floccesy Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.aspertiaCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Aspertia City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.pwt.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "PWT";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.pokewood.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Pokewood";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.desertResort.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Desert Resort";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.route4_2.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Route4";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.nimbasaCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Nimbasa City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.whiteForest.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "White Forest";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.driftveilCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Driftveil City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.mistraltonCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Mistralton City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.icirrusCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Icirrus City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.opelucidCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Opelucid City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.lacunosaTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Lacunosa Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.undellaTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Undella Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.reversalMountain.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Reversal Mountain";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.lentimasTown.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Lentimas Town";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.marineTube.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Marine Tube";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.marineTube_2.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Marine Tube";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.marineTube_3.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Marine Tube";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.humilauCity.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Humilau City";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.victoryRoad.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Victory Road";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.pokemonLeague.onRollOver = function ()
    {
        kantoMap.mapText.nameT.text = "Pokemon League";
        kantoMap.mapText.mapTextBackground._width = kantoMap.mapText.nameT.textWidth + 10;
        kantoMap.mapText._visible = true;
    };
    kantoMap.nuvemaTown.onRollOut = kantoMap.accumulaTown.onRollOut = kantoMap.striatonCity.onRollOut = kantoMap.nacreneCity.onRollOut = kantoMap.skyArrowBridge.onRollOut = kantoMap.casteliaCity.onRollOut = kantoMap.relicPassage.onRollOut = kantoMap.virbankCity.onRollOut = kantoMap.floccesyTown.onRollOut = kantoMap.aspertiaCity.onRollOut = kantoMap.pwt.onRollOut = kantoMap.pokewood.onRollOut = kantoMap.desertResort.onRollOut = kantoMap.route4_2.onRollOut = kantoMap.nimbasaCity.onRollOut = kantoMap.whiteForest.onRollOut = kantoMap.driftveilCity.onRollOut = kantoMap.mistraltonCity.onRollOut = kantoMap.icirrusCity.onRollOut = kantoMap.opelucidCity.onRollOut = kantoMap.lacunosaTown.onRollOut = kantoMap.undellaTown.onRollOut = kantoMap.reversalMountain.onRollOut = kantoMap.lentimasTown.onRollOut = kantoMap.marineTube.onRollOut = kantoMap.marineTube_2.onRollOut = kantoMap.marineTube_3.onRollOut = kantoMap.humilauCity.onRollOut = kantoMap.victoryRoad.onRollOut = kantoMap.pokemonLeague.onRollOut = function ()
    {
        kantoMap.mapText._visible = false;
    };
} // End of the function
function loadClanStatistics()
{
} // End of the function
function loadClanGUIInfo()
{
    mainGUI.clanGUI.nameT.htmlText = "<b>" + _root.clan;
    mainGUI.clanGUI.rosterTab.gotoAndStop("click");
    mainGUI.clanGUI.bankTab.gotoAndStop(1);
    mainGUI.clanGUI.upgradesTab.gotoAndStop(1);
    mainGUI.clanGUI.clanBg.gotoAndStop(1);
    mainGUI.clanGUI.scrollUpB._visible = true;
    mainGUI.clanGUI.scrollDownB._visible = true;
    mainGUI.clanGUI.scrollBar._visible = true;
    if (_root.clanRank == "Leader")
    {
        mainGUI.clanGUI.inviteB._visible = true;
        mainGUI.clanGUI.disbandB._visible = true;
        mainGUI.clanGUI.leaveB._visible = false;
    }
    else if (_root.clanRank == "General")
    {
        mainGUI.clanGUI.inviteB._visible = true;
        mainGUI.clanGUI.leaveB._visible = true;
        mainGUI.clanGUI.disbandB._visible = false;
    }
    else
    {
        mainGUI.clanGUI.inviteB._visible = false;
        mainGUI.clanGUI.disbandB._visible = false;
        mainGUI.clanGUI.leaveB._visible = true;
    } // end else if
    loadClanRoster();
    mainGUI.clanGUI.clanBg.rosterList.setMask(mainGUI.clanGUI.clanBg.maskBg);
    mainGUI.clanGUI.inviteB.onRelease = function ()
    {
        if (darkScreen._x == undefined)
        {
            if (clanRoster.length < _root.rosterSize)
            {
                darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                darkScreen._width = Stage.width;
                darkScreen._height = Stage.height;
                darkScreen._alpha = 70;
                darkScreen._x = newWidth / 2;
                darkScreen._y = newHeight / 2;
                clanInviteBox = _root.attachMovie("clanInviteBox", "clanInviteBox", _root.getNextHighestDepth());
                clanInviteBox._x = 540;
                clanInviteBox._y = 290;
                clanInviteBox.nameT.nameT.restrict = "A-Z a-z 0-9";
                Selection.setFocus(clanInviteBox.nameT);
                clanInviteBox.confirmB.onRelease = function ()
                {
                    if (isBusy == false && clanInviteBox.nameT.text != "")
                    {
                        Selection.setFocus(null);
                        getTimestamp("sendClanInvite", clanInviteBox.nameT.text);
                    } // end if
                };
                clanInviteBox.cancelB.onRelease = function ()
                {
                    removeMovieClip (clanInviteBox);
                    removeMovieClip (darkScreen);
                };
                clanInviteBox.exitB.onRelease = function ()
                {
                    removeMovieClip (clanInviteBox);
                    removeMovieClip (darkScreen);
                };
                assignMouseEvents(clanInviteBox.confirmB);
                assignMouseEvents(clanInviteBox.cancelB);
                assignMouseEvents(clanInviteBox.exitB);
            }
            else
            {
                systemMessage("Your clan is too full to invite any other members.");
            } // end if
        } // end else if
    };
    mainGUI.clanGUI.disbandB.onRelease = function ()
    {
        if (clanRank == "Leader")
        {
            if (darkScreen._x == undefined)
            {
                darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                darkScreen._width = Stage.width;
                darkScreen._height = Stage.height;
                darkScreen._alpha = 70;
                darkScreen._x = newWidth / 2;
                darkScreen._y = newHeight / 2;
                disbandBox = _root.attachMovie("disbandBox", "disbandBox", _root.getNextHighestDepth());
                disbandBox._x = newWidth / 2;
                disbandBox._y = newHeight / 2;
                disbandBox.confirmB.onRelease = function ()
                {
                    if (isBusy == false)
                    {
                        removeMovieClip (disbandBox);
                        removeMovieClip (darkScreen);
                        getTimestamp("disbandClan");
                        systemMessage("Clan is being disbanded.");
                    } // end if
                };
                disbandBox.cancelB.onRelease = function ()
                {
                    removeMovieClip (disbandBox);
                    removeMovieClip (darkScreen);
                };
                disbandBox.exitB.onRelease = function ()
                {
                    removeMovieClip (disbandBox);
                    removeMovieClip (darkScreen);
                };
                assignMouseEvents(disbandBox.confirmB);
                assignMouseEvents(disbandBox.cancelB);
                assignMouseEvents(disbandBox.exitB);
            } // end if
        } // end if
    };
    mainGUI.clanGUI.leaveB.onRelease = function ()
    {
        if (clanRank != "Leader")
        {
            if (darkScreen._x == undefined)
            {
                darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                darkScreen._width = Stage.width;
                darkScreen._height = Stage.height;
                darkScreen._alpha = 70;
                darkScreen._x = newWidth / 2;
                darkScreen._y = newHeight / 2;
                leaveBox = _root.attachMovie("leaveBox", "leaveBox", _root.getNextHighestDepth());
                leaveBox._x = newWidth / 2;
                leaveBox._y = newHeight / 2;
                leaveBox.confirmB.onRelease = function ()
                {
                    if (isBusy == false)
                    {
                        removeMovieClip (leaveBox);
                        removeMovieClip (darkScreen);
                        getTimestamp("leaveClan");
                        systemMessage("Leaving clan..");
                    } // end if
                };
                leaveBox.cancelB.onRelease = function ()
                {
                    removeMovieClip (leaveBox);
                    removeMovieClip (darkScreen);
                };
                leaveBox.exitB.onRelease = function ()
                {
                    removeMovieClip (leaveBox);
                    removeMovieClip (darkScreen);
                };
                assignMouseEvents(leaveBox.confirmB);
                assignMouseEvents(leaveBox.cancelB);
                assignMouseEvents(leaveBox.exitB);
            } // end if
        } // end if
    };
    mainGUI.clanGUI.scrollBar.onRelease = mainGUI.clanGUI.scrollBar.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        _root.dragScrollbar = 0;
    };
    mainGUI.clanGUI.scrollBar.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, this._x, 70, this._x, -11);
        _root.dragScrollbar = 18;
    };
    mainGUI.clanGUI.scrollBar.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    mainGUI.clanGUI.scrollBar.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    addDraggableGUI(mainGUI.clanGUI);
    mainGUI.clanGUI.scrollUpB.onRelease = mainGUI.clanGUI.scrollUpB.onReleaseOutside = function ()
    {
        _root.dragScrollbar = 0;
        this.gotoAndStop(1);
    };
    mainGUI.clanGUI.scrollUpB.onPress = function ()
    {
        _root.dragScrollbar = 17;
        this.gotoAndStop("click");
    };
    mainGUI.clanGUI.scrollUpB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    mainGUI.clanGUI.scrollUpB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    mainGUI.clanGUI.scrollDownB.onRelease = mainGUI.clanGUI.scrollDownB.onReleaseOutside = function ()
    {
        _root.dragScrollbar = 0;
        this.gotoAndStop(1);
    };
    mainGUI.clanGUI.scrollDownB.onPress = function ()
    {
        _root.dragScrollbar = 16;
        this.gotoAndStop("click");
    };
    mainGUI.clanGUI.scrollDownB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    mainGUI.clanGUI.scrollDownB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    mainGUI.clanGUI._visible = true;
} // End of the function
function loadClanRoster()
{
    for (var _loc1 = 0; _loc1 < 30; ++_loc1)
    {
        removeMovieClip (mainGUI.clanGUI.clanBg.rosterList["rosterItem" + _loc1]);
    } // end of for
    mainGUI.clanGUI.clanBg.rosterList._y = 25;
    getTimestamp("loadClanRoster");
} // End of the function
function loadClanBankInfo()
{
    mainGUI.clanGUI.clanBg.bankT.htmlText = "<b>$" + format(_root.clanBank);
    assignMouseEvents(mainGUI.clanGUI.clanBg.depositB);
    assignMouseEvents(mainGUI.clanGUI.clanBg.withdrawB);
    mainGUI.clanGUI.clanBg.depositT.restrict = "0-9";
    mainGUI.clanGUI.clanBg.withdrawT.restrict = "0-9";
    mainGUI.clanGUI.clanBg.depositB.onRelease = function ()
    {
        if (Number(mainGUI.clanGUI.clanBg.depositT.text) > 0)
        {
            if (_root.money >= Number(mainGUI.clanGUI.clanBg.depositT.text))
            {
                if (isBusy == false)
                {
                    getTimestamp("depositClanBank", Number(mainGUI.clanGUI.clanBg.depositT.text));
                } // end if
            }
            else
            {
                systemMessage("You do not have enough money.");
            } // end else if
        }
        else
        {
            systemMessage("You need to deposit at least $1.");
        } // end else if
    };
    mainGUI.clanGUI.clanBg.withdrawB.onRelease = function ()
    {
        if (_root.clanRank == "Leader")
        {
            if (Number(mainGUI.clanGUI.clanBg.withdrawT.text) > 0)
            {
                if (Number(mainGUI.clanGUI.clanBg.withdrawT.text) <= _root.clanBank)
                {
                    if (isBusy == false)
                    {
                        getTimestamp("withdrawClanBank", Number(mainGUI.clanGUI.clanBg.withdrawT.text));
                    } // end if
                }
                else
                {
                    systemMessage("The clan does not have enough money.");
                } // end else if
            }
            else
            {
                systemMessage("You need to withdraw at least $1.");
            } // end else if
        }
        else
        {
            systemMessage("Only clan leaders can withdraw from the clan bank.");
        } // end else if
    };
} // End of the function
function loadClanUpgradesInfo()
{
    mainGUI.clanGUI.clanBg.rosterT.htmlText = "<b>" + _root.rosterSize;
    assignMouseEvents(mainGUI.clanGUI.clanBg.upgradeB);
    mainGUI.clanGUI.clanBg.upgradeB.onRelease = function ()
    {
        if (_root.clanRank == "Leader")
        {
            if (_root.rosterSize < _root.maxClanRosterSize)
            {
                if (darkScreen._x == undefined)
                {
                    darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                    darkScreen._width = Stage.width;
                    darkScreen._height = Stage.height;
                    darkScreen._alpha = 70;
                    darkScreen._x = newWidth / 2;
                    darkScreen._y = newHeight / 2;
                    upgradeBox = _root.attachMovie("upgradeBox", "upgradeBox", _root.getNextHighestDepth());
                    upgradeBox._x = newWidth / 2;
                    upgradeBox._y = newHeight / 2;
                    if (_root.rosterSize == 10)
                    {
                        _root.updatePrice = 100000;
                        upgradeBox.msgT.htmlText = "<b>It will cost $100,000 to upgrade your roster size to 20.";
                    }
                    else if (_root.rosterSize == 20)
                    {
                        _root.updatePrice = 250000;
                        upgradeBox.msgT.htmlText = "<b>It will cost $250,000 to upgrade your roster size to 30.";
                    }
                    else if (_root.rosterSize == 30)
                    {
                        _root.updatePrice = 1000000;
                        upgradeBox.msgT.htmlText = "<b>It will cost $1,000,000 to upgrade your roster size to 40.";
                    }
                    else if (_root.rosterSize == 40)
                    {
                        _root.updatePrice = 2500000;
                        upgradeBox.msgT.htmlText = "<b>It will cost $2,500,000 to upgrade your roster size to 50.";
                    } // end else if
                    upgradeBox.confirmB.onRelease = function ()
                    {
                        if (_root.clanBank >= _root.updatePrice)
                        {
                            if (isBusy == false)
                            {
                                removeMovieClip (upgradeBox);
                                removeMovieClip (darkScreen);
                                getTimestamp("upgradeRoster");
                                systemMessage("Upgrading roster..");
                            } // end if
                        }
                        else
                        {
                            systemMessage("Not enough money in the clan bank to upgrade.");
                        } // end else if
                    };
                    upgradeBox.cancelB.onRelease = function ()
                    {
                        removeMovieClip (upgradeBox);
                        removeMovieClip (darkScreen);
                    };
                    upgradeBox.exitB.onRelease = function ()
                    {
                        removeMovieClip (upgradeBox);
                        removeMovieClip (darkScreen);
                    };
                    assignMouseEvents(upgradeBox.confirmB);
                    assignMouseEvents(upgradeBox.cancelB);
                    assignMouseEvents(upgradeBox.exitB);
                } // end if
            }
            else
            {
                systemMessage("Clan roster cannot be upgraded any further.");
            } // end if
        } // end else if
    };
} // End of the function
function pingServer()
{
    smartfox.sendXtMessage("PokemonPlanetExt", "p", [], "str");
} // End of the function
function makeTrainerCardBadges()
{
    if (String(badges).indexOf("Balance Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.balance._visible = true;
    } // end if
    if (String(badges).indexOf("Beacon Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.beacon._visible = true;
    } // end if
    if (String(badges).indexOf("Boulder Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.boulder._visible = true;
    } // end if
    if (String(badges).indexOf("Cascade Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.cascade._visible = true;
    } // end if
    if (String(badges).indexOf("Coal Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.coal._visible = true;
    } // end if
    if (String(badges).indexOf("Cobble Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.cobble._visible = true;
    } // end if
    if (String(badges).indexOf("Dynamo Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.dynamo._visible = true;
    } // end if
    if (String(badges).indexOf("Earth Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.earth._visible = true;
    } // end if
    if (String(badges).indexOf("Feather Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.feather._visible = true;
    } // end if
    if (String(badges).indexOf("Fen Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.fen._visible = true;
    } // end if
    if (String(badges).indexOf("Fog Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.fog._visible = true;
    } // end if
    if (String(badges).indexOf("Forest Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.forest._visible = true;
    } // end if
    if (String(badges).indexOf("Glacier Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.glacier._visible = true;
    } // end if
    if (String(badges).indexOf("Heat Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.heat._visible = true;
    } // end if
    if (String(badges).indexOf("Hive Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.hive._visible = true;
    } // end if
    if (String(badges).indexOf("Icicle Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.icicle._visible = true;
    } // end if
    if (String(badges).indexOf("Knuckle Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.knuckle._visible = true;
    } // end if
    if (String(badges).indexOf("Marsh Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.marsh._visible = true;
    } // end if
    if (String(badges).indexOf("Mind Badge 1") != -1 && String(badges).indexOf("Mind Badge 2") != -1)
    {
        mainGUI.trainerCard.trainerInfo.mind._visible = true;
    } // end if
    if (String(badges).indexOf("Mine Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.mine._visible = true;
    } // end if
    if (String(badges).indexOf("Mineral Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.mineral._visible = true;
    } // end if
    if (String(badges).indexOf("Plain Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.plain._visible = true;
    } // end if
    if (String(badges).indexOf("Rain Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.rain._visible = true;
    } // end if
    if (String(badges).indexOf("Rainbow Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.rainbow._visible = true;
    } // end if
    if (String(badges).indexOf("Relic Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.relic._visible = true;
    } // end if
    if (String(badges).indexOf("Rising Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.rising._visible = true;
    } // end if
    if (String(badges).indexOf("Soul Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.soul._visible = true;
    } // end if
    if (String(badges).indexOf("Stone Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.stone._visible = true;
    } // end if
    if (String(badges).indexOf("Storm Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.storm._visible = true;
    } // end if
    if (String(badges).indexOf("Thunder Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.thunder._visible = true;
    } // end if
    if (String(badges).indexOf("Volcano Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.volcano._visible = true;
    } // end if
    if (String(badges).indexOf("Zephyr Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.zephyr._visible = true;
    } // end if
    if (String(badges).indexOf("Basic Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.basic._visible = true;
    } // end if
    if (String(badges).indexOf("Bolt Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.bolt._visible = true;
    } // end if
    if (String(badges).indexOf("Wave Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.wave._visible = true;
    } // end if
    if (String(badges).indexOf("Insect Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.insect._visible = true;
    } // end if
    if (String(badges).indexOf("Jet Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.jet._visible = true;
    } // end if
    if (String(badges).indexOf("Legend Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.legend._visible = true;
    } // end if
    if (String(badges).indexOf("Quake Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.quake._visible = true;
    } // end if
    if (String(badges).indexOf("Trio Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.trio._visible = true;
    } // end if
    if (String(badges).indexOf("Bug Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.bug._visible = true;
    } // end if
    if (String(badges).indexOf("Cliff Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.cliff._visible = true;
    } // end if
    if (String(badges).indexOf("Fairy Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.fairy._visible = true;
    } // end if
    if (String(badges).indexOf("Iceburg Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.iceburg._visible = true;
    } // end if
    if (String(badges).indexOf("Psychic Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.psychic._visible = true;
    } // end if
    if (String(badges).indexOf("Plant Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.plant._visible = true;
    } // end if
    if (String(badges).indexOf("Rumble Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.rumble._visible = true;
    } // end if
    if (String(badges).indexOf("Voltage Badge") != -1)
    {
        mainGUI.trainerCard.trainerInfo.voltage._visible = true;
    } // end if
} // End of the function
function handleAddTradeItem(resObj)
{
    for (var _loc3 = 0; _loc3 < 16; ++_loc3)
    {
        _root.mainGUI.tradeBox["i" + (_loc3 + 1)].gotoAndStop(1);
        _root.mainGUI.tradeBox["t" + (_loc3 + 1)].htmlText = "";
        _root.mainGUI.tradeBox["a" + (_loc3 + 1)].htmlText = "";
        _root.mainGUI.tradeBox["ii" + (_loc3 + 1)].gotoAndStop(1);
        _root.mainGUI.tradeBox["tt" + (_loc3 + 1)].htmlText = "";
        _root.mainGUI.tradeBox["aa" + (_loc3 + 1)].htmlText = "";
        removeMovieClip (_root.mainGUI.tradeBox["tradePokemon_" + _loc3]);
        removeMovieClip (_root.mainGUI.tradeBox["tradePokemon2_" + _loc3]);
    } // end of for
    if (resObj.userTradeArray != undefined)
    {
        for (var _loc3 = 0; _loc3 < resObj.userTradeArray.length; ++_loc3)
        {
            if (resObj.userTradeArray[_loc3][0].length > 2)
            {
                if (resObj.userTradeArray[_loc3][0].indexOf("TM") == -1 && resObj.userTradeArray[_loc3][0].indexOf("HM") == -1 || resObj.userTradeArray[_loc3][0] == "TM Box")
                {
                    _root.mainGUI.tradeBox["i" + (_loc3 + 1)].gotoAndStop(resObj.userTradeArray[_loc3][0]);
                }
                else
                {
                    _root.mainGUI.tradeBox["i" + (_loc3 + 1)].gotoAndStop("tmhm");
                } // end else if
                _root.mainGUI.tradeBox["t" + (_loc3 + 1)].htmlText = "<b>" + resObj.userTradeArray[_loc3][0];
                _root.mainGUI.tradeBox["a" + (_loc3 + 1)].htmlText = "<b>" + resObj.userTradeArray[_loc3][1];
                _root.mainGUI.tradeBox["i" + (_loc3 + 1)].name = resObj.userTradeArray[_loc3][0];
                _root.mainGUI.tradeBox["i" + (_loc3 + 1)].onRollOver = function ()
                {
                    var _loc3 = {x: _xmouse, y: _ymouse};
                    _root.mainGUI.tradeBox.globalToLocal(_loc3);
                    _root.mainGUI.tradeBox.inventoryHighlight._x = _loc3.x + 10;
                    _root.mainGUI.tradeBox.inventoryHighlight._y = _loc3.y;
                    _root.mainGUI.tradeBox.inventoryHighlight.nameT.htmlText = "<b>" + this.name;
                    _root.mainGUI.tradeBox.inventoryHighlight.startDrag();
                    _root.mainGUI.tradeBox.inventoryHighlight._visible = true;
                };
                _root.mainGUI.tradeBox["i" + (_loc3 + 1)].onRollOut = function ()
                {
                    _root.mainGUI.tradeBox.inventoryHighlight.stopDrag();
                    _root.mainGUI.tradeBox.inventoryHighlight._visible = false;
                };
                _root.mainGUI.tradeBox["i" + (_loc3 + 1)].onReleaseOutside = function ()
                {
                    _root.mainGUI.tradeBox.inventoryHighlight.stopDrag();
                    _root.mainGUI.tradeBox.inventoryHighlight._visible = false;
                };
                continue;
            } // end if
            _root.mainGUI.tradeBox["tradePokemon_" + _loc3] = _root.mainGUI.tradeBox.attachMovie("smallPokemonIcon", "tradePokemon_" + _loc3, mainGUI.tradeBox.getNextHighestDepth());
            _root.mainGUI.tradeBox["tradePokemon_" + _loc3].gotoAndStop(resObj.userTradeArray[_loc3][1].id);
            _root.mainGUI.tradeBox["tradePokemon_" + _loc3]._x = _root.mainGUI.tradeBox["i" + (_loc3 + 1)]._x;
            _root.mainGUI.tradeBox["tradePokemon_" + _loc3]._y = _root.mainGUI.tradeBox["i" + (_loc3 + 1)]._y;
            _root.mainGUI.tradeBox["tradePokemon_" + _loc3].swapDepths(_root.getNextHighestDepth());
            _root.mainGUI.tradeBox["tradePokemon_" + _loc3].forceSmoothing = true;
            _root.mainGUI.tradeBox["tradePokemon_" + _loc3].pokeNum = _loc3;
            _root.mainGUI.tradeBox["tradePokemon_" + _loc3].onRollOver = function ()
            {
                var _loc3 = {x: _xmouse, y: _ymouse};
                _root.mainGUI.tradeBox.globalToLocal(_loc3);
                _root.mainGUI.tradeBox.inventoryHighlight._x = _loc3.x + 10;
                _root.mainGUI.tradeBox.inventoryHighlight._y = _loc3.y;
                _root.mainGUI.tradeBox.inventoryHighlight.nameT.htmlText = "<b>Lv " + resObj.userTradeArray[this.pokeNum][1].level + " ";
                if (resObj.userTradeArray[this.pokeNum][1].shiny == true)
                {
                    _root.mainGUI.tradeBox.inventoryHighlight.nameT.htmlText = _root.mainGUI.tradeBox.inventoryHighlight.nameT.htmlText + "<b>[S]";
                } // end if
                _root.mainGUI.tradeBox.inventoryHighlight.nameT.htmlText = _root.mainGUI.tradeBox.inventoryHighlight.nameT.htmlText + ("<b>" + upperCase(resObj.userTradeArray[this.pokeNum][1].name));
                _root.mainGUI.tradeBox.inventoryHighlight.startDrag();
                _root.mainGUI.tradeBox.inventoryHighlight._visible = true;
            };
            _root.mainGUI.tradeBox["tradePokemon_" + _loc3].onRollOut = function ()
            {
                _root.mainGUI.tradeBox.inventoryHighlight.stopDrag();
                _root.mainGUI.tradeBox.inventoryHighlight._visible = false;
            };
            _root.mainGUI.tradeBox["tradePokemon_" + _loc3].onReleaseOutside = function ()
            {
                _root.mainGUI.tradeBox.inventoryHighlight.stopDrag();
                _root.mainGUI.tradeBox.inventoryHighlight._visible = false;
            };
            _root.mainGUI.tradeBox["tradePokemon_" + _loc3].onRelease = function ()
            {
                if (isBusy == false)
                {
                    getTimestamp("removeTradeItem", this.pokeNum);
                    _root.mainGUI.tradeBox.inventoryHighlight.stopDrag();
                    _root.mainGUI.tradeBox.inventoryHighlight._visible = false;
                } // end if
            };
            _root.mainGUI.tradeBox["t" + (_loc3 + 1)].htmlText = "<b>" + resObj.userTradeArray[_loc3][1].name;
        } // end of for
    } // end if
    if (resObj.opponentTradeArray != undefined)
    {
        for (var _loc3 = 0; _loc3 < resObj.opponentTradeArray.length; ++_loc3)
        {
            if (resObj.opponentTradeArray[_loc3][0].length > 2)
            {
                if (resObj.opponentTradeArray[_loc3][0].indexOf("TM") == -1 && resObj.opponentTradeArray[_loc3][0].indexOf("HM") == -1 || resObj.opponentTradeArray[_loc3][0] == "TM Box")
                {
                    _root.mainGUI.tradeBox["ii" + (_loc3 + 1)].gotoAndStop(resObj.opponentTradeArray[_loc3][0]);
                }
                else
                {
                    _root.mainGUI.tradeBox["ii" + (_loc3 + 1)].gotoAndStop("tmhm");
                } // end else if
                _root.mainGUI.tradeBox["tt" + (_loc3 + 1)].htmlText = "<b>" + resObj.opponentTradeArray[_loc3][0];
                _root.mainGUI.tradeBox["aa" + (_loc3 + 1)].htmlText = "<b>" + resObj.opponentTradeArray[_loc3][1];
                _root.mainGUI.tradeBox["ii" + (_loc3 + 1)].name = resObj.opponentTradeArray[_loc3][0];
                _root.mainGUI.tradeBox["ii" + (_loc3 + 1)].onRollOver = function ()
                {
                    var _loc3 = {x: _xmouse, y: _ymouse};
                    _root.mainGUI.tradeBox.globalToLocal(_loc3);
                    _root.mainGUI.tradeBox.inventoryHighlight._x = _loc3.x + 10;
                    _root.mainGUI.tradeBox.inventoryHighlight._y = _loc3.y;
                    _root.mainGUI.tradeBox.inventoryHighlight.nameT.htmlText = "<b>" + this.name;
                    _root.mainGUI.tradeBox.inventoryHighlight.startDrag();
                    _root.mainGUI.tradeBox.inventoryHighlight._visible = true;
                };
                _root.mainGUI.tradeBox["ii" + (_loc3 + 1)].onRollOut = function ()
                {
                    _root.mainGUI.tradeBox.inventoryHighlight.stopDrag();
                    _root.mainGUI.tradeBox.inventoryHighlight._visible = false;
                };
                _root.mainGUI.tradeBox["ii" + (_loc3 + 1)].onReleaseOutside = function ()
                {
                    _root.mainGUI.tradeBox.inventoryHighlight.stopDrag();
                    _root.mainGUI.tradeBox.inventoryHighlight._visible = false;
                };
                continue;
            } // end if
            _root.mainGUI.tradeBox["tradePokemon2_" + _loc3] = _root.mainGUI.tradeBox.attachMovie("smallPokemonIcon", "tradePokemon2_" + _loc3, mainGUI.tradeBox.getNextHighestDepth());
            _root.mainGUI.tradeBox["tradePokemon2_" + _loc3].gotoAndStop(resObj.opponentTradeArray[_loc3][1].id);
            _root.mainGUI.tradeBox["tradePokemon2_" + _loc3]._x = _root.mainGUI.tradeBox["ii" + (_loc3 + 1)]._x;
            _root.mainGUI.tradeBox["tradePokemon2_" + _loc3]._y = _root.mainGUI.tradeBox["ii" + (_loc3 + 1)]._y;
            _root.mainGUI.tradeBox["tradePokemon2_" + _loc3].swapDepths(_root.getNextHighestDepth());
            _root.mainGUI.tradeBox["tradePokemon2_" + _loc3].forceSmoothing = true;
            _root.mainGUI.tradeBox["tradePokemon2_" + _loc3].pokeNum = _loc3;
            _root.mainGUI.tradeBox["tradePokemon2_" + _loc3].onRollOver = function ()
            {
                var _loc3 = {x: _xmouse, y: _ymouse};
                _root.mainGUI.tradeBox.globalToLocal(_loc3);
                _root.mainGUI.tradeBox.inventoryHighlight._x = _loc3.x + 10;
                _root.mainGUI.tradeBox.inventoryHighlight._y = _loc3.y;
                _root.mainGUI.tradeBox.inventoryHighlight.nameT.htmlText = "<b>Lv " + resObj.opponentTradeArray[this.pokeNum][1].level + " ";
                if (resObj.opponentTradeArray[this.pokeNum][1].shiny == true)
                {
                    _root.mainGUI.tradeBox.inventoryHighlight.nameT.htmlText = _root.mainGUI.tradeBox.inventoryHighlight.nameT.htmlText + "<b>[S]";
                } // end if
                _root.mainGUI.tradeBox.inventoryHighlight.nameT.htmlText = _root.mainGUI.tradeBox.inventoryHighlight.nameT.htmlText + ("<b>" + upperCase(resObj.opponentTradeArray[this.pokeNum][1].name) + " (click for info)");
                _root.mainGUI.tradeBox.inventoryHighlight.startDrag();
                _root.mainGUI.tradeBox.inventoryHighlight._visible = true;
            };
            _root.mainGUI.tradeBox["tradePokemon2_" + _loc3].onRollOut = function ()
            {
                _root.mainGUI.tradeBox.inventoryHighlight.stopDrag();
                _root.mainGUI.tradeBox.inventoryHighlight._visible = false;
            };
            _root.mainGUI.tradeBox["tradePokemon2_" + _loc3].onRelease = function ()
            {
                _root.mainGUI.tradeBox.inventoryHighlight.stopDrag();
                _root.mainGUI.tradeBox.inventoryHighlight._visible = false;
                _root.tradePoke = resObj.opponentTradeArray[this.pokeNum][1];
                setPokemonSummaryTrade(tradePoke);
                _root.mainGUI.pokemonSummary.swapDepths(mainGUI.getNextHighestDepth());
                _root.mainGUI.pokemonSummary._visible = true;
            };
            _root.mainGUI.tradeBox["tradePokemon2_" + _loc3].onReleaseOutside = function ()
            {
                _root.mainGUI.tradeBox.inventoryHighlight.stopDrag();
                _root.mainGUI.tradeBox.inventoryHighlight._visible = false;
            };
            _root.mainGUI.tradeBox["tt" + (_loc3 + 1)].htmlText = "<b>" + resObj.opponentTradeArray[_loc3][1].name;
        } // end of for
    } // end if
} // End of the function
function handleGetStartingInfo(resObj)
{
    money = Number(resObj[2]);
    credits = Number(resObj[3]);
    inventory = [];
    for (var _loc7 = 4; _loc7 <= 99999; ++_loc7)
    {
        if (resObj[_loc7] != ")()(09a0jd")
        {
            resObj[_loc7] = resObj[_loc7].split(",");
            if (resObj[_loc7].length > 2)
            {
                inventory.push([resObj[_loc7][0], Number(resObj[_loc7][1]), resObj[_loc7][2]]);
            }
            else
            {
                inventory.push([resObj[_loc7][0], Number(resObj[_loc7][1])]);
            } // end else if
            continue;
        } // end if
        loopNum = _loc7;
        break;
    } // end of for
    badges = resObj[loopNum + 1].split(",");
    tileX = Number(resObj[loopNum + 2]);
    tileY = Number(resObj[loopNum + 3]);
    _root.encryptedTileX = calcMD5(_root.tileX + _root.kg1() + _root.username);
    _root.encryptedTileY = calcMD5(_root.tileY + _root.kg1() + _root.username);
    lastUpdateX = tileX;
    lastUpdateY = tileY;
    map = resObj[loopNum + 4];
    if (map.indexOf("Custom_") == -1)
    {
        if (map.indexOf(" (") != -1)
        {
            map = substring(map, 0, map.indexOf(" ("));
        } // end if
    } // end if
    _root.encryptedMap = calcMD5(_root.map + "dlod02jhznpd02jdhggyambya8201201nfbmj209ahao8rh2pb" + _root.username);
    questArray = [];
    for (var _loc7 = loopNum + 5; _loc7 < 99999; ++_loc7)
    {
        if (resObj[_loc7] != ")()(09a0jc")
        {
            resObj[_loc7] = resObj[_loc7].split(",");
            questArray.push([resObj[_loc7][0], resObj[_loc7][1]]);
            continue;
        } // end if
        loopNum = _loc7;
        break;
    } // end of for
    parseQuestArray();
    safariTime = Number(resObj[loopNum + 1]);
    safariTime2 = Number(resObj[loopNum + 2]);
    if (safariTime2 > 0)
    {
        safariTimeOverI = setInterval(safariTimeOver, safariTime2 * 1000);
    } // end if
    _root.avatarType = Number(resObj[loopNum + 3]);
    if (avatarType == 1)
    {
        _root.player = _root.createEmptyMovieClip("player", _root.getNextHighestDepth());
        _root.player.attachMovie("shadow", "shadow", _root.player.getNextHighestDepth());
        _root.player.shadow._y = 16;
        _root.player.createEmptyMovieClip("player", _root.player.getNextHighestDepth());
        player._visible = false;
        makePlayer(player);
        player._x = newWidth / 2;
        player._y = newHeight / 2 - _root.playerHeightOffset;
        player.tileX = _root.tileX;
        player.tileY = _root.tileY;
        player.name = _root.username;
        player.moveMapAmount = 0;
        player.nextStep = false;
    }
    else
    {
        _root.showPublicMessages = false;
        showCharacterCreation();
    } // end else if
    memberType = resObj[loopNum + 4];
    _root.memberTime = Number(resObj[loopNum + 5]);
    if (_root.memberTime < 0)
    {
        _root.memberTime = 0;
    } // end if
    if (memberType == "gold" && _root.memberTime > 0 && _root.memberTime <= 172800)
    {
        _root.membershipExpirationI = setInterval(membershipExpiration, _root.memberTime * 1000);
    } // end if
    clan = resObj[loopNum + 6];
    if (clan == "0")
    {
        clan = "";
    } // end if
    if (resObj[loopNum + 7] == "true")
    {
        worldBlessingBeforeGUI = true;
        usedBy1 = resObj[loopNum + 8];
    } // end if
    if (resObj[loopNum + 13] == "true")
    {
        dropRateBlessingBeforeGUI = true;
        usedBy4 = resObj[loopNum + 14];
    } // end if
    pokedexSeen = resObj[loopNum + 15].split(",");
    pokedexCaught = resObj[loopNum + 16].split(",");
    if (Number(resObj[loopNum + 17]) > 0)
    {
        muted = true;
        encryptedMuted = calcMD5(muted + _root.kg1() + username);
        clearInterval(unMuteI);
        unMuteI = setInterval(unMute, Number(resObj[loopNum + 17]) * 1000);
        systemMessage("You are muted for another " + Math.floor(Number(resObj[loopNum + 17]) / 60) + " minutes.");
    } // end if
    tempShopList = resObj[loopNum + 18].split(",");
    if (tempShopList.length > 0)
    {
        shopList = tempShopList;
    } // end if
    userPokemon = [];
    for (var _loc7 = loopNum + 19; _loc7 < 99999; ++_loc7)
    {
        if (resObj[_loc7] != ")()(09a0jb")
        {
            userPokemon.push(parsePokemon(resObj[_loc7]));
            continue;
        } // end if
        loopNum = _loc7;
        break;
    } // end of for
    _root.ppC = [1, 1, 1, 1];
    _root.ppM = [1, 1, 1, 1];
    storagePokemon = [];
    for (var _loc7 = loopNum + 1; _loc7 < 99999; ++_loc7)
    {
        if (resObj[_loc7] != ")()(09a0ja")
        {
            storagePokemon.push(parsePokemon(resObj[_loc7]));
            continue;
        } // end if
        loopNum = _loc7;
        break;
    } // end of for
    clanRank = resObj[loopNum + 1];
    clanBank = Number(resObj[loopNum + 2]);
    clanRoster = [];
    for (var _loc7 = loopNum + 3; _loc7 < 99999; ++_loc7)
    {
        if (resObj[_loc7] != ")()(09a0jz")
        {
            resObj[_loc7] = resObj[_loc7].split(",");
            clanRoster.push([resObj[_loc7][0], resObj[_loc7][1]]);
            continue;
        } // end if
        loopNum = _loc7;
        break;
    } // end of for
    rosterSize = Number(resObj[loopNum + 1]);
    if (clanRank == "")
    {
        clanRank = undefined;
        clanBank = undefined;
        clanRoster = undefined;
        rosterSize = undefined;
    } // end if
    pingServerI = setInterval(pingServer, 30000);
    if (guiUp == false && userPokemon.length > 0 && avatarType > 0)
    {
        addFollowPokemon();
    } // end if
    _root.userList = smartfox.getActiveRoom().getUserList();
    for (var _loc7 in userList)
    {
        var _loc8 = userList[_loc7];
        var _loc9 = _loc8.getName();
        if (_loc9.toLowerCase() == _root.username.toLowerCase())
        {
            _root.userId = _loc8.getId();
            break;
        } // end if
    } // end of for...in
    _root.pokedexSeenAmount = 0;
    _root.pokedexCaughtAmount = 0;
    for (var _loc6 = 0; _loc6 < pokedexSeen.length; ++_loc6)
    {
        if (pokedexSeen[_loc6] == "true")
        {
            ++_root.pokedexSeenAmount;
        } // end if
        if (pokedexCaught[_loc6] == "true")
        {
            ++_root.pokedexCaughtAmount;
        } // end if
    } // end of for
    saveDataI = setInterval(getTimestamp, 1200000, "saveData");
    musicVolume = Number(resObj[loopNum + 12]);
    fastBattles = resObj[loopNum + 13];
    autoscroll = resObj[loopNum + 14];
    if (fastBattles == "true")
    {
        fastBattles = true;
    }
    else
    {
        fastBattles = false;
    } // end else if
    if (autoscroll == "true")
    {
        autoscroll = true;
    }
    else
    {
        autoscroll = false;
    } // end else if
    loadGUI();
    if (worldBlessingBeforeGUI == true)
    {
        mainGUI.w._visible = true;
        mainGUI.w.gotoAndStop(1);
    } // end if
    if (dropRateBlessingBeforeGUI == true)
    {
        mainGUI.dr._visible = true;
    } // end if
    if (_root.memberTime > 0)
    {
        systemMessage("Gold Membership: " + calculateGMTime(_root.memberTime) + ".");
    } // end if
    if (resObj[loopNum + 2] == "true")
    {
        systemMessage("Your Gold Membership has expired.");
    } // end if
    if (resObj[loopNum + 3] == "true")
    {
        getTimestamp("safariTimeOver");
    } // end if
    friends = parseArray(resObj[loopNum + 4]);
    ignore = parseArray(resObj[loopNum + 5]);
    johtoSafariTime = Number(resObj[loopNum + 6]);
    johtoSafariTime2 = Number(resObj[loopNum + 7]);
    if (player != undefined)
    {
        makeInitialPlayer(resObj);
    } // end if
    remakeInventory();
    creationDate = Number(resObj[loopNum + 10]);
    cDate = new Date(creationDate * 1000);
    creationDateText = cDate.getMonth() + 1 + "/" + cDate.getDate() + "/" + cDate.getFullYear();
    ppCurrent = Number(resObj[loopNum + 11]);
    loadMap(false, map);
    if (johtoSafariTime2 > 0)
    {
        johtoSafariTimeOverI = setInterval(johtoSafariTimeOver, johtoSafariTime2 * 1000);
    } // end if
    if (resObj[loopNum + 8] == "true")
    {
        getTimestamp("johtoSafariTimeOver");
    } // end if
    marketplaceListings = [];
    for (var _loc7 = loopNum + 15; _loc7 <= 99999; ++_loc7)
    {
        if (resObj[_loc7] != ")()(09a0js")
        {
            resObj[_loc7] = resObj[_loc7].split(",");
            marketplaceListings.push([resObj[_loc7][0], Number(resObj[_loc7][1]), Number(resObj[_loc7][2]), resObj[_loc7][3], Number(resObj[_loc7][4]), Number(resObj[_loc7][5])]);
            continue;
        } // end if
        loopNum = _loc7;
        break;
    } // end of for
    acTime = Number(resObj[loopNum + 1]);
    acTime2 = Number(resObj[loopNum + 2]);
    if (acTime2 > 0)
    {
        acTimeOverI = setInterval(acTimeOver, acTime2 * 1000);
    } // end if
    if (resObj[loopNum + 3] == "true")
    {
        getTimestamp("acTimeOver");
    } // end if
    if (resObj[loopNum + 4] == "true")
    {
        _root.clanWarsActive = true;
    }
    else
    {
        _root.clanWarsActive = false;
    } // end else if
    if (resObj[loopNum + 5] == "true")
    {
        masterShopAccess = true;
    }
    else
    {
        masterShopAccess = false;
    } // end else if
    if (resObj[loopNum + 6] != undefined && resObj[loopNum + 6].length > 0)
    {
        customChat = resObj[loopNum + 6];
    }
    else
    {
        customChat = "";
    } // end else if
    loadCustomChat();
    clanWarTier = Number(resObj[loopNum + 8]);
    if (map == "Clan Wars 1-33" || map == "Clan Wars 34-66" || map == "Clan Wars 67-100" || map == "Clan Wars T1" || map == "Clan Wars T2" || map == "Clan Wars T3")
    {
        loadMap(true, "Vermilion City Pokecenter", 19, 18);
    } // end if
    movementSpeedMod = 1;
    if (Number(resObj[loopNum + 10]) > 0)
    {
        strangeLiquidI = setInterval("strangeLiquid", Number(resObj[loopNum + 10]) * 1000);
        if (Number(resObj[loopNum + 9]) == 2)
        {
            movementSpeedMod = 2;
        }
        else if (Number(resObj[loopNum + 9]) == 0.500000)
        {
            movementSpeedMod = 0.500000;
        } // end if
    } // end else if
    moveMapSpeed = 8 * movementSpeedMod;
    fishingLevel = Number(resObj[loopNum + 11]);
    currentFishingExp = Number(resObj[loopNum + 12]);
    totalFishingExp = Number(resObj[loopNum + 13]);
    mainGUI.trainerCard.trainerLevels.fishingLevelT.htmlText = "<b>Lv " + fishingLevel;
    mainGUI.trainerCard.trainerLevels.expT.htmlText = "<b>" + format(currentFishingExp) + " / " + format(fishingLevel * fishingLevel * fishingLevel + 40);
    mainGUI.trainerCard.trainerLevels.m._x = -205.500000 + currentFishingExp / (fishingLevel * fishingLevel * fishingLevel + 40) * 180;
    if (mainGUI.trainerCard.trainerLevels.m._x > 385.500000)
    {
        mainGUI.trainerCard.trainerLevels.m._x = 385.500000;
    } // end if
    _root.largeChat = resObj[loopNum + 14];
    _root.itemBox = parseMultiArray(resObj[loopNum + 15]);
    _root.pokemonBox = parseMultiPokemon(resObj[loopNum + 16]);
    for (var _loc7 = 0; _loc7 < _root.itemBox.length; ++_loc7)
    {
        _root.itemBox[_loc7][1] = Number(_root.itemBox[_loc7][1]);
    } // end of for
    makeItemBox();
    if (itemBox.length > 0 || pokemonBox.length > 0)
    {
        systemMessage("You have unclaimed items in your Item Box.");
    } // end if
    if (resObj[loopNum + 17] != "")
    {
        mainGUI.altarBlessingT.htmlText = "<b>Arceus Altar Blessing Active +100% Exp (" + resObj[loopNum + 17] + ", " + resObj[loopNum + 18] + ")";
        mainGUI.x2T._visible = true;
        mainGUI.altarBlessingT._visible = true;
    } // end if
    if (resObj[loopNum + 19] != "")
    {
        var _loc10 = resObj[loopNum + 19];
        mainGUI.worldBlessingSmallT._visible = true;
    } // end if
    if (resObj[loopNum + 22] != "")
    {
        mainGUI.dropRateBlessingSmallT.htmlText = "<b>Drop Rate Blessing Active +20% Drop Rate (" + usedBy4 + ", " + resObj[loopNum + 22] + ")";
        mainGUI.dropRateBlessingSmallT._visible = true;
    } // end if
    if (resObj[loopNum + 23] == "true")
    {
        _root.pvpLobbyOpen = true;
    }
    else
    {
        _root.pvpLobbyOpen = false;
    } // end else if
    _root.tempChatSettings = parseMultiArray(resObj[loopNum + 24]);
    _root.englishChatSettings = tempChatSettings[0];
    _root.tradingChatSettings = tempChatSettings[1];
    _root.localChatSettings = tempChatSettings[2];
    _root.nonEnglishChatSettings = tempChatSettings[3];
    _root.clanChatSettings = tempChatSettings[4];
    _root.customChatSettings = tempChatSettings[5];
    _root.storagePokemon2 = parseMultiPokemon(resObj[loopNum + 25]);
    _root.storagePokemon3 = parseMultiPokemon(resObj[loopNum + 26]);
    _root.storagePokemon4 = parseMultiPokemon(resObj[loopNum + 27]);
    _root.storagePokemon5 = parseMultiPokemon(resObj[loopNum + 28]);
    _root.storagePokemon6 = parseMultiPokemon(resObj[loopNum + 29]);
    _root.hoennSafariTime = Number(resObj[loopNum + 30]);
    _root.hoennSafariTime2 = Number(resObj[loopNum + 31]);
    if (hoennSafariTime2 > 0)
    {
        hoennSafariTimeOverI = setInterval(hoennSafariTimeOver, hoennSafariTime2 * 1000);
    } // end if
    if (resObj[loopNum + 32] == "true")
    {
        getTimestamp("hoennSafariTimeOver");
    } // end if
    _root.nearestPokecenter = resObj[loopNum + 34];
    if (resObj[loopNum + 35] == "true")
    {
        _root.disableBattleMusic = true;
    }
    else
    {
        _root.disableBattleMusic = false;
    } // end else if
    if (disableBattleMusic == true)
    {
        mainGUI.settings.tickBox3.gotoAndStop(2);
    }
    else
    {
        mainGUI.settings.tickBox3.gotoAndStop(1);
    } // end else if
    _root.pokedexCaught2 = parseArray(resObj[loopNum + 36]);
    _root.caughtAmount2 = 0;
    for (var _loc7 = 0; _loc7 < pokedexCaught2.length; ++_loc7)
    {
        if (_root.pokedexCaught2[_loc7] == "true")
        {
            ++_root.caughtAmount2;
        } // end if
    } // end of for
    for (var _loc4 = 1; _loc4 <= pokemonAmount; ++_loc4)
    {
        if (_loc4 % 2 == 0)
        {
            var _loc5 = mainGUI.pokedex.m.attachMovie("pokedexListBg1", "pokedexListBg_" + _loc4, mainGUI.pokedex.m.getNextHighestDepth());
        }
        else
        {
            _loc5 = mainGUI.pokedex.m.attachMovie("pokedexListBg2", "pokedexListBg_" + _loc4, mainGUI.pokedex.m.getNextHighestDepth());
        } // end else if
        _loc5._x = -2.500000;
        _loc5._y = -183 + (_loc4 - 1) * 26;
        _loc5.idT.htmlText = "<b>" + _loc4;
        _loc5.i.gotoAndStop(_loc4);
        if (pokedexSeen[_loc4 - 1] == true || pokedexSeen[_loc4 - 1] == "true")
        {
            _loc5.i._brightness(0);
            _loc5.nameT.htmlText = "<b>" + upperCase(generalInfoArray[_loc4 - 1][0]);
            _loc5.pokeId = _loc4;
            _loc5.onRelease = function ()
            {
                loadPokedexInfo(this.pokeId);
            };
            if (pokedexCaught[_loc4 - 1] == true || pokedexCaught[_loc4 - 1] == "true")
            {
                if (pokedexCaught2[_loc4 - 1] == true || pokedexCaught2[_loc4 - 1] == "true")
                {
                    _loc5.pokeball._brightness(0);
                }
                else
                {
                    _loc5.pokeball._brightness(-50);
                } // end else if
            }
            else
            {
                _loc5.pokeball._brightness(-100);
            } // end else if
            continue;
        } // end if
        _loc5.i._brightness(-100);
        _loc5.nameT.htmlText = "<b>???";
        _loc5.pokeball._brightness(-100);
    } // end of for
    mainGUI.pokedex.m.setMask(mainGUI.pokedex.m2);
    loadPokedexInfo(1);
    if (resObj[loopNum + 37] == "true")
    {
        _root.showMoveInfo = true;
        mainGUI.settings.tickBox4.gotoAndStop(2);
    }
    else
    {
        _root.showMoveInfo = false;
        mainGUI.settings.tickBox4.gotoAndStop(1);
    } // end else if
    _root.achievementData = parseMultiArray(resObj[loopNum + 38]);
    _root.tournamentType = Number(resObj[loopNum + 39]);
    _root.chatFontSize = Number(resObj[loopNum + 40]);
    _root.chatWidth = Number(resObj[loopNum + 41]);
    _root.chatHeight = Number(resObj[loopNum + 42]);
    mainGUI.chatSettings.chatFontSizeT.text = _root.chatFontSize;
    mainGUI.chatSettings.chatFontSizeT.restrict = "0-9";
    if (_loc10 != undefined)
    {
        mainGUI.worldBlessingSmallT.htmlText = "<b>World Blessing Active x" + int(Number(resObj[loopNum + 43]) * 100) / 100 + " Exp (" + usedBy1 + ", " + _loc10 + ")";
    } // end if
    _root.battleQueueRating = Number(resObj[loopNum + 44]);
    _root.sinnohSafariTime = Number(resObj[loopNum + 45]);
    _root.sinnohSafariTime2 = Number(resObj[loopNum + 46]);
    if (sinnohSafariTime2 > 0)
    {
        sinnohSafariTimeOverI = setInterval(sinnohSafariTimeOver, sinnohSafariTime2 * 1000);
    } // end if
    if (resObj[loopNum + 47] == "true")
    {
        getTimestamp("sinnohSafariTimeOver");
    } // end if
    _root.miningLevel = Number(resObj[loopNum + 48]);
    _root.currentMiningExp = Number(resObj[loopNum + 49]);
    _root.totalMiningExp = Number(resObj[loopNum + 50]);
    mainGUI.trainerCard.trainerLevels.miningLevelT.htmlText = "<b>Lv " + miningLevel;
    mainGUI.trainerCard.trainerLevels.expT2.htmlText = "<b>" + format(currentMiningExp) + " / " + format(miningLevel * miningLevel * miningLevel + 40);
    mainGUI.trainerCard.trainerLevels.m2._x = -205.500000 + currentMiningExp / (miningLevel * miningLevel * miningLevel + 40) * 180;
    if (mainGUI.trainerCard.trainerLevels.m2._x > 385.500000)
    {
        mainGUI.trainerCard.trainerLevels.m2._x = 385.500000;
    } // end if
    _root.disableBattleAnimations = resObj[loopNum + 51];
    if (_root.disableBattleAnimations == "1")
    {
        mainGUI.settings.tickBox5.gotoAndStop(2);
    }
    else
    {
        mainGUI.settings.tickBox5.gotoAndStop(1);
    } // end else if
    if (resObj[loopNum + 52] != "0")
    {
        resObj[loopNum + 52] = parseArray(resObj[loopNum + 52]);
        mainGUI.swarmT.htmlText = "<b>" + resObj[loopNum + 52][0] + " Swarm Active (" + resObj[loopNum + 52][1] + ", " + resObj[loopNum + 52][2] + ", " + resObj[loopNum + 52][3] + ")";
        mainGUI.swarmT._visible = true;
        _root.swarmMap = resObj[loopNum + 52][0];
    } // end if
    if (resObj[loopNum + 53] != "0")
    {
        resObj[loopNum + 53] = parseArray(resObj[loopNum + 53]);
        mainGUI.goldRushT.htmlText = "<b>" + resObj[loopNum + 53][0] + " Gold Rush Active (" + resObj[loopNum + 53][1] + ")";
        mainGUI.goldRushT._visible = true;
    } // end if
    _root.tileZ = Number(resObj[loopNum + 54]);
    _root.lastUpdateZ = _root.tileZ;
    _root.allowSwearing = resObj[loopNum + 55];
    _root.disableGlobalNotifications = resObj[loopNum + 56];
    if (_root.allowSwearing == "1")
    {
        mainGUI.settings.tickBox6.gotoAndStop(2);
    }
    else
    {
        mainGUI.settings.tickBox6.gotoAndStop(1);
    } // end else if
    if (_root.disableGlobalNotifications == "1")
    {
        mainGUI.settings.tickBox7.gotoAndStop(2);
    }
    else
    {
        mainGUI.settings.tickBox7.gotoAndStop(1);
    } // end else if
    _root.competitivePoints = Number(resObj[loopNum + 57]);
    _root.weeklyBattles = Number(resObj[loopNum + 58]);
    _root.storagePokemon7 = parseMultiPokemon(resObj[loopNum + 59]);
    _root.storagePokemon8 = parseMultiPokemon(resObj[loopNum + 60]);
    _root.storagePokemon9 = parseMultiPokemon(resObj[loopNum + 61]);
    _root.storagePokemon10 = parseMultiPokemon(resObj[loopNum + 62]);
    _root.disableFriendRequests = Number(resObj[loopNum + 63]);
    if (_root.disableFriendRequests == "1")
    {
        mainGUI.settings.tickBox8.gotoAndStop(2);
    }
    else
    {
        mainGUI.settings.tickBox8.gotoAndStop(1);
    } // end else if
    if (resObj[loopNum + 64] != "")
    {
        mainGUI.altarBlessingT2.htmlText = "<b>Kyogre Altar Blessing Active +100% Fish Exp (" + resObj[loopNum + 64] + ", " + resObj[loopNum + 65] + ")";
        mainGUI.x2T2._visible = true;
        mainGUI.altarBlessingT2._visible = true;
    } // end if
    if (resObj[loopNum + 66] != "")
    {
        mainGUI.altarBlessingT3.htmlText = "<b>Diancie Altar Blessing Active +100% Mine Exp (" + resObj[loopNum + 66] + ", " + resObj[loopNum + 67] + ")";
        mainGUI.x2T3._visible = true;
        mainGUI.altarBlessingT3._visible = true;
    } // end if
    if (resObj[loopNum + 68] != "0")
    {
        resObj[loopNum + 68] = parseArray(resObj[loopNum + 68]);
        mainGUI.worldBossT.htmlText = "<b>" + resObj[loopNum + 68][1] + " World Boss Active (" + resObj[loopNum + 68][0] + ", " + resObj[loopNum + 68][2] + ")";
        mainGUI.worldBossT._visible = true;
    } // end if
    _root.guaranteedItemData = [];
    guaranteedItemData["Mystery Box"] = parseArray(resObj[loopNum + 69]);
    guaranteedItemData["TM Box"] = parseArray(resObj[loopNum + 70]);
    guaranteedItemData["Evolutional Stone Box"] = parseArray(resObj[loopNum + 71]);
    guaranteedItemData["Mystery Box"][1] = Number(guaranteedItemData["Mystery Box"][1]);
    guaranteedItemData["TM Box"][1] = Number(guaranteedItemData["TM Box"][1]);
    guaranteedItemData["Evolutional Stone Box"][1] = Number(guaranteedItemData["Evolutional Stone Box"][1]);
    _root.showCredits = resObj[loopNum + 72];
    if (_root.showCredits == "1")
    {
        mainGUI.settings.tickBox9.gotoAndStop(2);
    }
    else
    {
        mainGUI.settings.tickBox9.gotoAndStop(1);
    } // end else if
    if (resObj[loopNum + 73] == "1")
    {
        handleServerRestart(false);
    } // end if
    _root.newSettings = parseArray(resObj[loopNum + 74]);
    if (_root.newSettings[0] == "1")
    {
        mainGUI.settings.tickBox10.gotoAndStop(2);
    }
    else
    {
        mainGUI.settings.tickBox10.gotoAndStop(1);
    } // end else if
    resizeChat();
    setChatFontSize();
    makeAchievements();
    updatePositionI = setInterval(updatePosition, 8000);
    if (map.indexOf("Custom_") == -1)
    {
        if (map.indexOf("Blazing ") != -1 || map.indexOf("Underwater Hotspring") != -1 || map.indexOf("Mystical Dungeon") != -1 || map.indexOf("Mystical Forest") != -1 || map.indexOf("Mystical Gym") != -1 || map.indexOf("Easter ") != -1 || map.indexOf("Frostbite ") != -1 || map.indexOf("Christmas ") != -1 || map.indexOf("Santas") != -1 || map.indexOf("Xmas ") != -1 || map.indexOf("Slip Cave") != -1 || map.indexOf("Shifting Path") != -1 || map.indexOf("Summer Beach") != -1 || map.indexOf("Easter Island") != -1 || map.indexOf("Summer Island") != -1 || map.indexOf("Summer Volcano") != -1 || map.indexOf("Summer Forest") != -1)
        {
            loadNearestPokecenter();
        } // end if
    } // end if
} // End of the function
function strangeLiquid()
{
    clearInterval(strangeLiquidI);
    movementSpeedMod = 1;
    if (moveType == "bike")
    {
        moveMapSpeed = 16 * movementSpeedMod;
    }
    else
    {
        moveMapSpeed = 8 * movementSpeedMod;
    } // end else if
    systemMessage("The effects of the strange liquid have worn off.");
} // End of the function
function switchChatSize()
{
    if (mainGUI.chatBg._currentframe == 1)
    {
        mainGUI.chatBg.gotoAndStop(2);
        mainGUI.globalTab._y = mainGUI.globalTab._y - 123;
        mainGUI.localTab._y = mainGUI.localTab._y - 123;
        mainGUI.tradeTab._y = mainGUI.tradeTab._y - 123;
        mainGUI.clanTab._y = mainGUI.clanTab._y - 123;
        mainGUI.nonEnglishTab._y = mainGUI.nonEnglishTab._y - 123;
        mainGUI.customTab._y = mainGUI.customTab._y - 123;
        mainGUI.scrollUpB._y = mainGUI.scrollUpB._y - 123;
        mainGUI.globalChatT._y = mainGUI.globalChatT._y - 123;
        mainGUI.localChatT._y = mainGUI.localChatT._y - 123;
        mainGUI.tradeChatT._y = mainGUI.tradeChatT._y - 123;
        mainGUI.clanChatT._y = mainGUI.clanChatT._y - 123;
        mainGUI.nonEnglishChatT._y = mainGUI.nonEnglishChatT._y - 123;
        mainGUI.customChatT._y = mainGUI.customChatT._y - 123;
        mainGUI.globalChatT._height = mainGUI.globalChatT._height + 123;
        mainGUI.localChatT._height = mainGUI.localChatT._height + 123;
        mainGUI.tradeChatT._height = mainGUI.tradeChatT._height + 123;
        mainGUI.clanChatT._height = mainGUI.clanChatT._height + 123;
        mainGUI.nonEnglishChatT._height = mainGUI.nonEnglishChatT._height + 123;
        mainGUI.customChatT._height = mainGUI.customChatT._height + 123;
    }
    else
    {
        mainGUI.chatBg.gotoAndStop(1);
        mainGUI.globalTab._y = mainGUI.globalTab._y + 123;
        mainGUI.localTab._y = mainGUI.localTab._y + 123;
        mainGUI.tradeTab._y = mainGUI.tradeTab._y + 123;
        mainGUI.clanTab._y = mainGUI.clanTab._y + 123;
        mainGUI.nonEnglishTab._y = mainGUI.nonEnglishTab._y + 123;
        mainGUI.customTab._y = mainGUI.customTab._y + 123;
        mainGUI.scrollUpB._y = mainGUI.scrollUpB._y + 123;
        if (mainGUI.scrollBar._y - mainGUI.scrollBar._height / 2 < mainGUI.scrollUpB._y + mainGUI.scrollUpB._height / 2)
        {
            mainGUI.scrollBar._y = mainGUI.scrollBar._y + 123;
        } // end if
        mainGUI.globalChatT._y = mainGUI.globalChatT._y + 123;
        mainGUI.localChatT._y = mainGUI.localChatT._y + 123;
        mainGUI.tradeChatT._y = mainGUI.tradeChatT._y + 123;
        mainGUI.clanChatT._y = mainGUI.clanChatT._y + 123;
        mainGUI.nonEnglishChatT._y = mainGUI.nonEnglishChatT._y + 123;
        mainGUI.customChatT._y = mainGUI.customChatT._y + 123;
        mainGUI.globalChatT._height = mainGUI.globalChatT._height - 123;
        mainGUI.localChatT._height = mainGUI.localChatT._height - 123;
        mainGUI.tradeChatT._height = mainGUI.tradeChatT._height - 123;
        mainGUI.clanChatT._height = mainGUI.clanChatT._height - 123;
        mainGUI.nonEnglishChatT._height = mainGUI.nonEnglishChatT._height - 123;
        mainGUI.customChatT._height = mainGUI.customChatT._height - 123;
    } // end else if
} // End of the function
function checkPlayerMovement(dir, target, tempMoveType)
{
    if (tempMoveType == undefined)
    {
        tempMoveType = moveType;
    } // end if
    if (dir == "up")
    {
        if (target.followPokemonBox._y < 0)
        {
            target.followPokemonBox.xSpeed = 4;
            target.followPokemonBox.ySpeed = 8;
        }
        else
        {
            target.followPokemonBox.xSpeed = 4;
            target.followPokemonBox.ySpeed = 4;
        } // end else if
    }
    else if (dir == "down")
    {
        if (target.followPokemonBox._y > 0)
        {
            target.followPokemonBox.xSpeed = 4;
            target.followPokemonBox.ySpeed = 8;
        }
        else
        {
            target.followPokemonBox.xSpeed = 4;
            target.followPokemonBox.ySpeed = 4;
        } // end else if
    }
    else if (dir == "left")
    {
        if (target.followPokemonBox._x < 0)
        {
            target.followPokemonBox.xSpeed = 8;
            target.followPokemonBox.ySpeed = 4;
        }
        else
        {
            target.followPokemonBox.xSpeed = 4;
            target.followPokemonBox.ySpeed = 4;
        } // end else if
    }
    else if (dir == "right")
    {
        if (target.followPokemonBox._x > 0)
        {
            target.followPokemonBox.xSpeed = 8;
            target.followPokemonBox.ySpeed = 4;
        }
        else
        {
            target.followPokemonBox.xSpeed = 4;
            target.followPokemonBox.ySpeed = 4;
        } // end else if
    } // end else if
    if (target == player)
    {
        followPokemonMove = dir;
    } // end if
    if (target.moveMapAmount >= offsetAmount2 && target == player)
    {
        followPokemonMove = "";
    } // end if
    if (tempMoveType == "surf")
    {
        if (dir == "up")
        {
            if (target.moveMapAmount == 32)
            {
                if (target.nextStep != 1)
                {
                    target.nextStep = 1;
                    drawPlayer(target, 12, 1);
                    setFollowPokemon(target, 0, 3);
                }
                else
                {
                    target.nextStep = 0;
                    drawPlayer(target, 13, 1);
                    setFollowPokemon(target, 1, 3);
                } // end if
            } // end else if
        }
        else if (dir == "down")
        {
            if (target.moveMapAmount == 32)
            {
                if (target.nextStep != 1)
                {
                    target.nextStep = 1;
                    drawPlayer(target, 12, 0);
                    setFollowPokemon(target, 0, 0);
                }
                else
                {
                    target.nextStep = 0;
                    drawPlayer(target, 13, 0);
                    setFollowPokemon(target, 1, 0);
                } // end if
            } // end else if
        }
        else if (dir == "left")
        {
            if (target.moveMapAmount == 32)
            {
                if (target.nextStep != 1)
                {
                    target.nextStep = 1;
                    drawPlayer(target, 12, 2);
                    setFollowPokemon(target, 0, 1);
                }
                else
                {
                    target.nextStep = 0;
                    drawPlayer(target, 13, 2);
                    setFollowPokemon(target, 1, 1);
                } // end if
            } // end else if
        }
        else if (dir == "right")
        {
            if (target.moveMapAmount == 32)
            {
                if (target.nextStep != 1)
                {
                    target.nextStep = 1;
                    drawPlayer(target, 12, 3);
                    setFollowPokemon(target, 0, 2);
                }
                else
                {
                    target.nextStep = 0;
                    drawPlayer(target, 13, 3);
                    setFollowPokemon(target, 1, 2);
                } // end else if
            } // end else if
        } // end else if
    }
    else if (tempMoveType == "bike")
    {
        if (collisionArray[target.tileY][target.tileX] != 16)
        {
            if (_root.landMounts[target.mount] == undefined)
            {
                if (dir == "up")
                {
                    if (target.moveMapAmount == 32)
                    {
                        if (target.nextStep == 0)
                        {
                            target.nextStep = 1;
                            drawPlayer(target, 7, 1);
                            setFollowPokemon(target, 0, 3);
                        }
                        else
                        {
                            target.nextStep = 0;
                            drawPlayer(target, 8, 1);
                            setFollowPokemon(target, 1, 3);
                        } // end if
                    } // end else if
                }
                else if (dir == "down")
                {
                    if (target.moveMapAmount == 32)
                    {
                        if (target.nextStep == 0)
                        {
                            target.nextStep = 1;
                            drawPlayer(target, 7, 0);
                            setFollowPokemon(target, 0, 0);
                        }
                        else
                        {
                            target.nextStep = 0;
                            drawPlayer(target, 8, 0);
                            setFollowPokemon(target, 1, 0);
                        } // end if
                    } // end else if
                }
                else if (dir == "left")
                {
                    if (target.moveMapAmount == 32)
                    {
                        if (target.nextStep == 0)
                        {
                            target.nextStep = 1;
                            drawPlayer(target, 7, 2);
                            setFollowPokemon(target, 0, 1);
                        }
                        else
                        {
                            target.nextStep = 0;
                            drawPlayer(target, 8, 2);
                            setFollowPokemon(target, 1, 1);
                        } // end if
                    } // end else if
                }
                else if (dir == "right")
                {
                    if (target.moveMapAmount == 32)
                    {
                        if (target.nextStep == 0)
                        {
                            target.nextStep = 1;
                            drawPlayer(target, 7, 3);
                            setFollowPokemon(target, 0, 2);
                        }
                        else
                        {
                            target.nextStep = 0;
                            drawPlayer(target, 8, 3);
                            setFollowPokemon(target, 1, 2);
                        } // end else if
                    } // end else if
                } // end else if
            }
            else if (dir == "up")
            {
                if (target.moveMapAmount == 32)
                {
                    if (target.nextStep == 0)
                    {
                        target.nextStep = 1;
                        drawPlayer(target, 7, 1);
                        setFollowPokemon(target, 0, 3);
                    }
                    else if (target.nextStep == 1)
                    {
                        target.nextStep = 2;
                        drawPlayer(target, 8, 1);
                        setFollowPokemon(target, 1, 3);
                    }
                    else
                    {
                        target.nextStep = 0;
                        drawPlayer(target, 6, 1);
                        setFollowPokemon(target, 0, 3);
                    } // end else if
                } // end else if
            }
            else if (dir == "down")
            {
                if (target.moveMapAmount == 32)
                {
                    if (target.nextStep == 0)
                    {
                        target.nextStep = 1;
                        drawPlayer(target, 7, 0);
                        setFollowPokemon(target, 0, 0);
                    }
                    else if (target.nextStep == 1)
                    {
                        target.nextStep = 2;
                        drawPlayer(target, 8, 0);
                        setFollowPokemon(target, 1, 0);
                    }
                    else
                    {
                        target.nextStep = 0;
                        drawPlayer(target, 6, 0);
                        setFollowPokemon(target, 0, 0);
                    } // end else if
                } // end else if
            }
            else if (dir == "left")
            {
                if (target.moveMapAmount == 32)
                {
                    if (target.nextStep == 0)
                    {
                        target.nextStep = 1;
                        drawPlayer(target, 7, 2);
                        setFollowPokemon(target, 0, 1);
                    }
                    else if (target.nextStep == 1)
                    {
                        target.nextStep = 2;
                        drawPlayer(target, 8, 2);
                        setFollowPokemon(target, 1, 1);
                    }
                    else
                    {
                        target.nextStep = 0;
                        drawPlayer(target, 6, 2);
                        setFollowPokemon(target, 0, 1);
                    } // end else if
                } // end else if
            }
            else if (dir == "right")
            {
                if (target.moveMapAmount == 32)
                {
                    if (target.nextStep == 0)
                    {
                        target.nextStep = 1;
                        drawPlayer(target, 7, 3);
                        setFollowPokemon(target, 0, 2);
                    }
                    else if (target.nextStep == 1)
                    {
                        target.nextStep = 2;
                        drawPlayer(target, 8, 3);
                        setFollowPokemon(target, 1, 2);
                    }
                    else
                    {
                        target.nextStep = 0;
                        drawPlayer(target, 6, 3);
                        setFollowPokemon(target, 0, 2);
                    } // end else if
                } // end else if
            } // end else if
        } // end else if
    }
    else if (collisionArray[target.tileY][target.tileX] != 16)
    {
        if (dir == "up")
        {
            if (target.moveMapAmount == 32)
            {
                if (target.nextStep == true)
                {
                    drawPlayer(target, 1, 1);
                    target.nextStep = false;
                    setFollowPokemon(target, 0, 3);
                }
                else
                {
                    drawPlayer(target, 2, 1);
                    target.nextStep = true;
                    setFollowPokemon(target, 1, 3);
                } // end else if
            }
            else if (target.moveMapAmount >= offsetAmount2)
            {
                drawPlayer(target, 0, 1);
            } // end else if
        }
        else if (dir == "down")
        {
            if (target.moveMapAmount == 32)
            {
                if (target.nextStep == true)
                {
                    drawPlayer(target, 1, 0);
                    target.nextStep = false;
                    setFollowPokemon(target, 0, 0);
                }
                else
                {
                    drawPlayer(target, 2, 0);
                    target.nextStep = true;
                    setFollowPokemon(target, 1, 0);
                } // end else if
            }
            else if (target.moveMapAmount >= offsetAmount2)
            {
                drawPlayer(target, 0, 0);
            } // end else if
        }
        else if (dir == "left")
        {
            if (target.moveMapAmount == 32)
            {
                if (target.nextStep == true)
                {
                    drawPlayer(target, 1, 2);
                    target.nextStep = false;
                    setFollowPokemon(target, 0, 1);
                }
                else
                {
                    drawPlayer(target, 2, 2);
                    target.nextStep = true;
                    setFollowPokemon(target, 1, 1);
                } // end else if
            }
            else if (target.moveMapAmount >= offsetAmount2)
            {
                drawPlayer(target, 0, 2);
            } // end else if
        }
        else if (dir == "right")
        {
            if (target.moveMapAmount == 32)
            {
                if (target.nextStep == true)
                {
                    drawPlayer(target, 1, 3);
                    target.nextStep = false;
                    setFollowPokemon(target, 0, 2);
                }
                else
                {
                    drawPlayer(target, 2, 3);
                    target.nextStep = true;
                    setFollowPokemon(target, 1, 2);
                } // end else if
            }
            else if (target.moveMapAmount >= offsetAmount2)
            {
                drawPlayer(target, 0, 3);
            } // end else if
        } // end else if
    } // end else if
} // End of the function
function setDefaultPlayerFrame(target, tempDir)
{
    if (tempDir == undefined)
    {
        tempDir = dir;
    } // end if
    if (tempDir == "up" || tempDir == "u")
    {
        if (moveType == "surf")
        {
            drawPlayer(target, 12, 1);
        }
        else if (moveType == "")
        {
            drawPlayer(target, 0, 1);
        }
        else if (moveType == "bike")
        {
            drawPlayer(target, 6, 1);
        } // end else if
    }
    else if (tempDir == "down" || tempDir == "d")
    {
        if (moveType == "surf")
        {
            drawPlayer(target, 12, 0);
        }
        else if (moveType == "")
        {
            drawPlayer(target, 0, 0);
        }
        else if (moveType == "bike")
        {
            drawPlayer(target, 6, 0);
        } // end else if
    }
    else if (tempDir == "left" || tempDir == "l")
    {
        if (moveType == "surf")
        {
            drawPlayer(target, 12, 2);
        }
        else if (moveType == "")
        {
            drawPlayer(target, 0, 2);
        }
        else if (moveType == "bike")
        {
            drawPlayer(target, 6, 2);
        } // end else if
    }
    else if (tempDir == "right" || tempDir == "r")
    {
        if (moveType == "surf")
        {
            drawPlayer(target, 12, 3);
        }
        else if (moveType == "")
        {
            drawPlayer(target, 0, 3);
        }
        else if (moveType == "bike")
        {
            drawPlayer(target, 6, 3);
        } // end else if
    } // end else if
} // End of the function
function stopFishing(msg)
{
    fishing = false;
    clearInterval(_root.fishingI);
    clearInterval(_root["animationI_" + player.name]);
    delete mainGUI.hookingUI.onEnterFrame;
    if (mainGUI.hookingUI instanceof MovieClip)
    {
        removeMovieClip (mainGUI.hookingUI);
        canMove = true;
    } // end if
    setDefaultPlayerFrame(player);
    if (msg == undefined)
    {
        systemMessage("You stop fishing.");
    }
    else
    {
        systemMessage(msg);
    } // end else if
} // End of the function
function stopMining(msg, fromMoving)
{
    mining = false;
    clearInterval(_root.miningI);
    clearInterval(_root["animationI_" + player.name]);
    setDefaultPlayerFrame(player);
    if (msg != "silent")
    {
        if (msg == undefined)
        {
            systemMessage("You stop mining.");
        }
        else
        {
            systemMessage(msg);
        } // end if
    } // end else if
    if (fromMoving != true)
    {
        getTimestamp("sendStopMineAnimation");
    } // end if
} // End of the function
function addDraggableGUI(target, customWidth, customHeight)
{
    var targetWidth = target._width;
    var targetHeight = target._height;
    if (customWidth != undefined)
    {
        targetWidth = customWidth;
    } // end if
    if (customHeight != undefined)
    {
        targetHeight = customHeight;
    } // end if
    target.dragBg.onPress = function ()
    {
        target.swapDepths(mainGUI.getNextHighestDepth());
        target.startDrag(false, -newWidth / 2 + targetWidth / 2 - widthOffset, -newHeight / 2 + targetHeight / 2 - heightOffset, newWidth / 2 - targetWidth / 2 + widthOffset, newHeight / 2 - targetHeight / 2 + heightOffset);
    };
    target.dragBg.onRelease = target.dragBg.onReleaseOutside = function ()
    {
        target.stopDrag();
    };
} // End of the function
function handleMovement(resObj)
{
    if (resObj[4] == "b")
    {
        if (resObj[2] == "u")
        {
            resObj[2] = "bu";
        }
        else if (resObj[2] == "d")
        {
            resObj[2] = "bd";
        }
        else if (resObj[2] == "r")
        {
            resObj[2] = "br";
        }
        else if (resObj[2] == "l")
        {
            resObj[2] = "bl";
        } // end else if
    }
    else if (resObj[4] == "s" || resObj[4] == "z")
    {
        if (resObj[2] == "u")
        {
            resObj[2] = "su";
        }
        else if (resObj[2] == "d")
        {
            resObj[2] = "sd";
        }
        else if (resObj[2] == "r")
        {
            resObj[2] = "sr";
        }
        else if (resObj[2] == "l")
        {
            resObj[2] = "sl";
        } // end else if
    } // end else if
    if (resObj[4] == "b" || resObj[4] == "z")
    {
        _root["player_" + resObj[3]].speed = 16;
    }
    else
    {
        _root["player_" + resObj[3]].speed = 8;
    } // end else if
    if (_root["player_" + resObj[3]].moveQueue == undefined)
    {
        _root["player_" + resObj[3]].moveQueue = [resObj[2]];
        _root["player_" + resObj[3]].moveMapAmount = 0;
    }
    else
    {
        _root["player_" + resObj[3]].moveQueue.push(resObj[2]);
    } // end else if
    if (_root["player_" + resObj[3]].moving != true)
    {
        _root["player_" + resObj[3]].moving = true;
        activePlayers.push(_root["player_" + resObj[3]]);
    } // end if
    clearInterval(_root["animationI_" + resObj[3]]);
} // End of the function
function showCharacterCreation()
{
    canMove = false;
    guiUp = true;
    var _loc6 = new flash.display.BitmapData(Stage.width, Stage.height, false, 0);
    var _loc8 = flash.display.BitmapData.loadBitmap("source");
    var _loc10 = _root.createEmptyMovieClip("bgM", _root.getNextHighestDepth());
    _loc10.attachBitmap(_loc6, this.getNextHighestDepth());
    for (var _loc3 = -widthOffset; _loc3 < Stage.width; ++_loc3)
    {
        _loc6.copyPixels(_loc8, new flash.geom.Rectangle(0, 0, 1, Stage.height), new flash.geom.Point(_loc3, 0));
    } // end of for
    creation = _root.attachMovie("creation", "creation", _root.getNextHighestDepth());
    creation._x = newWidth / 2;
    creation._y = newHeight / 2;
    creation.gender.maleB.gotoAndStop("select");
    creation.basicB.gotoAndStop("select");
    creation.hair._visible = false;
    creation.hair.hairT.htmlText = "<b>Messy";
    creation.face._visible = false;
    creation.face.eyesT.htmlText = "<b>Normal";
    creation.face.extrasT.htmlText = "<b>None";
    creation.clothes._visible = false;
    creation.clothes.shirtT.htmlText = "<b>T-Shirt";
    creation.clothes.pantsT.htmlText = "<b>Long";
    creation.confirmation._visible = false;
    creation.player._width = creation.player._width * 2;
    creation.player._height = creation.player._height * 2;
    _root.body = "TanMale";
    _root.eyes = "Both1";
    _root.hair = "Male1";
    _root.pants = "Male1";
    _root.shirt = "Male1";
    _root.tail = "";
    _root.wings = "";
    _root.face = "";
    _root.hat = "";
    _root.hairColor = new Color(creation.player.player.hair);
    _root.eyeColor = new Color(creation.player.player.eyesColor);
    _root.shirtColor = new Color(creation.player.player.shirt);
    _root.pantsColor = new Color(creation.player.player.pants);
    _root.hairRa = 70;
    _root.hairGa = 70;
    _root.hairBa = 70;
    _root.eyeRa = 70;
    _root.eyeGa = 70;
    _root.eyeBa = 70;
    _root.shirtRa = 90;
    _root.shirtGa = 90;
    _root.shirtBa = 90;
    _root.pantsRa = 90;
    _root.pantsGa = 90;
    _root.pantsBa = 90;
    creation.player.player.hair.gotoAndStop(hair);
    creation.player.player.wings.gotoAndStop(wings);
    creation.player.player.wingsBehind.gotoAndStop(wings);
    creation.player.player.tail.gotoAndStop(tail);
    creation.player.player.tailBehind.gotoAndStop(tail);
    creation.player.player.eyes.gotoAndStop(eyes);
    creation.player.player.eyesColor.gotoAndStop(eyes);
    creation.player.player.shirt.gotoAndStop(shirt);
    creation.player.player.pants.gotoAndStop(pants);
    creation.player.player.body.gotoAndStop(body);
    creation.player.player.face.gotoAndStop(face);
    creation.player.player.hat.gotoAndStop(hat);
    creation.player.player.hatBehind.gotoAndStop(hat);
    hairColor.setTransform({ra: hairRa, ga: hairGa, ba: hairBa});
    eyeColor.setTransform({ra: eyeRa, ga: eyeGa, ba: eyeBa});
    shirtColor.setTransform({ra: shirtRa, ga: shirtGa, ba: shirtBa});
    pantsColor.setTransform({ra: pantsRa, ga: pantsGa, ba: pantsBa});
    creation.player.player.wings._visible = false;
    creation.player.player.wingsBehind._visible = false;
    creation.player.player.tail._visible = false;
    creation.player.player.tailBehind._visible = false;
    creation.player.player.face._visible = false;
    creation.player.player.hat._visible = false;
    creation.player.player.hatBehind._visible = false;
    creation.player.player.hairMask._visible = false;
    creation.player.player.hair.cacheAsBitmap = true;
    creation.player.player.wings.cacheAsBitmap = true;
    creation.player.player.wingsBehind.cacheAsBitmap = true;
    creation.player.player.tail.cacheAsBitmap = true;
    creation.player.player.tailBehind.cacheAsBitmap = true;
    creation.player.player.eyes.cacheAsBitmap = true;
    creation.player.player.eyesColor.cacheAsBitmap = true;
    creation.player.player.shirt.cacheAsBitmap = true;
    creation.player.player.pants.cacheAsBitmap = true;
    creation.player.player.body.cacheAsBitmap = true;
    creation.player.player.face.cacheAsBitmap = true;
    creation.player.player.hat.cacheAsBitmap = true;
    creation.player.player.hatBehind.cacheAsBitmap = true;
    creation.player.player.hairMask.cacheAsBitmap = true;
    creation.player.player.setMask(creation.player.m);
    setPlayerFrame(creation.player.player, 0, 0);
    creation.swapDepths(_root.getNextHighestDepth());
    creation.cwB.onRelease = function ()
    {
        this.gotoAndStop("hover");
        if (creation.player.player.frameX == 0 && creation.player.player.frameY == 0)
        {
            setPlayerFrame(creation.player.player, 0, 3);
        }
        else if (creation.player.player.frameX == 0 && creation.player.player.frameY == 3)
        {
            setPlayerFrame(creation.player.player, 0, 1);
        }
        else if (creation.player.player.frameX == 0 && creation.player.player.frameY == 1)
        {
            setPlayerFrame(creation.player.player, 0, 2);
        }
        else if (creation.player.player.frameX == 0 && creation.player.player.frameY == 2)
        {
            setPlayerFrame(creation.player.player, 0, 0);
        } // end else if
    };
    addButtonEvents(creation.cwB);
    creation.ccwB.onRelease = function ()
    {
        this.gotoAndStop("hover");
        if (creation.player.player.frameX == 0 && creation.player.player.frameY == 0)
        {
            setPlayerFrame(creation.player.player, 0, 2);
        }
        else if (creation.player.player.frameX == 0 && creation.player.player.frameY == 2)
        {
            setPlayerFrame(creation.player.player, 0, 1);
        }
        else if (creation.player.player.frameX == 0 && creation.player.player.frameY == 1)
        {
            setPlayerFrame(creation.player.player, 0, 3);
        }
        else if (creation.player.player.frameX == 0 && creation.player.player.frameY == 3)
        {
            setPlayerFrame(creation.player.player, 0, 0);
        } // end else if
    };
    addButtonEvents(creation.ccwB);
    creation.basicB.onRelease = function ()
    {
        if (this._currentframe != 4)
        {
            creation.gender._visible = true;
            creation.skinTone._visible = true;
            creation.hair._visible = false;
            creation.face._visible = false;
            creation.clothes._visible = false;
            this.gotoAndStop("select");
            creation.hairB.gotoAndStop(1);
            creation.faceB.gotoAndStop(1);
            creation.clothesB.gotoAndStop(1);
        } // end if
    };
    addButtonEvents(creation.basicB);
    creation.hairB.onRelease = function ()
    {
        if (this._currentframe != 4)
        {
            creation.gender._visible = false;
            creation.skinTone._visible = false;
            creation.hair._visible = true;
            creation.face._visible = false;
            creation.clothes._visible = false;
            this.gotoAndStop("select");
            creation.basicB.gotoAndStop(1);
            creation.faceB.gotoAndStop(1);
            creation.clothesB.gotoAndStop(1);
        } // end if
    };
    addButtonEvents(creation.hairB);
    creation.faceB.onRelease = function ()
    {
        if (this._currentframe != 4)
        {
            creation.gender._visible = false;
            creation.skinTone._visible = false;
            creation.hair._visible = false;
            creation.face._visible = true;
            creation.clothes._visible = false;
            this.gotoAndStop("select");
            creation.basicB.gotoAndStop(1);
            creation.hairB.gotoAndStop(1);
            creation.clothesB.gotoAndStop(1);
        } // end if
    };
    addButtonEvents(creation.faceB);
    creation.clothesB.onRelease = function ()
    {
        if (this._currentframe != 4)
        {
            creation.gender._visible = false;
            creation.skinTone._visible = false;
            creation.hair._visible = false;
            creation.face._visible = false;
            creation.clothes._visible = true;
            this.gotoAndStop("select");
            creation.basicB.gotoAndStop(1);
            creation.hairB.gotoAndStop(1);
            creation.faceB.gotoAndStop(1);
        } // end if
    };
    addButtonEvents(creation.clothesB);
    creation.gender.maleB.onRelease = function ()
    {
        if (this._currentframe != 4)
        {
            this.gotoAndStop(4);
            creation.gender.femaleB.gotoAndStop(1);
            swapGenders();
        } // end if
    };
    addButtonEvents(creation.gender.maleB);
    creation.gender.femaleB.onRelease = function ()
    {
        if (this._currentframe != 4)
        {
            this.gotoAndStop(4);
            creation.gender.maleB.gotoAndStop(1);
            swapGenders();
        } // end if
    };
    addButtonEvents(creation.gender.mB);
    creation.skinTone.randomB.onRelease = function ()
    {
        this.gotoAndStop("hover");
        var _loc2 = rand(1, 6);
        if (_loc2 == 1)
        {
            if (body.indexOf("Black") == -1)
            {
                var _loc3 = "Black";
            }
            else
            {
                _loc3 = "Brown";
            } // end else if
        }
        else if (_loc2 == 2)
        {
            if (body.indexOf("Brown") == -1)
            {
                _loc3 = "Brown";
            }
            else
            {
                _loc3 = "Black";
            } // end else if
        }
        else if (_loc2 == 3)
        {
            if (body.indexOf("White") == -1)
            {
                _loc3 = "White";
            }
            else
            {
                _loc3 = "White";
            } // end else if
        }
        else if (_loc2 == 4)
        {
            if (body.indexOf("Pale") == -1)
            {
                _loc3 = "Pale";
            }
            else
            {
                _loc3 = "Pale";
            } // end else if
        }
        else if (_loc2 == 5)
        {
            if (body.indexOf("Tan") == -1)
            {
                _loc3 = "Tan";
            }
            else
            {
                _loc3 = "Tan";
            } // end else if
        }
        else if (_loc2 == 6)
        {
            if (body.indexOf("Yellow") == -1)
            {
                _loc3 = "Yellow";
            }
            else
            {
                _loc3 = "Yellow";
            } // end else if
        } // end else if
        if (body.indexOf("Female") != -1)
        {
            body = _loc3 + "Female";
        }
        else
        {
            body = _loc3 + "Male";
        } // end else if
        creation.player.player.body.gotoAndStop(body);
    };
    addButtonEvents(creation.skinTone.randomB);
    creation.skinTone.b1.onRelease = function ()
    {
        if (body.indexOf("Female") != -1)
        {
            body = "WhiteFemale";
        }
        else
        {
            body = "WhiteMale";
        } // end else if
        creation.player.player.body.gotoAndStop(body);
    };
    creation.skinTone.b2.onRelease = function ()
    {
        if (body.indexOf("Female") != -1)
        {
            body = "PaleFemale";
        }
        else
        {
            body = "PaleMale";
        } // end else if
        creation.player.player.body.gotoAndStop(body);
    };
    creation.skinTone.b3.onRelease = function ()
    {
        if (body.indexOf("Female") != -1)
        {
            body = "YellowFemale";
        }
        else
        {
            body = "YellowMale";
        } // end else if
        creation.player.player.body.gotoAndStop(body);
    };
    creation.skinTone.b4.onRelease = function ()
    {
        if (body.indexOf("Female") != -1)
        {
            body = "TanFemale";
        }
        else
        {
            body = "TanMale";
        } // end else if
        creation.player.player.body.gotoAndStop(body);
    };
    creation.skinTone.b5.onRelease = function ()
    {
        if (body.indexOf("Female") != -1)
        {
            body = "BlackFemale";
        }
        else
        {
            body = "BlackMale";
        } // end else if
        creation.player.player.body.gotoAndStop(body);
    };
    creation.skinTone.b6.onRelease = function ()
    {
        if (body.indexOf("Female") != -1)
        {
            body = "BrownFemale";
        }
        else
        {
            body = "BrownMale";
        } // end else if
        creation.player.player.body.gotoAndStop(body);
    };
    creation.finishB.onRelease = function ()
    {
        if (creation.confirmation._visible == false)
        {
            creation.confirmation._visible = true;
            darkScreen = creation.attachMovie("darkScreen", "darkScreen", creation.getNextHighestDepth());
            darkScreen._width = Stage.width;
            darkScreen._height = Stage.height;
            darkScreen._alpha = 70;
            creation.confirmation.swapDepths(creation.getNextHighestDepth());
            creation.player.swapDepths(creation.getNextHighestDepth());
        } // end if
    };
    addButtonEvents(creation.finishB);
    creation.confirmation.exitB.onRelease = function ()
    {
        creation.confirmation._visible = false;
        removeMovieClip (creation.darkScreen);
    };
    assignMouseEvents(creation.confirmation.exitB);
    creation.confirmation.noB.onRelease = function ()
    {
        creation.confirmation._visible = false;
        removeMovieClip (creation.darkScreen);
    };
    assignMouseEvents(creation.confirmation.noB);
    creation.confirmation.yesB.onRelease = function ()
    {
        if (isBusy == false)
        {
            getTimestamp("createCharacter");
            startCharacterCreateAnimation();
            creation.confirmation._visible = false;
        } // end if
    };
    assignMouseEvents(creation.confirmation.yesB);
    creation.hair.randomB.onRelease = function ()
    {
        this.gotoAndStop("hover");
        hairRa = rand(35, 135);
        hairGa = rand(35, 135);
        hairBa = rand(35, 135);
        hairColor.setTransform({ra: hairRa, ga: hairGa, ba: hairBa});
    };
    addButtonEvents(creation.hair.randomB);
    creation.hair.blackB.onRelease = function ()
    {
        hairRa = 35;
        hairGa = 35;
        hairBa = 35;
        hairColor.setTransform({ra: hairRa, ga: hairGa, ba: hairBa});
    };
    creation.hair.greyB.onRelease = function ()
    {
        hairRa = 105;
        hairGa = 105;
        hairBa = 105;
        hairColor.setTransform({ra: hairRa, ga: hairGa, ba: hairBa});
    };
    creation.hair.whiteB.onRelease = function ()
    {
        hairColor.setTransform({ra: hairRa, ga: hairGa, ba: hairBa});
    };
    creation.hair.yellowB.onRelease = function ()
    {
        hairGa = 115;
        hairBa = 50;
        hairColor.setTransform({ra: hairRa, ga: hairGa, ba: hairBa});
    };
    creation.hair.amberB.onRelease = function ()
    {
        hairGa = 104;
        hairBa = 50;
        hairColor.setTransform({ra: hairRa, ga: hairGa, ba: hairBa});
    };
    creation.hair.gingerB.onRelease = function ()
    {
        hairGa = 61;
        hairBa = 10;
        hairColor.setTransform({ra: hairRa, ga: hairGa, ba: hairBa});
    };
    creation.hair.brownB.onRelease = function ()
    {
        hairRa = 80;
        hairGa = 60;
        hairBa = 40;
        hairColor.setTransform({ra: hairRa, ga: hairGa, ba: hairBa});
    };
    creation.hair.redB.onRelease = function ()
    {
        hairGa = 0;
        hairBa = 0;
        hairColor.setTransform({ra: hairRa, ga: hairGa, ba: hairBa});
    };
    creation.hair.blueB.onRelease = function ()
    {
        hairRa = 15;
        hairGa = 55;
        hairBa = 95;
        hairColor.setTransform({ra: hairRa, ga: hairGa, ba: hairBa});
    };
    creation.hair.greenB.onRelease = function ()
    {
        hairRa = 24;
        hairGa = 105;
        hairBa = 5;
        hairColor.setTransform({ra: hairRa, ga: hairGa, ba: hairBa});
    };
    creation.hair.slider.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, creation.hair.sliderLine._x, this._y, creation.hair.sliderLine._x + creation.hair.sliderLine._width, this._y);
        this.onEnterFrame = function ()
        {
            hairRa = Math.round((this._x - creation.hair.sliderLine._x) / creation.hair.sliderLine._width * 100) + 35;
            if (hairRa > 135)
            {
            } // end if
            hairColor.setTransform({ra: hairRa, ga: hairGa, ba: hairBa});
        };
    };
    creation.hair.slider.onRelease = function ()
    {
        this.gotoAndStop("hover");
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.hair.slider.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.hair.slider.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    creation.hair.slider.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    creation.hair.slider2.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, creation.hair.sliderLine2._x, this._y, creation.hair.sliderLine2._x + creation.hair.sliderLine2._width, this._y);
        this.onEnterFrame = function ()
        {
            hairGa = Math.round((this._x - creation.hair.sliderLine2._x) / creation.hair.sliderLine2._width * 100) + 35;
            if (hairGa > 135)
            {
            } // end if
            hairColor.setTransform({ra: hairRa, ga: hairGa, ba: hairBa});
        };
    };
    creation.hair.slider2.onRelease = function ()
    {
        this.gotoAndStop("hover");
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.hair.slider2.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.hair.slider2.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    creation.hair.slider2.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    creation.hair.slider3.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, creation.hair.sliderLine3._x, this._y, creation.hair.sliderLine3._x + creation.hair.sliderLine3._width, this._y);
        this.onEnterFrame = function ()
        {
            hairBa = Math.round((this._x - creation.hair.sliderLine3._x) / creation.hair.sliderLine3._width * 100) + 35;
            if (hairBa > 135)
            {
            } // end if
            hairColor.setTransform({ra: hairRa, ga: hairGa, ba: hairBa});
        };
    };
    creation.hair.slider3.onRelease = function ()
    {
        this.gotoAndStop("hover");
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.hair.slider3.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.hair.slider3.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    creation.hair.slider3.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    creation.hair.randomB2.onRelease = function ()
    {
        this.gotoAndStop("hover");
        var _loc3 = [];
        if (hair.indexOf("Female") != -1)
        {
            _loc3.push("Female1", "Female2", "Female3", "Female4", "Female5", "Female6", "Female7", "Female8", "Female9", "Female10", "Female11", "Female12", "Female13", "Female14", "Female15", "Female16", "Female17", "Female18", "Female20", "Female21", "Female22", "Female23", "Female24", "Female25", "Female26", "Female27", "Bald");
        }
        else if (hair.indexOf("Male") != -1)
        {
            _loc3.push("Male1", "Male2", "Male3", "Male4", "Male5", "Male6", "Male7", "Male8", "Male9", "Male10", "Male11", "Male12", "Male13", "Male14", "Male15", "Male16", "Male17", "Male18", "Bald");
        }
        else if (body.indexOf("Female") != -1)
        {
            _loc3.push("Female1", "Female2", "Female3", "Female4", "Female5", "Female6", "Female7", "Female8", "Female9", "Female10", "Female11", "Female12", "Female13", "Female14", "Female15", "Female16", "Female17", "Female18", "Female20", "Female21", "Female22", "Female23", "Female24", "Female25", "Female26", "Female27");
        }
        else
        {
            _loc3.push("Male1", "Male2", "Male3", "Male4", "Male5", "Male6", "Male7", "Male8", "Male9", "Male10", "Male11", "Male12", "Male13", "Male14", "Male15", "Male16", "Male17", "Male18");
        } // end else if
        for (var _loc2 = 0; _loc2 < _loc3.length; ++_loc2)
        {
            if (_loc3[_loc2] == hair)
            {
                _loc3.splice(_loc2, 1);
                break;
            } // end if
        } // end of for
        hair = _loc3[rand(0, _loc3.length - 1)];
        creation.player.player.hair.gotoAndStop(hair);
        if (hair == "Female1")
        {
            creation.hair.hairT.htmlText = "<b>Bouncy";
        }
        else if (hair == "Female2")
        {
            creation.hair.hairT.htmlText = "<b>Bangs";
        }
        else if (hair == "Female3")
        {
            creation.hair.hairT.htmlText = "<b>Modern";
        }
        else if (hair == "Female4")
        {
            creation.hair.hairT.htmlText = "<b>Dyed";
        }
        else if (hair == "Female5")
        {
            creation.hair.hairT.htmlText = "<b>Twin Tails";
        }
        else if (hair == "Female6")
        {
            creation.hair.hairT.htmlText = "<b>Asymmetric cut";
        }
        else if (hair == "Female7")
        {
            creation.hair.hairT.htmlText = "<b>May";
        }
        else if (hair == "Female8")
        {
            creation.hair.hairT.htmlText = "<b>Ponytail";
        }
        else if (hair == "Female9")
        {
            creation.hair.hairT.htmlText = "<b>Rem";
        }
        else if (hair == "Female10")
        {
            creation.hair.hairT.htmlText = "<b>Ram";
        }
        else if (hair == "Female11")
        {
            creation.hair.hairT.htmlText = "<b>Lorelei";
        }
        else if (hair == "Female12")
        {
            creation.hair.hairT.htmlText = "<b>Lass";
        }
        else if (hair == "Female13")
        {
            creation.hair.hairT.htmlText = "<b>Swimmer";
        }
        else if (hair == "Female14")
        {
            creation.hair.hairT.htmlText = "<b>Misty";
        }
        else if (hair == "Female15")
        {
            creation.hair.hairT.htmlText = "<b>Erika";
        }
        else if (hair == "Female16")
        {
            creation.hair.hairT.htmlText = "<b>Crush Girl";
        }
        else if (hair == "Female17")
        {
            creation.hair.hairT.htmlText = "<b>Beauty";
        }
        else if (hair == "Female18")
        {
            creation.hair.hairT.htmlText = "<b>Agatha";
        }
        else if (hair == "Female20")
        {
            creation.hair.hairT.htmlText = "<b>Ponytail 2";
        }
        else if (hair == "Female21")
        {
            creation.hair.hairT.htmlText = "<b>Glacia";
        }
        else if (hair == "Female22")
        {
            creation.hair.hairT.htmlText = "<b>Messy 2";
        }
        else if (hair == "Female23")
        {
            creation.hair.hairT.htmlText = "<b>Liza";
        }
        else if (hair == "Female24")
        {
            creation.hair.hairT.htmlText = "<b>Roxanne";
        }
        else if (hair == "Female25")
        {
            creation.hair.hairT.htmlText = "<b>Wionna";
        }
        else if (hair == "Female26")
        {
            creation.hair.hairT.htmlText = "<b>Medium Straight Bangs";
        }
        else if (hair == "Male1")
        {
            creation.hair.hairT.htmlText = "<b>Messy";
        }
        else if (hair == "Male2")
        {
            creation.hair.hairT.htmlText = "<b>Buzzcut";
        }
        else if (hair == "Male3")
        {
            creation.hair.hairT.htmlText = "<b>Neat";
        }
        else if (hair == "Male4")
        {
            creation.hair.hairT.htmlText = "<b>Medium";
        }
        else if (hair == "Male5")
        {
            creation.hair.hairT.htmlText = "<b>Spiky";
        }
        else if (hair == "Male6")
        {
            creation.hair.hairT.htmlText = "<b>James";
        }
        else if (hair == "Male7")
        {
            creation.hair.hairT.htmlText = "<b>Oak";
        }
        else if (hair == "Male8")
        {
            creation.hair.hairT.htmlText = "<b>Messy 2";
        }
        else if (hair == "Male9")
        {
            creation.hair.hairT.htmlText = "<b>Super Nerd";
        }
        else if (hair == "Male10")
        {
            creation.hair.hairT.htmlText = "<b>Scientist";
        }
        else if (hair == "Male11")
        {
            creation.hair.hairT.htmlText = "<b>Lance";
        }
        else if (hair == "Male12")
        {
            creation.hair.hairT.htmlText = "<b>Bruno";
        }
        else if (hair == "Male13")
        {
            creation.hair.hairT.htmlText = "<b>Brock";
        }
        else if (hair == "Male14")
        {
            creation.hair.hairT.htmlText = "<b>Blue";
        }
        else if (hair == "Male15")
        {
            creation.hair.hairT.htmlText = "<b>Bill";
        }
        else if (hair == "Male16")
        {
            creation.hair.hairT.htmlText = "<b>Biker";
        }
        else if (hair == "Male17")
        {
            creation.hair.hairT.htmlText = "<b>Brawly";
        }
        else if (hair == "Male18")
        {
            creation.hair.hairT.htmlText = "<b>Mr Fugi";
        }
        else
        {
            creation.hair.hairT.htmlText = "<b>Bald";
        } // end else if
    };
    addButtonEvents(creation.hair.randomB2);
    creation.hair.rightB.onRelease = function ()
    {
        this.gotoAndStop("hover");
        if (hair == "Female1")
        {
            hair = "Female2";
            creation.hair.hairT.htmlText = "<b>Bangs";
        }
        else if (hair == "Female2")
        {
            hair = "Female3";
            creation.hair.hairT.htmlText = "<b>Modern";
        }
        else if (hair == "Female3")
        {
            hair = "Female4";
            creation.hair.hairT.htmlText = "<b>Dyed";
        }
        else if (hair == "Female4")
        {
            hair = "Female5";
            creation.hair.hairT.htmlText = "<b>Twin Tails";
        }
        else if (hair == "Female5")
        {
            hair = "Female6";
            creation.hair.hairT.htmlText = "<b>Asymmetric cut";
        }
        else if (hair == "Female6")
        {
            hair = "Female7";
            creation.hair.hairT.htmlText = "<b>May";
        }
        else if (hair == "Female7")
        {
            hair = "Female8";
            creation.hair.hairT.htmlText = "<b>Ponytail";
        }
        else if (hair == "Female8")
        {
            hair = "Female9";
            creation.hair.hairT.htmlText = "<b>Rem";
        }
        else if (hair == "Female9")
        {
            hair = "Female10";
            creation.hair.hairT.htmlText = "<b>Ram";
        }
        else if (hair == "Female10")
        {
            hair = "Female11";
            creation.hair.hairT.htmlText = "<b>Lorelei";
        }
        else if (hair == "Female11")
        {
            hair = "Female12";
            creation.hair.hairT.htmlText = "<b>Lass";
        }
        else if (hair == "Female12")
        {
            hair = "Female13";
            creation.hair.hairT.htmlText = "<b>Swimmer";
        }
        else if (hair == "Female13")
        {
            hair = "Female14";
            creation.hair.hairT.htmlText = "<b>Misty";
        }
        else if (hair == "Female14")
        {
            hair = "Female15";
            creation.hair.hairT.htmlText = "<b>Erika";
        }
        else if (hair == "Female15")
        {
            hair = "Female16";
            creation.hair.hairT.htmlText = "<b>Crush Girl";
        }
        else if (hair == "Female16")
        {
            hair = "Female17";
            creation.hair.hairT.htmlText = "<b>Beauty";
        }
        else if (hair == "Female17")
        {
            hair = "Female18";
            creation.hair.hairT.htmlText = "<b>Agatha";
        }
        else if (hair == "Female18")
        {
            hair = "Female20";
            creation.hair.hairT.htmlText = "<b>Ponytail 2";
        }
        else if (hair == "Female20")
        {
            hair = "Female21";
            creation.hair.hairT.htmlText = "<b>Glacia";
        }
        else if (hair == "Female21")
        {
            hair = "Female22";
            creation.hair.hairT.htmlText = "<b>Messy 2";
        }
        else if (hair == "Female22")
        {
            hair = "Female23";
            creation.hair.hairT.htmlText = "<b>Liza";
        }
        else if (hair == "Female23")
        {
            hair = "Female24";
            creation.hair.hairT.htmlText = "<b>Roxanne";
        }
        else if (hair == "Female24")
        {
            hair = "Female25";
            creation.hair.hairT.htmlText = "<b>Wionna";
        }
        else if (hair == "Female25")
        {
            hair = "Female26";
            creation.hair.hairT.htmlText = "<b>Medium Straight Bangs";
        }
        else if (hair == "Female26")
        {
            hair = "Bald";
            creation.hair.hairT.htmlText = "<b>Bald";
        }
        else if (hair == "Male1")
        {
            hair = "Male2";
            creation.hair.hairT.htmlText = "<b>Buzzcut";
        }
        else if (hair == "Male2")
        {
            hair = "Male3";
            creation.hair.hairT.htmlText = "<b>Neat";
        }
        else if (hair == "Male3")
        {
            hair = "Male4";
            creation.hair.hairT.htmlText = "<b>Medium";
        }
        else if (hair == "Male4")
        {
            hair = "Male5";
            creation.hair.hairT.htmlText = "<b>Spiky";
        }
        else if (hair == "Male5")
        {
            hair = "Male6";
            creation.hair.hairT.htmlText = "<b>James";
        }
        else if (hair == "Male6")
        {
            hair = "Male7";
            creation.hair.hairT.htmlText = "<b>Oak";
        }
        else if (hair == "Male7")
        {
            hair = "Male8";
            creation.hair.hairT.htmlText = "<b>Messy 2";
        }
        else if (hair == "Male8")
        {
            hair = "Male9";
            creation.hair.hairT.htmlText = "<b>Super Nerd";
        }
        else if (hair == "Male9")
        {
            hair = "Male10";
            creation.hair.hairT.htmlText = "<b>Scientist";
        }
        else if (hair == "Male10")
        {
            hair = "Male11";
            creation.hair.hairT.htmlText = "<b>Lance";
        }
        else if (hair == "Male11")
        {
            hair = "Male12";
            creation.hair.hairT.htmlText = "<b>Bruno";
        }
        else if (hair == "Male12")
        {
            hair = "Male13";
            creation.hair.hairT.htmlText = "<b>Brock";
        }
        else if (hair == "Male13")
        {
            hair = "Male14";
            creation.hair.hairT.htmlText = "<b>Blue";
        }
        else if (hair == "Male14")
        {
            hair = "Male15";
            creation.hair.hairT.htmlText = "<b>Bill";
        }
        else if (hair == "Male15")
        {
            hair = "Male16";
            creation.hair.hairT.htmlText = "<b>Biker";
        }
        else if (hair == "Male16")
        {
            hair = "Male17";
            creation.hair.hairT.htmlText = "<b>Brawly";
        }
        else if (hair == "Male17")
        {
            hair = "Male18";
            creation.hair.hairT.htmlText = "<b>Mr Fugi";
        }
        else if (hair == "Male18")
        {
            hair = "Bald";
            creation.hair.hairT.htmlText = "<b>Bald";
        }
        else if (body.indexOf("Female") != -1)
        {
            hair = "Female1";
            creation.hair.hairT.htmlText = "<b>Bouncy";
        }
        else
        {
            hair = "Male1";
            creation.hair.hairT.htmlText = "<b>Messy";
        } // end else if
        creation.player.player.hair.gotoAndStop(hair);
    };
    addButtonEvents(creation.hair.rightB);
    creation.hair.leftB.onRelease = function ()
    {
        this.gotoAndStop("hover");
        if (hair == "Female1")
        {
            hair = "Bald";
            creation.hair.hairT.htmlText = "<b>Bald";
        }
        else if (hair == "Female2")
        {
            hair = "Female1";
            creation.hair.hairT.htmlText = "<b>Bouncy";
        }
        else if (hair == "Female3")
        {
            hair = "Female2";
            creation.hair.hairT.htmlText = "<b>Bangs";
        }
        else if (hair == "Female4")
        {
            hair = "Female3";
            creation.hair.hairT.htmlText = "<b>Modern";
        }
        else if (hair == "Female5")
        {
            hair = "Female4";
            creation.hair.hairT.htmlText = "<b>Dyed";
        }
        else if (hair == "Female6")
        {
            hair = "Female5";
            creation.hair.hairT.htmlText = "<b>Twin Tails";
        }
        else if (hair == "Female7")
        {
            hair = "Female6";
            creation.hair.hairT.htmlText = "<b>Asymmetric cut";
        }
        else if (hair == "Female8")
        {
            hair = "Female7";
            creation.hair.hairT.htmlText = "<b>May";
        }
        else if (hair == "Female9")
        {
            hair = "Female8";
            creation.hair.hairT.htmlText = "<b>Ponytail";
        }
        else if (hair == "Female10")
        {
            hair = "Female9";
            creation.hair.hairT.htmlText = "<b>Rem";
        }
        else if (hair == "Female11")
        {
            hair = "Female10";
            creation.hair.hairT.htmlText = "<b>Ram";
        }
        else if (hair == "Female12")
        {
            hair = "Female11";
            creation.hair.hairT.htmlText = "<b>Lorelei";
        }
        else if (hair == "Female13")
        {
            hair = "Female12";
            creation.hair.hairT.htmlText = "<b>Lass";
        }
        else if (hair == "Female14")
        {
            hair = "Female13";
            creation.hair.hairT.htmlText = "<b>Swimmer";
        }
        else if (hair == "Female15")
        {
            hair = "Female14";
            creation.hair.hairT.htmlText = "<b>Misty";
        }
        else if (hair == "Female16")
        {
            hair = "Female15";
            creation.hair.hairT.htmlText = "<b>Erika";
        }
        else if (hair == "Female17")
        {
            hair = "Female16";
            creation.hair.hairT.htmlText = "<b>Crush Girl";
        }
        else if (hair == "Female18")
        {
            hair = "Female17";
            creation.hair.hairT.htmlText = "<b>Beauty";
        }
        else if (hair == "Female20")
        {
            hair = "Female18";
            creation.hair.hairT.htmlText = "<b>Agatha";
        }
        else if (hair == "Female21")
        {
            hair = "Female20";
            creation.hair.hairT.htmlText = "<b>Ponytail 2";
        }
        else if (hair == "Female22")
        {
            hair = "Female21";
            creation.hair.hairT.htmlText = "<b>Glacia";
        }
        else if (hair == "Female23")
        {
            hair = "Female22";
            creation.hair.hairT.htmlText = "<b>Messy 2";
        }
        else if (hair == "Female24")
        {
            hair = "Female23";
            creation.hair.hairT.htmlText = "<b>Liza";
        }
        else if (hair == "Female25")
        {
            hair = "Female24";
            creation.hair.hairT.htmlText = "<b>Roxanne";
        }
        else if (hair == "Female26")
        {
            hair = "Female25";
            creation.hair.hairT.htmlText = "<b>Wionna";
        }
        else if (hair == "Male1")
        {
            hair = "Bald";
            creation.hair.hairT.htmlText = "<b>Bald";
        }
        else if (hair == "Male2")
        {
            hair = "Male1";
            creation.hair.hairT.htmlText = "<b>Messy";
        }
        else if (hair == "Male3")
        {
            hair = "Male2";
            creation.hair.hairT.htmlText = "<b>Buzzcut";
        }
        else if (hair == "Male4")
        {
            hair = "Male3";
            creation.hair.hairT.htmlText = "<b>Neat";
        }
        else if (hair == "Male5")
        {
            hair = "Male4";
            creation.hair.hairT.htmlText = "<b>Medium";
        }
        else if (hair == "Male6")
        {
            hair = "Male5";
            creation.hair.hairT.htmlText = "<b>Spiky";
        }
        else if (hair == "Male7")
        {
            hair = "Male6";
            creation.hair.hairT.htmlText = "<b>James";
        }
        else if (hair == "Male8")
        {
            hair = "Male7";
            creation.hair.hairT.htmlText = "<b>Oak";
        }
        else if (hair == "Male9")
        {
            hair = "Male8";
            creation.hair.hairT.htmlText = "<b>Messy 2";
        }
        else if (hair == "Male10")
        {
            hair = "Male9";
            creation.hair.hairT.htmlText = "<b>Super Nerd";
        }
        else if (hair == "Male11")
        {
            hair = "Male10";
            creation.hair.hairT.htmlText = "<b>Scientist";
        }
        else if (hair == "Male12")
        {
            hair = "Male11";
            creation.hair.hairT.htmlText = "<b>Lance";
        }
        else if (hair == "Male13")
        {
            hair = "Male12";
            creation.hair.hairT.htmlText = "<b>Bruno";
        }
        else if (hair == "Male14")
        {
            hair = "Male13";
            creation.hair.hairT.htmlText = "<b>Brock";
        }
        else if (hair == "Male15")
        {
            hair = "Male14";
            creation.hair.hairT.htmlText = "<b>Blue";
        }
        else if (hair == "Male16")
        {
            hair = "Male15";
            creation.hair.hairT.htmlText = "<b>Bill";
        }
        else if (hair == "Male17")
        {
            hair = "Male16";
            creation.hair.hairT.htmlText = "<b>Biker";
        }
        else if (hair == "Male18")
        {
            hair = "Male17";
            creation.hair.hairT.htmlText = "<b>Brawly";
        }
        else if (body.indexOf("Female") != -1)
        {
            hair = "Female26";
            creation.hair.hairT.htmlText = "<b>Medium Straight Bangs";
        }
        else
        {
            hair = "Male18";
            creation.hair.hairT.htmlText = "<b>Mr Fugi";
        } // end else if
        creation.player.player.hair.gotoAndStop(hair);
    };
    addButtonEvents(creation.hair.leftB);
    creation.face.randomB.onRelease = function ()
    {
        this.gotoAndStop("hover");
        eyeRa = rand(35, 135);
        eyeGa = rand(35, 135);
        eyeBa = rand(35, 135);
        eyeColor.setTransform({ra: eyeRa, ga: eyeGa, ba: eyeBa});
    };
    addButtonEvents(creation.face.randomB);
    creation.face.blackB.onRelease = function ()
    {
        eyeRa = 35;
        eyeGa = 35;
        eyeBa = 35;
        eyeColor.setTransform({ra: eyeRa, ga: eyeGa, ba: eyeBa});
    };
    creation.face.greyB.onRelease = function ()
    {
        eyeRa = 105;
        eyeGa = 105;
        eyeBa = 105;
        eyeColor.setTransform({ra: eyeRa, ga: eyeGa, ba: eyeBa});
    };
    creation.face.brownB.onRelease = function ()
    {
        eyeRa = 80;
        eyeGa = 60;
        eyeBa = 40;
        eyeColor.setTransform({ra: eyeRa, ga: eyeGa, ba: eyeBa});
    };
    creation.face.amberB.onRelease = function ()
    {
        eyeGa = 104;
        eyeBa = 50;
        eyeColor.setTransform({ra: eyeRa, ga: eyeGa, ba: eyeBa});
    };
    creation.face.greenB.onRelease = function ()
    {
        eyeRa = 24;
        eyeGa = 105;
        eyeBa = 5;
        eyeColor.setTransform({ra: eyeRa, ga: eyeGa, ba: eyeBa});
    };
    creation.face.tealB.onRelease = function ()
    {
        eyeRa = 5;
        eyeGa = 105;
        eyeBa = 80;
        eyeColor.setTransform({ra: eyeRa, ga: eyeGa, ba: eyeBa});
    };
    creation.face.blueB.onRelease = function ()
    {
        eyeRa = 15;
        eyeGa = 55;
        eyeBa = 95;
        eyeColor.setTransform({ra: eyeRa, ga: eyeGa, ba: eyeBa});
    };
    creation.face.redB.onRelease = function ()
    {
        eyeGa = 40;
        eyeBa = 40;
        eyeColor.setTransform({ra: eyeRa, ga: eyeGa, ba: eyeBa});
    };
    creation.face.pinkB.onRelease = function ()
    {
        eyeRa = 110;
        eyeGa = 20;
        eyeBa = 75;
        eyeColor.setTransform({ra: eyeRa, ga: eyeGa, ba: eyeBa});
    };
    creation.face.purpleB.onRelease = function ()
    {
        eyeRa = 70;
        eyeGa = 5;
        eyeBa = 105;
        eyeColor.setTransform({ra: eyeRa, ga: eyeGa, ba: eyeBa});
    };
    creation.face.slider.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, creation.face.sliderLine._x, this._y, creation.face.sliderLine._x + creation.face.sliderLine._width, this._y);
        this.onEnterFrame = function ()
        {
            eyeRa = Math.round((this._x - creation.face.sliderLine._x) / creation.face.sliderLine._width * 100) + 35;
            if (eyeRa > 135)
            {
            } // end if
            eyeColor.setTransform({ra: eyeRa, ga: eyeGa, ba: eyeBa});
        };
    };
    creation.face.slider.onRelease = function ()
    {
        this.gotoAndStop("hover");
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.face.slider.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.face.slider.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    creation.face.slider.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    creation.face.slider3.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, creation.face.sliderLine3._x, this._y, creation.face.sliderLine3._x + creation.face.sliderLine3._width, this._y);
        this.onEnterFrame = function ()
        {
            eyeBa = Math.round((this._x - creation.face.sliderLine3._x) / creation.face.sliderLine3._width * 100) + 35;
            if (eyeBa > 135)
            {
            } // end if
            eyeColor.setTransform({ra: eyeRa, ga: eyeGa, ba: eyeBa});
        };
    };
    creation.face.slider3.onRelease = function ()
    {
        this.gotoAndStop("hover");
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.face.slider3.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.face.slider3.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    creation.face.slider3.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    creation.face.slider2.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, creation.face.sliderLine2._x, this._y, creation.face.sliderLine2._x + creation.face.sliderLine2._width, this._y);
        this.onEnterFrame = function ()
        {
            eyeGa = Math.round((this._x - creation.face.sliderLine2._x) / creation.face.sliderLine2._width * 100) + 35;
            if (eyeGa > 135)
            {
            } // end if
            eyeColor.setTransform({ra: eyeRa, ga: eyeGa, ba: eyeBa});
        };
    };
    creation.face.slider2.onRelease = function ()
    {
        this.gotoAndStop("hover");
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.face.slider2.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.face.slider2.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    creation.face.slider2.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    creation.face.rightB.onRelease = function ()
    {
        this.gotoAndStop("hover");
        if (eyes == "Both1")
        {
            eyes = "Both2";
            creation.face.eyesT.htmlText = "<b>Small";
        }
        else if (eyes == "Both2")
        {
            eyes = "Both3";
            creation.face.eyesT.htmlText = "<b>Squinting";
        }
        else if (eyes == "Both3")
        {
            eyes = "Both4";
            creation.face.eyesT.htmlText = "<b>Closed";
        }
        else if (eyes == "Both4")
        {
            eyes = "Both5";
            creation.face.eyesT.htmlText = "<b>Angry";
        }
        else if (eyes == "Both5")
        {
            eyes = "Both6";
            creation.face.eyesT.htmlText = "<b>Annoyed";
        }
        else if (eyes == "Both6")
        {
            eyes = "Both7";
            creation.face.eyesT.htmlText = "<b>Eyebrows";
        }
        else if (eyes == "Both7")
        {
            if (body.indexOf("Female") != -1)
            {
                eyes = "Female1";
                creation.face.eyesT.htmlText = "<b>Mascara";
            }
            else
            {
                eyes = "Both1";
                creation.face.eyesT.htmlText = "<b>Normal";
            } // end else if
        }
        else if (eyes == "Female1")
        {
            eyes = "Female2";
            creation.face.eyesT.htmlText = "<b>Eyelashes";
        }
        else if (eyes == "Female2")
        {
            eyes = "Both1";
            creation.face.eyesT.htmlText = "<b>Normal";
        } // end else if
        creation.player.player.eyes.gotoAndStop(eyes);
        creation.player.player.eyesColor.gotoAndStop(eyes);
    };
    addButtonEvents(creation.face.rightB);
    creation.face.leftB.onRelease = function ()
    {
        this.gotoAndStop("hover");
        if (eyes == "Both1")
        {
            if (body.indexOf("Female") != -1)
            {
                eyes = "Female2";
                creation.face.eyesT.htmlText = "<b>Eyelashes";
            }
            else
            {
                eyes = "Both7";
                creation.face.eyesT.htmlText = "<b>Eyebrows";
            } // end else if
        }
        else if (eyes == "Both2")
        {
            eyes = "Both1";
            creation.face.eyesT.htmlText = "<b>Normal";
        }
        else if (eyes == "Both3")
        {
            eyes = "Both2";
            creation.face.eyesT.htmlText = "<b>Small";
        }
        else if (eyes == "Both4")
        {
            eyes = "Both3";
            creation.face.eyesT.htmlText = "<b>Squinting";
        }
        else if (eyes == "Both5")
        {
            eyes = "Both4";
            creation.face.eyesT.htmlText = "<b>Closed";
        }
        else if (eyes == "Both6")
        {
            eyes = "Both5";
            creation.face.eyesT.htmlText = "<b>Angry";
        }
        else if (eyes == "Both7")
        {
            eyes = "Both6";
            creation.face.eyesT.htmlText = "<b>Annoyed";
        }
        else if (eyes == "Female1")
        {
            eyes = "Both7";
            creation.face.eyesT.htmlText = "<b>Eyebrows";
        }
        else if (eyes == "Female2")
        {
            eyes = "Female1";
            creation.face.eyesT.htmlText = "<b>Mascara";
        } // end else if
        creation.player.player.eyes.gotoAndStop(eyes);
        creation.player.player.eyesColor.gotoAndStop(eyes);
    };
    addButtonEvents(creation.face.leftB);
    creation.face.rightB2.onRelease = function ()
    {
        this.gotoAndStop("hover");
        if (face == "")
        {
            creation.player.player.face._visible = true;
            if (body.indexOf("Female") != -1)
            {
                face = "Blush";
                creation.face.extrasT.htmlText = "<b>Blush";
            }
            else
            {
                face = "Goatee1";
                creation.face.extrasT.htmlText = "<b>Goatee 1";
            } // end else if
        }
        else if (face == "Blush" || face == "Goatee2")
        {
            creation.player.player.face._visible = false;
            face = "";
            creation.face.extrasT.htmlText = "<b>None";
        }
        else if (face == "Goatee1")
        {
            creation.player.player.face._visible = true;
            face = "Goatee2";
            creation.face.extrasT.htmlText = "<b>Goatee 2";
        } // end else if
        creation.player.player.face.gotoAndStop(face);
    };
    addButtonEvents(creation.face.rightB2);
    creation.face.leftB2.onRelease = function ()
    {
        this.gotoAndStop("hover");
        if (face == "")
        {
            creation.player.player.face._visible = true;
            if (body.indexOf("Female") != -1)
            {
                face = "Blush";
                creation.face.extrasT.htmlText = "<b>Blush";
            }
            else
            {
                face = "Goatee2";
                creation.face.extrasT.htmlText = "<b>Goatee 2";
            } // end else if
        }
        else if (face == "Blush" || face == "Goatee1")
        {
            creation.player.player.face._visible = false;
            face = "";
            creation.face.extrasT.htmlText = "<b>None";
        }
        else if (face == "Goatee2")
        {
            creation.player.player.face._visible = true;
            face = "Goatee1";
            creation.face.extrasT.htmlText = "<b>Goatee 1";
        } // end else if
        creation.player.player.face.gotoAndStop(face);
    };
    addButtonEvents(creation.face.leftB2);
    creation.face.randomB2.onRelease = function ()
    {
        this.gotoAndStop("hover");
        var _loc3 = [];
        var _loc4 = [];
        if (body.indexOf("Female") != -1)
        {
            _loc3.push("Both1", "Both2", "Both3", "Both4", "Both5", "Female1", "Female2");
            _loc4.push("", "Blush");
        }
        else if (hair.indexOf("Male") != -1)
        {
            _loc3.push("Both1", "Both2", "Both3", "Both4", "Both5");
            _loc4.push("", "Goatee1", "Goatee2");
        } // end else if
        for (var _loc2 = 0; _loc2 < _loc3.length; ++_loc2)
        {
            if (_loc3[_loc2] == eyes)
            {
                _loc3.splice(_loc2, 1);
                break;
            } // end if
        } // end of for
        for (var _loc2 = 0; _loc2 < _loc4.length; ++_loc2)
        {
            if (_loc4[_loc2] == face)
            {
                _loc4.splice(_loc2, 1);
                break;
            } // end if
        } // end of for
        eyes = _loc3[rand(0, _loc3.length - 1)];
        face = _loc4[rand(0, _loc4.length - 1)];
        creation.player.player.eyes.gotoAndStop(eyes);
        creation.player.player.eyesColor.gotoAndStop(eyes);
        creation.player.player.face.gotoAndStop(face);
        if (eyes == "Both1")
        {
            creation.face.eyesT.htmlText = "<b>Normal";
        }
        else if (eyes == "Both2")
        {
            creation.face.eyesT.htmlText = "<b>Small";
        }
        else if (eyes == "Both3")
        {
            creation.face.eyesT.htmlText = "<b>Squinting";
        }
        else if (eyes == "Both4")
        {
            creation.face.eyesT.htmlText = "<b>Closed";
        }
        else if (eyes == "Both5")
        {
            creation.face.eyesT.htmlText = "<b>Angry";
        }
        else if (eyes == "Female1")
        {
            creation.face.eyesT.htmlText = "<b>Mascara";
        }
        else if (eyes == "Female2")
        {
            creation.face.eyesT.htmlText = "<b>Eyelashes";
        } // end else if
        creation.player.player.face._visible = true;
        if (face == "Blush")
        {
            creation.face.extrasT.htmlText = "<b>Blush";
        }
        else if (face == "Goatee1")
        {
            creation.face.extrasT.htmlText = "<b>Goatee 1";
        }
        else if (face == "Goatee2")
        {
            creation.face.extrasT.htmlText = "<b>Goatee 2";
        }
        else
        {
            creation.face.extrasT.htmlText = "<b>None";
            creation.player.player.face._visible = false;
        } // end else if
    };
    addButtonEvents(creation.face.randomB2);
    creation.clothes.blackB.onRelease = function ()
    {
        shirtRa = 35;
        shirtGa = 35;
        shirtBa = 35;
        shirtColor.setTransform({ra: shirtRa, ga: shirtGa, ba: shirtBa});
    };
    creation.clothes.greyB.onRelease = function ()
    {
        shirtRa = 65;
        shirtGa = 65;
        shirtBa = 65;
        shirtColor.setTransform({ra: shirtRa, ga: shirtGa, ba: shirtBa});
    };
    creation.clothes.whiteB.onRelease = function ()
    {
        shirtRa = 105;
        shirtGa = 105;
        shirtBa = 105;
        shirtColor.setTransform({ra: shirtRa, ga: shirtGa, ba: shirtBa});
    };
    creation.clothes.amberB.onRelease = function ()
    {
        shirtGa = 104;
        shirtBa = 50;
        shirtColor.setTransform({ra: shirtRa, ga: shirtGa, ba: shirtBa});
    };
    creation.clothes.greenB.onRelease = function ()
    {
        shirtRa = 24;
        shirtGa = 105;
        shirtBa = 5;
        shirtColor.setTransform({ra: shirtRa, ga: shirtGa, ba: shirtBa});
    };
    creation.clothes.tealB.onRelease = function ()
    {
        shirtRa = 5;
        shirtGa = 105;
        shirtBa = 80;
        shirtColor.setTransform({ra: shirtRa, ga: shirtGa, ba: shirtBa});
    };
    creation.clothes.blueB.onRelease = function ()
    {
        shirtRa = 15;
        shirtGa = 55;
        shirtBa = 95;
        shirtColor.setTransform({ra: shirtRa, ga: shirtGa, ba: shirtBa});
    };
    creation.clothes.redB.onRelease = function ()
    {
        shirtGa = 40;
        shirtBa = 40;
        shirtColor.setTransform({ra: shirtRa, ga: shirtGa, ba: shirtBa});
    };
    creation.clothes.pinkB.onRelease = function ()
    {
        shirtRa = 110;
        shirtGa = 20;
        shirtBa = 75;
        shirtColor.setTransform({ra: shirtRa, ga: shirtGa, ba: shirtBa});
    };
    creation.clothes.purpleB.onRelease = function ()
    {
        shirtRa = 70;
        shirtGa = 5;
        shirtBa = 105;
        shirtColor.setTransform({ra: shirtRa, ga: shirtGa, ba: shirtBa});
    };
    creation.clothes.blackB2.onRelease = function ()
    {
        pantsRa = 35;
        pantsGa = 35;
        pantsBa = 35;
        pantsColor.setTransform({ra: pantsRa, ga: pantsGa, ba: pantsBa});
    };
    creation.clothes.greyB2.onRelease = function ()
    {
        pantsRa = 65;
        pantsGa = 65;
        pantsBa = 65;
        pantsColor.setTransform({ra: pantsRa, ga: pantsGa, ba: pantsBa});
    };
    creation.clothes.whiteB2.onRelease = function ()
    {
        pantsRa = 105;
        pantsGa = 105;
        pantsBa = 105;
        pantsColor.setTransform({ra: pantsRa, ga: pantsGa, ba: pantsBa});
    };
    creation.clothes.amberB2.onRelease = function ()
    {
        pantsGa = 104;
        pantsBa = 50;
        pantsColor.setTransform({ra: pantsRa, ga: pantsGa, ba: pantsBa});
    };
    creation.clothes.greenB2.onRelease = function ()
    {
        pantsRa = 24;
        pantsGa = 105;
        pantsBa = 5;
        pantsColor.setTransform({ra: pantsRa, ga: pantsGa, ba: pantsBa});
    };
    creation.clothes.tealB2.onRelease = function ()
    {
        pantsRa = 5;
        pantsGa = 105;
        pantsBa = 80;
        pantsColor.setTransform({ra: pantsRa, ga: pantsGa, ba: pantsBa});
    };
    creation.clothes.blueB2.onRelease = function ()
    {
        pantsRa = 15;
        pantsGa = 55;
        pantsBa = 95;
        pantsColor.setTransform({ra: pantsRa, ga: pantsGa, ba: pantsBa});
    };
    creation.clothes.redB2.onRelease = function ()
    {
        pantsGa = 40;
        pantsBa = 40;
        pantsColor.setTransform({ra: pantsRa, ga: pantsGa, ba: pantsBa});
    };
    creation.clothes.pinkB2.onRelease = function ()
    {
        pantsRa = 110;
        pantsGa = 20;
        pantsBa = 75;
        pantsColor.setTransform({ra: pantsRa, ga: pantsGa, ba: pantsBa});
    };
    creation.clothes.purpleB2.onRelease = function ()
    {
        pantsRa = 70;
        pantsGa = 5;
        pantsBa = 105;
        pantsColor.setTransform({ra: pantsRa, ga: pantsGa, ba: pantsBa});
    };
    creation.clothes.slider.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, creation.clothes.sliderLine._x, this._y, creation.clothes.sliderLine._x + creation.clothes.sliderLine._width, this._y);
        this.onEnterFrame = function ()
        {
            shirtRa = Math.round((this._x - creation.clothes.sliderLine._x) / creation.clothes.sliderLine._width * 100) + 35;
            if (shirtRa > 135)
            {
            } // end if
            shirtColor.setTransform({ra: shirtRa, ga: shirtGa, ba: shirtBa});
        };
    };
    creation.clothes.slider.onRelease = function ()
    {
        this.gotoAndStop("hover");
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.clothes.slider.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.clothes.slider.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    creation.clothes.slider.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    creation.clothes.slider2.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, creation.clothes.sliderLine2._x, this._y, creation.clothes.sliderLine2._x + creation.clothes.sliderLine2._width, this._y);
        this.onEnterFrame = function ()
        {
            shirtGa = Math.round((this._x - creation.clothes.sliderLine2._x) / creation.clothes.sliderLine2._width * 100) + 35;
            if (shirtGa > 135)
            {
            } // end if
            shirtColor.setTransform({ra: shirtRa, ga: shirtGa, ba: shirtBa});
        };
    };
    creation.clothes.slider2.onRelease = function ()
    {
        this.gotoAndStop("hover");
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.clothes.slider2.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.clothes.slider2.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    creation.clothes.slider2.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    creation.clothes.slider3.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, creation.clothes.sliderLine3._x, this._y, creation.clothes.sliderLine3._x + creation.clothes.sliderLine3._width, this._y);
        this.onEnterFrame = function ()
        {
            shirtBa = Math.round((this._x - creation.clothes.sliderLine3._x) / creation.clothes.sliderLine3._width * 100) + 35;
            if (shirtBa > 135)
            {
            } // end if
            shirtColor.setTransform({ra: shirtRa, ga: shirtGa, ba: shirtBa});
        };
    };
    creation.clothes.slider3.onRelease = function ()
    {
        this.gotoAndStop("hover");
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.clothes.slider3.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.clothes.slider3.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    creation.clothes.slider3.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    creation.clothes.slider4.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, creation.clothes.sliderLine4._x, this._y, creation.clothes.sliderLine4._x + creation.clothes.sliderLine4._width, this._y);
        this.onEnterFrame = function ()
        {
            pantsRa = Math.round((this._x - creation.clothes.sliderLine4._x) / creation.clothes.sliderLine4._width * 100) + 35;
            if (pantsRa > 135)
            {
            } // end if
            pantsColor.setTransform({ra: pantsRa, ga: pantsGa, ba: pantsBa});
        };
    };
    creation.clothes.slider4.onRelease = function ()
    {
        this.gotoAndStop("hover");
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.clothes.slider4.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.clothes.slider4.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    creation.clothes.slider4.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    creation.clothes.slider5.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, creation.clothes.sliderLine5._x, this._y, creation.clothes.sliderLine5._x + creation.clothes.sliderLine5._width, this._y);
        this.onEnterFrame = function ()
        {
            pantsGa = Math.round((this._x - creation.clothes.sliderLine5._x) / creation.clothes.sliderLine5._width * 100) + 35;
            if (pantsGa > 135)
            {
            } // end if
            pantsColor.setTransform({ra: pantsRa, ga: pantsGa, ba: pantsBa});
        };
    };
    creation.clothes.slider5.onRelease = function ()
    {
        this.gotoAndStop("hover");
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.clothes.slider5.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.clothes.slider5.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    creation.clothes.slider5.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    creation.clothes.slider6.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, creation.clothes.sliderLine6._x, this._y, creation.clothes.sliderLine6._x + creation.clothes.sliderLine6._width, this._y);
        this.onEnterFrame = function ()
        {
            pantsBa = Math.round((this._x - creation.clothes.sliderLine6._x) / creation.clothes.sliderLine6._width * 100) + 35;
            if (pantsBa > 135)
            {
            } // end if
            pantsColor.setTransform({ra: pantsRa, ga: pantsGa, ba: pantsBa});
        };
    };
    creation.clothes.slider6.onRelease = function ()
    {
        this.gotoAndStop("hover");
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.clothes.slider6.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        delete this.onEnterFrame;
    };
    creation.clothes.slider6.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    creation.clothes.slider6.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    creation.clothes.rightB.onRelease = function ()
    {
        this.gotoAndStop("hover");
        if (shirt == "Male1")
        {
            shirt = "Male2";
            creation.clothes.shirtT.htmlText = "<b>Sleeveless";
        }
        else if (shirt == "Male2")
        {
            shirt = "Male3";
            creation.clothes.shirtT.htmlText = "<b>Long Sleeved";
        }
        else if (shirt == "Male3")
        {
            shirt = "Male1";
            creation.clothes.shirtT.htmlText = "<b>T-Shirt";
        }
        else if (shirt == "Female1")
        {
            shirt = "Female2";
            creation.clothes.shirtT.htmlText = "<b>Tank Top";
        }
        else if (shirt == "Female2")
        {
            shirt = "Female3";
            creation.clothes.shirtT.htmlText = "<b>Blouse";
        }
        else if (shirt == "Female3")
        {
            shirt = "Female1";
            creation.clothes.shirtT.htmlText = "<b>T-Shirt";
        } // end else if
        creation.player.player.shirt.gotoAndStop(shirt);
    };
    addButtonEvents(creation.clothes.rightB);
    creation.clothes.rightB2.onRelease = function ()
    {
        this.gotoAndStop("hover");
        if (pants == "Male1")
        {
            pants = "Male2";
            creation.clothes.pantsT.htmlText = "<b>Shorts";
        }
        else if (pants == "Male2")
        {
            pants = "Male3";
            creation.clothes.pantsT.htmlText = "<b>Baggy";
        }
        else if (pants == "Male3")
        {
            pants = "Male1";
            creation.clothes.pantsT.htmlText = "<b>Long";
        }
        else if (pants == "Female1")
        {
            pants = "Female2";
            creation.clothes.pantsT.htmlText = "<b>Long";
        }
        else if (pants == "Female2")
        {
            pants = "Female3";
            creation.clothes.pantsT.htmlText = "<b>Shorts";
        }
        else if (pants == "Female3")
        {
            pants = "Female4";
            creation.clothes.pantsT.htmlText = "<b>Baggy";
        }
        else if (pants == "Female4")
        {
            pants = "Female1";
            creation.clothes.pantsT.htmlText = "<b>Skirt";
        } // end else if
        creation.player.player.pants.gotoAndStop(pants);
    };
    addButtonEvents(creation.clothes.rightB2);
    creation.clothes.leftB.onRelease = function ()
    {
        this.gotoAndStop("hover");
        if (shirt == "Male1")
        {
            shirt = "Male3";
            creation.clothes.shirtT.htmlText = "<b>Long Sleeved";
        }
        else if (shirt == "Male3")
        {
            shirt = "Male2";
            creation.clothes.shirtT.htmlText = "<b>Sleeveless";
        }
        else if (shirt == "Male2")
        {
            shirt = "Male1";
            creation.clothes.shirtT.htmlText = "<b>T-Shirt";
        }
        else if (shirt == "Female1")
        {
            shirt = "Female3";
            creation.clothes.shirtT.htmlText = "<b>Blouse";
        }
        else if (shirt == "Female3")
        {
            shirt = "Female2";
            creation.clothes.shirtT.htmlText = "<b>Tank Top";
        }
        else if (shirt == "Female2")
        {
            shirt = "Female1";
            creation.clothes.shirtT.htmlText = "<b>T-Shirt";
        } // end else if
        creation.player.player.shirt.gotoAndStop(shirt);
    };
    addButtonEvents(creation.clothes.leftB);
    creation.clothes.leftB2.onRelease = function ()
    {
        this.gotoAndStop("hover");
        if (pants == "Male1")
        {
            pants = "Male3";
            creation.clothes.pantsT.htmlText = "<b>Baggy";
        }
        else if (pants == "Male3")
        {
            pants = "Male2";
            creation.clothes.pantsT.htmlText = "<b>Shorts";
        }
        else if (pants == "Male2")
        {
            pants = "Male1";
            creation.clothes.pantsT.htmlText = "<b>Long";
        }
        else if (pants == "Female1")
        {
            pants = "Female4";
            creation.clothes.pantsT.htmlText = "<b>Baggy";
        }
        else if (pants == "Female4")
        {
            pants = "Female3";
            creation.clothes.pantsT.htmlText = "<b>Shorts";
        }
        else if (pants == "Female3")
        {
            pants = "Female2";
            creation.clothes.pantsT.htmlText = "<b>Long";
        }
        else if (pants == "Female2")
        {
            pants = "Female1";
            creation.clothes.pantsT.htmlText = "<b>Skirt";
        } // end else if
        creation.player.player.pants.gotoAndStop(pants);
    };
    addButtonEvents(creation.clothes.leftB2);
    creation.clothes.randomB.onRelease = function ()
    {
        this.gotoAndStop("hover");
        shirtRa = rand(35, 135);
        shirtGa = rand(35, 135);
        shirtBa = rand(35, 135);
        shirtColor.setTransform({ra: shirtRa, ga: shirtGa, ba: shirtBa});
        var _loc3 = [];
        if (body.indexOf("Female") != -1)
        {
            _loc3.push("Female1", "Female2", "Female3");
        }
        else if (hair.indexOf("Male") != -1)
        {
            _loc3.push("Male1", "Male2", "Male3");
        } // end else if
        for (var _loc2 = 0; _loc2 < _loc3.length; ++_loc2)
        {
            if (_loc3[_loc2] == shirt)
            {
                _loc3.splice(_loc2, 1);
                break;
            } // end if
        } // end of for
        shirt = _loc3[rand(0, _loc3.length - 1)];
        creation.player.player.shirt.gotoAndStop(shirt);
        if (shirt == "Female1")
        {
            creation.clothes.shirtT.htmlText = "<b>T-Shirt";
        }
        else if (shirt == "Female2")
        {
            creation.clothes.shirtT.htmlText = "<b>Tank Top";
        }
        else if (shirt == "Female3")
        {
            creation.clothes.shirtT.htmlText = "<b>Blouse";
        }
        else if (shirt == "Male1")
        {
            creation.clothes.shirtT.htmlText = "<b>T-Shirt";
        }
        else if (shirt == "Male2")
        {
            creation.clothes.shirtT.htmlText = "<b>Sleeveless";
        }
        else if (shirt == "Male3")
        {
            creation.clothes.shirtT.htmlText = "<b>Long Sleeved";
        } // end else if
    };
    addButtonEvents(creation.clothes.randomB);
    creation.clothes.randomB2.onRelease = function ()
    {
        this.gotoAndStop("hover");
        pantsRa = rand(35, 135);
        pantsGa = rand(35, 135);
        pantsBa = rand(35, 135);
        pantsColor.setTransform({ra: pantsRa, ga: pantsGa, ba: pantsBa});
        var _loc3 = [];
        if (body.indexOf("Female") != -1)
        {
            _loc3.push("Female1", "Female2", "Female3", "Female4");
        }
        else if (hair.indexOf("Male") != -1)
        {
            _loc3.push("Male1", "Male2", "Male3");
        } // end else if
        for (var _loc2 = 0; _loc2 < _loc3.length; ++_loc2)
        {
            if (_loc3[_loc2] == pants)
            {
                _loc3.splice(_loc2, 1);
                break;
            } // end if
        } // end of for
        pants = _loc3[rand(0, _loc3.length - 1)];
        creation.player.player.pants.gotoAndStop(pants);
        if (pants == "Female1")
        {
            creation.pants.pantsT.htmlText = "<b>Female 1";
        }
        else if (pants == "Female2")
        {
            creation.pants.pantsT.htmlText = "<b>Female 2";
        }
        else if (pants == "Female3")
        {
            creation.pants.pantsT.htmlText = "<b>Female 3";
        }
        else if (pants == "Male1")
        {
            creation.pants.pantsT.htmlText = "<b>Male 1";
        }
        else if (pants == "Male2")
        {
            creation.pants.pantsT.htmlText = "<b>Male 2";
        }
        else if (pants == "Male3")
        {
            creation.pants.pantsT.htmlText = "<b>Male 3";
        } // end else if
    };
    addButtonEvents(creation.clothes.randomB2);
} // End of the function
function swapGenders()
{
    if (hair == "Female1")
    {
        hair = "Male1";
        creation.hair.hairT.htmlText = "<b>Messy";
    }
    else if (hair == "Female2")
    {
        hair = "Male2";
        creation.hair.hairT.htmlText = "<b>Buzzcut";
    }
    else if (hair == "Female3")
    {
        hair = "Male3";
        creation.hair.hairT.htmlText = "<b>Neat";
    }
    else if (hair == "Female4")
    {
        hair = "Male4";
        creation.hair.hairT.htmlText = "<b>Medium";
    }
    else if (hair == "Female5" || hair == "Female6" || hair == "Female7" || hair == "Female8" || hair == "Female9" || hair == "Female10" || hair == "Female11" || hair == "Female12" || hair == "Female13" || hair == "Female14" || hair == "Female15" || hair == "Female16" || hair == "Female17" || hair == "Female18" || hair == "Female20" || hair == "Female21" || hair == "Female22" || hair == "Female23" || hair == "Female24" || hair == "Female25" || hair == "Female26")
    {
        hair = "Male5";
        creation.hair.hairT.htmlText = "<b>Spiky";
    }
    else if (hair == "Male1")
    {
        hair = "Female1";
        creation.hair.hairT.htmlText = "<b>Bouncy";
    }
    else if (hair == "Male2")
    {
        hair = "Female2";
        creation.hair.hairT.htmlText = "<b>Bangs";
    }
    else if (hair == "Male3")
    {
        hair = "Female3";
        creation.hair.hairT.htmlText = "<b>Modern";
    }
    else if (hair == "Male4")
    {
        hair = "Female4";
        creation.hair.hairT.htmlText = "<b>Dyed";
    }
    else if (hair == "Male5")
    {
        hair = "Female5";
        creation.hair.hairT.htmlText = "<b>Twin Tails";
    }
    else if (hair == "Male6")
    {
        hair = "Female6";
        creation.hair.hairT.htmlText = "<b>Asymmetric cut";
    }
    else if (hair == "Male7")
    {
        hair = "Female7";
        creation.hair.hairT.htmlText = "<b>May";
    }
    else if (hair == "Male8")
    {
        hair = "Female8";
        creation.hair.hairT.htmlText = "<b>Ponytail";
    }
    else if (hair == "Male9")
    {
        hair = "Female9";
        creation.hair.hairT.htmlText = "<b>Rem";
    }
    else if (hair == "Male10")
    {
        hair = "Female10";
        creation.hair.hairT.htmlText = "<b>Ram";
    }
    else if (hair == "Male11")
    {
        hair = "Female11";
        creation.hair.hairT.htmlText = "<b>Lorelei";
    }
    else if (hair == "Male12")
    {
        hair = "Female12";
        creation.hair.hairT.htmlText = "<b>Lass";
    }
    else if (hair == "Male13")
    {
        hair = "Female13";
        creation.hair.hairT.htmlText = "<b>Swimmer";
    }
    else if (hair == "Male14")
    {
        hair = "Female14";
        creation.hair.hairT.htmlText = "<b>Misty";
    }
    else if (hair == "Male15")
    {
        hair = "Female15";
        creation.hair.hairT.htmlText = "<b>Erika";
    }
    else if (hair == "Male16")
    {
        hair = "Female16";
        creation.hair.hairT.htmlText = "<b>Crush Girl";
    }
    else if (hair == "Male17")
    {
        hair = "Female16";
        creation.hair.hairT.htmlText = "<b>Crush Girl";
    }
    else if (hair == "Male18")
    {
        hair = "Female16";
        creation.hair.hairT.htmlText = "<b>Crush Girl";
    } // end else if
    if (body == "BlackFemale")
    {
        body = "BlackMale";
    }
    else if (body == "BrownFemale")
    {
        body = "BrownMale";
    }
    else if (body == "WhiteFemale")
    {
        body = "WhiteMale";
    }
    else if (body == "PaleFemale")
    {
        body = "PaleMale";
    }
    else if (body == "TanFemale")
    {
        body = "TanMale";
    }
    else if (body == "YellowFemale")
    {
        body = "YellowMale";
    }
    else if (body == "BlackMale")
    {
        body = "BlackFemale";
    }
    else if (body == "BrownMale")
    {
        body = "BrownFemale";
    }
    else if (body == "WhiteMale")
    {
        body = "WhiteFemale";
    }
    else if (body == "PaleMale")
    {
        body = "PaleFemale";
    }
    else if (body == "TanMale")
    {
        body = "TanFemale";
    }
    else if (body == "YellowMale")
    {
        body = "YellowFemale";
    } // end else if
    if (eyes == "Female1" || eyes == "Female2")
    {
        eyes = "Both1";
        creation.face.eyesT.htmlText = "<b>Normal";
    } // end if
    if (shirt == "Female1")
    {
        shirt = "Male1";
        creation.clothes.shirtT.htmlText = "<b>T-Shirt";
    }
    else if (shirt == "Female2")
    {
        shirt = "Male2";
        creation.clothes.shirtT.htmlText = "<b>Sleeveless";
    }
    else if (shirt == "Female3")
    {
        shirt = "Male3";
        creation.clothes.shirtT.htmlText = "<b>Long Sleeved";
    }
    else if (shirt == "Male1")
    {
        shirt = "Female1";
        creation.clothes.shirtT.htmlText = "<b>T-Shirt";
    }
    else if (shirt == "Male2")
    {
        shirt = "Female2";
        creation.clothes.shirtT.htmlText = "<b>Tank Top";
    }
    else if (shirt == "Male3")
    {
        shirt = "Female3";
        creation.clothes.shirtT.htmlText = "<b>Blouse";
    } // end else if
    if (pants == "Female1" || pants == "Female4")
    {
        pants = "Male1";
        creation.clothes.pantsT.htmlText = "<b>Long";
    }
    else if (pants == "Female2")
    {
        pants = "Male2";
        creation.clothes.pantsT.htmlText = "<b>Shorts";
    }
    else if (pants == "Female3")
    {
        pants = "Male3";
        creation.clothes.pantsT.htmlText = "<b>Baggy";
    }
    else if (pants == "Male1")
    {
        pants = "Female2";
        creation.clothes.pantsT.htmlText = "<b>Long";
    }
    else if (pants == "Male2")
    {
        pants = "Female3";
        creation.clothes.pantsT.htmlText = "<b>Shorts";
    }
    else if (pants == "Male3")
    {
        pants = "Female4";
        creation.clothes.pantsT.htmlText = "<b>Baggy";
    } // end else if
    face = "";
    creation.player.player.face._visible = false;
    creation.face.extrasT.htmlText = "<b>None";
    creation.player.player.hair.gotoAndStop(hair);
    creation.player.player.eyes.gotoAndStop(eyes);
    creation.player.player.eyesColor.gotoAndStop(eyes);
    creation.player.player.shirt.gotoAndStop(shirt);
    creation.player.player.pants.gotoAndStop(pants);
    creation.player.player.body.gotoAndStop(body);
    creation.player.player.face.gotoAndStop(face);
} // End of the function
function addButtonEvents(target)
{
    target.onReleaseOutside = function ()
    {
        if (target._currentframe != 4)
        {
            target.gotoAndStop(1);
        } // end if
    };
    target.onPress = function ()
    {
        if (target._currentframe != 4)
        {
            target.gotoAndStop("click");
        } // end if
    };
    target.onRollOver = function ()
    {
        if (target._currentframe != 4)
        {
            target.gotoAndStop("hover");
        } // end if
    };
    target.onRollOut = function ()
    {
        if (target._currentframe != 4)
        {
            target.gotoAndStop(1);
        } // end if
    };
} // End of the function
function startCharacterCreateAnimation()
{
    globalAnimation = "createCharacter";
    globalAnimationStage = 0;
} // End of the function
function handleAddPlayer(resObj, addBack)
{
    if (_root.playersEnabled == true)
    {
        resObj[3] = Number(resObj[3]);
        resObj[4] = Number(resObj[4]);
        resObj[6] = Number(resObj[6]);
        resObj[16] = Number(resObj[16]);
        resObj[18] = Number(resObj[18]);
        for (var _loc4 = 0; _loc4 < players.length; ++_loc4)
        {
            if (players[_loc4].name == resObj[2])
            {
                removeMovieClip (players[_loc4]);
                players.splice(_loc4, 1);
                break;
            } // end if
        } // end of for
        tempPlayer = _root.createEmptyMovieClip("player_" + resObj[2], _root.getNextHighestDepth());
        tempPlayer.attachMovie("shadow", "shadow", tempPlayer.getNextHighestDepth());
        tempPlayer.shadow._y = 16;
        tempPlayer.createEmptyMovieClip("player", tempPlayer.getNextHighestDepth());
        tempPlayer.attachMovie("nameBg", "nameM", _root.player.getNextHighestDepth());
        tempPlayer.nameM._y = -27;
        makePlayer(tempPlayer);
        tempPlayer._x = newWidth / 2 - 64 * (_root.player.tileX - resObj[3]);
        tempPlayer._y = newHeight / 2 - 64 * (_root.player.tileY - resObj[4]) - _root.playerHeightOffset;
        tempPlayer.tileX = resObj[3];
        tempPlayer.tileY = resObj[4];
        if (addBack == false)
        {
            if (resObj[18] > 0)
            {
                if (resObj[5] == "up")
                {
                    tempPlayer._y = tempPlayer._y - 64;
                }
                else if (resObj[5] == "down")
                {
                    tempPlayer._y = tempPlayer._y + 64;
                }
                else if (resObj[5] == "left")
                {
                    tempPlayer._x = tempPlayer._x - 64;
                }
                else if (resObj[5] == "right")
                {
                    tempPlayer._x = tempPlayer._x + 64;
                } // end else if
            } // end else if
        } // end else if
        tempPlayer.name = resObj[2];
        tempPlayer.userId = resObj[6];
        tempPlayer.nameM.nameT.htmlText = "<b>" + tempPlayer.name;
        tempPlayer.nameM.bg._width = tempPlayer.nameM.nameT.textWidth + 6;
        if (resObj[19] == "0")
        {
            tempPlayer.nameM.nameT.textColor = 16725815;
        }
        else if (resObj[19] == "1")
        {
            tempPlayer.nameM.nameT.textColor = 65535;
        }
        else if (resObj[19] == "2" || resObj[19] == "5")
        {
            tempPlayer.nameM.nameT.textColor = 65280;
        }
        else if (resObj[19] == "3")
        {
            tempPlayer.nameM.nameT.textColor = 65280;
        }
        else if (resObj[19] == "6")
        {
            tempPlayer.nameM.nameT.textColor = 16750848;
        }
        else if (resObj[19] == "7")
        {
            tempPlayer.nameM.nameT.textColor = 10181046;
        }
        else if (resObj[19] == "4")
        {
            tempPlayer.nameM.nameT.textColor = 15132160;
        } // end else if
        tempPlayer.hat = resObj[7].split("%");
        tempPlayer.hair = resObj[10].split("%");
        tempPlayer.wings = resObj[8].split("%");
        tempPlayer.tail = resObj[9].split("%");
        tempPlayer.eyes = resObj[13].split("%");
        tempPlayer.shirt = resObj[11].split("%");
        tempPlayer.pants = resObj[12].split("%");
        tempPlayer.body = resObj[14];
        tempPlayer.face = resObj[15];
        tempPlayer.face2 = resObj[21].split("%");
        tempPlayer.cape = resObj[22].split("%");
        tempPlayer.neck = resObj[23].split("%");
        tempPlayer.costume = resObj[25].split("%");
        if (resObj[24] != "0")
        {
            if (_root.map != "Clan Wars T1" && _root.map != "Clan Wars T2" && _root.map != "Clan Wars T3")
            {
                tempPlayer.mount = resObj[24];
            }
            else
            {
                tempPlayer.mount = "Bike";
            } // end if
        } // end else if
        var _loc15 = tempPlayer.hair[1].split("-");
        var _loc17 = tempPlayer.eyes[1].split("-");
        var _loc14 = tempPlayer.shirt[1].split("-");
        var _loc16 = tempPlayer.pants[1].split("-");
        var _loc10 = tempPlayer.hat[1].split("-");
        var _loc11 = tempPlayer.wings[1].split("-");
        var _loc7 = tempPlayer.tail[1].split("-");
        var _loc12 = tempPlayer.face2[1].split("-");
        var _loc9 = tempPlayer.cape[1].split("-");
        var _loc8 = tempPlayer.neck[1].split("-");
        var _loc13 = tempPlayer.costume[1].split("-");
        var _loc6 = [];
        _loc6 = _loc6.concat([_loc15[0] / 100, 0, 0, 0, 0]);
        _loc6 = _loc6.concat([0, _loc15[1] / 100, 0, 0, 0]);
        _loc6 = _loc6.concat([0, 0, _loc15[2] / 100, 0, 0]);
        _loc6 = _loc6.concat([0, 0, 0, 1, 0]);
        tempPlayer.hairFilter = new flash.filters.ColorMatrixFilter(_loc6);
        _loc6 = [];
        _loc6 = _loc6.concat([_loc17[0] / 100, 0, 0, 0, 0]);
        _loc6 = _loc6.concat([0, _loc17[1] / 100, 0, 0, 0]);
        _loc6 = _loc6.concat([0, 0, _loc17[2] / 100, 0, 0]);
        _loc6 = _loc6.concat([0, 0, 0, 1, 0]);
        tempPlayer.eyeFilter = new flash.filters.ColorMatrixFilter(_loc6);
        _loc6 = [];
        _loc6 = _loc6.concat([_loc14[0] / 100, 0, 0, 0, 0]);
        _loc6 = _loc6.concat([0, _loc14[1] / 100, 0, 0, 0]);
        _loc6 = _loc6.concat([0, 0, _loc14[2] / 100, 0, 0]);
        _loc6 = _loc6.concat([0, 0, 0, 1, 0]);
        tempPlayer.shirtFilter = new flash.filters.ColorMatrixFilter(_loc6);
        _loc6 = [];
        _loc6 = _loc6.concat([_loc16[0] / 100, 0, 0, 0, 0]);
        _loc6 = _loc6.concat([0, _loc16[1] / 100, 0, 0, 0]);
        _loc6 = _loc6.concat([0, 0, _loc16[2] / 100, 0, 0]);
        _loc6 = _loc6.concat([0, 0, 0, 1, 0]);
        tempPlayer.pantsFilter = new flash.filters.ColorMatrixFilter(_loc6);
        if (_loc10[0] != "undefined" && _loc10[0] != undefined)
        {
            _loc6 = [];
            _loc6 = _loc6.concat([_loc10[0] / 100, 0, 0, 0, 0]);
            _loc6 = _loc6.concat([0, _loc10[1] / 100, 0, 0, 0]);
            _loc6 = _loc6.concat([0, 0, _loc10[2] / 100, 0, 0]);
            _loc6 = _loc6.concat([0, 0, 0, 1, 0]);
            tempPlayer.hatFilter = new flash.filters.ColorMatrixFilter(_loc6);
        } // end if
        if (_loc11[0] != "undefined" && _loc11[0] != undefined)
        {
            _loc6 = [];
            _loc6 = _loc6.concat([_loc11[0] / 100, 0, 0, 0, 0]);
            _loc6 = _loc6.concat([0, _loc11[1] / 100, 0, 0, 0]);
            _loc6 = _loc6.concat([0, 0, _loc11[2] / 100, 0, 0]);
            _loc6 = _loc6.concat([0, 0, 0, 1, 0]);
            tempPlayer.wingsFilter = new flash.filters.ColorMatrixFilter(_loc6);
        } // end if
        if (_loc7[0] != "undefined" && _loc7[0] != undefined)
        {
            _loc6 = [];
            _loc6 = _loc6.concat([_loc7[0] / 100, 0, 0, 0, 0]);
            _loc6 = _loc6.concat([0, _loc7[1] / 100, 0, 0, 0]);
            _loc6 = _loc6.concat([0, 0, _loc7[2] / 100, 0, 0]);
            _loc6 = _loc6.concat([0, 0, 0, 1, 0]);
            tempPlayer.tailFilter = new flash.filters.ColorMatrixFilter(_loc6);
        } // end if
        if (_loc12[0] != "undefined" && _loc12[0] != undefined)
        {
            _loc6 = [];
            _loc6 = _loc6.concat([_loc12[0] / 100, 0, 0, 0, 0]);
            _loc6 = _loc6.concat([0, _loc12[1] / 100, 0, 0, 0]);
            _loc6 = _loc6.concat([0, 0, _loc12[2] / 100, 0, 0]);
            _loc6 = _loc6.concat([0, 0, 0, 1, 0]);
            tempPlayer.face2Filter = new flash.filters.ColorMatrixFilter(_loc6);
        } // end if
        if (_loc9[0] != "undefined" && _loc9[0] != undefined)
        {
            _loc6 = [];
            _loc6 = _loc6.concat([_loc9[0] / 100, 0, 0, 0, 0]);
            _loc6 = _loc6.concat([0, _loc9[1] / 100, 0, 0, 0]);
            _loc6 = _loc6.concat([0, 0, _loc9[2] / 100, 0, 0]);
            _loc6 = _loc6.concat([0, 0, 0, 1, 0]);
            tempPlayer.capeFilter = new flash.filters.ColorMatrixFilter(_loc6);
        } // end if
        if (_loc8[0] != "undefined" && _loc8[0] != undefined)
        {
            _loc6 = [];
            _loc6 = _loc6.concat([_loc8[0] / 100, 0, 0, 0, 0]);
            _loc6 = _loc6.concat([0, _loc8[1] / 100, 0, 0, 0]);
            _loc6 = _loc6.concat([0, 0, _loc8[2] / 100, 0, 0]);
            _loc6 = _loc6.concat([0, 0, 0, 1, 0]);
            tempPlayer.neckFilter = new flash.filters.ColorMatrixFilter(_loc6);
        } // end if
        if (_loc13[0] != "undefined" && _loc13[0] != undefined)
        {
            _loc6 = [];
            _loc6 = _loc6.concat([_loc13[0] / 100, 0, 0, 0, 0]);
            _loc6 = _loc6.concat([0, _loc13[1] / 100, 0, 0, 0]);
            _loc6 = _loc6.concat([0, 0, _loc13[2] / 100, 0, 0]);
            _loc6 = _loc6.concat([0, 0, 0, 1, 0]);
            tempPlayer.costumeFilter = new flash.filters.ColorMatrixFilter(_loc6);
        } // end if
        tempPlayer.hair = tempPlayer.hair[0];
        tempPlayer.eyes = tempPlayer.eyes[0];
        tempPlayer.shirt = tempPlayer.shirt[0];
        tempPlayer.pants = tempPlayer.pants[0];
        tempPlayer.hat = tempPlayer.hat[0];
        tempPlayer.wings = tempPlayer.wings[0];
        tempPlayer.tail = tempPlayer.tail[0];
        tempPlayer.face2 = tempPlayer.face2[0];
        tempPlayer.cape = tempPlayer.cape[0];
        tempPlayer.neck = tempPlayer.neck[0];
        tempPlayer.costume = tempPlayer.costume[0];
        if (resObj[5] == "up")
        {
            if (resObj[20] == "0")
            {
                if (resObj[17] == "surf")
                {
                    drawPlayer(tempPlayer, 12, 1);
                }
                else if (resObj[17] == "bike")
                {
                    drawPlayer(tempPlayer, 6, 1);
                }
                else
                {
                    drawPlayer(tempPlayer, 0, 1);
                } // end else if
            }
            else
            {
                drawPlayer(tempPlayer, 11, 1);
            } // end else if
        }
        else if (resObj[5] == "down")
        {
            if (resObj[20] == "0")
            {
                if (resObj[17] == "surf")
                {
                    drawPlayer(tempPlayer, 12, 0);
                }
                else if (resObj[17] == "bike")
                {
                    drawPlayer(tempPlayer, 6, 0);
                }
                else
                {
                    drawPlayer(tempPlayer, 0, 0);
                } // end else if
            }
            else
            {
                drawPlayer(tempPlayer, 11, 0);
            } // end else if
        }
        else if (resObj[5] == "left")
        {
            if (resObj[20] == "0")
            {
                if (resObj[17] == "surf")
                {
                    drawPlayer(tempPlayer, 12, 2);
                }
                else if (resObj[17] == "bike")
                {
                    drawPlayer(tempPlayer, 6, 2);
                }
                else
                {
                    drawPlayer(tempPlayer, 0, 2);
                } // end else if
            }
            else
            {
                drawPlayer(tempPlayer, 11, 2);
            } // end else if
        }
        else if (resObj[5] == "right")
        {
            if (resObj[20] == "0")
            {
                if (resObj[17] == "surf")
                {
                    drawPlayer(tempPlayer, 12, 3);
                }
                else if (resObj[17] == "bike")
                {
                    drawPlayer(tempPlayer, 6, 3);
                }
                else
                {
                    drawPlayer(tempPlayer, 0, 3);
                } // end else if
            }
            else
            {
                drawPlayer(tempPlayer, 11, 3);
            } // end else if
        } // end else if
        if (resObj[16] != undefined && resObj[16] > -1)
        {
            removeMovieClip (tempPlayer.followPokemonBox);
            tempPlayer.followPokemonBox = tempPlayer.attachMovie("followPokemonBox", "followPokemonBox", tempPlayer.getNextHighestDepth());
            tempPlayer.followPokemonBox.cacheAsBitmap = true;
            tempPlayer.player.swapDepths(tempPlayer.getNextHighestDepth());
            tempPlayer.nameM.swapDepths(tempPlayer.getNextHighestDepth());
            tempPlayer.followPokemonBox._y = -32;
            followPokemonImage = tempPlayer.followPokemonBox.attachMovie("followPokemonImage", "followPokemonImage", tempPlayer.followPokemonBox.getNextHighestDepth());
            followPokemonImage.gotoAndStop(resObj[16]);
            tempPlayer.followPokemonBox.followPokemonImage.setMask(tempPlayer.followPokemonBox.box);
            setFollowPokemon(tempPlayer, 0, 0);
        } // end if
        if (moving == true)
        {
            offsetAmount = 64 - player.moveMapAmount;
            if (dir == "up")
            {
                tempPlayer._y = tempPlayer._y - (offsetAmount - 64);
            }
            else if (dir == "down")
            {
                tempPlayer._y = tempPlayer._y + (offsetAmount - 64);
            }
            else if (dir == "left")
            {
                tempPlayer._x = tempPlayer._x - (offsetAmount - 64);
            }
            else if (dir == "right")
            {
                tempPlayer._x = tempPlayer._x + (offsetAmount - 64);
            } // end else if
        }
        else
        {
            offsetAmount = 0;
        } // end else if
        players.push(tempPlayer);
        if (map == "Clan Wars T1" || map == "Clan Wars T2" || map == "Clan Wars T3")
        {
            _root["player_" + resObj[2]].attachMovie("hitbox", "hitbox", _root["player_" + resObj[2]].getNextHighestDepth());
            _root["player_" + resObj[2]].hitbox._width = 50;
            _root["player_" + resObj[2]].hitbox._height = 50;
            _root["player_" + resObj[2]].hitbox._x = -25;
            _root["player_" + resObj[2]].hitbox._y = -25;
            _root["player_" + resObj[2]].hitbox.name = _root["player_" + resObj[2]].name;
            _root["player_" + resObj[2]].hitbox.onRelease = function ()
            {
                if (_root.canClickOnPlayer != false)
                {
                    if (_root.battle == false)
                    {
                        var _loc5 = positive(player.tileX - _root["player_" + resObj[2]].tileX);
                        var _loc6 = positive(player.tileY - _root["player_" + resObj[2]].tileY);
                        if (_loc5 <= 10 && _loc6 <= 10)
                        {
                            if (this.name != "Brody")
                            {
                                if (isBusy == false)
                                {
                                    getTimestamp("clanWarBattle", this.name);
                                    for (var _loc3 = 0; _loc3 < players.length; ++_loc3)
                                    {
                                        if (players[_loc3].name == this.name)
                                        {
                                            var _loc4 = players[0];
                                            players[0] = players[_loc3];
                                            players[_loc3] = _loc4;
                                            fixDepths();
                                            break;
                                        } // end if
                                    } // end of for
                                } // end if
                            }
                            else
                            {
                                systemMessage("You can\'t battle Brody. He would pwn you anyways.");
                            } // end else if
                        }
                        else
                        {
                            systemMessage("You are too far away to battle this player.");
                        } // end if
                    } // end if
                } // end else if
            };
        }
        else if (map.indexOf("Mewtwo Raid Lobby") != -1)
        {
            if (mainGUI.raidT.htmlText.indexOf("Raid Status: Starting ") == -1)
            {
                mainGUI.raidT.htmlText = "<b>Raid Status: Waiting for players.. " + (_root.players.length + 1) + "/10";
            } // end if
        } // end else if
        fixDepths();
    } // end if
    if (moving == true)
    {
        offsetAmount = 64 - player.moveMapAmount;
    }
    else
    {
        offsetAmount = 0;
    } // end else if
    if (addBack == true && avatarType != 0)
    {
        getTimestamp("sendAddPlayerTarget", resObj[2], offsetAmount);
    } // end if
} // End of the function
function drawPlayer(target, frameX, frameY, overlayNum)
{
    target.holderB.fillRect(new flash.geom.Rectangle(0, 0, 128, 128), 0);
    if (_root.landMounts[target.mount] != undefined && overlayNum != 1)
    {
        var _loc5 = frameX;
        if (frameY < 2)
        {
            frameX = 11;
        }
        else
        {
            frameX = 9;
        } // end else if
        target.holderB.copyPixels(_root["b_" + target.mount], new flash.geom.Rectangle((_loc5 - 6) * 128, frameY * 128, 128, 128), new flash.geom.Point(-2, 10), undefined, undefined, true);
    } // end if
    target.frameX = frameX;
    target.frameY = frameY;
    if (frameX >= 9 && frameX <= 13)
    {
        if (frameX < 12)
        {
            if (_root.largeSurfingMounts2[target.mount] == 1)
            {
                target.holderB.copyPixels(_root["b_" + target.mount], new flash.geom.Rectangle(128, frameY * 128, 128, 128), new flash.geom.Point(0, 10), undefined, undefined, true);
            }
            else
            {
                target.holderB.copyPixels(_root["b_" + target.mount], new flash.geom.Rectangle(768, frameY * 64 + 12, 64, 64), new flash.geom.Point(32, 44), undefined, undefined, true);
            } // end else if
        }
        else if (_root.largeSurfingMounts2[target.mount] == 1)
        {
            target.holderB.copyPixels(_root["b_" + target.mount], new flash.geom.Rectangle((frameX - 12) * 128, frameY * 128, 128, 128), new flash.geom.Point(0, 10), undefined, undefined, true);
        }
        else
        {
            target.holderB.copyPixels(_root["b_" + target.mount], new flash.geom.Rectangle(frameX * 64, frameY * 64 + 12, 64, 64), new flash.geom.Point(32, 44), undefined, undefined, true);
        } // end else if
    } // end else if
    if (target.tail != "")
    {
        if (target.tailFilter != undefined)
        {
            target.colorHolderB.copyPixels(_root["b_" + target.tail + "_Behind"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
            target.colorHolderB.applyFilter(target.colorHolderB, target.colorHolderB.rectangle, new flash.geom.Point(0, 0), target.tailFilter);
            target.holderB.copyPixels(target.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
            target.colorHolderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
        }
        else
        {
            target.holderB.copyPixels(_root["b_" + target.tail + "_Behind"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        } // end if
    } // end else if
    if (target.wings != "")
    {
        if (target.wingsFilter != undefined)
        {
            target.colorHolderB.copyPixels(_root["b_" + target.wings + "_Behind"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
            target.colorHolderB.applyFilter(target.colorHolderB, target.colorHolderB.rectangle, new flash.geom.Point(0, 0), target.wingsFilter);
            target.holderB.copyPixels(target.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
            target.colorHolderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
        }
        else
        {
            target.holderB.copyPixels(_root["b_" + target.wings + "_Behind"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        } // end if
    } // end else if
    if (target.cape != "")
    {
        if (target.capeFilter != undefined)
        {
            if (_root.maleFemaleCapes[target.cape] != 1)
            {
                target.colorHolderB.copyPixels(_root["b_" + target.cape + "_Behind"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
            }
            else if (target.body.indexOf("Male") != -1)
            {
                target.colorHolderB.copyPixels(_root["b_Male " + target.cape + "_Behind"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
            }
            else
            {
                target.colorHolderB.copyPixels(_root["b_Female " + target.cape + "_Behind"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
            } // end else if
            target.colorHolderB.applyFilter(target.colorHolderB, target.colorHolderB.rectangle, new flash.geom.Point(0, 0), target.capeFilter);
            target.holderB.copyPixels(target.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
            target.colorHolderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
        }
        else if (_root.maleFemaleCapes[target.cape] != 1)
        {
            target.holderB.copyPixels(_root["b_" + target.cape + "_Behind"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        }
        else if (target.body.indexOf("Male") != -1)
        {
            target.holderB.copyPixels(_root["b_Male " + target.cape + "_Behind"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        }
        else
        {
            target.holderB.copyPixels(_root["b_Female " + target.cape + "_Behind"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        } // end else if
    } // end else if
    if (target.hat == "Hair Ribbon 2" || target.hat == "Lopunny Ears")
    {
        if (target.hatFilter != undefined)
        {
            target.colorHolderB.copyPixels(_root["b_" + target.hat + "_Behind"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
            target.colorHolderB.applyFilter(target.colorHolderB, target.colorHolderB.rectangle, new flash.geom.Point(0, 0), target.hatFilter);
            target.holderB.copyPixels(target.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
            target.colorHolderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
        }
        else
        {
            target.holderB.copyPixels(_root["b_" + target.hat + "_Behind"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        } // end if
    } // end else if
    if (target.face2 == "Santa Beard")
    {
        if (target.face2Filter != undefined)
        {
            target.colorHolderB.copyPixels(_root["b_" + target.face2 + "_Behind"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
            target.colorHolderB.applyFilter(target.colorHolderB, target.colorHolderB.rectangle, new flash.geom.Point(0, 0), target.face2Filter);
            target.holderB.copyPixels(target.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
            target.colorHolderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
        }
        else
        {
            target.holderB.copyPixels(_root["b_" + target.face2 + "_Behind"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        } // end if
    } // end else if
    if (frameX >= 6 && frameX <= 8)
    {
        target.holderB.copyPixels(_root["b_" + target.mount], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
    } // end if
    if (target.costume == "" || target.costume == "none")
    {
        target.holderB.copyPixels(_root["b_" + target.body], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        if (target.face != "")
        {
            target.holderB.copyPixels(_root["b_" + target.face], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        } // end if
        target.holderB.copyPixels(_root["b_" + target.eyes], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        if (target.eyes != "Both4")
        {
            target.colorHolderB.copyPixels(_root["b_" + target.eyes + "_Color"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
            target.colorHolderB.applyFilter(target.colorHolderB, target.colorHolderB.rectangle, new flash.geom.Point(0, 0), target.eyeFilter);
            target.holderB.copyPixels(target.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
            target.colorHolderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
        } // end if
        target.colorHolderB.copyPixels(_root["b_" + target.pants + "_Pants"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
        target.colorHolderB.applyFilter(target.colorHolderB, target.colorHolderB.rectangle, new flash.geom.Point(0, 0), target.pantsFilter);
        target.holderB.copyPixels(target.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        target.colorHolderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
        target.colorHolderB.copyPixels(_root["b_" + target.shirt + "_Shirt"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
        target.colorHolderB.applyFilter(target.colorHolderB, target.colorHolderB.rectangle, new flash.geom.Point(0, 0), target.shirtFilter);
        target.holderB.copyPixels(target.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        target.colorHolderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
    }
    else if (target.costumeFilter != undefined)
    {
        target.colorHolderB.copyPixels(_root["b_" + target.costume], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
        target.colorHolderB.applyFilter(target.colorHolderB, target.colorHolderB.rectangle, new flash.geom.Point(0, 0), target.costumeFilter);
        target.holderB.copyPixels(target.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        target.colorHolderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
    }
    else
    {
        target.holderB.copyPixels(_root["b_" + target.costume], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
    } // end else if
    if (target.neck != "")
    {
        if (target.neckFilter != undefined)
        {
            target.colorHolderB.copyPixels(_root["b_" + target.neck], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
            target.colorHolderB.applyFilter(target.colorHolderB, target.colorHolderB.rectangle, new flash.geom.Point(0, 0), target.neckFilter);
            target.holderB.copyPixels(target.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
            target.colorHolderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
        }
        else
        {
            target.holderB.copyPixels(_root["b_" + target.neck], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        } // end if
    } // end else if
    if (target.hair != "bald")
    {
        target.colorHolderB.copyPixels(_root["b_" + target.hair + "_Hair"], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
        target.colorHolderB.applyFilter(target.colorHolderB, target.colorHolderB.rectangle, new flash.geom.Point(0, 0), target.hairFilter);
        if (_root.hatsWithMasks2[target.hat] == 1)
        {
            target.holderB.copyPixels(target.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(32, 32), _root["b_" + target.hat + "_Mask"], new flash.geom.Point(frameX * 64, frameY * 64), true);
        }
        else if (_root.hatsHeads2[target.hat] == 1)
        {
        }
        else
        {
            target.holderB.copyPixels(target.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        } // end else if
        target.colorHolderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
    } // end if
    if (target.cape != "")
    {
        if (target.capeFilter != undefined)
        {
            if (_root.maleFemaleCapes[target.cape] != 1)
            {
                target.colorHolderB.copyPixels(_root["b_" + target.cape], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
            }
            else if (target.body.indexOf("Male") != -1)
            {
                target.colorHolderB.copyPixels(_root["b_Male " + target.cape], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
            }
            else
            {
                target.colorHolderB.copyPixels(_root["b_Female " + target.cape], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
            } // end else if
            target.colorHolderB.applyFilter(target.colorHolderB, target.colorHolderB.rectangle, new flash.geom.Point(0, 0), target.capeFilter);
            target.holderB.copyPixels(target.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
            target.colorHolderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
        }
        else if (_root.maleFemaleCapes[target.cape] != 1)
        {
            target.holderB.copyPixels(_root["b_" + target.cape], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        }
        else if (target.body.indexOf("Male") != -1)
        {
            target.holderB.copyPixels(_root["b_Male " + target.cape], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        }
        else
        {
            target.holderB.copyPixels(_root["b_Female " + target.cape], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        } // end else if
    } // end else if
    if (target.wings != "")
    {
        if (target.wingsFilter != undefined)
        {
            target.colorHolderB.copyPixels(_root["b_" + target.wings], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
            target.colorHolderB.applyFilter(target.colorHolderB, target.colorHolderB.rectangle, new flash.geom.Point(0, 0), target.wingsFilter);
            target.holderB.copyPixels(target.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
            target.colorHolderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
        }
        else
        {
            target.holderB.copyPixels(_root["b_" + target.wings], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        } // end if
    } // end else if
    if (target.tail != "")
    {
        if (target.tailFilter != undefined)
        {
            target.colorHolderB.copyPixels(_root["b_" + target.tail], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
            target.colorHolderB.applyFilter(target.colorHolderB, target.colorHolderB.rectangle, new flash.geom.Point(0, 0), target.tailFilter);
            target.holderB.copyPixels(target.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
            target.colorHolderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
        }
        else
        {
            target.holderB.copyPixels(_root["b_" + target.tail], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        } // end if
    } // end else if
    if (target.face2 != "")
    {
        if (target.face2Filter != undefined)
        {
            target.colorHolderB.copyPixels(_root["b_" + target.face2], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
            target.colorHolderB.applyFilter(target.colorHolderB, target.colorHolderB.rectangle, new flash.geom.Point(0, 0), target.face2Filter);
            target.holderB.copyPixels(target.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
            target.colorHolderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
        }
        else
        {
            target.holderB.copyPixels(_root["b_" + target.face2], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        } // end if
    } // end else if
    if (target.hat != "")
    {
        if (target.hatFilter != undefined)
        {
            target.colorHolderB.copyPixels(_root["b_" + target.hat], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(0, 0), undefined, undefined, true);
            target.colorHolderB.applyFilter(target.colorHolderB, target.colorHolderB.rectangle, new flash.geom.Point(0, 0), target.hatFilter);
            target.holderB.copyPixels(target.colorHolderB, new flash.geom.Rectangle(0, 0, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
            target.colorHolderB.fillRect(new flash.geom.Rectangle(0, 0, 64, 64), 0);
        }
        else
        {
            target.holderB.copyPixels(_root["b_" + target.hat], new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        } // end if
    } // end else if
    if (overlayNum == 1)
    {
        if (frameY == 1)
        {
            target.holderB.copyPixels(_root.b_MiningOverlay, new flash.geom.Rectangle(frameX * 64, frameY * 64 + 1, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        }
        else if (frameY == 2)
        {
            target.holderB.copyPixels(_root.b_MiningOverlay, new flash.geom.Rectangle(frameX * 64 - 3, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        }
        else if (frameY == 3)
        {
            target.holderB.copyPixels(_root.b_MiningOverlay, new flash.geom.Rectangle(frameX * 64 + 3, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        }
        else
        {
            target.holderB.copyPixels(_root.b_MiningOverlay, new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
        } // end else if
    }
    else if (frameX >= 9 && frameX <= 13 && _root.landMounts[target.mount] == undefined)
    {
        if (frameX < 12)
        {
            if (_root.smallMountsWithFront2[target.mount] == 1)
            {
                target.holderB.copyPixels(_root["b_" + target.mount + "_Front"], new flash.geom.Rectangle(768, frameY * 64 + 12, 64, 64), new flash.geom.Point(32, 48), undefined, undefined, true);
            }
            else if (_root.largeMountsWithFront2[target.mount] == 1)
            {
                target.holderB.copyPixels(_root["b_" + target.mount + "_Front"], new flash.geom.Rectangle(128, frameY * 128, 128, 128), new flash.geom.Point(0, 10), undefined, undefined, true);
            } // end else if
            if (frameY == 1)
            {
                target.holderB.copyPixels(_root.b_FishingOverlay, new flash.geom.Rectangle(frameX * 64, frameY * 64 + 1, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
            }
            else if (frameY == 2)
            {
                target.holderB.copyPixels(_root.b_FishingOverlay, new flash.geom.Rectangle(frameX * 64 - 3, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
            }
            else if (frameY == 3)
            {
                target.holderB.copyPixels(_root.b_FishingOverlay, new flash.geom.Rectangle(frameX * 64 + 3, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
            }
            else
            {
                target.holderB.copyPixels(_root.b_FishingOverlay, new flash.geom.Rectangle(frameX * 64, frameY * 64, 64, 64), new flash.geom.Point(32, 32), undefined, undefined, true);
            } // end else if
        }
        else if (_root.smallMountsWithFront2[target.mount] == 1)
        {
            target.holderB.copyPixels(_root["b_" + target.mount + "_Front"], new flash.geom.Rectangle(frameX * 64, frameY * 64 + 12, 64, 64), new flash.geom.Point(32, 48), undefined, undefined, true);
        }
        else if (_root.largeMountsWithFront2[target.mount] == 1)
        {
            target.holderB.copyPixels(_root["b_" + target.mount + "_Front"], new flash.geom.Rectangle((frameX - 12) * 128, frameY * 128, 128, 128), new flash.geom.Point(0, 10), undefined, undefined, true);
        } // end else if
    } // end else if
    if (_root.landMounts[target.mount] != undefined)
    {
        target.holderB.copyPixels(_root["b_" + target.mount + "_Front"], new flash.geom.Rectangle((_loc5 - 6) * 128, frameY * 128, 128, 128), new flash.geom.Point(-2, 10), undefined, undefined, true);
    } // end if
} // End of the function
function loadBitmaps()
{
    _root.b_BlackMale = flash.display.BitmapData.loadBitmap("BlackMale");
    _root.b_BrownMale = flash.display.BitmapData.loadBitmap("BrownMale");
    _root.b_WhiteMale = flash.display.BitmapData.loadBitmap("WhiteMale");
    _root.b_PaleMale = flash.display.BitmapData.loadBitmap("PaleMale");
    _root.b_TanMale = flash.display.BitmapData.loadBitmap("TanMale");
    _root.b_YellowMale = flash.display.BitmapData.loadBitmap("YellowMale");
    _root.b_BlackFemale = flash.display.BitmapData.loadBitmap("BlackFemale");
    _root.b_BrownFemale = flash.display.BitmapData.loadBitmap("BrownFemale");
    _root.b_WhiteFemale = flash.display.BitmapData.loadBitmap("WhiteFemale");
    _root.b_PaleFemale = flash.display.BitmapData.loadBitmap("PaleFemale");
    _root.b_TanFemale = flash.display.BitmapData.loadBitmap("TanFemale");
    _root.b_YellowFemale = flash.display.BitmapData.loadBitmap("YellowFemale");
    _root.b_Both1 = flash.display.BitmapData.loadBitmap("Both1");
    _root.b_Both2 = flash.display.BitmapData.loadBitmap("Both2");
    _root.b_Both3 = flash.display.BitmapData.loadBitmap("Both3");
    _root.b_Both4 = flash.display.BitmapData.loadBitmap("Both4");
    _root.b_Both5 = flash.display.BitmapData.loadBitmap("Both5");
    _root.b_Both6 = flash.display.BitmapData.loadBitmap("Both6");
    _root.b_Both7 = flash.display.BitmapData.loadBitmap("Both7");
    _root.b_Female1 = flash.display.BitmapData.loadBitmap("Female1");
    _root.b_Female2 = flash.display.BitmapData.loadBitmap("Female2");
    _root.b_Both1_Color = flash.display.BitmapData.loadBitmap("Both1 Color");
    _root.b_Both2_Color = flash.display.BitmapData.loadBitmap("Both2 Color");
    _root.b_Both3_Color = flash.display.BitmapData.loadBitmap("Both3 Color");
    _root.b_Both4_Color = flash.display.BitmapData.loadBitmap("Both4 Color");
    _root.b_Both5_Color = flash.display.BitmapData.loadBitmap("Both5 Color");
    _root.b_Both6_Color = flash.display.BitmapData.loadBitmap("Both6 Color");
    _root.b_Both7_Color = flash.display.BitmapData.loadBitmap("Both7 Color");
    _root.b_Female1_Color = flash.display.BitmapData.loadBitmap("Female1 Color");
    _root.b_Female2_Color = flash.display.BitmapData.loadBitmap("Female2 Color");
    _root.b_Blush = flash.display.BitmapData.loadBitmap("Blush");
    _root.b_Goatee1 = flash.display.BitmapData.loadBitmap("Goatee1");
    _root.b_Goatee2 = flash.display.BitmapData.loadBitmap("Goatee2");
    _root.b_Female1_Hair = flash.display.BitmapData.loadBitmap("Female1 Hair");
    _root.b_Female2_Hair = flash.display.BitmapData.loadBitmap("Female2 Hair");
    _root.b_Female3_Hair = flash.display.BitmapData.loadBitmap("Female3 Hair");
    _root.b_Female4_Hair = flash.display.BitmapData.loadBitmap("Female4 Hair");
    _root.b_Female5_Hair = flash.display.BitmapData.loadBitmap("Female5 Hair");
    _root.b_Female6_Hair = flash.display.BitmapData.loadBitmap("Female6 Hair");
    _root.b_Female7_Hair = flash.display.BitmapData.loadBitmap("Female7 Hair");
    _root.b_Female8_Hair = flash.display.BitmapData.loadBitmap("Female8 Hair");
    _root.b_Female9_Hair = flash.display.BitmapData.loadBitmap("Female9 Hair");
    _root.b_Female10_Hair = flash.display.BitmapData.loadBitmap("Female10 Hair");
    _root.b_Female11_Hair = flash.display.BitmapData.loadBitmap("Female11 Hair");
    _root.b_Female12_Hair = flash.display.BitmapData.loadBitmap("Female12 Hair");
    _root.b_Female13_Hair = flash.display.BitmapData.loadBitmap("Female13 Hair");
    _root.b_Female14_Hair = flash.display.BitmapData.loadBitmap("Female14 Hair");
    _root.b_Female15_Hair = flash.display.BitmapData.loadBitmap("Female15 Hair");
    _root.b_Female16_Hair = flash.display.BitmapData.loadBitmap("Female16 Hair");
    _root.b_Female17_Hair = flash.display.BitmapData.loadBitmap("Female17 Hair");
    _root.b_Female18_Hair = flash.display.BitmapData.loadBitmap("Female18 Hair");
    _root.b_Female20_Hair = flash.display.BitmapData.loadBitmap("Ponytail2 Hair");
    _root.b_Female21_Hair = flash.display.BitmapData.loadBitmap("Glacia Hair");
    _root.b_Female22_Hair = flash.display.BitmapData.loadBitmap("Messy2 Hair");
    _root.b_Female23_Hair = flash.display.BitmapData.loadBitmap("Liza Hair");
    _root.b_Female24_Hair = flash.display.BitmapData.loadBitmap("Roxanne Hair");
    _root.b_Female25_Hair = flash.display.BitmapData.loadBitmap("Wionna Hair");
    _root.b_Female26_Hair = flash.display.BitmapData.loadBitmap("Medium Straight Bangs");
    _root.b_Male1_Hair = flash.display.BitmapData.loadBitmap("Male1 Hair");
    _root.b_Male2_Hair = flash.display.BitmapData.loadBitmap("Male2 Hair");
    _root.b_Male3_Hair = flash.display.BitmapData.loadBitmap("Male3 Hair");
    _root.b_Male4_Hair = flash.display.BitmapData.loadBitmap("Male4 Hair");
    _root.b_Male5_Hair = flash.display.BitmapData.loadBitmap("Male5 Hair");
    _root.b_Male6_Hair = flash.display.BitmapData.loadBitmap("Male6 Hair");
    _root.b_Male7_Hair = flash.display.BitmapData.loadBitmap("Male7 Hair");
    _root.b_Male8_Hair = flash.display.BitmapData.loadBitmap("Male8 Hair");
    _root.b_Male9_Hair = flash.display.BitmapData.loadBitmap("Male9 Hair");
    _root.b_Male10_Hair = flash.display.BitmapData.loadBitmap("Male10 Hair");
    _root.b_Male11_Hair = flash.display.BitmapData.loadBitmap("Male11 Hair");
    _root.b_Male12_Hair = flash.display.BitmapData.loadBitmap("Male12 Hair");
    _root.b_Male13_Hair = flash.display.BitmapData.loadBitmap("Male13 Hair");
    _root.b_Male14_Hair = flash.display.BitmapData.loadBitmap("Male14 Hair");
    _root.b_Male15_Hair = flash.display.BitmapData.loadBitmap("Male15 Hair");
    _root.b_Male16_Hair = flash.display.BitmapData.loadBitmap("Male16 Hair");
    _root.b_Male17_Hair = flash.display.BitmapData.loadBitmap("Brawly Hair");
    _root.b_Male18_Hair = flash.display.BitmapData.loadBitmap("Fugi Hair");
    _root["b_Aqua Bandana_Mask"] = flash.display.BitmapData.loadBitmap("Aqua Bandana Mask");
    _root["b_Backwards Cap_Mask"] = flash.display.BitmapData.loadBitmap("Backwards Cap Mask");
    _root.b_Default_Mask = flash.display.BitmapData.loadBitmap("Default Mask");
    _root.b_Bandana_Mask = flash.display.BitmapData.loadBitmap("Bandana Mask");
    _root.b_Cap_Mask = flash.display.BitmapData.loadBitmap("Cap Mask");
    _root["b_Cowboy Hat_Mask"] = flash.display.BitmapData.loadBitmap("Cowboy Hat Mask");
    _root.b_Fedora_Mask = flash.display.BitmapData.loadBitmap("Fedora Mask");
    _root["b_Magma Hood_Mask"] = flash.display.BitmapData.loadBitmap("Magma Hood Mask");
    _root["b_Pikachu Hat_Mask"] = flash.display.BitmapData.loadBitmap("Pikachu Hat Mask");
    _root["b_Team Rocket Hat_Mask"] = flash.display.BitmapData.loadBitmap("Team Rocket Hat Mask");
    _root["b_Teddiursa Hat_Mask"] = flash.display.BitmapData.loadBitmap("Teddiursa Hat Mask");
    _root["b_Top Hat_Mask"] = flash.display.BitmapData.loadBitmap("Top Hat Mask");
    _root["b_Ninja Mask_Mask"] = flash.display.BitmapData.loadBitmap("Ninja Mask Mask");
    _root["b_Bug Catcher Hat_Mask"] = flash.display.BitmapData.loadBitmap("Bug Cacher Hat Mask");
    _root["b_Trainer Hat_Mask"] = flash.display.BitmapData.loadBitmap("Trainer Hat Mask");
    _root["b_Santa Hat_Mask"] = flash.display.BitmapData.loadBitmap("Santa Hat Mask");
    _root["b_Elf Hat_Mask"] = flash.display.BitmapData.loadBitmap("Elf Hat Mask");
    _root["b_Foongus Hat_Mask"] = flash.display.BitmapData.loadBitmap("Foongus Hat Mask");
    _root["b_Witch Hat_Mask"] = flash.display.BitmapData.loadBitmap("Witch Hat Mask");
    _root.b_Crown_Mask = flash.display.BitmapData.loadBitmap("Crown Mask");
    _root.b_Snorkel_Mask = flash.display.BitmapData.loadBitmap("Snorkel Mask");
    _root["b_Straw Hat_Mask"] = flash.display.BitmapData.loadBitmap("Straw Hat Mask");
    _root["b_Slowking Crown_Mask"] = flash.display.BitmapData.loadBitmap("Slowking Crown Mask");
    _root.b_Beanie_Mask = flash.display.BitmapData.loadBitmap("Beanie Mask");
    _root["b_Captains Hat_Mask"] = flash.display.BitmapData.loadBitmap("Captains Hat Mask");
    _root["b_Chefs Hat_Mask"] = flash.display.BitmapData.loadBitmap("Chefs Hat Mask");
    _root["b_Honchkrow Hat_Mask"] = flash.display.BitmapData.loadBitmap("Honchkrow Hat Mask");
    _root["b_Mining Helmet_Mask"] = flash.display.BitmapData.loadBitmap("Mining Helmet Mask");
    _root["b_Clay Hat_Mask"] = flash.display.BitmapData.loadBitmap("Clay Hat Mask");
    _root["b_Wallace Hatl_Mask"] = flash.display.BitmapData.loadBitmap("Wallace Hat Mask");
    _root["b_Sailor Hat_Mask"] = flash.display.BitmapData.loadBitmap("Sailor Hat Mask");
    _root["b_Fisherman Hat_Mask"] = flash.display.BitmapData.loadBitmap("Fisherman Hat Mask");
    _root["b_Camper Hat_Mask"] = flash.display.BitmapData.loadBitmap("Camper Hat Mask");
    _root["b_Drake Hat_Mask"] = flash.display.BitmapData.loadBitmap("Drake Hat Mask");
    _root["b_Hard Hat_Mask"] = flash.display.BitmapData.loadBitmap("Hard Hat Mask");
    _root["b_Magikarp Hat_Mask"] = flash.display.BitmapData.loadBitmap("Magikarp Hat Mask");
    _root["b_Military Hat_Mask"] = flash.display.BitmapData.loadBitmap("Military Hat Mask");
    _root["b_Police Hat_Mask"] = flash.display.BitmapData.loadBitmap("Police Hat Mask");
    _root["b_Rainbow Hat_Mask"] = flash.display.BitmapData.loadBitmap("Rainbow Hat Mask");
    _root["b_White Beanie_Mask"] = flash.display.BitmapData.loadBitmap("White Beanie Mask");
    _root["b_Backwards Cap"] = flash.display.BitmapData.loadBitmap("Backwards Cap");
    _root["b_Bandana 2"] = flash.display.BitmapData.loadBitmap("Bandana 2");
    _root.b_Bandana = flash.display.BitmapData.loadBitmap("Bandana");
    _root["b_Bunny Ears"] = flash.display.BitmapData.loadBitmap("Bunny Ears");
    _root.b_Cap = flash.display.BitmapData.loadBitmap("Cap");
    _root["b_Chinchou Antennae"] = flash.display.BitmapData.loadBitmap("Chinchou Antennae");
    _root["b_Cowboy Hat"] = flash.display.BitmapData.loadBitmap("Cowboy Hat");
    _root.b_Fedora = flash.display.BitmapData.loadBitmap("Fedora");
    _root.b_Halo = flash.display.BitmapData.loadBitmap("Halo");
    _root["b_Panda Head"] = flash.display.BitmapData.loadBitmap("Panda Head");
    _root["b_Pikachu Hat"] = flash.display.BitmapData.loadBitmap("Pikachu Hat");
    _root["b_Pumpkin Head"] = flash.display.BitmapData.loadBitmap("Pumpkin Head");
    _root["b_Hair Ribbon"] = flash.display.BitmapData.loadBitmap("Hair Ribbon");
    _root["b_Hair Ribbon 2"] = flash.display.BitmapData.loadBitmap("Hair Ribbon 2");
    _root.b_Sunglasses = flash.display.BitmapData.loadBitmap("Sunglasses");
    _root["b_Aqua Bandana"] = flash.display.BitmapData.loadBitmap("Aqua Bandana");
    _root["b_Magma Hood"] = flash.display.BitmapData.loadBitmap("Magma Hood");
    _root["b_Team Rocket Hat"] = flash.display.BitmapData.loadBitmap("Team Rocket Hat");
    _root["b_Teddiursa Hat"] = flash.display.BitmapData.loadBitmap("Teddiursa Hat");
    _root["b_Top Hat"] = flash.display.BitmapData.loadBitmap("Top Hat");
    _root["b_Ninja Mask"] = flash.display.BitmapData.loadBitmap("Ninja Mask");
    _root["b_Bug Catcher Hat"] = flash.display.BitmapData.loadBitmap("Bug Catcher Hat");
    _root["b_Cubone Mask"] = flash.display.BitmapData.loadBitmap("Cubone Mask");
    _root["b_Charizard Mask"] = flash.display.BitmapData.loadBitmap("Charizard Mask");
    _root["b_Trainer Hat"] = flash.display.BitmapData.loadBitmap("Trainer Hat");
    _root["b_Santa Hat"] = flash.display.BitmapData.loadBitmap("Santa Hat");
    _root["b_Elf Hat"] = flash.display.BitmapData.loadBitmap("Elf Hat");
    _root["b_Duskull Mask"] = flash.display.BitmapData.loadBitmap("Duskull Mask");
    _root["b_Rems Ribbon"] = flash.display.BitmapData.loadBitmap("Rems Ribbon");
    _root["b_Rams Ribbon"] = flash.display.BitmapData.loadBitmap("Rams Ribbon");
    _root["b_Delibird Mask"] = flash.display.BitmapData.loadBitmap("Delibird Mask");
    _root["b_Mew Mask"] = flash.display.BitmapData.loadBitmap("Mew Mask");
    _root["b_Mewtwo Mask"] = flash.display.BitmapData.loadBitmap("Mewtwo Mask");
    _root["b_White Fox Mask"] = flash.display.BitmapData.loadBitmap("White Fox Mask");
    _root["b_Black Fox Mask"] = flash.display.BitmapData.loadBitmap("Black Fox Mask");
    _root["b_Aviator Sunglasses"] = flash.display.BitmapData.loadBitmap("Aviator Sunglasses");
    _root["b_Foongus Hat"] = flash.display.BitmapData.loadBitmap("Foongus Hat");
    _root["b_Guy Fawkes Mask"] = flash.display.BitmapData.loadBitmap("Guy Fawkes Mask");
    _root["b_Skeleton Mask"] = flash.display.BitmapData.loadBitmap("Skeleton Mask");
    _root["b_Witch Hat"] = flash.display.BitmapData.loadBitmap("Witch Hat");
    _root.b_Antlers = flash.display.BitmapData.loadBitmap("Antlers");
    _root["b_Red Nose"] = flash.display.BitmapData.loadBitmap("Red Nose");
    _root.b_Crown = flash.display.BitmapData.loadBitmap("Crown");
    _root["b_Bunnelby Ears"] = flash.display.BitmapData.loadBitmap("Bunnelby Ears");
    _root["b_Diggersby Ears"] = flash.display.BitmapData.loadBitmap("Diggersby Ears");
    _root["b_Litten Ears"] = flash.display.BitmapData.loadBitmap("Litten Ears");
    _root["b_Skitty Ears"] = flash.display.BitmapData.loadBitmap("Skitty Ears");
    _root.b_Snorkel = flash.display.BitmapData.loadBitmap("Snorkel");
    _root["b_Totem Mask"] = flash.display.BitmapData.loadBitmap("Totem Mask");
    _root["b_Houndoom Horns"] = flash.display.BitmapData.loadBitmap("Houndoom Horns");
    _root["b_Milo Mask"] = flash.display.BitmapData.loadBitmap("Milo Mask");
    _root["b_Frosty Head"] = flash.display.BitmapData.loadBitmap("Frosty Head");
    _root["b_Pichu Ears"] = flash.display.BitmapData.loadBitmap("Pichu Ears");
    _root["b_Straw Hat"] = flash.display.BitmapData.loadBitmap("Straw Hat");
    _root["b_Starly Mask"] = flash.display.BitmapData.loadBitmap("Starly Mask");
    _root.b_Beanie = flash.display.BitmapData.loadBitmap("Beanie");
    _root["b_Hipster Glasses"] = flash.display.BitmapData.loadBitmap("Hipster Glasses");
    _root["b_Slowking Crown"] = flash.display.BitmapData.loadBitmap("Slowking Crown");
    _root["b_Space Helmet"] = flash.display.BitmapData.loadBitmap("Space Helmet");
    _root["b_Captains Hat"] = flash.display.BitmapData.loadBitmap("Captains Hat");
    _root.b_Headphones = flash.display.BitmapData.loadBitmap("Headphones");
    _root.b_Headband = flash.display.BitmapData.loadBitmap("Headband");
    _root["b_Slowpoke Mask"] = flash.display.BitmapData.loadBitmap("Slowpoke Mask");
    _root["b_Neko Headphones"] = flash.display.BitmapData.loadBitmap("Neko Headphones");
    _root["b_Marshmallow Head"] = flash.display.BitmapData.loadBitmap("Marshmallow Head");
    _root["b_Shark Head"] = flash.display.BitmapData.loadBitmap("Shark Head");
    _root["b_Hooded Mask"] = flash.display.BitmapData.loadBitmap("Hooded Mask");
    _root["b_Lickitung Mask"] = flash.display.BitmapData.loadBitmap("Lickitung Mask");
    _root["b_Lion Mask"] = flash.display.BitmapData.loadBitmap("Lion Mask");
    _root["b_Anubis Mask"] = flash.display.BitmapData.loadBitmap("Anubis Mask");
    _root["b_Evil Bear Mask"] = flash.display.BitmapData.loadBitmap("Evil Bear Mask");
    _root["b_Motorcycle Helmet"] = flash.display.BitmapData.loadBitmap("Motorcycle Helmet");
    _root["b_Birthday Hat"] = flash.display.BitmapData.loadBitmap("Birthday Hat");
    _root["b_Hamburger Head"] = flash.display.BitmapData.loadBitmap("Hamburger Head");
    _root["b_Clefairy Mask"] = flash.display.BitmapData.loadBitmap("Clefairy Mask");
    _root["b_Party Hat"] = flash.display.BitmapData.loadBitmap("Party Hat");
    _root["b_Drake Hat"] = flash.display.BitmapData.loadBitmap("Drake Hat");
    _root["b_Hard Hat"] = flash.display.BitmapData.loadBitmap("Hard Hat");
    _root["b_Magikarp Hat"] = flash.display.BitmapData.loadBitmap("Magikarp Hat");
    _root["b_Military Hat"] = flash.display.BitmapData.loadBitmap("Military Hat");
    _root["b_Nurse Hat"] = flash.display.BitmapData.loadBitmap("Nurse Hat");
    _root["b_Police Hat"] = flash.display.BitmapData.loadBitmap("Police Hat");
    _root["b_Rainbow Hat"] = flash.display.BitmapData.loadBitmap("Rainbow Hat");
    _root["b_Unicorn Mask"] = flash.display.BitmapData.loadBitmap("Unicorn Mask");
    _root["b_White Beanie"] = flash.display.BitmapData.loadBitmap("White Beanie");
    _root["b_Umbreon Ears"] = flash.display.BitmapData.loadBitmap("Umbreon Ears");
    _root["b_Clefable Ears"] = flash.display.BitmapData.loadBitmap("Clefable Ears");
    _root["b_Eevee Ears"] = flash.display.BitmapData.loadBitmap("Eevee Ears");
    _root["b_Fennekin Ears"] = flash.display.BitmapData.loadBitmap("Fennekin Ears");
    _root["b_Noibat Ears"] = flash.display.BitmapData.loadBitmap("Noibat Ears");
    _root["b_Omanyte Beard"] = flash.display.BitmapData.loadBitmap("Omanyte Beard");
    _root["b_Santa Beard"] = flash.display.BitmapData.loadBitmap("Santa Beard");
    _root["b_Santa Beard_Behind"] = flash.display.BitmapData.loadBitmap("Santa Beard Behind");
    _root["b_Pinsir Horns"] = flash.display.BitmapData.loadBitmap("Pinsir Horns");
    _root["b_Valentines Tophat"] = flash.display.BitmapData.loadBitmap("Valentines Tophat");
    _root.b_Tiara = flash.display.BitmapData.loadBitmap("Tiara");
    _root["b_Chefs Hat"] = flash.display.BitmapData.loadBitmap("Chefs Hat");
    _root["b_Rainbow Flag"] = flash.display.BitmapData.loadBitmap("Rainbow Flag");
    _root["b_Froakie Hat"] = flash.display.BitmapData.loadBitmap("Froakie Hat");
    _root["b_Honchkrow Hat"] = flash.display.BitmapData.loadBitmap("Honchkrow Hat");
    _root["b_Kings Rock Crown"] = flash.display.BitmapData.loadBitmap("Kings Rock Crown");
    _root["b_Mining Helmet"] = flash.display.BitmapData.loadBitmap("Mining Helmet");
    _root["b_Snowboard Mask"] = flash.display.BitmapData.loadBitmap("Snowboard Mask");
    _root["b_Clay Hat"] = flash.display.BitmapData.loadBitmap("Clay Hat");
    _root["b_Wallace Hat"] = flash.display.BitmapData.loadBitmap("Wallace Hat");
    _root["b_Sailor Hat"] = flash.display.BitmapData.loadBitmap("Sailor Hat");
    _root["b_Fisherman Hat"] = flash.display.BitmapData.loadBitmap("Fisherman Hat");
    _root["b_Camper Hat"] = flash.display.BitmapData.loadBitmap("Camper Hat");
    _root["b_Paper Bag Mask"] = flash.display.BitmapData.loadBitmap("Paper Bag Mask");
    _root["b_Googly Eye Glasses"] = flash.display.BitmapData.loadBitmap("Googly Eye Glasses");
    _root["b_Pig Nose"] = flash.display.BitmapData.loadBitmap("Pig Nose");
    _root["b_Squirtle Glasses"] = flash.display.BitmapData.loadBitmap("Squirtle Glasses");
    _root["b_Money Glasses"] = flash.display.BitmapData.loadBitmap("Money Glasses");
    _root["b_Heart Glasses"] = flash.display.BitmapData.loadBitmap("Heart Glasses");
    _root["b_Plague Doctor Mask"] = flash.display.BitmapData.loadBitmap("Plague Doctor Mask");
    _root["b_Hair Ribbon 2_Behind"] = flash.display.BitmapData.loadBitmap("Hair Ribbon 2 Behind");
    _root.b_Female1_Pants = flash.display.BitmapData.loadBitmap("Female1 Pants");
    _root.b_Female2_Pants = flash.display.BitmapData.loadBitmap("Female2 Pants");
    _root.b_Female3_Pants = flash.display.BitmapData.loadBitmap("Female3 Pants");
    _root.b_Female4_Pants = flash.display.BitmapData.loadBitmap("Female4 Pants");
    _root.b_Male1_Pants = flash.display.BitmapData.loadBitmap("Male1 Pants");
    _root.b_Male2_Pants = flash.display.BitmapData.loadBitmap("Male2 Pants");
    _root.b_Male3_Pants = flash.display.BitmapData.loadBitmap("Male3 Pants");
    _root["b_Male Trainer_Pants"] = flash.display.BitmapData.loadBitmap("Male Trainer Pants");
    _root["b_Female Trainer_Pants"] = flash.display.BitmapData.loadBitmap("Female Trainer Pants");
    _root.b_Female1_Shirt = flash.display.BitmapData.loadBitmap("Female1 Shirt");
    _root.b_Female2_Shirt = flash.display.BitmapData.loadBitmap("Female2 Shirt");
    _root.b_Female3_Shirt = flash.display.BitmapData.loadBitmap("Female3 Shirt");
    _root.b_Male1_Shirt = flash.display.BitmapData.loadBitmap("Male1 Shirt");
    _root.b_Male2_Shirt = flash.display.BitmapData.loadBitmap("Male2 Shirt");
    _root.b_Male3_Shirt = flash.display.BitmapData.loadBitmap("Male3 Shirt");
    _root["b_Male Trainer_Shirt"] = flash.display.BitmapData.loadBitmap("Male Trainer Shirt");
    _root["b_Female Trainer_Shirt"] = flash.display.BitmapData.loadBitmap("Female Trainer Shirt");
    _root["b_Ampharos Tail"] = flash.display.BitmapData.loadBitmap("Ampharos Tail");
    _root["b_Marill Tail"] = flash.display.BitmapData.loadBitmap("Marill Tail");
    _root["b_Mew Tail"] = flash.display.BitmapData.loadBitmap("Mew Tail");
    _root["b_Pikachu Tail"] = flash.display.BitmapData.loadBitmap("Pikachu Tail");
    _root["b_Bunny Tail"] = flash.display.BitmapData.loadBitmap("Bunny Tail");
    _root["b_Ampharos Tail_Behind"] = flash.display.BitmapData.loadBitmap("Ampharos Tail Behind");
    _root["b_Marill Tail_Behind"] = flash.display.BitmapData.loadBitmap("Marill Tail Behind");
    _root["b_Mew Tail_Behind"] = flash.display.BitmapData.loadBitmap("Mew Tail Behind");
    _root["b_Pikachu Tail_Behind"] = flash.display.BitmapData.loadBitmap("Pikachu Tail Behind");
    _root["b_Bunny Tail_Behind"] = flash.display.BitmapData.loadBitmap("Bunny Tail Behind");
    _root["b_Aerodactyl Wings"] = flash.display.BitmapData.loadBitmap("Aerodactyl Wings");
    _root["b_Angel Wings"] = flash.display.BitmapData.loadBitmap("Angel Wings");
    _root["b_Articuno Wings"] = flash.display.BitmapData.loadBitmap("Articuno Wings");
    _root["b_Female Backpack"] = flash.display.BitmapData.loadBitmap("Female Backpack");
    _root["b_Male Backpack"] = flash.display.BitmapData.loadBitmap("Male Backpack");
    _root["b_Beautifly Wings"] = flash.display.BitmapData.loadBitmap("Beautifly Wings");
    _root["b_Butterfree Wings"] = flash.display.BitmapData.loadBitmap("Butterfree Wings");
    _root["b_Charizard Wings"] = flash.display.BitmapData.loadBitmap("Charizard Wings");
    _root["b_Charizard X Wings"] = flash.display.BitmapData.loadBitmap("Charizard X Wings");
    _root["b_Charizard Y Wings"] = flash.display.BitmapData.loadBitmap("Charizard Y Wings");
    _root["b_Crobat Wings"] = flash.display.BitmapData.loadBitmap("Crobat Wings");
    _root["b_Devil Wings"] = flash.display.BitmapData.loadBitmap("Devil Wings");
    _root["b_Dragonite Wings"] = flash.display.BitmapData.loadBitmap("Dragonite Wings");
    _root["b_Ho-Oh Wings"] = flash.display.BitmapData.loadBitmap("Ho-Oh Wings");
    _root["b_Lugia Wings"] = flash.display.BitmapData.loadBitmap("Lugia Wings");
    _root["b_Masquerain Wings"] = flash.display.BitmapData.loadBitmap("Masquerain Wings");
    _root["b_Mega Pinsir Wings"] = flash.display.BitmapData.loadBitmap("Mega Pinsir Wings");
    _root["b_Moltres Wings"] = flash.display.BitmapData.loadBitmap("Moltres Wings");
    _root["b_Ninjask Wings"] = flash.display.BitmapData.loadBitmap("Ninjask Wings");
    _root["b_Salamence Wings"] = flash.display.BitmapData.loadBitmap("Salamence Wings");
    _root["b_Skarmory Wings"] = flash.display.BitmapData.loadBitmap("Skarmory Wings");
    _root["b_Yanma Wings"] = flash.display.BitmapData.loadBitmap("Yanma Wings");
    _root["b_Zapdos Wings"] = flash.display.BitmapData.loadBitmap("Zapdos Wings");
    _root["b_Zubat Wings"] = flash.display.BitmapData.loadBitmap("Zubat Wings");
    _root["b_Inner Tube"] = flash.display.BitmapData.loadBitmap("Inner Tube");
    _root["b_Giratina Wings"] = flash.display.BitmapData.loadBitmap("Giratina Wings");
    _root["b_Male Starmie Backpack"] = flash.display.BitmapData.loadBitmap("Male Starmie Backpack");
    _root["b_Female Starmie Backpack"] = flash.display.BitmapData.loadBitmap("Female Starmie Backpack");
    _root["b_Male Halloween Starmie Backpack"] = flash.display.BitmapData.loadBitmap("Male Halloween Starmie Backpack");
    _root["b_Female Halloween Starmie Backpack"] = flash.display.BitmapData.loadBitmap("Female Halloween Starmie Backpack");
    _root["b_Scarlet Wings"] = flash.display.BitmapData.loadBitmap("Scarlet Wings");
    _root.b_Balloon = flash.display.BitmapData.loadBitmap("Balloon");
    _root["b_Flygon Wings"] = flash.display.BitmapData.loadBitmap("Flygon Wings");
    _root.b_Jetpack = flash.display.BitmapData.loadBitmap("Jetpack");
    _root["b_Togekiss Wings"] = flash.display.BitmapData.loadBitmap("Togekiss Wings");
    _root["b_Cofagrigus Arms"] = flash.display.BitmapData.loadBitmap("Cofagrigus Arms");
    _root["b_Honchkrow Wings"] = flash.display.BitmapData.loadBitmap("Honchkrow Wings");
    _root["b_Latias Wings"] = flash.display.BitmapData.loadBitmap("Latias Wings");
    _root["b_Latios Wings"] = flash.display.BitmapData.loadBitmap("Latios Wings");
    _root["b_Tropius Wings"] = flash.display.BitmapData.loadBitmap("Tropius Wings");
    _root["b_Heart Backpack"] = flash.display.BitmapData.loadBitmap("Heart Backpack");
    _root["b_Blue Egg Backpack"] = flash.display.BitmapData.loadBitmap("Blue Egg Backpack");
    _root["b_Pink Egg Backpack"] = flash.display.BitmapData.loadBitmap("Pink Egg Backpack");
    _root["b_Aerodactyl Wings_Behind"] = flash.display.BitmapData.loadBitmap("Aerodactyl Wings Behind");
    _root["b_Angel Wings_Behind"] = flash.display.BitmapData.loadBitmap("Angel Wings Behind");
    _root["b_Articuno Wings_Behind"] = flash.display.BitmapData.loadBitmap("Articuno Wings Behind");
    _root["b_Female Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Female Backpack Behind");
    _root["b_Male Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Male Backpack Behind");
    _root["b_Beautifly Wings_Behind"] = flash.display.BitmapData.loadBitmap("Beautifly Wings Behind");
    _root["b_Butterfree Wings_Behind"] = flash.display.BitmapData.loadBitmap("Butterfree Wings Behind");
    _root["b_Charizard Wings_Behind"] = flash.display.BitmapData.loadBitmap("Charizard Wings Behind");
    _root["b_Charizard X Wings_Behind"] = flash.display.BitmapData.loadBitmap("Charizard X Wings Behind");
    _root["b_Charizard Y Wings_Behind"] = flash.display.BitmapData.loadBitmap("Charizard Y Wings Behind");
    _root["b_Crobat Wings_Behind"] = flash.display.BitmapData.loadBitmap("Crobat Wings Behind");
    _root["b_Devil Wings_Behind"] = flash.display.BitmapData.loadBitmap("Devil Wings Behind");
    _root["b_Dragonite Wings_Behind"] = flash.display.BitmapData.loadBitmap("Dragonite Wings Behind");
    _root["b_Ho-Oh Wings_Behind"] = flash.display.BitmapData.loadBitmap("Ho-Oh Wings Behind");
    _root["b_Lugia Wings_Behind"] = flash.display.BitmapData.loadBitmap("Lugia Wings Behind");
    _root["b_Masquerain Wings_Behind"] = flash.display.BitmapData.loadBitmap("Masquerain Wings Behind");
    _root["b_Mega Pinsir Wings_Behind"] = flash.display.BitmapData.loadBitmap("Mega Pinsir Wings Behind");
    _root["b_Moltres Wings_Behind"] = flash.display.BitmapData.loadBitmap("Moltres Wings Behind");
    _root["b_Ninjask Wings_Behind"] = flash.display.BitmapData.loadBitmap("Ninjask Wings Behind");
    _root["b_Salamence Wings_Behind"] = flash.display.BitmapData.loadBitmap("Salamence Wings Behind");
    _root["b_Skarmory Wings_Behind"] = flash.display.BitmapData.loadBitmap("Skarmory Wings Behind");
    _root["b_Yanma Wings_Behind"] = flash.display.BitmapData.loadBitmap("Yanma Wings Behind");
    _root["b_Zapdos Wings_Behind"] = flash.display.BitmapData.loadBitmap("Zapdos Wings Behind");
    _root["b_Zubat Wings_Behind"] = flash.display.BitmapData.loadBitmap("Zubat Wings Behind");
    _root["b_Inner Tube_Behind"] = flash.display.BitmapData.loadBitmap("Inner Tube Behind");
    _root["b_Giratina Wings_Behind"] = flash.display.BitmapData.loadBitmap("Giratina Wings Behind");
    _root["b_Male Starmie Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Starmie Backpack Behind");
    _root["b_Female Starmie Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Starmie Backpack Behind");
    _root["b_Male Halloween Starmie Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Halloween Starmie Backpack Behind");
    _root["b_Female Halloween Starmie Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Halloween Starmie Backpack Behind");
    _root["b_Scarlet Wings_Behind"] = flash.display.BitmapData.loadBitmap("Scarlet Wings Behind");
    _root.b_Balloon_Behind = flash.display.BitmapData.loadBitmap("Balloon Behind");
    _root["b_Flygon Wings_Behind"] = flash.display.BitmapData.loadBitmap("Flygon Wings Behind");
    _root.b_Jetpack_Behind = flash.display.BitmapData.loadBitmap("Jetpack Behind");
    _root["b_Togekiss Wings_Behind"] = flash.display.BitmapData.loadBitmap("Togekiss Wings Behind");
    _root["b_Cofagrigus Arms_Behind"] = flash.display.BitmapData.loadBitmap("Cofagrigus Arms Behind");
    _root["b_Honchkrow Wings_Behind"] = flash.display.BitmapData.loadBitmap("Honchkrow Wings Behind");
    _root["b_Latias Wings_Behind"] = flash.display.BitmapData.loadBitmap("Latias Wings Behind");
    _root["b_Latios Wings_Behind"] = flash.display.BitmapData.loadBitmap("Latios Wings Behind");
    _root["b_Tropius Wings_Behind"] = flash.display.BitmapData.loadBitmap("Tropius Wings Behind");
    _root["b_Blue Egg Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Blue Egg Backpack Behind");
    _root["b_Pink Egg Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Pink Egg Backpack Behind");
    _root["b_Master Cape"] = flash.display.BitmapData.loadBitmap("Master Cape");
    _root["b_Gold Cape"] = flash.display.BitmapData.loadBitmap("Gold Cape");
    _root["b_Koga Cape"] = flash.display.BitmapData.loadBitmap("Koga Cape");
    _root["b_Lance Cape"] = flash.display.BitmapData.loadBitmap("Lance Cape");
    _root["b_Dracula Cloak"] = flash.display.BitmapData.loadBitmap("Dracula Cloak");
    _root["b_Master Cape_Behind"] = flash.display.BitmapData.loadBitmap("Master Cape Behind");
    _root["b_Gold Cape_Behind"] = flash.display.BitmapData.loadBitmap("Gold Cape Behind");
    _root["b_Koga Cape_Behind"] = flash.display.BitmapData.loadBitmap("Koga Cape Behind");
    _root["b_Lance Cape_Behind"] = flash.display.BitmapData.loadBitmap("Lance Cape Behind");
    _root["b_Dracula Cloak_Behind"] = flash.display.BitmapData.loadBitmap("Dracula Cloak Behind");
    _root.b_MiningOverlay = flash.display.BitmapData.loadBitmap("Mining Overlay");
    _root.b_FishingOverlay = flash.display.BitmapData.loadBitmap("Fishing Overlay");
    _root["b_Christmas Scarf"] = flash.display.BitmapData.loadBitmap("Christmas Scarf");
    _root.b_Bike = flash.display.BitmapData.loadBitmap("Bike");
    _root["b_Bike (Black)"] = flash.display.BitmapData.loadBitmap("Bike (Black)");
    _root["b_Bike (Cyan)"] = flash.display.BitmapData.loadBitmap("Bike (Cyan)");
    _root["b_Bike (Green)"] = flash.display.BitmapData.loadBitmap("Bike (Green)");
    _root["b_Bike (Orange)"] = flash.display.BitmapData.loadBitmap("Bike (Orange)");
    _root["b_Bike (Pink)"] = flash.display.BitmapData.loadBitmap("Bike (Pink)");
    _root["b_Bike (Purple)"] = flash.display.BitmapData.loadBitmap("Bike (Purple)");
    _root["b_Bike (Red)"] = flash.display.BitmapData.loadBitmap("Bike (Red)");
    _root["b_Bike (White)"] = flash.display.BitmapData.loadBitmap("Bike (White)");
    _root["b_Bike (Yellow)"] = flash.display.BitmapData.loadBitmap("Bike (Yellow)");
    _root.b_Motorcycle = flash.display.BitmapData.loadBitmap("Motorcycle");
    _root["b_Dirt Bike"] = flash.display.BitmapData.loadBitmap("Dirt Bike");
    _root["b_Sports Bike"] = flash.display.BitmapData.loadBitmap("Sports Bike");
    _root["b_Arcanine Mount"] = flash.display.BitmapData.loadBitmap("Arcanine Mount");
    _root["b_Glaceon Mount"] = flash.display.BitmapData.loadBitmap("Glaceon Mount");
    _root["b_Houndoom Mount"] = flash.display.BitmapData.loadBitmap("Houndoom Mount");
    _root["b_Keldeo Mount"] = flash.display.BitmapData.loadBitmap("Keldeo Mount");
    _root["b_Manectric Mount"] = flash.display.BitmapData.loadBitmap("Manectric Mount");
    _root["b_Stantler Mount"] = flash.display.BitmapData.loadBitmap("Stantler Mount");
    _root["b_Absol Mount"] = flash.display.BitmapData.loadBitmap("Absol Mount");
    _root["b_Bidoof Mount"] = flash.display.BitmapData.loadBitmap("Bidoof Mount");
    _root["b_Dodrio Mount"] = flash.display.BitmapData.loadBitmap("Dodrio Mount");
    _root["b_Mechadoof Mount"] = flash.display.BitmapData.loadBitmap("Mechadoof Mount");
    _root["b_Shaymin Mount"] = flash.display.BitmapData.loadBitmap("Shaymin Mount");
    _root["b_Umbreon Mount"] = flash.display.BitmapData.loadBitmap("Umbreon Mount");
    _root["b_Flygon Mount"] = flash.display.BitmapData.loadBitmap("Flygon Mount");
    _root["b_Togekiss Mount"] = flash.display.BitmapData.loadBitmap("Togekiss Mount");
    _root["b_Cresselia Mount"] = flash.display.BitmapData.loadBitmap("Cresselia Mount");
    _root["b_Lugia Mount"] = flash.display.BitmapData.loadBitmap("Lugia Mount");
    _root["b_Reshiram Mount"] = flash.display.BitmapData.loadBitmap("Reshiram Mount");
    _root["b_Shiny Arcanine Mount"] = flash.display.BitmapData.loadBitmap("Shiny Arcanine Mount");
    _root["b_Shiny Glaceon Mount"] = flash.display.BitmapData.loadBitmap("Shiny Glaceon Mount");
    _root["b_Shiny Houndoom Mount"] = flash.display.BitmapData.loadBitmap("Shiny Houndoom Mount");
    _root["b_Shiny Keldeo Mount"] = flash.display.BitmapData.loadBitmap("Shiny Keldeo Mount");
    _root["b_Shiny Manectric Mount"] = flash.display.BitmapData.loadBitmap("Shiny Manectric Mount");
    _root["b_Shiny Stantler Mount"] = flash.display.BitmapData.loadBitmap("Shiny Stantler Mount");
    _root["b_Shiny Absol Mount"] = flash.display.BitmapData.loadBitmap("Shiny Absol Mount");
    _root["b_Shiny Bidoof Mount"] = flash.display.BitmapData.loadBitmap("Shiny Bidoof Mount");
    _root["b_Shiny Dodrio Mount"] = flash.display.BitmapData.loadBitmap("Shiny Dodrio Mount");
    _root["b_Shiny Shaymin Mount"] = flash.display.BitmapData.loadBitmap("Shiny Shaymin Mount");
    _root["b_Shiny Umbreon Mount"] = flash.display.BitmapData.loadBitmap("Shiny Umbreon Mount");
    _root["b_Shiny Flygon Mount"] = flash.display.BitmapData.loadBitmap("Shiny Flygon Mount");
    _root["b_Shiny Togekiss Mount"] = flash.display.BitmapData.loadBitmap("Shiny Togekiss Mount");
    _root["b_Shiny Cresselia Mount"] = flash.display.BitmapData.loadBitmap("Shiny Cresselia Mount");
    _root["b_Shiny Lugia Mount"] = flash.display.BitmapData.loadBitmap("Shiny Lugia Mount");
    _root["b_Shiny Reshiram Mount"] = flash.display.BitmapData.loadBitmap("Shiny Reshiram Mount");
    _root.b_surf = flash.display.BitmapData.loadBitmap("surf");
    _root["b_Wailmer Mount"] = flash.display.BitmapData.loadBitmap("Wailmer Mount");
    _root["b_Shellder Mount"] = flash.display.BitmapData.loadBitmap("Shellder Mount");
    _root["b_The Golden Savior Mount"] = flash.display.BitmapData.loadBitmap("The Golden Savior Mount");
    _root["b_Kyogre Mount"] = flash.display.BitmapData.loadBitmap("Kyogre Mount");
    _root["b_Spheal Mount"] = flash.display.BitmapData.loadBitmap("Spheal Mount");
    _root["b_Swanna Mount"] = flash.display.BitmapData.loadBitmap("Swanna Mount");
    _root["b_Tentacruel Mount"] = flash.display.BitmapData.loadBitmap("Tentacruel Mount");
    _root["b_Tirtouga Mount"] = flash.display.BitmapData.loadBitmap("Tirtouga Mount");
    _root["b_Whiscash Mount"] = flash.display.BitmapData.loadBitmap("Whiscash Mount");
    _root["b_Crawdaunt Mount"] = flash.display.BitmapData.loadBitmap("Crawdaunt Mount");
    _root["b_Lapras Mount"] = flash.display.BitmapData.loadBitmap("Lapras Mount");
    _root["b_Mantine Mount"] = flash.display.BitmapData.loadBitmap("Mantine Mount");
    _root["b_Pelipper Mount"] = flash.display.BitmapData.loadBitmap("Pelipper Mount");
    _root["b_Sharpedo Mount"] = flash.display.BitmapData.loadBitmap("Sharpedo Mount");
    _root["b_Milotic Mount"] = flash.display.BitmapData.loadBitmap("Milotic Mount");
    _root["b_Starmie Mount"] = flash.display.BitmapData.loadBitmap("Starmie Mount");
    _root["b_Snorlax Mount"] = flash.display.BitmapData.loadBitmap("Snorlax Mount");
    _root["b_Manaphy Mount"] = flash.display.BitmapData.loadBitmap("Manaphy Mount");
    _root["b_Vaporeon Mount"] = flash.display.BitmapData.loadBitmap("Vaporeon Mount");
    _root["b_Froakie Mount"] = flash.display.BitmapData.loadBitmap("Froakie Mount");
    _root["b_Pirate Ship Mount"] = flash.display.BitmapData.loadBitmap("Pirate Ship Mount");
    _root["b_Rubber Duck Mount"] = flash.display.BitmapData.loadBitmap("Rubber Duck Mount");
    _root.b_surf = flash.display.BitmapData.loadBitmap("surf");
    _root["b_Shiny Wailmer Mount"] = flash.display.BitmapData.loadBitmap("Shiny Wailmer Mount");
    _root["b_Shiny Shellder Mount"] = flash.display.BitmapData.loadBitmap("Shiny Shellder Mount");
    _root["b_Shiny Kyogre Mount"] = flash.display.BitmapData.loadBitmap("Shiny Kyogre Mount");
    _root["b_Shiny Spheal Mount"] = flash.display.BitmapData.loadBitmap("Shiny Spheal Mount");
    _root["b_Shiny Swanna Mount"] = flash.display.BitmapData.loadBitmap("Shiny Swanna Mount");
    _root["b_Shiny Tentacruel Mount"] = flash.display.BitmapData.loadBitmap("Shiny Tentacruel Mount");
    _root["b_Shiny Tirtouga Mount"] = flash.display.BitmapData.loadBitmap("Shiny Tirtouga Mount");
    _root["b_Shiny Whiscash Mount"] = flash.display.BitmapData.loadBitmap("Shiny Whiscash Mount");
    _root["b_Shiny Crawdaunt Mount"] = flash.display.BitmapData.loadBitmap("Shiny Crawdaunt Mount");
    _root["b_Shiny Lapras Mount"] = flash.display.BitmapData.loadBitmap("Shiny Lapras Mount");
    _root["b_Shiny Mantine Mount"] = flash.display.BitmapData.loadBitmap("Shiny Mantine Mount");
    _root["b_Shiny Pelipper Mount"] = flash.display.BitmapData.loadBitmap("Shiny Pelipper Mount");
    _root["b_Shiny Sharpedo Mount"] = flash.display.BitmapData.loadBitmap("Shiny Sharpedo Mount");
    _root["b_Shiny Milotic Mount"] = flash.display.BitmapData.loadBitmap("Shiny Milotic Mount");
    _root["b_Shiny Starmie Mount"] = flash.display.BitmapData.loadBitmap("Shiny Starmie Mount");
    _root["b_Shiny Snorlax Mount"] = flash.display.BitmapData.loadBitmap("Shiny Snorlax Mount");
    _root["b_Shiny Manaphy Mount"] = flash.display.BitmapData.loadBitmap("Shiny Manaphy Mount");
    _root["b_Shiny Vaporeon Mount"] = flash.display.BitmapData.loadBitmap("Shiny Vaporeon Mount");
    _root["b_Shiny Froakie Mount"] = flash.display.BitmapData.loadBitmap("Shiny Froakie Mount");
    _root["b_Arcanine Mount_Front"] = flash.display.BitmapData.loadBitmap("Arcanine Mount Front");
    _root["b_Glaceon Mount_Front"] = flash.display.BitmapData.loadBitmap("Glaceon Mount Front");
    _root["b_Houndoom Mount_Front"] = flash.display.BitmapData.loadBitmap("Houndoom Mount Front");
    _root["b_Keldeo Mount_Front"] = flash.display.BitmapData.loadBitmap("Keldeo Mount Front");
    _root["b_Manectric Mount_Front"] = flash.display.BitmapData.loadBitmap("Manectric Mount Front");
    _root["b_Stantler Mount_Front"] = flash.display.BitmapData.loadBitmap("Stantler Mount Front");
    _root["b_Absol Mount_Front"] = flash.display.BitmapData.loadBitmap("Absol Mount Front");
    _root["b_Bidoof Mount_Front"] = flash.display.BitmapData.loadBitmap("Bidoof Mount Front");
    _root["b_Dodrio Mount_Front"] = flash.display.BitmapData.loadBitmap("Dodrio Mount Front");
    _root["b_Mechadoof Mount_Front"] = flash.display.BitmapData.loadBitmap("Mechadoof Mount Front");
    _root["b_Shaymin Mount_Front"] = flash.display.BitmapData.loadBitmap("Shaymin Mount Front");
    _root["b_Umbreon Mount_Front"] = flash.display.BitmapData.loadBitmap("Umbreon Mount Front");
    _root["b_Flygon Mount_Front"] = flash.display.BitmapData.loadBitmap("Flygon Mount Front");
    _root["b_Togekiss Mount_Front"] = flash.display.BitmapData.loadBitmap("Togekiss Mount Front");
    _root["b_Cresselia Mount_Front"] = flash.display.BitmapData.loadBitmap("Cresselia Mount Front");
    _root["b_Lugia Mount_Front"] = flash.display.BitmapData.loadBitmap("Lugia Mount Front");
    _root["b_Reshiram Mount_Front"] = flash.display.BitmapData.loadBitmap("Reshiram Mount Front");
    _root["b_Pirate Ship Mount_Front"] = flash.display.BitmapData.loadBitmap("Pirate Ship Mount Front");
    _root["b_Rubber Duck Mount_Front"] = flash.display.BitmapData.loadBitmap("Rubber Duck Mount Front");
    _root["b_Shiny Arcanine Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Arcanine Mount Front");
    _root["b_Shiny Glaceon Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Glaceon Mount Front");
    _root["b_Shiny Houndoom Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Houndoom Mount Front");
    _root["b_Shiny Keldeo Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Keldeo Mount Front");
    _root["b_Shiny Manectric Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Manectric Mount Front");
    _root["b_Shiny Stantler Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Stantler Mount Front");
    _root["b_Shiny Absol Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Absol Mount Front");
    _root["b_Shiny Bidoof Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Bidoof Mount Front");
    _root["b_Shiny Dodrio Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Dodrio Mount Front");
    _root["b_Shiny Shaymin Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Shaymin Mount Front");
    _root["b_Shiny Umbreon Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Umbreon Mount Front");
    _root["b_Shiny Flygon Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Flygon Mount Front");
    _root["b_Shiny Togekiss Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Togekiss Mount Front");
    _root["b_Shiny Cresselia Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Cresselia Mount Front");
    _root["b_Shiny Lugia Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Lugia Mount Front");
    _root["b_Shiny Reshiram Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Reshiram Mount Front");
    _root["b_Swanna Mount_Front"] = flash.display.BitmapData.loadBitmap("Swanna Mount Front");
    _root["b_Crawdaunt Mount_Front"] = flash.display.BitmapData.loadBitmap("Crawdaunt Mount Front");
    _root["b_Lapras Mount_Front"] = flash.display.BitmapData.loadBitmap("Lapras Mount Front");
    _root["b_Pelipper Mount_Front"] = flash.display.BitmapData.loadBitmap("Pelipper Mount Front");
    _root["b_Milotic Mount_Front"] = flash.display.BitmapData.loadBitmap("Milotic Mount Front");
    _root["b_Starmie Mount_Front"] = flash.display.BitmapData.loadBitmap("Starmie Mount Front");
    _root["b_Snorlax Mount_Front"] = flash.display.BitmapData.loadBitmap("Snorlax Mount Front");
    _root["b_Manaphy Mount_Front"] = flash.display.BitmapData.loadBitmap("Manaphy Mount Front");
    _root["b_Vaporeon Mount_Front"] = flash.display.BitmapData.loadBitmap("Vaporeon Mount Front");
    _root["b_Froakie Mount_Front"] = flash.display.BitmapData.loadBitmap("Froakie Mount Front");
    _root["b_Shiny Swanna Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Swanna Mount Front");
    _root["b_Shiny Crawdaunt Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Crawdaunt Mount Front");
    _root["b_Shiny Lapras Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Lapras Mount Front");
    _root["b_Shiny Pelipper Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Pelipper Mount Front");
    _root["b_Shiny Milotic Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Milotic Mount Front");
    _root["b_Shiny Starmie Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Starmie Mount Front");
    _root["b_Shiny Snorlax Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Snorlax Mount Front");
    _root["b_Shiny Manaphy Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Manaphy Mount Front");
    _root["b_Shiny Vaporeon Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Vaporeon Mount Front");
    _root["b_Shiny Froakie Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny Froakie Mount Front");
    _root["b_Umbreon Tail"] = flash.display.BitmapData.loadBitmap("Umbreon Tail");
    _root["b_Bisharp Helmet"] = flash.display.BitmapData.loadBitmap("Bisharp Helmet");
    _root.b_Bowtie = flash.display.BitmapData.loadBitmap("Bowtie");
    _root["b_Bucket Head"] = flash.display.BitmapData.loadBitmap("Bucket Head");
    _root["b_Bulbasaur Backpack"] = flash.display.BitmapData.loadBitmap("Bulbasaur Backpack");
    _root["b_Chimchar Tail"] = flash.display.BitmapData.loadBitmap("Chimchar Tail");
    _root["b_Cofagrigus Mask"] = flash.display.BitmapData.loadBitmap("Cofagrigus Mask");
    _root["b_Entei Mask"] = flash.display.BitmapData.loadBitmap("Entei Mask");
    _root["b_Suicune Mask"] = flash.display.BitmapData.loadBitmap("Suicune Mask");
    _root["b_Raikou Mask"] = flash.display.BitmapData.loadBitmap("Raikou Mask");
    _root["b_Knight Helmet"] = flash.display.BitmapData.loadBitmap("Knight Helmet");
    _root["b_Lunatone Mask"] = flash.display.BitmapData.loadBitmap("Lunatone Mask");
    _root["b_Solrock Mask"] = flash.display.BitmapData.loadBitmap("Solrock Mask");
    _root["b_Steampunk Cat Mask"] = flash.display.BitmapData.loadBitmap("Steampunk Cat Mask");
    _root["b_Steampunk Helmet"] = flash.display.BitmapData.loadBitmap("Steampunk Helmet");
    _root["b_Mewtwo Tail"] = flash.display.BitmapData.loadBitmap("Mewtwo Tail");
    _root["b_Omastar Mask"] = flash.display.BitmapData.loadBitmap("Omastar Mask");
    _root["b_Pachirisu Tail"] = flash.display.BitmapData.loadBitmap("Pachirisu Tail");
    _root["b_Squirtle Backpack"] = flash.display.BitmapData.loadBitmap("Squirtle Backpack");
    _root.b_Tie = flash.display.BitmapData.loadBitmap("Tie");
    _root["b_Greninja Scarf"] = flash.display.BitmapData.loadBitmap("Greninja Scarf");
    _root["b_Hiker Backpack"] = flash.display.BitmapData.loadBitmap("Hiker Backpack");
    _root["b_Scizor Wings"] = flash.display.BitmapData.loadBitmap("Scizor Wings");
    _root["b_Scizor Mask"] = flash.display.BitmapData.loadBitmap("Scizor Mask");
    _root["b_Psyduck Mask"] = flash.display.BitmapData.loadBitmap("Psyduck Mask");
    _root["b_Hair Ribbon 3"] = flash.display.BitmapData.loadBitmap("Hair Ribbon 3");
    _root["b_Bidoof Mask"] = flash.display.BitmapData.loadBitmap("Bidoof Mask");
    _root["b_Munchlax Mask"] = flash.display.BitmapData.loadBitmap("Munchlax Mask");
    _root["b_Pizza Cape"] = flash.display.BitmapData.loadBitmap("Pizza Cape");
    _root["b_Mega Sableye Backpack"] = flash.display.BitmapData.loadBitmap("Mega Sableye Backpack");
    _root["b_Ludicolo Mask"] = flash.display.BitmapData.loadBitmap("Ludicolo Mask");
    _root["b_Wobbuffet Mask"] = flash.display.BitmapData.loadBitmap("Wobbuffet Mask");
    _root["b_Bunny Head"] = flash.display.BitmapData.loadBitmap("Bunny Head");
    _root.b_Katana = flash.display.BitmapData.loadBitmap("Katana");
    _root["b_Dual Katanas"] = flash.display.BitmapData.loadBitmap("Dual Katanas");
    _root["b_Plasma Blade"] = flash.display.BitmapData.loadBitmap("Plasma Blade");
    _root["b_Dual Plasma Blades"] = flash.display.BitmapData.loadBitmap("Dual Plasma Blades");
    _root["b_Watermelon Head"] = flash.display.BitmapData.loadBitmap("Watermelon Head");
    _root["b_Inner Tube Hat"] = flash.display.BitmapData.loadBitmap("Inner Tube Hat");
    _root["b_Flower Scarf"] = flash.display.BitmapData.loadBitmap("Flower Scarf");
    _root["b_Valentines Bow"] = flash.display.BitmapData.loadBitmap("Valentines Bow");
    _root["b_Easter Wings"] = flash.display.BitmapData.loadBitmap("Easter Wings");
    _root["b_Surgical Mask"] = flash.display.BitmapData.loadBitmap("Surgical Mask");
    _root["b_Togepi Egg Backpack"] = flash.display.BitmapData.loadBitmap("Togepi Egg Backpack");
    _root["b_Red Butterfly Headphones"] = flash.display.BitmapData.loadBitmap("Red Butterfly Headphones");
    _root["b_Blue Butterfly Headphones"] = flash.display.BitmapData.loadBitmap("Blue Butterfly Headphones");
    _root["b_Green Butterfly Headphones"] = flash.display.BitmapData.loadBitmap("Green Butterfly Headphones");
    _root["b_Red Butterfly Wings"] = flash.display.BitmapData.loadBitmap("Red Butterfly Wings");
    _root["b_Blue Butterfly Wings"] = flash.display.BitmapData.loadBitmap("Blue Butterfly Wings");
    _root["b_Green Butterfly Wings"] = flash.display.BitmapData.loadBitmap("Green Butterfly Wings");
    _root["b_Victreebel Backpack"] = flash.display.BitmapData.loadBitmap("Victreebel Backpack");
    _root["b_Bat Hair Clip"] = flash.display.BitmapData.loadBitmap("Bat Hair Clip");
    _root["b_Coffin Backpack"] = flash.display.BitmapData.loadBitmap("Coffin Backpack");
    _root["b_Gengar Head"] = flash.display.BitmapData.loadBitmap("Gengar Head");
    _root["b_Oni Mask"] = flash.display.BitmapData.loadBitmap("Oni Mask");
    _root["b_Skeleton Costume"] = flash.display.BitmapData.loadBitmap("Skeleton Costume");
    _root.b_Scythe = flash.display.BitmapData.loadBitmap("Scythe");
    _root["b_Glalie Head"] = flash.display.BitmapData.loadBitmap("Glalie Head");
    _root["b_Ice Cube Head"] = flash.display.BitmapData.loadBitmap("Ice Cube Head");
    _root["b_Ice Wings"] = flash.display.BitmapData.loadBitmap("Ice Wings");
    _root["b_Candy Canes"] = flash.display.BitmapData.loadBitmap("Candy Canes");
    _root["b_Cryogonal Backpack"] = flash.display.BitmapData.loadBitmap("Cryogonal Backpack");
    _root["b_Gingerbread Costume"] = flash.display.BitmapData.loadBitmap("Gingerbread Costume");
    _root["b_Azurill Ears"] = flash.display.BitmapData.loadBitmap("Azurill Ears");
    _root["b_Lopunny Ears"] = flash.display.BitmapData.loadBitmap("Lopunny Ears");
    _root.b_Budew = flash.display.BitmapData.loadBitmap("Budew");
    _root.b_Togepi = flash.display.BitmapData.loadBitmap("Togepi");
    _root["b_Chikorita Leaf"] = flash.display.BitmapData.loadBitmap("Chikorita Leaf");
    _root["b_Poke Ball Head"] = flash.display.BitmapData.loadBitmap("Poke Ball Head");
    _root["b_Great Ball Head"] = flash.display.BitmapData.loadBitmap("Great Ball Head");
    _root["b_Ultra Ball Head"] = flash.display.BitmapData.loadBitmap("Ultra Ball Head");
    _root["b_Master Ball Head"] = flash.display.BitmapData.loadBitmap("Master Ball Head");
    _root["b_Bunny Costume"] = flash.display.BitmapData.loadBitmap("Bunny Costume");
    _root["b_Umbreon Tail_Behind"] = flash.display.BitmapData.loadBitmap("Umbreon Tail Behind");
    _root["b_Bulbasaur Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Bulbasaur Backpack Behind");
    _root["b_Mewtwo Tail_Behind"] = flash.display.BitmapData.loadBitmap("Mewtwo Tail");
    _root["b_Pachirisu Tail_Behind"] = flash.display.BitmapData.loadBitmap("Pachirisu Tail");
    _root["b_Squirtle Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Squirtle Backpack Behind");
    _root["b_Hiker Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Hiker Backpack Behind");
    _root["b_Scizor Wings_Behind"] = flash.display.BitmapData.loadBitmap("Scizor Wings Behind");
    _root["b_Pizza Cape_Behind"] = flash.display.BitmapData.loadBitmap("Pizza Cape Behind");
    _root["b_Mega Sableye Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Mega Sableye Backpack Behind");
    _root.b_Katana_Behind = flash.display.BitmapData.loadBitmap("Katana Behind");
    _root["b_Dual Katanas_Behind"] = flash.display.BitmapData.loadBitmap("Dual Katanas Behind");
    _root["b_Plasma Blade_Behind"] = flash.display.BitmapData.loadBitmap("Plasma Blade Behind");
    _root["b_Dual Plasma Blades_Behind"] = flash.display.BitmapData.loadBitmap("Dual Plasma Blades Behind");
    _root["b_Valentines Bow_Behind"] = flash.display.BitmapData.loadBitmap("Valentines Bow Behind");
    _root["b_Easter Wings_Behind"] = flash.display.BitmapData.loadBitmap("Easter Wings Behind");
    _root["b_Togepi Egg Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Togepi Egg Backpack Behind");
    _root["b_Red Butterfly Wings_Behind"] = flash.display.BitmapData.loadBitmap("Red Butterfly Wings Behind");
    _root["b_Blue Butterfly Wings_Behind"] = flash.display.BitmapData.loadBitmap("Blue Butterfly Wings Behind");
    _root["b_Green Butterfly Wings_Behind"] = flash.display.BitmapData.loadBitmap("Green Butterfly Wings Behind");
    _root["b_Victreebel Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Victreebel Backpack Behind");
    _root["b_Coffin Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Coffin Backpack Behind");
    _root.b_Scythe_Behind = flash.display.BitmapData.loadBitmap("Scythe Behind");
    _root["b_Ice Wings_Behind"] = flash.display.BitmapData.loadBitmap("Ice Wings Behind");
    _root["b_Candy Canes_Behind"] = flash.display.BitmapData.loadBitmap("Candy Canes Behind");
    _root["b_Cryogonal Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Cryogonal Backpack Behind");
    _root["b_Lopunny Ears_Behind"] = flash.display.BitmapData.loadBitmap("Lopunny Ears Behind");
    _root["b_Pirate Hat"] = flash.display.BitmapData.loadBitmap("Pirate Hat");
    _root["b_Pirate Hat Mask"] = flash.display.BitmapData.loadBitmap("Pirate Hat Mask");
    _root["b_Treasure Chest Backpack"] = flash.display.BitmapData.loadBitmap("Treasure Chest Backpack");
    _root["b_Treasure Chest Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Treasure Chest Backpack Behind");
    _root["b_Donut Backpack"] = flash.display.BitmapData.loadBitmap("Donut Backpack");
    _root["b_Donut Chest Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Donut Backpack Behind");
    _root["b_Duck Inner Tube"] = flash.display.BitmapData.loadBitmap("Duck Inner Tube");
    _root["b_Diving Helmet"] = flash.display.BitmapData.loadBitmap("Diving Helmet");
    _root["b_Pumpkin Backpack"] = flash.display.BitmapData.loadBitmap("Pumpkin Backpack");
    _root["b_Pumpkin Backpack_Behind"] = flash.display.BitmapData.loadBitmap("Pumpkin Backpack Behind");
    _root["b_Wizard Hat"] = flash.display.BitmapData.loadBitmap("Wizard Hat");
    _root["b_Wizard Hat Mask"] = flash.display.BitmapData.loadBitmap("Wizard Hat Mask");
    _root["b_Evil Scarecrow Head"] = flash.display.BitmapData.loadBitmap("Evil Scarecrow Head");
    _root["b_Shadow Wings"] = flash.display.BitmapData.loadBitmap("Shadow Wings");
    _root["b_Shadow Wings_Behind"] = flash.display.BitmapData.loadBitmap("Shadow Wings Behind");
    _root["b_Skeleton Wings"] = flash.display.BitmapData.loadBitmap("Skeleton Wings");
    _root["b_Skeleton Wings_Behind"] = flash.display.BitmapData.loadBitmap("Skeleton Wings Behind");
    _root["b_Zombie Costume"] = flash.display.BitmapData.loadBitmap("Zombie Costume");
    _root["b_Egyptian Wings"] = flash.display.BitmapData.loadBitmap("Egyptian Wings");
    _root["b_Egyptian Wings_Behind"] = flash.display.BitmapData.loadBitmap("Egyptian Wings Behind");
    _root.b_Litwick = flash.display.BitmapData.loadBitmap("Litwick");
    for (var _loc2 = 0; _loc2 < newMounts.length; ++_loc2)
    {
        _root["b_" + newMounts[_loc2] + " Mount"] = flash.display.BitmapData.loadBitmap(newMounts[_loc2] + " Mount");
        _root["b_" + newMounts[_loc2] + " Mount_Front"] = flash.display.BitmapData.loadBitmap(newMounts[_loc2] + " Mount Front");
        if (newMounts[_loc2] != "Mecha Mew" && newMounts[_loc2] != "Ashe Butterfree" && newMounts[_loc2] != "Hot Dog" && newMounts[_loc2] != "Flance")
        {
            _root["b_Shiny " + newMounts[_loc2] + " Mount"] = flash.display.BitmapData.loadBitmap("Shiny " + newMounts[_loc2] + " Mount");
            _root["b_Shiny " + newMounts[_loc2] + " Mount_Front"] = flash.display.BitmapData.loadBitmap("Shiny " + newMounts[_loc2] + " Mount Front");
        } // end if
    } // end of for
} // End of the function
function makePlayer(target)
{
    target.player.cacheAsBitmap = true;
    target.holderB = new flash.display.BitmapData(128, 128, true, 0);
    target.colorHolderB = new flash.display.BitmapData(64, 64, true, 0);
    target.player.attachBitmap(target.holderB, target.player.getNextHighestDepth());
    target.player._x = -64;
    target.player._y = -64;
    target._width = target._width * 2;
    target._height = target._height * 2;
} // End of the function
function setPlayerFrame(target, frameX, frameY)
{
    target.frameX = frameX;
    target.frameY = frameY;
    target.hair._x = frameX * -64 - 32;
    target.hair._y = frameY * -64 - 32;
    target.wings._x = frameX * -64 - 32;
    target.wings._y = frameY * -64 - 32;
    target.wingsBehind._x = frameX * -64 - 32;
    target.wingsBehind._y = frameY * -64 - 32;
    target.tail._x = frameX * -64 - 32;
    target.tail._y = frameY * -64 - 32;
    target.tailBehind._x = frameX * -64 - 32;
    target.tailBehind._y = frameY * -64 - 32;
    target.eyes._x = frameX * -64 - 32;
    target.eyes._y = frameY * -64 - 32;
    target.eyesColor._x = frameX * -64 - 32;
    target.eyesColor._y = frameY * -64 - 32;
    target.shirt._x = frameX * -64 - 32;
    target.shirt._y = frameY * -64 - 32;
    target.pants._x = frameX * -64 - 32;
    target.pants._y = frameY * -64 - 32;
    target.body._x = frameX * -64 - 32;
    target.body._y = frameY * -64 - 32;
    target.face._x = frameX * -64 - 32;
    target.face._y = frameY * -64 - 32;
    target.hat._x = frameX * -64 - 32;
    target.hat._y = frameY * -64 - 32;
    target.hatBehind._x = frameX * -64 - 32;
    target.hatBehind._y = frameY * -64 - 32;
    target.hairMask._x = frameX * -64 - 32;
    target.hairMask._y = frameY * -64 - 32;
    target.face2._x = frameX * -64 - 32;
    target.face2._y = frameY * -64 - 32;
    target.cape._x = frameX * -64 - 32;
    target.cape._y = frameY * -64 - 32;
    target.neck._x = frameX * -64 - 32;
    target.neck._y = frameY * -64 - 32;
    target.costume._x = frameX * -64 - 32;
    target.costume._y = frameY * -64 - 32;
} // End of the function
function finishBuildingXMLPacket(type, obj, p1, p2, p3, p4)
{
    if (type == "forgetMove")
    {
        obj.moveNum = p1;
        return ([obj, "b0"]);
    }
    else if (type == "useItem")
    {
        obj.itemNum = p1;
        return ([obj, "b1"]);
    }
    else if (type == "command")
    {
        obj.command = p1;
        return ([obj, "b4"]);
    }
    else if (type == "updateMap")
    {
        obj.map = p1;
        if (player.tileX != undefined)
        {
            lastUpdateX = player.tileX;
            lastUpdateY = player.tileY;
            obj.x = player.tileX;
            obj.y = player.tileY;
        }
        else
        {
            lastUpdateX = _root.tileX;
            lastUpdateY = _root.tileY;
            obj.x = _root.tileX;
            obj.y = _root.tileY;
        } // end else if
        if (_root.lm != undefined)
        {
            obj.l = 1;
            delete _root.lm;
        } // end if
        return ([obj, "b5"]);
    }
    else if (type == "reorderStoragePokemon")
    {
        obj.num1 = p1;
        obj.num2 = p2;
        obj.t = storage.currentTab;
        return ([obj, "b6"]);
    }
    else if (type == "choosePokemon")
    {
        obj.pokemon = p1;
        return ([obj, "b7"]);
    }
    else if (type == "buyItem")
    {
        obj.buyNum = p1;
        obj.amount = p2;
        return ([obj, "b8"]);
    }
    else if (type == "christmasBuy")
    {
        obj.buyNum = p1;
        return ([obj, "b9"]);
    }
    else if (type == "summerBuy")
    {
        obj.b = p1;
        return ([obj, "b138"]);
    }
    else if (type == "halloweenBuy")
    {
        obj.b = p1;
        return ([obj, "b10"]);
    }
    else if (type == "removeTradeItem")
    {
        obj.itemNum = p1;
        return ([obj, "b13"]);
    }
    else if (type == "declineBattle")
    {
        return ([obj, "b14"]);
    }
    else if (type == "acceptBattle")
    {
        return ([obj, "b15"]);
    }
    else if (type == "acceptTrade")
    {
        return ([obj, "b16"]);
    }
    else if (type == "declineTrade")
    {
        return ([obj, "b17"]);
    }
    else if (type == "acceptEvolve")
    {
        return ([obj, "b18"]);
    }
    else if (type == "declineEvolve")
    {
        return ([obj, "b19"]);
    }
    else if (type == "acceptMerchantItem")
    {
        obj.merchantId = p1;
        return ([obj, "b20"]);
    }
    else if (type == "getSSTicket")
    {
        return ([obj, "b21"]);
    }
    else if (type == "getHM")
    {
        obj.hmNum = p1;
        return ([obj, "b22"]);
    }
    else if (type == "getItem")
    {
        obj.itemName = p1;
        return ([obj, "b23"]);
    }
    else if (type == "purchaseSafariZoneTicket")
    {
        obj.itemName = p1;
        return ([obj, "b24"]);
    }
    else if (type == "safariTimeOver")
    {
        obj.itemName = p1;
        return ([obj, "b25"]);
    }
    else if (type == "cancelTrade")
    {
        obj.itemName = p1;
        return ([obj, "b27"]);
    }
    else if (type == "confirmTrade")
    {
        obj.itemName = p1;
        return ([obj, "b28"]);
    }
    else if (type == "finalConfirm")
    {
        obj.itemName = p1;
        return ([obj, "b29"]);
    }
    else if (type == "addCash")
    {
        obj.amount = p1;
        return ([obj, "b30"]);
    }
    else if (type == "relearnList")
    {
        obj.pokeNum = p1;
        return ([obj, "b32"]);
    }
    else if (type == "relearnList2")
    {
        obj.pokeNum = p1;
        return ([obj, "b33"]);
    }
    else if (type == "relearnList3")
    {
        obj.pokeNum = p1;
        return ([obj, "b34"]);
    }
    else if (type == "relearnList4")
    {
        obj.p = p1;
        return ([obj, "b126"]);
    }
    else if (type == "relearnMove")
    {
        obj.moveNum = p1;
        return ([obj, "b35"]);
    }
    else if (type == "relearnMove2")
    {
        obj.moveNum = p1;
        return ([obj, "b36"]);
    }
    else if (type == "relearnMove3")
    {
        obj.moveNum = p1;
        return ([obj, "b37"]);
    }
    else if (type == "relearnMove4")
    {
        obj.m = p1;
        return ([obj, "b127"]);
    }
    else if (type == "stepsWalked")
    {
        return ([obj, "b38"]);
    }
    else if (type == "releasePokemon")
    {
        if (p2 == undefined)
        {
            obj.s = p1;
        }
        else
        {
            obj.t = p1;
            obj.n = p2;
        } // end else if
        return ([obj, "b39"]);
    }
    else if (type == "createClan")
    {
        obj.clanName = p1;
        return ([obj, "b40"]);
    }
    else if (type == "depositClanBank")
    {
        obj.amount = p1;
        return ([obj, "b41"]);
    }
    else if (type == "withdrawClanBank")
    {
        obj.amount = p1;
        return ([obj, "b42"]);
    }
    else if (type == "kickClanMember")
    {
        obj.memberName = p1;
        return ([obj, "b43"]);
    }
    else if (type == "sendClanInvite")
    {
        obj.targetName = p1;
        return ([obj, "b44"]);
    }
    else if (type == "addCash")
    {
        obj.amount = p1;
        return ([obj, "b30"]);
    }
    else if (type == "acceptClanInvite")
    {
        return ([obj, "b45"]);
    }
    else if (type == "declineClanInvite")
    {
        return ([obj, calcMD5("declineClanInvitekzf76adngjfdgh12m7mdlbfi9proa15gjqp0sd3mo1lk7w90cd" + _root.username)]);
    }
    else if (type == "disbandClan")
    {
        return ([obj, "b46"]);
    }
    else if (type == "leaveClan")
    {
        return ([obj, "b47"]);
    }
    else if (type == "promoteMember")
    {
        obj.memberName = p1;
        obj.rank = p2;
        return ([obj, "b48"]);
    }
    else if (type == "upgradeRoster")
    {
        return ([obj, "b49"]);
    }
    else if (type == "sendGift")
    {
        obj.targetName = p1;
        return ([obj, "b50"]);
    }
    else if (type == "exchangeShards")
    {
        obj.shardId = p1;
        return ([obj, "b51"]);
    }
    else if (type == "casinoBuy")
    {
        obj.buyNum = p1;
        return ([obj, "b52"]);
    }
    else if (type == "slotSpin")
    {
        obj.num = p1;
        return ([obj, "b53"]);
    }
    else if (type == "clanWarBuy")
    {
        obj.buyNum = p1;
        return ([obj, "b54"]);
    }
    else if (type == "pvpShopBuy")
    {
        obj.b = p1;
        return ([obj, "b104"]);
    } // end else if
} // End of the function
function onLoadInit(mc)
{
    if (mc == mapLayer1.bg)
    {
        fadeMusic(undefined, true);
        if (smallMap == false)
        {
            mapLayer1._width = mapLayer1._width * 2;
            mapLayer1._height = mapLayer1._height * 2;
        } // end if
        if (player.tileX != undefined)
        {
            mapLayer1._x = player.tileX * -64 + newWidth / 2 - 32;
            mapLayer1._y = player.tileY * -64 + newHeight / 2 - 31;
        }
        else
        {
            mapLayer1._x = tileX * -64 + newWidth / 2 - 32;
            mapLayer1._y = tileY * -64 + newHeight / 2 - 31;
        } // end else if
        mapLayer2._x = mapLayer1._x;
        mapLayer2._y = mapLayer1._y;
        lightMap._x = mapLayer1._x;
        lightMap._y = mapLayer1._y;
        setDefaultPlayerFrame(player);
        player._visible = true;
        fixDepths();
        removeMovieClip (mainGUI.editB);
        removeMovieClip (mainGUI.saveMapB);
        removeMovieClip (mainGUI.leaveB);
        removeMovieClip (mainGUI.tilesetGUI);
        if (map.indexOf("Pokecenter") != -1 && (_root.map == "Accumula Pokecenter" || _root.map == "Striaton Pokecenter" || _root.map == "Nacrene Pokecenter" || _root.map == "Castelia Pokecenter" || _root.map == "Nimbasa Pokecenter" || _root.map == "Driftveil Pokecenter" || _root.map == "Mistralton Pokecenter" || _root.map == "Icirrus Pokecenter" || _root.map == "Opelucid Pokecenter" || _root.map == "Lacunosa Pokecenter" || _root.map == "Undella Pokecenter" || _root.map == "Lentimas Pokecenter" || _root.map == "Black City Pokecenter" || _root.map == "Humilau Pokecenter" || _root.map == "Unova Victory Road Pokecenter"))
        {
            _root.mcLoader.loadClip("https://pokemon-planet.com/MapFiles/Unova Pokecenter/2.png", mapLayer3.bg);
        }
        else if (map.indexOf("Pokecenter") != -1)
        {
            _root.mcLoader.loadClip("https://pokemon-planet.com/MapFiles/Pokecenter/2.png", mapLayer3.bg);
        }
        else if (map.indexOf("Pokemart") != -1)
        {
            _root.mcLoader.loadClip("https://pokemon-planet.com/MapFiles/Pokemart/2.png", mapLayer3.bg);
        }
        else
        {
            _root.mcLoader.loadClip("https://pokemon-planet.com/MapFiles/" + map + "/2.png?v=3", mapLayer3.bg);
        } // end else if
    }
    else if (mc == mapLayer3.bg)
    {
        if (smallMap == false)
        {
            mapLayer3._width = mapLayer3._width * 2;
            mapLayer3._height = mapLayer3._height * 2;
        } // end if
        mapLayer3._x = mapLayer1._x;
        mapLayer3._y = mapLayer1._y;
        darkScreenLoadMap.loadedMap = true;
    } // end else if
} // End of the function
function onLoadError(mc, errorCode, httpStatus)
{
    if (mc == mapLayer3.bg)
    {
        mapLayer3._x = mapLayer1._x;
        mapLayer3._y = mapLayer1._y;
        darkScreenLoadMap.loadedMap = true;
    }
    else if (mc == mapLayer1.bg)
    {
        ++_root.mapErrors;
        if (_root.mapErrors < 3)
        {
            loadMapImage();
        }
        else
        {
            systemMessage("Error loading map: " + errorCode + " (" + httpStatus + ") (" + map + ")");
            loadNearestPokecenter();
            _root.mapErrors = 0;
        } // end else if
    } // end else if
} // End of the function
function parseMultiArray(str3)
{
    var _loc2 = String(str3);
    if (_loc2 != "[]" && _loc2 != "")
    {
        if (_loc2.indexOf("[") == 0 && _loc2.indexOf("]") != -1)
        {
            _loc2 = _loc2.substr(2, _loc2.length - 4);
            strArrayA = _loc2.split("],[");
            returnArray3 = [];
            for (var _loc1 = 0; _loc1 < strArrayA.length; ++_loc1)
            {
                strArrayA[_loc1] = "[" + strArrayA[_loc1] + "]";
                returnArray3.push(parseArray(strArrayA[_loc1]));
            } // end of for
            return (returnArray3);
        }
        else
        {
            trace ("parseMultiArray bracket error: " + str3);
        } // end else if
    }
    else
    {
        return ([]);
    } // end else if
} // End of the function
function parseArray(str2)
{
    tempStr2 = String(str2);
    if (tempStr2 != "[]" && tempStr2 != "")
    {
        if (tempStr2.indexOf("[") == 0 && tempStr2.indexOf("]") == tempStr2.length - 1)
        {
            tempStr2 = tempStr2.substr(1, tempStr2.length - 2);
            returnArray2 = tempStr2.split(",");
            return (returnArray2);
        }
        else
        {
            trace ("parseArray bracket error");
        } // end else if
    }
    else
    {
        return ([]);
    } // end else if
} // End of the function
function darkenScreen2()
{
    _root.darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
    darkScreen._width = Stage.width;
    darkScreen._height = Stage.height;
    darkScreen._alpha = 70;
    darkScreen._x = newWidth / 2;
    darkScreen._y = newHeight / 2;
} // End of the function
function darkenScreenLoading()
{
    darkScreen = mainGUI.attachMovie("darkScreenLoading", "darkScreen", mainGUI.getNextHighestDepth());
    darkScreen._width = Stage.width;
    darkScreen._height = Stage.height;
    darkScreen.onRelease = function ()
    {
    };
} // End of the function
function removeSpecialChars(msg)
{
    if (msg.indexOf("&") != -1)
    {
        msg = replaceChar(msg, "&", "&amp;");
    } // end if
    if (msg.indexOf("<") != -1)
    {
        msg = replaceChar(msg, "<", "&lt;");
    } // end if
    if (msg.indexOf(">") != -1)
    {
        msg = replaceChar(msg, ">", "&gt;");
    } // end if
    if (msg.indexOf("\"") != -1)
    {
        msg = replaceChar(msg, "\"", "&quot;");
    } // end if
    if (msg.indexOf("\'") != -1)
    {
        msg = replaceChar(msg, "\'", "&apos;");
    } // end if
    return (msg);
} // End of the function
function canWalkOnTile(tile)
{
    if (moveType == "surf")
    {
        if (tile == 2 || tile == 9 || tile == 24 || tile == 12 || tile == 25 || tile == 15 || inArray(_root.walkableTiles, tile))
        {
            return (true);
        } // end if
    }
    else if (inArray(_root.walkableTiles, tile))
    {
        return (true);
    } // end else if
    return (false);
} // End of the function
function processQueue()
{
    if (_root.clientQueue.length > 0)
    {
        _root.isBusy = false;
        if (_root.clientQueue[0].length == 1)
        {
            getTimestamp(_root.clientQueue[0][0]);
        }
        else if (_root.clientQueue[0].length == 2)
        {
            getTimestamp(_root.clientQueue[0][0], _root.clientQueue[0][1]);
        }
        else if (_root.clientQueue[0].length == 3)
        {
            getTimestamp(_root.clientQueue[0][0], _root.clientQueue[0][1], _root.clientQueue[0][2]);
        }
        else if (_root.clientQueue[0].length == 4)
        {
            getTimestamp(_root.clientQueue[0][0], _root.clientQueue[0][1], _root.clientQueue[0][2], _root.clientQueue[0][3]);
        }
        else if (_root.clientQueue[0].length == 5)
        {
            getTimestamp(_root.clientQueue[0][0], _root.clientQueue[0][1], _root.clientQueue[0][2], _root.clientQueue[0][3], _root.clientQueue[0][4]);
        } // end else if
        _root.clientQueue.splice(0, 1);
    }
    else
    {
        _root.isBusy = false;
    } // end else if
} // End of the function
function applyDamage(type, battleTextIndex)
{
    if (type == "player")
    {
        if (battleText[battleTextIndex][2] != "" && battleText[battleTextIndex][2] != undefined && battleText[battleTextIndex][2] != "undefined")
        {
            fixPlayerHpBar(Number(battleText[battleTextIndex][2]), 1);
        } // end if
        if (battleText[battleTextIndex][1] != "" && battleText[battleTextIndex][1] != undefined && battleText[battleTextIndex][1] != "undefined")
        {
            fixEnemyHpBar(Number(battleText[battleTextIndex][1]), 1);
        } // end if
        if (_root.disableBattleAnimations == "0")
        {
            if (Number(battleText[battleTextIndex][1]) > 0)
            {
                if (battleText[battleTextIndex][4] == "0")
                {
                    clearInterval(swapVisibleI);
                    mainGUI.battleBackground.wildPokemonIcon._visible = true;
                    swapVisibleI = setInterval(swapVisible, 150, mainGUI.battleBackground.wildPokemonIcon);
                }
                else if (battleText[battleTextIndex][4] == "1")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("fire");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else if (battleText[battleTextIndex][4] == "2")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("water");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else if (battleText[battleTextIndex][4] == "3")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("electric");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else if (battleText[battleTextIndex][4] == "14")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("flying");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else if (battleText[battleTextIndex][4] == "15")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("poison");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else if (battleText[battleTextIndex][4] == "22")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("psychic");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else if (battleText[battleTextIndex][4] == "25")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("dark");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else if (battleText[battleTextIndex][4] == "17")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("rock");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else if (battleText[battleTextIndex][4] == "18")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("bug");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else if (battleText[battleTextIndex][4] == "26")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("fairy");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else if (battleText[battleTextIndex][4] == "24")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("dragon");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else if (battleText[battleTextIndex][4] == "13")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("fighting");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else if (battleText[battleTextIndex][4] == "13")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("fighting");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else if (battleText[battleTextIndex][4] == "19")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("ghost");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else if (battleText[battleTextIndex][4] == "21")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("grass");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else if (battleText[battleTextIndex][4] == "16")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("ground");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else if (battleText[battleTextIndex][4] == "23")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("ice");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else if (battleText[battleTextIndex][4] == "20")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("steel");
                    attackAnimations._x = mainGUI.battleBackground.wildPokemonIcon._x;
                    attackAnimations._y = 10;
                }
                else
                {
                    clearInterval(swapVisibleI);
                    mainGUI.battleBackground.wildPokemonIcon._visible = true;
                    swapVisibleI = setInterval(swapVisible, 150, mainGUI.battleBackground.wildPokemonIcon);
                } // end else if
            } // end else if
        } // end else if
        if (Number(battleText[battleTextIndex][2]) > 0)
        {
            if (battleText[battleTextIndex][4] == "0")
            {
                clearInterval(swapVisibleI);
                mainGUI.battleBackground.backPokemon._visible = true;
                swapVisibleI = setInterval(swapVisible, 150, mainGUI.battleBackground.backPokemon);
            } // end if
        } // end if
    }
    else
    {
        if (battleText[battleTextIndex][1] != "" && battleText[battleTextIndex][1] != undefined && battleText[battleTextIndex][1] != "undefined")
        {
            fixPlayerHpBar(Number(battleText[battleTextIndex][1]), 1);
        } // end if
        if (battleText[battleTextIndex][2] != "" && battleText[battleTextIndex][2] != undefined && battleText[battleTextIndex][2] != "undefined")
        {
            fixEnemyHpBar(Number(battleText[battleTextIndex][2]), 1);
        } // end if
        if (_root.disableBattleAnimations == "0")
        {
            if (Number(battleText[battleTextIndex][1]) > 0)
            {
                if (battleText[battleTextIndex][4] == "0")
                {
                    clearInterval(swapVisibleI);
                    mainGUI.battleBackground.backPokemon._visible = true;
                    swapVisibleI = setInterval(swapVisible, 150, mainGUI.battleBackground.backPokemon);
                }
                else if (battleText[battleTextIndex][4] == "1")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("fire");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 80;
                }
                else if (battleText[battleTextIndex][4] == "2")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("water");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 80;
                }
                else if (battleText[battleTextIndex][4] == "3")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("electric");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 80;
                }
                else if (battleText[battleTextIndex][4] == "14")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("flying");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 80;
                }
                else if (battleText[battleTextIndex][4] == "15")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("poison");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 80;
                }
                else if (battleText[battleTextIndex][4] == "22")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("psychic");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 80;
                }
                else if (battleText[battleTextIndex][4] == "25")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("dark");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 80;
                }
                else if (battleText[battleTextIndex][4] == "17")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("rock");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 80;
                }
                else if (battleText[battleTextIndex][4] == "18")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("bug");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 80;
                }
                else if (battleText[battleTextIndex][4] == "26")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("fairy");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 80;
                }
                else if (battleText[battleTextIndex][4] == "24")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("dragon");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 80;
                }
                else if (battleText[battleTextIndex][4] == "13")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("fighting");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 80;
                }
                else if (battleText[battleTextIndex][4] == "13")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("fighting");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 80;
                }
                else if (battleText[battleTextIndex][4] == "19")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("ghost");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 80;
                }
                else if (battleText[battleTextIndex][4] == "21")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("grass");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 80;
                }
                else if (battleText[battleTextIndex][4] == "16")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("ground");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 80;
                }
                else if (battleText[battleTextIndex][4] == "23")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("ice");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 70;
                }
                else if (battleText[battleTextIndex][4] == "20")
                {
                    attackAnimations = mainGUI.battleBackground.attachMovie("newAttackAnimations", "newAttackAnimations", mainGUI.battleBackground.getNextHighestDepth());
                    attackAnimations.gotoAndPlay("steel");
                    attackAnimations._x = mainGUI.battleBackground.backPokemon._x;
                    attackAnimations._y = mainGUI.battleBackground.backPokemon._y + 80;
                }
                else
                {
                    clearInterval(swapVisibleI);
                    mainGUI.battleBackground.backPokemon._visible = true;
                    swapVisibleI = setInterval(swapVisible, 150, mainGUI.battleBackground.backPokemon);
                } // end else if
            } // end else if
        } // end else if
        if (battleText[battleTextIndex][2] > 0)
        {
            if (battleText[battleTextIndex][4] == "0")
            {
                clearInterval(swapVisibleI);
                mainGUI.battleBackground.wildPokemonIcon._visible = true;
                swapVisibleI = setInterval(swapVisible, 150, mainGUI.battleBackground.wildPokemonIcon);
            } // end if
        } // end if
    } // end else if
} // End of the function
function showContinueButton(msg)
{
    if (_root.continueButton == false)
    {
        _root.continueButtonText = msg;
        _root.continueButton = true;
    } // end if
} // End of the function
function handleTrainerBattleCooldownError(resObj)
{
    var _loc4 = Number(resObj[2]);
    var _loc2 = Math.floor(_loc4 / 3600);
    var _loc3 = Math.round((_loc4 - _loc2 * 3600) / 60);
    if (_loc2 > 0)
    {
        if (_loc3 > 0)
        {
            var _loc5 = _loc2 + " hours, " + _loc3 + " minutes";
        }
        else
        {
            _loc5 = _loc2 + " hours";
        } // end else if
    }
    else
    {
        _loc5 = _loc3 + " minutes";
    } // end else if
    systemMessage("You need to wait another " + _loc5 + ".");
    endBattle();
    currentNPC = [];
    canMove = true;
    removeMovieClip (_root.mainGUI.chatBox);
    chatBoxOpen = false;
} // End of the function
function handleWildBattle(resObj, disconnect)
{
    if (userPokemon[0].currentHp > 0)
    {
        activePokemon = 0;
    }
    else if (userPokemon[1].currentHp > 0)
    {
        activePokemon = 1;
    }
    else if (userPokemon[2].currentHp > 0)
    {
        activePokemon = 2;
    }
    else if (userPokemon[3].currentHp > 0)
    {
        activePokemon = 3;
    }
    else if (userPokemon[4].currentHp > 0)
    {
        activePokemon = 4;
    }
    else if (userPokemon[5].currentHp > 0)
    {
        activePokemon = 5;
    }
    else
    {
        activePokemonError = true;
        activePokemon = 0;
        trace ("error, all pokemon have 0 hp");
    } // end else if
    if (disconnect == true)
    {
        if (moveType == "surf")
        {
            _root.battleBg = "water";
        } // end if
        battle = true;
        battleType = "wild";
    } // end if
    _root.canMove = false;
    _root.canSwitchPokemon = true;
    _root.mainGUI.battleBackground.pokemonB.gotoAndStop(1);
    _root.continueButton = false;
    resObj[2] = resObj[2].split(",");
    _root.wildPokemon = [];
    _root.wildPokemon.currentHp = Number(resObj[2][0]);
    _root.wildPokemon.hp = Number(resObj[2][1]);
    _root.wildPokemon.name = resObj[2][2];
    _root.wildPokemon.id = Number(resObj[2][3]);
    if (resObj[2][4] == "true")
    {
        _root.wildPokemon.shiny = true;
    }
    else
    {
        _root.wildPokemon.shiny = false;
    } // end else if
    _root.wildPokemon.level = Number(resObj[2][5]);
    _root.wildPokemon.ability = resObj[2][6];
    _root.wildPokemon.ailment = resObj[2][7];
    _root.wildPokemon.form = resObj[2][8];
    _root.wildPokemon.elite = resObj[2][9];
    _root.wildPokemon.type = Number(resObj[2][10]);
    _root.wildPokemon.type2 = Number(resObj[2][11]);
    _root.wildPokemon.startingHp = _root.wildPokemon.currentHp;
    _root.userStartingHp = _root.userPokemon[activePokemon].currentHp;
    if (resObj[3] == "")
    {
        _root.battleText = [];
    }
    else
    {
        _root.battleText = resObj[3].split("|");
        for (var _loc2 = 0; _loc2 < battleText.length; ++_loc2)
        {
            battleText[_loc2] = battleText[_loc2].split(",");
        } // end of for
    } // end else if
    if (String(_root.wildPokemon.ability) == String(calcMD5(String(42) + "asion1asfonapsfobq1n12iofrasnfra")) && (_root.userPokemon[activePokemon].type == 9 || _root.userPokemon[activePokemon].type2 == 9))
    {
        if (_root.userPokemon[activePokemon].heldItem != "Shed Shell")
        {
            _root.canSwitchPokemon = false;
            _root.mainGUI.battleBackground.pokemonB.gotoAndStop("dark");
        } // end if
    } // end if
    userPokemon[activePokemon].battleMoves = resObj[4].split(",");
    for (var _loc2 = 0; _loc2 < userPokemon[activePokemon].battleMoves.length; ++_loc2)
    {
        userPokemon[activePokemon].battleMoves[_loc2] = Number(userPokemon[activePokemon].battleMoves[_loc2]);
    } // end of for
    if (resObj[7] == "1")
    {
        _root.dungeonBattle = true;
    }
    else
    {
        _root.dungeonBattle = false;
    } // end else if
    if (resObj[10] != undefined && resObj[10] != "")
    {
        _root.setLevel = Number(resObj[10]);
    }
    else
    {
        _root.setLevel = 0;
    } // end else if
    delete _root.opponentPokemonArray;
    _root.opponentPokemonArray = parseMultiArray(resObj[11]);
    _root.statBoosts = parseMultiArray(resObj[12]);
    for (var _loc2 = 0; _loc2 < _root.statBoosts[0].length; ++_loc2)
    {
        _root.statBoosts[0][_loc2] = Number(_root.statBoosts[0][_loc2]);
    } // end of for
    for (var _loc2 = 0; _loc2 < _root.statBoosts[1].length; ++_loc2)
    {
        _root.statBoosts[1][_loc2] = Number(_root.statBoosts[1][_loc2]);
    } // end of for
    _root.battleWeather = statBoosts[2][0];
    _root.battleTurns = 0;
    if (_root.newSettings[0] != "1")
    {
        if (_root.battleWeather == "none" || _root.battleWeather == undefined)
        {
            if (_root.battleBg == "snowyforest")
            {
                _root.mainGUI.battleBackground.weather.gotoAndStop("snow");
                _root.mainGUI.battleBackground.weather._visible = true;
            }
            else
            {
                _root.mainGUI.battleBackground.weather._visible = false;
            } // end else if
        }
        else
        {
            _root.mainGUI.battleBackground.weather.gotoAndStop(_root.battleWeather);
            _root.mainGUI.battleBackground.weather._visible = true;
        } // end if
    } // end else if
    if (statBoosts[4][0] == "1")
    {
        _root.targetEnemyBattleUI.syncIcon._visible = true;
    } // end if
    if (resObj[5] != undefined && resObj[5] != "-1")
    {
        oldBattleBg = battleBg;
        battleBg = "water";
        battle = true;
        canMove = false;
        battleType = "wild";
        fishingLevel = Number(resObj[5]);
        currentFishingExp = Number(resObj[6]);
        mainGUI.trainerCard.trainerLevels.fishingLevelT.htmlText = "<b>Lv " + fishingLevel;
        mainGUI.trainerCard.trainerLevels.expT.htmlText = "<b>" + format(currentFishingExp) + " / " + format(fishingLevel * fishingLevel * fishingLevel + 40);
        mainGUI.trainerCard.trainerLevels.m._x = -205.500000 + currentFishingExp / (fishingLevel * fishingLevel * fishingLevel + 40) * 180;
        if (mainGUI.trainerCard.trainerLevels.m._x > 385.500000)
        {
            mainGUI.trainerCard.trainerLevels.m._x = 385.500000;
        } // end if
        fadeScreen();
        _root.waitingForBattle = false;
        delete mainGUI.hookingUI.onEnterFrame;
        removeMovieClip (mainGUI.hookingUI);
    }
    else if (resObj[9] == "1")
    {
        battle = true;
        canMove = false;
        battleType = "wild";
        fadeScreen();
        _root.waitingForBattle = false;
    } // end else if
    var _loc4 = resObj[8].split(",");
    for (var _loc2 = 0; _loc2 < _loc4.length; ++_loc2)
    {
        _loc4[_loc2] = Number(_loc4[_loc2]);
    } // end of for
    _root.ppC = _loc4;
    _root.ppM = [_loc4[0], _loc4[1], _loc4[2], _loc4[3]];
    fixPPText();
    _root.battle = true;
    if (_root.waitingForBattle == true || disconnect == true)
    {
        _root.waitingForBattle = false;
        fadeScreen();
    } // end if
    _root.battleReady = true;
} // End of the function
function afterFaintContinueButton(type)
{
    if (type == "fly1")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is flying in the air.");
    }
    else if (type == "dig1")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is underground.");
    }
    else if (type == "thrash")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is thrashing.");
    }
    else if (type == "bide")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is using Bide.");
    }
    else if (type == "skullbash")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is ready to use Skull Bash.");
    }
    else if (type == "skyattack")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is ready to use Sky Attack.");
    }
    else if (type == "outrage")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is in an outrage.");
    }
    else if (type == "rollout")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is using Rollout.");
    }
    else if (type == "dive")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is swimming underwater.");
    }
    else if (type == "iceball")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is using Ice Ball.");
    }
    else if (type == "bounce")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is in the air.");
    }
    else if (type == "recharge")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is recharging.");
    }
    else if (type == "shadowforce")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " has vanished.");
    }
    else if (type == "freezeshock")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is charging.");
    }
    else if (type == "phantomforce")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " has vanished.");
    }
    else if (type == "razorwind")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is ready to use Razor Wind.");
    }
    else if (type == "solarbeam")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is ready to use Solar Beam.");
    }
    else if (type == "petaldance")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is using Petal Dance.");
    }
    else if (type == "uproar")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is in an uproar.");
    }
    else if (type == "geomancy")
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is ready to use Geomancy.");
    }
    else
    {
        showContinueButton("<b>" + userPokemon[activePokemon].name + " is using a multi-turn move.");
    } // end else if
} // End of the function
function getExpTNL(level)
{
    return (Math.floor(0.550000 * (level * level * level * (level / 35 - 0.100000))) + 120 + level * 20);
} // End of the function
function handleClanWarsStarting(resObj)
{
    _root.clanWarsActive = true;
    _root.clanWarTier = Number(resObj[2]);
    if (_root.clanWarTier < 1)
    {
        _root.clanWarTier = 1;
    }
    else if (_root.clanWarTier > 3)
    {
        _root.clanWarTier = 3;
    } // end else if
    systemMessage("<b>Tier " + resObj[2] + " Clan Wars has started!</b>", "#FFFFFF");
    if (map == "Clan Building" && _root.clan != "" && _root.clan != undefined && _root.clan != "0")
    {
        customTiles = [];
        if (_root.userPokemon.length >= 6)
        {
            var _loc5 = 0;
            for (var _loc4 = 0; _loc4 < _root.userPokemon.length; ++_loc4)
            {
                for (var _loc2 = 0; _loc2 < _root.userPokemon[_loc4].moves.length; ++_loc2)
                {
                    if (_root.userPokemon[_loc4].moves[_loc2] == 226)
                    {
                        ++_loc5;
                        break;
                    } // end if
                } // end of for
            } // end of for
            if (_loc5 <= 0)
            {
                var _loc6 = true;
                for (var _loc4 = 0; _loc4 < _root.userPokemon.length; ++_loc4)
                {
                    for (var _loc2 = 0; _loc2 < _root.userPokemon.length; ++_loc2)
                    {
                        if (_root.userPokemon[_loc4].id == _root.userPokemon[_loc2].id && _loc4 != _loc2)
                        {
                            _loc6 = false;
                            break;
                        } // end if
                    } // end of for
                } // end of for
                if (_loc6 == true)
                {
                    var _loc3 = true;
                    if (_root.clanWarTier == 1)
                    {
                        for (var _loc4 = 0; _loc4 < _root.userPokemon.length; ++_loc4)
                        {
                            for (var _loc2 = 0; _loc2 < t1BanList.length; ++_loc2)
                            {
                                if (_root.userPokemon[_loc4].name == t1BanList[_loc2])
                                {
                                    if (_root.userPokemon[_loc4].name == "Rotom")
                                    {
                                        if (String(_root.userPokemon[_loc4].form).toLowerCase() == "wash")
                                        {
                                            _loc3 = false;
                                            _root.tempBannedPokemon = "Rotom Wash";
                                            break;
                                        } // end if
                                        continue;
                                    } // end if
                                    _loc3 = false;
                                    _root.tempBannedPokemon = _root.userPokemon[_loc4].name;
                                    break;
                                } // end if
                            } // end of for
                            if (!_loc3)
                            {
                                break;
                            } // end if
                        } // end of for
                    }
                    else
                    {
                        for (var _loc4 = 0; _loc4 < _root.userPokemon.length; ++_loc4)
                        {
                            for (var _loc2 = 0; _loc2 < t2BanList.length; ++_loc2)
                            {
                                if (_root.userPokemon[_loc4].name == t2BanList[_loc2])
                                {
                                    _loc3 = false;
                                    _root.tempBannedPokemon = _root.userPokemon[_loc4].name;
                                    break;
                                } // end if
                            } // end of for
                            if (!_loc3)
                            {
                                break;
                            } // end if
                        } // end of for
                    } // end else if
                    if (_loc3 == true)
                    {
                        _root.genClanWarSpawns();
                    }
                    else
                    {
                        _root.customTiles = [[29, 12, "You cannot use the banned pokemon: " + _root.tempBannedPokemon]];
                    } // end else if
                }
                else
                {
                    _root.customTiles = [[29, 12, "You cannot have two or more of the same type of pokemon on a team."]];
                } // end else if
            }
            else
            {
                _root.customTiles = [[29, 12, "Baton Pass clause limits the number of Baton Pass users to 0. Please adjust your team before entering Clan Wars."]];
            } // end else if
        }
        else
        {
            _root.customTiles = [[29, 12, "You need a full pokemon team before entering Clan Wars."]];
        } // end if
    } // end else if
} // End of the function
function genClanWarSpawns()
{
    if (_root.clanWarTier == 1)
    {
        var _loc2 = rand(0, clanWarSpawns.length - 1);
    }
    else if (_root.clanWarTier == 2)
    {
        _loc2 = rand(0, clanWarSpawns2.length - 1);
    }
    else
    {
        _loc2 = rand(0, clanWarSpawns3.length - 1);
    } // end else if
    if (_root.clanWarTier == 1)
    {
        mapExits.push([29, 12, "Clan Wars T1", clanWarSpawns[_loc2][0], clanWarSpawns[_loc2][1]]);
    }
    else if (clanWarTier == 2)
    {
        mapExits.push([29, 12, "Clan Wars T2", clanWarSpawns2[_loc2][0], clanWarSpawns2[_loc2][1]]);
    }
    else if (clanWarTier == 3)
    {
        mapExits.push([29, 12, "Clan Wars T3", clanWarSpawns3[_loc2][0], clanWarSpawns3[_loc2][1]]);
    } // end else if
} // End of the function
function handleCustomChatMessage(resObj)
{
    ignored = false;
    for (var _loc2 = 0; _loc2 < ignore.length; ++_loc2)
    {
        if (ignore[_loc2].toLowerCase() == resObj[2].toLowerCase())
        {
            ignored = true;
            break;
        } // end if
    } // end of for
    if (ignored == false)
    {
        msg = String(resObj[3]);
        memberTypeChat = msg.substr(0, 3);
        msg = msg.substr(3, msg.length);
        if (memberTypeChat == "<a>")
        {
            fontColor = "#FF3737";
        }
        else if (memberTypeChat == "<z>")
        {
            fontColor = "#00FFFF";
        }
        else if (memberTypeChat == "<x>")
        {
            fontColor = "#00FF00";
        }
        else if (memberTypeChat == "<m>")
        {
            fontColor = "#00FF00";
        }
        else if (memberTypeChat == "<p>")
        {
            fontColor = "#FF9900";
        }
        else if (memberTypeChat == "<s>")
        {
            fontColor = "#B382C8";
        }
        else if (memberTypeChat == "<g>")
        {
            fontColor = "#FFCC00";
        }
        else
        {
            fontColor = "#FFFFFF";
        } // end else if
        if (msg.indexOf("&") != -1)
        {
            msg = replaceChar(msg, "&", "&amp;");
        } // end if
        if (msg.indexOf("<") != -1)
        {
            msg = replaceChar(msg, "<", "&lt;");
        } // end if
        if (msg.indexOf(">") != -1)
        {
            msg = replaceChar(msg, ">", "&gt;");
        } // end if
        if (msg.indexOf("\"") != -1)
        {
            msg = replaceChar(msg, "\"", "&quot;");
        } // end if
        if (msg.indexOf("\'") != -1)
        {
            msg = replaceChar(msg, "\'", "&apos;");
        } // end if
        if (_root.allowSwearing == "0" && swearFilter(msg) == false)
        {
            msg = "This message has been removed. Allow swearing if you would like to see messages that contain swearwords.";
        } // end if
        if (msg.indexOf("www.") != -1 || msg.indexOf("http://") != -1 || msg.indexOf("https://") != -1)
        {
            if (msg.indexOf("https://") != -1)
            {
                var _loc5 = "https://";
            }
            else if (msg.indexOf("http://") != -1)
            {
                _loc5 = "http://";
            }
            else
            {
                _loc5 = "www.";
            } // end else if
            var _loc6 = msg.substring(msg.indexOf(_loc5), msg.length);
            var _loc7 = _loc6.indexOf(" ");
            if (_loc7 != -1)
            {
                var _loc3 = _loc6.substring(0, _loc7);
            }
            else
            {
                _loc3 = msg.substring(msg.indexOf(_loc5), msg.length);
            } // end else if
            if (_loc5 == "www.")
            {
                msg = replaceChar(msg, _loc3, "<u><a href=\'http://" + _loc3 + "\' target=\'_BLANK\'>" + _loc3 + "</a></u>");
            }
            else
            {
                msg = replaceChar(msg, _loc3, "<u><a href=\'" + _loc3 + "\' target=\'_BLANK\'>" + _loc3 + "</a></u>");
            } // end else if
            msg = replaceChar(msg, "javascript:", "js:");
        } // end if
        updateChats("<cu>", resObj[2], msg, fontColor);
        deleteText();
    } // end if
} // End of the function
function handlePublicMessage(resObj)
{
    if (_root.showPublicMessages == true)
    {
        msg = resObj[2];
        ignored = false;
        for (var _loc2 = 0; _loc2 < ignore.length; ++_loc2)
        {
            if (ignore[_loc2].toLowerCase() == resObj[3].toLowerCase())
            {
                ignored = true;
                break;
            } // end if
        } // end of for
        if (ignored == false)
        {
            memberTypeChat = msg.substr(0, 3);
            msg = msg.substr(3, msg.length);
            type = msg.substr(0, 3);
            msg = msg.substr(3, msg.length);
            if (memberTypeChat == "<a>")
            {
                fontColor = "#FF3737";
            }
            else if (memberTypeChat == "<z>")
            {
                fontColor = "#00FFFF";
            }
            else if (memberTypeChat == "<x>")
            {
                fontColor = "#00FF00";
            }
            else if (memberTypeChat == "<m>")
            {
                fontColor = "#00FF00";
            }
            else if (memberTypeChat == "<p>")
            {
                fontColor = "#FF9900";
            }
            else if (memberTypeChat == "<s>")
            {
                fontColor = "#B382C8";
            }
            else if (memberTypeChat == "<g>")
            {
                fontColor = "#FFCC00";
            }
            else
            {
                fontColor = "#FFFFFF";
            } // end else if
            if (type == "<l>")
            {
                fromMap = msg.substr(msg.indexOf("<") + 1, msg.indexOf(">") - 1);
                msg = msg.substr(msg.indexOf(">") + 1, msg.length);
            } // end if
            if (msg.indexOf("&") != -1)
            {
                msg = replaceChar(msg, "&", "&amp;");
            } // end if
            if (msg.indexOf("<") != -1)
            {
                msg = replaceChar(msg, "<", "&lt;");
            } // end if
            if (msg.indexOf(">") != -1)
            {
                msg = replaceChar(msg, ">", "&gt;");
            } // end if
            if (msg.indexOf("\"") != -1)
            {
                msg = replaceChar(msg, "\"", "&quot;");
            } // end if
            if (msg.indexOf("\'") != -1)
            {
                msg = replaceChar(msg, "\'", "&apos;");
            } // end if
            updateChats(type, resObj[3], msg, fontColor, fromMap);
        } // end if
    } // end if
} // End of the function
function updateChats(type, tempUsername, msg, fontColor, fromMap)
{
    if (type == "<g>")
    {
        if (englishChatSettings[0] == "1")
        {
            mainGUI.globalChatT.htmlText = mainGUI.globalChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.globalChatT.scroll = mainGUI.globalChatT.maxscroll;
            } // end if
            ++globalChatLength;
        } // end if
        if (tradingChatSettings[0] == "1")
        {
            mainGUI.tradeChatT.htmlText = mainGUI.tradeChatT.htmlText + ("[ENG] <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.tradeChatT.scroll = mainGUI.tradeChatT.maxscroll;
            } // end if
            ++tradeChatLength;
        } // end if
        if (localChatSettings[0] == "1")
        {
            mainGUI.localChatT.htmlText = mainGUI.localChatT.htmlText + ("[ENG] <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.localChatT.scroll = mainGUI.localChatT.maxscroll;
            } // end if
            ++localChatLength;
        } // end if
        if (nonEnglishChatSettings[0] == "1")
        {
            mainGUI.nonEnglishChatT.htmlText = mainGUI.nonEnglishChatT.htmlText + ("[ENG] <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.nonEnglishChatT.scroll = mainGUI.nonEnglishChatT.maxscroll;
            } // end if
            ++nonEnglishChatLength;
        } // end if
        if (clanChatSettings[0] == "1")
        {
            mainGUI.clanChatT.htmlText = mainGUI.clanChatT.htmlText + ("[ENG] <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.clanChatT.scroll = mainGUI.clanChatT.maxscroll;
            } // end if
            ++clanChatLength;
        } // end if
        if (customChatSettings[0] == "1")
        {
            if (customChat != "")
            {
                mainGUI.customChatT.htmlText = mainGUI.customChatT.htmlText + ("[ENG] <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
                if (checkAutoScroll() == true)
                {
                    mainGUI.customChatT.scroll = mainGUI.customChatT.maxscroll;
                } // end if
                ++customChatLength;
            } // end if
        } // end if
    }
    else if (type == "<l>")
    {
        if (String(fromMap).toLowerCase() == String(_root.map).toLowerCase())
        {
            if (englishChatSettings[2] == "1")
            {
                mainGUI.globalChatT.htmlText = mainGUI.globalChatT.htmlText + ("[LOCAL] <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
                if (checkAutoScroll() == true)
                {
                    mainGUI.globalChatT.scroll = mainGUI.globalChatT.maxscroll;
                } // end if
                ++globalChatLength;
            } // end if
            if (tradingChatSettings[2] == "1")
            {
                mainGUI.tradeChatT.htmlText = mainGUI.tradeChatT.htmlText + ("[LOCAL] <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
                if (checkAutoScroll() == true)
                {
                    mainGUI.tradeChatT.scroll = mainGUI.tradeChatT.maxscroll;
                } // end if
                ++tradeChatLength;
            } // end if
            if (localChatSettings[2] == "1")
            {
                mainGUI.localChatT.htmlText = mainGUI.localChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
                if (checkAutoScroll() == true)
                {
                    mainGUI.localChatT.scroll = mainGUI.localChatT.maxscroll;
                } // end if
                ++localChatLength;
            } // end if
            if (nonEnglishChatSettings[2] == "1")
            {
                mainGUI.nonEnglishChatT.htmlText = mainGUI.nonEnglishChatT.htmlText + ("[LOCAL] <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
                if (checkAutoScroll() == true)
                {
                    mainGUI.nonEnglishChatT.scroll = mainGUI.nonEnglishChatT.maxscroll;
                } // end if
                ++nonEnglishChatLength;
            } // end if
            if (clanChatSettings[2] == "1")
            {
                mainGUI.clanChatT.htmlText = mainGUI.clanChatT.htmlText + ("[LOCAL] <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
                if (checkAutoScroll() == true)
                {
                    mainGUI.clanChatT.scroll = mainGUI.clanChatT.maxscroll;
                } // end if
                ++clanChatLength;
            } // end if
            if (customChatSettings[2] == "1")
            {
                if (customChat != "")
                {
                    mainGUI.customChatT.htmlText = mainGUI.customChatT.htmlText + ("[LOCAL] <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
                    if (checkAutoScroll() == true)
                    {
                        mainGUI.customChatT.scroll = mainGUI.customChatT.maxscroll;
                    } // end if
                    ++customChatLength;
                } // end if
            } // end if
        } // end if
    }
    else if (type == "<t>")
    {
        if (englishChatSettings[1] == "1")
        {
            mainGUI.globalChatT.htmlText = mainGUI.globalChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#CCCCCC\'>[TRADE]</font> <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#CCCCCC\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.globalChatT.scroll = mainGUI.globalChatT.maxscroll;
            } // end if
            ++globalChatLength;
        } // end if
        if (tradingChatSettings[1] == "1")
        {
            mainGUI.tradeChatT.htmlText = mainGUI.tradeChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#CCCCCC\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.tradeChatT.scroll = mainGUI.tradeChatT.maxscroll;
            } // end if
            ++tradeChatLength;
        } // end if
        if (localChatSettings[1] == "1")
        {
            mainGUI.localChatT.htmlText = mainGUI.localChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#CCCCCC\'>[TRADE]</font> <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#CCCCCC\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.localChatT.scroll = mainGUI.localChatT.maxscroll;
            } // end if
            ++localChatLength;
        } // end if
        if (nonEnglishChatSettings[1] == "1")
        {
            mainGUI.nonEnglishChatT.htmlText = mainGUI.nonEnglishChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#CCCCCC\'>[TRADE]</font> <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#CCCCCC\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.nonEnglishChatT.scroll = mainGUI.nonEnglishChatT.maxscroll;
            } // end if
            ++nonEnglishChatLength;
        } // end if
        if (clanChatSettings[1] == "1")
        {
            mainGUI.clanChatT.htmlText = mainGUI.clanChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#CCCCCC\'>[TRADE]</font> <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#CCCCCC\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.clanChatT.scroll = mainGUI.clanChatT.maxscroll;
            } // end if
            ++clanChatLength;
        } // end if
        if (customChatSettings[1] == "1")
        {
            if (customChat != "")
            {
                mainGUI.customChatT.htmlText = mainGUI.customChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#CCCCCC\'>[TRADE]</font> <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#CCCCCC\'>: " + msg + "</font>");
                if (checkAutoScroll() == true)
                {
                    mainGUI.customChatT.scroll = mainGUI.customChatT.maxscroll;
                } // end if
                ++customChatLength;
            } // end if
        } // end if
    }
    else if (type == "<n>")
    {
        if (englishChatSettings[3] == "1")
        {
            mainGUI.globalChatT.htmlText = mainGUI.globalChatT.htmlText + ("[NE] <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.globalChatT.scroll = mainGUI.globalChatT.maxscroll;
            } // end if
            ++globalChatLength;
        } // end if
        if (tradingChatSettings[3] == "1")
        {
            mainGUI.tradeChatT.htmlText = mainGUI.tradeChatT.htmlText + ("[NE] <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.tradeChatT.scroll = mainGUI.tradeChatT.maxscroll;
            } // end if
            ++tradeChatLength;
        } // end if
        if (localChatSettings[3] == "1")
        {
            mainGUI.localChatT.htmlText = mainGUI.localChatT.htmlText + ("[NE] <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.localChatT.scroll = mainGUI.localChatT.maxscroll;
            } // end if
            ++localChatLength;
        } // end if
        if (nonEnglishChatSettings[3] == "1")
        {
            mainGUI.nonEnglishChatT.htmlText = mainGUI.nonEnglishChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.nonEnglishChatT.scroll = mainGUI.nonEnglishChatT.maxscroll;
            } // end if
            ++nonEnglishChatLength;
        } // end if
        if (clanChatSettings[3] == "1")
        {
            mainGUI.clanChatT.htmlText = mainGUI.clanChatT.htmlText + ("[NE] <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.clanChatT.scroll = mainGUI.clanChatT.maxscroll;
            } // end if
            ++clanChatLength;
        } // end if
        if (customChatSettings[3] == "1")
        {
            if (customChat != "")
            {
                mainGUI.customChatT.htmlText = mainGUI.customChatT.htmlText + ("[NE] <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\'>: " + msg + "</font>");
                if (checkAutoScroll() == true)
                {
                    mainGUI.customChatT.scroll = mainGUI.customChatT.maxscroll;
                } // end if
                ++customChatLength;
            } // end if
        } // end if
    }
    else if (type == "<cl>")
    {
        if (englishChatSettings[4] == "1")
        {
            mainGUI.globalChatT.htmlText = mainGUI.globalChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#F364FF\'>[CLAN] </font><font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#CC66CC\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.globalChatT.scroll = mainGUI.globalChatT.maxscroll;
            } // end if
            ++globalChatLength;
        } // end if
        if (tradingChatSettings[4] == "1")
        {
            mainGUI.tradeChatT.htmlText = mainGUI.tradeChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#F364FF\'>[CLAN] </font><font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#CC66CC\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.tradeChatT.scroll = mainGUI.tradeChatT.maxscroll;
            } // end if
            ++tradeChatLength;
        } // end if
        if (localChatSettings[4] == "1")
        {
            mainGUI.localChatT.htmlText = mainGUI.localChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#F364FF\'>[CLAN] </font><font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#CC66CC\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.localChatT.scroll = mainGUI.localChatT.maxscroll;
            } // end if
            ++localChatLength;
        } // end if
        if (nonEnglishChatSettings[4] == "1")
        {
            mainGUI.nonEnglishChatT.htmlText = mainGUI.nonEnglishChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#F364FF\'>[CLAN] </font><font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#CC66CC\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.nonEnglishChatT.scroll = mainGUI.nonEnglishChatT.maxscroll;
            } // end if
            ++nonEnglishChatLength;
        } // end if
        if (clanChatSettings[4] == "1")
        {
            mainGUI.clanChatT.htmlText = mainGUI.clanChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#F364FF\'>[CLAN] </font><font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#CC66CC\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.clanChatT.scroll = mainGUI.clanChatT.maxscroll;
            } // end if
            ++clanChatLength;
        } // end if
        if (customChatSettings[4] == "1")
        {
            if (customChat != "")
            {
                mainGUI.customChatT.htmlText = mainGUI.customChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#F364FF\'>[CLAN] </font><font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#CC66CC\'>: " + msg + "</font>");
                if (checkAutoScroll() == true)
                {
                    mainGUI.customChatT.scroll = mainGUI.customChatT.maxscroll;
                } // end if
                ++customChatLength;
            } // end if
        } // end if
    }
    else if (type == "<cu>")
    {
        if (englishChatSettings[5] == "1")
        {
            mainGUI.globalChatT.htmlText = mainGUI.globalChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#FF6600\'>[" + customChat + "] </font><font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#FF6600\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.globalChatT.scroll = mainGUI.globalChatT.maxscroll;
            } // end if
            ++globalChatLength;
        } // end if
        if (tradingChatSettings[5] == "1")
        {
            mainGUI.tradeChatT.htmlText = mainGUI.tradeChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#FF6600\'>[" + customChat + "] </font><font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#FF6600\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.tradeChatT.scroll = mainGUI.tradeChatT.maxscroll;
            } // end if
            ++tradeChatLength;
        } // end if
        if (localChatSettings[5] == "1")
        {
            mainGUI.localChatT.htmlText = mainGUI.localChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#FF6600\'>[" + customChat + "] </font><font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#FF6600\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.localChatT.scroll = mainGUI.localChatT.maxscroll;
            } // end if
            ++localChatLength;
        } // end if
        if (nonEnglishChatSettings[5] == "1")
        {
            mainGUI.nonEnglishChatT.htmlText = mainGUI.nonEnglishChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#FF6600\'>[" + customChat + "] </font><font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#FF6600\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.nonEnglishChatT.scroll = mainGUI.nonEnglishChatT.maxscroll;
            } // end if
            ++nonEnglishChatLength;
        } // end if
        if (clanChatSettings[5] == "1")
        {
            mainGUI.clanChatT.htmlText = mainGUI.clanChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#FF6600\'>[" + customChat + "] </font><font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#FF6600\'>: " + msg + "</font>");
            if (checkAutoScroll() == true)
            {
                mainGUI.clanChatT.scroll = mainGUI.clanChatT.maxscroll;
            } // end if
            ++clanChatLength;
        } // end if
        if (customChatSettings[5] == "1")
        {
            if (customChat != "")
            {
                mainGUI.customChatT.htmlText = mainGUI.customChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#FF6600\'>[" + customChat + "] </font><font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + tempUsername + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#FF6600\'>: " + msg + "</font>");
                if (checkAutoScroll() == true)
                {
                    mainGUI.customChatT.scroll = mainGUI.customChatT.maxscroll;
                } // end if
                ++customChatLength;
            } // end else if
        } // end else if
    } // end else if
    deleteText();
} // End of the function
function addToItemBox(item, amount)
{
    _root.itemBox.push([String(item), Number(amount)]);
    makeItemBox();
} // End of the function
function addToPokemonBox(pokemonToAdd, updatePokemonBox)
{
    _root.pokemonBox.push(pokemonToAdd);
    if (updatePokemonBox != false)
    {
        makePokemonBox();
    } // end if
} // End of the function
function firstLoadFunction()
{
    if (userPokemon.length > 0)
    {
        var _loc3 = true;
        for (var _loc2 = 0; _loc2 < userPokemon.length; ++_loc2)
        {
            if (userPokemon[_loc2].currentHp > 0)
            {
                _loc3 = false;
                break;
            } // end if
        } // end of for
        if (_loc3 == true)
        {
            getTimestamp("tpToPc");
        } // end if
    } // end if
    if (player.tileX == undefined)
    {
        if (collisionArray[_root.tileY][_root.tileX] == undefined)
        {
            loadNearestPokecenter();
        } // end if
    }
    else if (collisionArray[player.tileY][player.tileX] == undefined)
    {
        loadNearestPokecenter();
    } // end else if
} // End of the function
function handleClanMessage(resObj)
{
    var _loc2 = resObj[2];
    var _loc6 = false;
    for (var _loc3 = 0; _loc3 < ignore.length; ++_loc3)
    {
        if (ignore[_loc3].toLowerCase() == resObj[3].toLowerCase())
        {
            _loc6 = true;
            break;
        } // end if
    } // end of for
    var _loc4 = _loc2.substr(0, 3);
    _loc2 = _loc2.substr(3, _loc2.length);
    if (_loc6 == false || (_loc4 == "<a>" || _loc4 == "<z>" || _loc4 == "<x>" || _loc4 == "<m>"))
    {
        if (_loc4 == "<a>")
        {
            fontColor = "#FF3737";
        }
        else if (_loc4 == "<z>")
        {
            fontColor = "#00FFFF";
        }
        else if (_loc4 == "<x>")
        {
            fontColor = "#00FF00";
        }
        else if (_loc4 == "<m>")
        {
            fontColor = "#00FF00";
        }
        else if (_loc4 == "<p>")
        {
            fontColor = "#FF9900";
        }
        else if (_loc4 == "<s>")
        {
            fontColor = "#B382C8";
        }
        else if (_loc4 == "<g>")
        {
            fontColor = "#FFCC00";
        }
        else
        {
            fontColor = "#FFFFFF";
        } // end else if
        if (_loc2.indexOf("&") != -1)
        {
            _loc2 = replaceChar(_loc2, "&", "&amp;");
        } // end if
        if (_loc2.indexOf("<") != -1)
        {
            _loc2 = replaceChar(_loc2, "<", "&lt;");
        } // end if
        if (_loc2.indexOf(">") != -1)
        {
            _loc2 = replaceChar(_loc2, ">", "&gt;");
        } // end if
        if (_loc2.indexOf("\"") != -1)
        {
            _loc2 = replaceChar(_loc2, "\"", "&quot;");
        } // end if
        if (_loc2.indexOf("\'") != -1)
        {
            _loc2 = replaceChar(_loc2, "\'", "&apos;");
        } // end if
        if (_root.allowSwearing == "0" && swearFilter(_loc2) == false)
        {
            _loc2 = "This message has been removed. Allow swearing if you would like to see messages that contain swearwords.";
        } // end if
        if (_loc2.indexOf("www.") != -1 || _loc2.indexOf("http://") != -1 || _loc2.indexOf("https://") != -1)
        {
            if (_loc2.indexOf("https://") != -1)
            {
                var _loc8 = "https://";
            }
            else if (_loc2.indexOf("http://") != -1)
            {
                _loc8 = "http://";
            }
            else
            {
                _loc8 = "www.";
            } // end else if
            var _loc9 = _loc2.substring(_loc2.indexOf(_loc8), _loc2.length);
            var _loc10 = _loc9.indexOf(" ");
            if (_loc10 != -1)
            {
                var _loc7 = _loc9.substring(0, _loc10);
            }
            else
            {
                _loc7 = _loc2.substring(_loc2.indexOf(_loc8), _loc2.length);
            } // end else if
            if (_loc8 == "www.")
            {
                _loc2 = replaceChar(_loc2, _loc7, "<u><a href=\'http://" + _loc7 + "\' target=\'_BLANK\'>" + _loc7 + "</a></u>");
            }
            else
            {
                _loc2 = replaceChar(_loc2, _loc7, "<u><a href=\'" + _loc7 + "\' target=\'_BLANK\'>" + _loc7 + "</a></u>");
            } // end else if
            _loc2 = replaceChar(_loc2, "javascript:", "js:");
        } // end if
        updateChats("<cl>", resObj[3], _loc2, fontColor);
    } // end if
    if (resObj[3] == _root.username)
    {
    } // end if
} // End of the function
function handleClanWarsEnding(resObj)
{
    _root.clanWarsActive = false;
    clanWarTier = Number(resObj[8]);
    systemMessage("<b>Tier " + clanWarTier + " Clan Wars has ended!<b>", "#FFFFFF");
    if (map == "Clan Building")
    {
        _root.mapExits = [];
        _root.mapExits.push([28, 21, "Vermilion City", 46, 21]);
    }
    else if (map == "Clan Wars T1" || map == "Clan Wars T2" || map == "Clan Wars T3")
    {
        loadMap(true, "Vermilion City Pokecenter", 19, 18);
    } // end else if
    systemMessage("<b>" + resObj[2] + " achieved first place! (" + resObj[3] + " BP)</b>", "#FFFFFF");
    systemMessage("<b>" + resObj[4] + " achieved second place! (" + resObj[5] + " BP)</b>", "#FFFFFF");
    systemMessage("<b>" + resObj[6] + " achieved third place! (" + resObj[7] + " BP)</b>", "#FFFFFF");
    systemMessage("<b>" + resObj[11] + " achieved fourth place! (" + resObj[12] + " BP)</b>", "#FFFFFF");
    systemMessage("<b>" + resObj[13] + " achieved fifth place! (" + resObj[14] + " BP)</b>", "#FFFFFF");
    systemMessage("<b>Best Player: " + resObj[9] + " (W-L: " + resObj[10] + ")</b>", "#FFFFFF");
    if (clanWarTier == 1)
    {
        systemMessage("<b>The next tier of Clan Wars will begin in 10 minutes.<b>", "#FFFFFF");
    } // end if
    if (_root.username.toLowerCase() == resObj[9].toLowerCase())
    {
        systemMessage("<b>You received 200 Credits and 25 Clan War Tokens for being the top performing player during Clan Wars.<b>", "#FFFFFF");
        credits = credits + 200;
        mainGUI.creditsT.htmlText = "<b>" + format(credits) + "c</b>";
        mainGUI.creditShop.creditsT.htmlText = "<b>" + format(credits) + "c";
        addToItemBox("Clan War Token", 25);
    } // end if
} // End of the function
function handlePM(resObj)
{
    ignored = false;
    for (var _loc3 = 0; _loc3 < ignore.length; ++_loc3)
    {
        if (ignore[_loc3].toLowerCase() == resObj[2].toLowerCase())
        {
            ignored = true;
            break;
        } // end if
    } // end of for
    if (ignored == false)
    {
        lastPM2 = resObj[2];
        memberTypeChat = resObj[3].substr(0, 3);
        msg = resObj[3].substr(3, resObj[3].length);
        if (msg.indexOf("&") != -1)
        {
            msg = replaceChar(msg, "&", "&amp;");
        } // end if
        if (msg.indexOf("<") != -1)
        {
            msg = replaceChar(msg, "<", "&lt;");
        } // end if
        if (msg.indexOf(">") != -1)
        {
            msg = replaceChar(msg, ">", "&gt;");
        } // end if
        if (msg.indexOf("\"") != -1)
        {
            msg = replaceChar(msg, "\"", "&quot;");
        } // end if
        if (msg.indexOf("\'") != -1)
        {
            msg = replaceChar(msg, "\'", "&apos;");
        } // end if
        if (resObj[2].indexOf("&") != -1)
        {
            resObj[2] = replaceChar(resObj[2], "&", "&amp;");
        } // end if
        if (resObj[2].indexOf("<") != -1)
        {
            resObj[2] = replaceChar(resObj[2], "<", "&lt;");
        } // end if
        if (resObj[2].indexOf(">") != -1)
        {
            resObj[2] = replaceChar(resObj[2], ">", "&gt;");
        } // end if
        if (resObj[2].indexOf("\"") != -1)
        {
            resObj[2] = replaceChar(resObj[2], "\"", "&quot;");
        } // end if
        if (resObj[2].indexOf("\'") != -1)
        {
            resObj[2] = replaceChar(resObj[2], "\'", "&apos;");
        } // end if
        if (memberTypeChat == "<a>")
        {
            fontColor = "#FF3737";
        }
        else if (memberTypeChat == "<z>")
        {
            fontColor = "#00FFFF";
        }
        else if (memberTypeChat == "<x>")
        {
            fontColor = "#00FF00";
        }
        else if (memberTypeChat == "<m>")
        {
            fontColor = "#00FF00";
        }
        else if (memberTypeChat == "<p>")
        {
            fontColor = "#FF9900";
        }
        else if (memberTypeChat == "<s>")
        {
            fontColor = "#B382C8";
        }
        else if (memberTypeChat == "<g>")
        {
            fontColor = "#FFCC00";
        }
        else
        {
            fontColor = "#FFFFFF";
        } // end else if
        if (_root.allowSwearing == "0" && swearFilter(msg) == false)
        {
            msg = "This message has been removed. Allow swearing if you would like to see messages that contain swearwords.";
        } // end if
        if (msg.indexOf("www.") != -1 || msg.indexOf("http://") != -1 || msg.indexOf("https://") != -1)
        {
            if (msg.indexOf("https://") != -1)
            {
                var _loc5 = "https://";
            }
            else if (msg.indexOf("http://") != -1)
            {
                _loc5 = "http://";
            }
            else
            {
                _loc5 = "www.";
            } // end else if
            var _loc6 = msg.substring(msg.indexOf(_loc5), msg.length);
            var _loc7 = _loc6.indexOf(" ");
            if (_loc7 != -1)
            {
                var _loc4 = _loc6.substring(0, _loc7);
            }
            else
            {
                _loc4 = msg.substring(msg.indexOf(_loc5), msg.length);
            } // end else if
            if (_loc5 == "www.")
            {
                msg = replaceChar(msg, _loc4, "<u><a href=\'http://" + _loc4 + "\' target=\'_BLANK\'>" + _loc4 + "</a></u>");
            }
            else
            {
                msg = replaceChar(msg, _loc4, "<u><a href=\'" + _loc4 + "\' target=\'_BLANK\'>" + _loc4 + "</a></u>");
            } // end else if
            msg = replaceChar(msg, "javascript:", "js:");
        } // end if
        mainGUI.globalChatT.htmlText = mainGUI.globalChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>[From:</font> <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + resObj[2] + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>]: " + msg + "</font>");
        mainGUI.localChatT.htmlText = mainGUI.localChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>[From:</font> <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + resObj[2] + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>]: " + msg + "</font>");
        mainGUI.tradeChatT.htmlText = mainGUI.tradeChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>[From:</font> <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + resObj[2] + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>]: " + msg + "</font>");
        mainGUI.nonEnglishChatT.htmlText = mainGUI.nonEnglishChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>[From:</font> <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + resObj[2] + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>]: " + msg + "</font>");
        mainGUI.clanChatT.htmlText = mainGUI.clanChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>[From:</font> <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + resObj[2] + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>]: " + msg + "</font>");
        mainGUI.customChatT.htmlText = mainGUI.customChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>[From:</font> <font size=\'" + _root.chatFontSize + "\' color =\'" + fontColor + "\'>" + resObj[2] + "</font><font size=\'" + _root.chatFontSize + "\' color =\'#F4F400\'>]: " + msg + "</font>");
        if (checkAutoScroll() == true)
        {
            mainGUI.globalChatT.scroll = mainGUI.globalChatT.maxscroll;
            mainGUI.localChatT.scroll = mainGUI.localChatT.maxscroll;
            mainGUI.tradeChatT.scroll = mainGUI.tradeChatT.maxscroll;
            mainGUI.nonEnglishChatT.scroll = mainGUI.nonEnglishChatT.maxscroll;
            mainGUI.clanChatT.scroll = mainGUI.clanChatT.maxscroll;
            mainGUI.customChatT.scroll = mainGUI.customChatT.maxscroll;
        } // end if
        ++globalChatLength;
        ++localChatLength;
        ++tradeChatLength;
        ++clanChatLength;
        ++nonEnglishChatLength;
        ++customChatLength;
        deleteText();
    } // end if
} // End of the function
function handleEndTrade(resObj)
{
    if (resObj.inventory != undefined)
    {
        _root.inventory = resObj.inventory;
        remakeInventory();
        systemMessage("The trade was successful.");
    } // end if
    if (resObj.userPokemon != undefined)
    {
        _root.userPokemon = resObj.userPokemon;
        loadPokemonIcons();
    } // end if
    if (resObj.money != undefined)
    {
        _root.money = Number(resObj.money);
        _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(_root.money) + "</b>";
    } // end if
    removeMovieClip (_root.mainGUI.tradeBox);
    Selection.setFocus(null);
    _root.trading = false;
    _root.canMove = true;
    _root.guiUp = false;
    _root.buttonClicked = false;
    if (_root.moveType == "bike")
    {
        if (_root.dir == "up")
        {
            drawPlayer(_root.player, 0, 1);
        }
        else if (dir == "down")
        {
            drawPlayer(_root.player, 0, 0);
        }
        else if (dir == "left")
        {
            drawPlayer(_root.player, 0, 2);
        }
        else if (dir == "right")
        {
            drawPlayer(_root.player, 0, 3);
        } // end else if
        delete _root.player.mount;
        _root.moveType = "";
        _root.moveMapSpeed = 8 * _root.movementSpeedMod;
    } // end if
} // End of the function
function handleBattleMove(resObj)
{
    _root.userPokemon = parseMultiPokemon(resObj[10]);
    var _loc5 = parseArray(resObj[11]);
    _root.newPokemon = [];
    _root.newPokemon.ability = _loc5[0];
    _root.newPokemon.ailment = _loc5[1];
    _root.newPokemon.level = Number(_loc5[2]);
    _root.newPokemon.elite = _loc5[3];
    _root.newPokemon.name = _loc5[4];
    _root.newPokemon.id = Number(_loc5[5]);
    if (_loc5[6] == "true")
    {
        _root.newPokemon.shiny = true;
    }
    else
    {
        _root.newPokemon.shiny = false;
    } // end else if
    _root.newPokemon.form = _loc5[7];
    _root.newPokemon.hp = Number(_loc5[8]);
    _root.newPokemon.currentHp = Number(_loc5[9]);
    _root.newPokemon.type = Number(_loc5[10]);
    _root.newPokemon.type2 = Number(_loc5[11]);
    _root.newPokemon.startingHp = _root.newPokemon.currentHp;
    _root.canSwitchPokemon = true;
    mainGUI.battleBackground.pokemonB.gotoAndStop(1);
    _root.battleText = resObj[9].split("|");
    for (var _loc2 = 0; _loc2 < battleText.length; ++_loc2)
    {
        battleText[_loc2] = battleText[_loc2].split(",");
    } // end of for
    _root.futureActivePokemon = undefined;
    _root.futureHpAmount = Number(resObj[7]);
    _root.activePokemon = Number(resObj[6]);
    userPokemon[activePokemon].battleMoves = resObj[16].split(",");
    if (String(_root.newPokemon.ability) == "23" && (_root.userPokemon[activePokemon].type != 8 && _root.userPokemon[activePokemon].type2 != 8 && String(userPokemon[activePokemon].ability) != "23"))
    {
        if (_root.userPokemon[activePokemon].currentHp > 0 && _root.userPokemon[activePokemon].heldItem != "Shed Shell")
        {
            _root.canSwitchPokemon = false;
            _root.mainGUI.battleBackground.pokemonB.gotoAndStop("dark");
        } // end if
    } // end if
    if (String(_root.newPokemon.ability) == "42" && (_root.userPokemon[activePokemon].type == 9 || _root.userPokemon[activePokemon].type2 == 9) && (_root.userPokemon[activePokemon].type != 8 || _root.userPokemon[activePokemon].type2 != 8))
    {
        if (_root.userPokemon[activePokemon].currentHp > 0 && _root.userPokemon[activePokemon].heldItem != "Shed Shell")
        {
            _root.canSwitchPokemon = false;
            _root.mainGUI.battleBackground.pokemonB.gotoAndStop("dark");
        } // end if
    } // end if
    var _loc3 = resObj[12].split(",");
    for (var _loc2 = 0; _loc2 < _loc3.length; ++_loc2)
    {
        _loc3[_loc2] = Number(_loc3[_loc2]);
    } // end of for
    var _loc4 = resObj[13].split(",");
    for (var _loc2 = 0; _loc2 < _loc4.length; ++_loc2)
    {
        _loc4[_loc2] = Number(_loc4[_loc2]);
    } // end of for
    _root.ppC = _loc3;
    _root.ppM = _loc4;
    fixPPText();
    _root.statBoosts = parseMultiArray(resObj[18]);
    for (var _loc2 = 0; _loc2 < _root.statBoosts[0].length; ++_loc2)
    {
        _root.statBoosts[0][_loc2] = Number(_root.statBoosts[0][_loc2]);
    } // end of for
    for (var _loc2 = 0; _loc2 < _root.statBoosts[1].length; ++_loc2)
    {
        _root.statBoosts[1][_loc2] = Number(_root.statBoosts[1][_loc2]);
    } // end of for
    _root.battleWeather = statBoosts[2][0];
    _root.battleTurns = Number(statBoosts[3][0]);
    _root.opponentAliveArray = statBoosts[4];
    if (resObj[2] == "W")
    {
        _root.battleWon = true;
        if (resObj[8] != "0")
        {
            money = Number(resObj[8]);
        } // end if
        mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
    }
    else if (resObj[5] == "1")
    {
        _root.battleEnd = true;
    } // end else if
    displayBattleText();
} // End of the function
function npcMapTest()
{
    if (customMaps == undefined)
    {
        systemMessage("Loading custom maps, please wait.");
        canMove = false;
        getTimestamp("loadCustomMaps");
    }
    else
    {
        showCreateMapGUI();
    } // end else if
} // End of the function
function makeCustomMap(mapDataString, mapDataString2, mapDataString3)
{
    _root.mapData = parseMultiArray(mapDataString);
    _root.mapData2 = parseMultiArray(mapDataString2);
    _root.mapData3 = parseMultiArray(mapDataString3);
    _root.collisionArray = createCustomMap(mapData[0].length, mapData.length, 0);
    _root.mapExits = [[0, 0, "Vermilion City", 23, 24]];
    if (_root.b_Tileset1 == undefined)
    {
        _root.b_Tileset1 = flash.display.BitmapData.loadBitmap("tileset1");
    } // end if
    _root.mapBitmap = new flash.display.BitmapData(mapData[0].length * 32, mapData.length * 32, false, 0);
    _root.mapBitmap2 = new flash.display.BitmapData(mapData2[0].length * 32, mapData2.length * 32, true, 0);
    _root.mapBitmap3 = new flash.display.BitmapData(mapData3[0].length * 32, mapData3.length * 32, true, 0);
    mapLayer1.attachBitmap(mapBitmap, this.getNextHighestDepth());
    mapLayer1_2.attachBitmap(mapBitmap2, this.getNextHighestDepth());
    mapLayer3.attachBitmap(mapBitmap3, this.getNextHighestDepth());
    for (var _loc4 = 0; _loc4 < mapData.length; ++_loc4)
    {
        for (var _loc3 = 0; _loc3 < mapData[_loc4].length; ++_loc3)
        {
            var _loc8 = mapData[_loc4][_loc3].substr(0, mapData[_loc4][_loc3].indexOf("_"));
            var _loc5 = mapData[_loc4][_loc3].substr(mapData[_loc4][_loc3].indexOf("_") + 1, mapData[_loc4][_loc3].length);
            if (_loc8 == "1")
            {
                var _loc7 = _root.b_Tileset1.width / 32;
                var _loc6 = Math.ceil(_loc5 / _loc7);
                var _loc9 = _loc5 - _loc7 * (_loc6 - 1);
                mapBitmap.copyPixels(_root.b_Tileset1, new flash.geom.Rectangle(_loc9 * 32 - 32, _loc6 * 32 - 32, 32, 32), new flash.geom.Point(_loc3 * 32, _loc4 * 32));
            } // end if
        } // end of for
    } // end of for
    for (var _loc4 = 0; _loc4 < mapData2.length; ++_loc4)
    {
        for (var _loc3 = 0; _loc3 < mapData2[_loc4].length; ++_loc3)
        {
            if (mapData2[_loc4][_loc3] != "0")
            {
                _loc8 = mapData2[_loc4][_loc3].substr(0, mapData2[_loc4][_loc3].indexOf("_"));
                _loc5 = mapData2[_loc4][_loc3].substr(mapData2[_loc4][_loc3].indexOf("_") + 1, mapData2[_loc4][_loc3].length);
                if (_loc8 == "1")
                {
                    _loc7 = _root.b_Tileset1.width / 32;
                    _loc6 = Math.ceil(_loc5 / _loc7);
                    _loc9 = _loc5 - _loc7 * (_loc6 - 1);
                    mapBitmap2.copyPixels(_root.b_Tileset1, new flash.geom.Rectangle(_loc9 * 32 - 32, _loc6 * 32 - 32, 32, 32), new flash.geom.Point(_loc3 * 32, _loc4 * 32));
                } // end if
            } // end if
        } // end of for
    } // end of for
    for (var _loc4 = 0; _loc4 < mapData3.length; ++_loc4)
    {
        for (var _loc3 = 0; _loc3 < mapData3[_loc4].length; ++_loc3)
        {
            if (mapData3[_loc4][_loc3] != "0")
            {
                _loc8 = mapData3[_loc4][_loc3].substr(0, mapData3[_loc4][_loc3].indexOf("_"));
                _loc5 = mapData3[_loc4][_loc3].substr(mapData3[_loc4][_loc3].indexOf("_") + 1, mapData3[_loc4][_loc3].length);
                if (_loc8 == "1")
                {
                    _loc7 = _root.b_Tileset1.width / 32;
                    _loc6 = Math.ceil(_loc5 / _loc7);
                    _loc9 = _loc5 - _loc7 * (_loc6 - 1);
                    mapBitmap3.copyPixels(_root.b_Tileset1, new flash.geom.Rectangle(_loc9 * 32 - 32, _loc6 * 32 - 32, 32, 32), new flash.geom.Point(_loc3 * 32, _loc4 * 32));
                } // end if
            } // end if
        } // end of for
    } // end of for
    if (smallMap == false)
    {
        mapLayer1._width = mapLayer1._width * 2;
        mapLayer1._height = mapLayer1._height * 2;
        mapLayer1_2._width = mapLayer1_2._width * 2;
        mapLayer1_2._height = mapLayer1_2._height * 2;
        mapLayer3._width = mapLayer3._width * 2;
        mapLayer3._height = mapLayer3._height * 2;
    } // end if
    if (player.tileX != undefined)
    {
        mapLayer1._x = player.tileX * -64 + newWidth / 2 - 32;
        mapLayer1._y = player.tileY * -64 + newHeight / 2 - 31;
    }
    else
    {
        mapLayer1._x = tileX * -64 + newWidth / 2 - 32;
        mapLayer1._y = tileY * -64 + newHeight / 2 - 31;
    } // end else if
    mapLayer1_2._x = mapLayer1._x;
    mapLayer1_2._y = mapLayer1._y;
    mapLayer2._x = mapLayer1._x;
    mapLayer2._y = mapLayer1._y;
    mapLayer3._x = mapLayer1._x;
    mapLayer3._y = mapLayer1._y;
    setDefaultPlayerFrame(player);
    player._visible = true;
    removeMovieClip (mainGUI.leaveB);
    var _loc10 = _root.mainGUI.attachMovie("leaveB", "leaveB", mainGUI.getNextHighestDepth());
    _loc10._x = -213;
    _loc10._y = 305 + heightOffset;
    mainGUI.leaveB.onRelease = function ()
    {
        if (darkScreenLoadMap == undefined)
        {
            loadMap(true, "Vermilion City", 23, 24);
        } // end if
    };
    assignMouseEvents(mainGUI.leaveB);
    fixDepths();
    mainGUI.mapT.htmlText = "<b>" + map;
    if (_root.mapOwner.toLowerCase() == _root.username.toLowerCase())
    {
        showMapEdit();
    } // end if
    darkScreenLoadMap.loadedMap = true;
} // End of the function
function createCustomMap(mapWidth, mapHeight, defaultTile)
{
    var _loc6 = [];
    for (var _loc3 = 0; _loc3 < mapHeight; ++_loc3)
    {
        var _loc2 = [];
        for (var _loc1 = 0; _loc1 < mapWidth; ++_loc1)
        {
            _loc2.push(defaultTile);
        } // end of for
        _loc6.push(_loc2);
    } // end of for
    return (_loc6);
} // End of the function
function handleCreateMap(resObj)
{
    customMaps.push(resObj[2]);
    systemMessage(resObj[2] + " has been created. You may now load this map.");
    _root.creatingMap = undefined;
    removeMovieClip (createMapGUI);
    guiUp = false;
    canMove = true;
} // End of the function
function showCreateMapGUI()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        threeButtonBox = _root.attachMovie("fourButtonBox", "threeButtonBox", _root.getNextHighestDepth());
        threeButtonBox._x = newWidth / 2;
        threeButtonBox._y = newHeight / 2;
        threeButtonBox.nameT.htmlText = "<b>Scientist";
        threeButtonBox.msgT.htmlText = "What do you want to do?";
        threeButtonBox.b1T.htmlText = "<b>Create new map.";
        threeButtonBox.b2T.htmlText = "<b>Manage your existing maps.";
        threeButtonBox.b3T.htmlText = "<b>Enter another player\'s map.";
        threeButtonBox.b4T.htmlText = "<b>Leave.";
        assignMouseEvents(threeButtonBox.b1);
        assignMouseEvents(threeButtonBox.b2);
        assignMouseEvents(threeButtonBox.b3);
        assignMouseEvents(threeButtonBox.b4);
        threeButtonBox.b1.onRelease = function ()
        {
            if (customMaps == undefined || customMaps.length < 3)
            {
                removeMovieClip (threeButtonBox);
                createMapGUI = _root.attachMovie("inputBox", "createMapGUI", _root.getNextHighestDepth());
                createMapGUI.nameT.htmlText = "<b>Scientist";
                createMapGUI.msgT.text = "Enter map name.";
                createMapGUI._x = newWidth / 2;
                createMapGUI._y = newHeight / 2;
                createMapGUI.createB.nameT.htmlText = "<b>Continue";
                createMapGUI.createB.nameText = "Continue";
                createMapGUI.inputT.restrict = "A-Z a-z 0-9^ ";
                Selection.setFocus(createMapGUI.inputT);
                assignMouseEvents(createMapGUI.createB, true);
                assignMouseEvents(createMapGUI.noB);
                createMapGUI.createB.onRelease = function ()
                {
                    if (createMapGUI.mapName == undefined)
                    {
                        if (createMapGUI.inputT.text != "")
                        {
                            createMapGUI.mapName = createMapGUI.inputT.text;
                            createMapGUI.msgT.text = "Enter map password (you can leave this blank for no password).";
                            createMapGUI.inputT.text = "";
                        }
                        else
                        {
                            systemMessage("Please enter a map name.");
                        } // end else if
                    }
                    else if (createMapGUI.mapPassword == undefined)
                    {
                        createMapGUI.mapPassword = createMapGUI.inputT.text;
                        createMapGUI.inputT.restrict = "0-9";
                        createMapGUI.msgT.text = "Enter map width (2-50).";
                        createMapGUI.inputT.text = "";
                    }
                    else if (createMapGUI.mapWidth == undefined)
                    {
                        if (createMapGUI.inputT.text != "")
                        {
                            createMapGUI.mapWidth = Number(createMapGUI.inputT.text);
                            createMapGUI.inputT.restrict = "0-9";
                            createMapGUI.msgT.text = "Enter map height (2-50).";
                            createMapGUI.inputT.text = "";
                        }
                        else
                        {
                            systemMessage("Please enter the map width.");
                        } // end else if
                    }
                    else if (createMapGUI.mapHeight == undefined)
                    {
                        if (createMapGUI.inputT.text != "")
                        {
                            createMapGUI.mapHeight = Number(createMapGUI.inputT.text);
                            createMapGUI.inputT.restrict = "0-9";
                            _root.creatingMap = true;
                            systemMessage("Map creation in progress, please wait.");
                            getTimestamp("createMap");
                        }
                        else
                        {
                            systemMessage("Please enter the map height.");
                        } // end else if
                    } // end else if
                };
                createMapGUI.noB.onRelease = function ()
                {
                    if (_root.creatingMap == undefined)
                    {
                        canMove = true;
                        guiUp = false;
                        removeMovieClip (createMapGUI);
                    }
                    else
                    {
                        systemMessage("Map creation in progress, please wait.");
                    } // end else if
                };
            }
            else
            {
                systemMessage("You have already created 3 maps.");
            } // end else if
        };
        threeButtonBox.b2.onRelease = function ()
        {
            if (customMaps.length > 0)
            {
                removeMovieClip (threeButtonBox);
                loadCustomMapList();
            }
            else
            {
                systemMessage("You haven\'t created any maps.");
            } // end else if
        };
        threeButtonBox.b3.onRelease = function ()
        {
            removeMovieClip (threeButtonBox);
            enterMapGUI = _root.attachMovie("inputBox", "enterMapGUI", _root.getNextHighestDepth());
            enterMapGUI.nameT.htmlText = "<b>Scientist";
            enterMapGUI.msgT.text = "Enter target map name: ";
            enterMapGUI._x = newWidth / 2;
            enterMapGUI._y = newHeight / 2;
            enterMapGUI.createB.nameT.htmlText = "<b>Continue";
            enterMapGUI.createB.nameText = "Continue";
            enterMapGUI.inputT.restrict = "A-Z a-z 0-9^ ";
            Selection.setFocus(enterMapGUI.inputT);
            assignMouseEvents(enterMapGUI.createB, true);
            assignMouseEvents(enterMapGUI.noB);
            enterMapGUI.createB.onRelease = function ()
            {
                if (enterMapGUI.mapName == undefined)
                {
                    if (enterMapGUI.inputT.text != "")
                    {
                        enterMapGUI.mapName = enterMapGUI.inputT.text;
                        enterMapGUI.msgT.text = "Enter map password: ";
                        enterMapGUI.inputT.text = "";
                    }
                    else
                    {
                        systemMessage("Please enter a map name.");
                    } // end else if
                }
                else if (enterMapGUI.mapPassword == undefined)
                {
                    _root.loadingTargetMap = true;
                    enterMapGUI.mapPassword = enterMapGUI.inputT.text;
                    getTimestamp("loadTargetMap", enterMapGUI.mapName, enterMapGUI.mapPassword);
                    systemMessage("Checking map credentials, please wait.");
                } // end else if
            };
            enterMapGUI.noB.onRelease = function ()
            {
                if (_root.loadingTargetMap == undefined)
                {
                    canMove = true;
                    guiUp = false;
                    removeMovieClip (enterMapGUI);
                }
                else
                {
                    systemMessage("Checking map credentials, please wait.");
                } // end else if
            };
        };
        threeButtonBox.b4.onRelease = function ()
        {
            removeMovieClip (threeButtonBox);
            guiUp = false;
            canMove = true;
        };
    } // end if
} // End of the function
function loadCustomMapList()
{
    removeMovieClip (mainGUI.createMapGUI);
    mainGUI.attachMovie("createMapGUI", "createMapGUI", mainGUI.getNextHighestDepth());
    mainGUI.createMapGUI.mapList.setMask(mainGUI.createMapGUI.maskBg);
    for (var _loc3 = 0; _loc3 < customMaps.length; ++_loc3)
    {
        var _loc2 = mainGUI.createMapGUI.mapList.attachMovie("customMapItem", "customMapItem" + _loc3, mainGUI.createMapGUI.mapList.getNextHighestDepth());
        _loc2._x = -13;
        _loc2._y = -64 + 34 * _loc3;
        _loc2.nameT.htmlText = "<b>" + customMaps[_loc3];
        _loc2.sizeT.htmlText = "";
        _loc2.num = _loc3;
        _loc2.enterB.nameT.htmlText = "<b>Enter";
        _loc2.enterB.nameText = "Enter";
        _loc2.deleteB.nameT.htmlText = "<b>Delete";
        _loc2.deleteB.nameText = "Delete";
        assignMouseEvents(_loc2.enterB, true);
        assignMouseEvents(_loc2.deleteB, true);
        _loc2.enterB.onRelease = function ()
        {
            guiUp = false;
            loadMap(true, "Custom_" + customMaps[this._parent.num], 0, 0, true);
            removeMovieClip (mainGUI.createMapGUI);
        };
        _loc2.deleteB.onRelease = function ()
        {
            getTimestamp("deleteMap", customMaps[this._parent.num]);
            removeMovieClip (mainGUI.createMapGUI);
            systemMessage("Deleting map. Please wait.");
        };
    } // end of for
    assignMouseEvents(mainGUI.createMapGUI.exitB);
    mainGUI.createMapGUI.scrollBar.onRelease = mainGUI.createMapGUI.scrollBar.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        draggingCreateMap = false;
    };
    mainGUI.createMapGUI.scrollBar.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, this._x, 70, this._x, -11);
        draggingCreateMap = true;
    };
    mainGUI.createMapGUI.scrollBar.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    mainGUI.createMapGUI.scrollBar.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    addDraggableGUI(mainGUI.createMapGUI);
    mainGUI.createMapGUI.scrollUpB.onRelease = mainGUI.createMapGUI.scrollUpB.onReleaseOutside = function ()
    {
        draggingCreateMapUp = false;
        this.gotoAndStop(1);
    };
    mainGUI.createMapGUI.scrollUpB.onPress = function ()
    {
        draggingCreateMapUp = true;
        this.gotoAndStop("click");
    };
    mainGUI.createMapGUI.scrollUpB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    mainGUI.createMapGUI.scrollUpB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    mainGUI.createMapGUI.scrollDownB.onRelease = mainGUI.createMapGUI.scrollDownB.onReleaseOutside = function ()
    {
        draggingCreateMapDown = false;
        this.gotoAndStop(1);
    };
    mainGUI.createMapGUI.scrollDownB.onPress = function ()
    {
        draggingCreateMapDown = true;
        this.gotoAndStop("click");
    };
    mainGUI.createMapGUI.scrollDownB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    mainGUI.createMapGUI.scrollDownB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    mainGUI.createMapGUI.exitB.onRelease = function ()
    {
        removeMovieClip (mainGUI.createMapGUI);
        guiUp = false;
        canMove = true;
    };
} // End of the function
function showMapEdit()
{
    var _loc3 = _root.mainGUI.attachMovie("editB", "editB", mainGUI.getNextHighestDepth());
    _loc3._x = -128;
    _loc3._y = 305 + heightOffset;
    var saveMapB = _root.mainGUI.attachMovie("saveMapB", "saveMapB", mainGUI.getNextHighestDepth());
    saveMapB._x = -28;
    saveMapB._y = 305 + heightOffset;
    saveMapB._visible = false;
    var tilesetGUI = _root.mainGUI.attachMovie("tilesetGUI", "tilesetGUI", mainGUI.getNextHighestDepth());
    tilesetGUI._x = 343;
    tilesetGUI._y = 680;
    tilesetGUI._visible = false;
    tilesetGUI.tileset.setMask(tilesetGUI.maskBg);
    assignMouseEvents(tilesetGUI.exitB);
    assignMouseEvents(mainGUI.saveMapB.saveMapB);
    assignMouseEvents(mainGUI.editB.editB);
    tilesetGUI.exitB.onRelease = function ()
    {
        tilesetGUI._visible = false;
        systemMessage("Edit mode disabled.");
        delete mapLayer1.onRelease;
    };
    _loc3.editB.onRelease = function ()
    {
        if (tilesetGUI._visible == true)
        {
            tilesetGUI._visible = false;
            saveMapB._visible = false;
            systemMessage("Edit mode disabled.");
            delete mapLayer1.onRelease;
        }
        else
        {
            tilesetGUI._visible = true;
            saveMapB._visible = true;
            systemMessage("Edit mode enabled (don\'t forget to save your map!).");
            mapLayer1.onRelease = function ()
            {
                var _loc4 = {x: _xmouse, y: _ymouse};
                mapLayer1.globalToLocal(_loc4);
                var _loc2 = Math.floor(_loc4.y / 32);
                var _loc3 = Math.floor(_loc4.x / 32);
                var _loc5 = _root.b_Tileset1.width / 32;
                if (_root.selectedLayer == 1)
                {
                    _root.mapData[_loc2][_loc3] = "1_" + (_root.selectedRow * _loc5 + _root.selectedColumn + 1);
                    _root.mapBitmap.fillRect(new flash.geom.Rectangle(_loc3 * 32, _loc2 * 32, 32, 32), 0);
                    _root.mapBitmap.copyPixels(_root.b_Tileset1, new flash.geom.Rectangle(_root.selectedColumn * 32, _root.selectedRow * 32, 32, 32), new flash.geom.Point(_loc3 * 32, _loc2 * 32));
                }
                else if (_root.selectedLayer == 2)
                {
                    _root.mapData2[_loc2][_loc3] = "1_" + (_root.selectedRow * _loc5 + _root.selectedColumn + 1);
                    _root.mapBitmap2.copyPixels(_root.b_Tileset1, new flash.geom.Rectangle(_root.selectedColumn * 32, _root.selectedRow * 32, 32, 32), new flash.geom.Point(_loc3 * 32, _loc2 * 32));
                }
                else
                {
                    _root.mapData3[_loc2][_loc3] = "1_" + (_root.selectedRow * _loc5 + _root.selectedColumn + 1);
                    _root.mapBitmap3.copyPixels(_root.b_Tileset1, new flash.geom.Rectangle(_root.selectedColumn * 32, _root.selectedRow * 32, 32, 32), new flash.geom.Point(_loc3 * 32, _loc2 * 32));
                } // end else if
            };
        } // end else if
    };
    saveMapB.saveMapB.onRelease = function ()
    {
        if (lastMapSave == undefined || getTimer() - lastMapSave > 10000)
        {
            lastMapSave = getTimer();
            getTimestamp("saveMap");
        }
        else
        {
            systemMessage("You can\'t save your map again yet, please wait a few seconds and try again.");
        } // end else if
    };
    tilesetGUI.tileset.onRelease = function ()
    {
        var _loc2 = {x: _xmouse, y: _ymouse};
        tilesetGUI.tileset.globalToLocal(_loc2);
        var _loc3 = Math.floor(_loc2.y / 32);
        var _loc4 = Math.floor(_loc2.x / 32);
        tilesetGUI.tileset.marker._x = _loc4 * 32 + 1;
        tilesetGUI.tileset.marker._y = _loc3 * 32 + 1;
        _root.selectedColumn = _loc4;
        _root.selectedRow = _loc3;
    };
    tilesetGUI.dragBg.onPress = function ()
    {
        tilesetGUI.swapDepths(mainGUI.getNextHighestDepth());
        tilesetGUI.startDrag(false, -newWidth / 2 + tilesetGUI._width / 2 - widthOffset, 663 - heightOffset, newWidth / 2 - tilesetGUI._width / 2 + widthOffset, 698 + heightOffset);
    };
    tilesetGUI.dragBg.onRelease = target.dragBg.onReleaseOutside = function ()
    {
        tilesetGUI.stopDrag();
    };
    tilesetGUI.scrollBar.onRelease = tilesetGUI.scrollBar.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        _root.dragScrollbar = 0;
    };
    tilesetGUI.scrollBar.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, this._x, -417, this._x, -829);
        _root.dragScrollbar = 28;
    };
    tilesetGUI.scrollBar.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    tilesetGUI.scrollBar.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    _root.selectedLayer = 1;
    tilesetGUI.layer1B.onRelease = function ()
    {
        if (_root.selectedLayer != 1)
        {
            _root.selectedLayer = 1;
            this._parent.layerMarker._y = -904;
        } // end if
    };
    tilesetGUI.layer2B.onRelease = function ()
    {
        if (_root.selectedLayer != 2)
        {
            _root.selectedLayer = 2;
            this._parent.layerMarker._y = -924;
        } // end if
    };
    tilesetGUI.layer3B.onRelease = function ()
    {
        if (_root.selectedLayer != 3)
        {
            _root.selectedLayer = 3;
            this._parent.layerMarker._y = -944;
        } // end if
    };
} // End of the function
function stringifyArray(arr2)
{
    var _loc1 = "[" + String(arr2) + "]";
    return (_loc1);
} // End of the function
function stringifyMultiArray(arr3)
{
    var _loc3 = "";
    for (var _loc1 = 0; _loc1 < arr3.length; ++_loc1)
    {
        if (_loc1 != arr3.length - 1)
        {
            _loc3 = _loc3 + (stringifyArray(arr3[_loc1]) + ",");
            continue;
        } // end if
        _loc3 = _loc3 + stringifyArray(arr3[_loc1]);
    } // end of for
    return ("[" + _loc3 + "]");
} // End of the function
function makeCollisions(tempMapData, tempMapData2)
{
    var _loc8 = [];
    for (var _loc3 = 0; _loc3 < tempMapData.length; ++_loc3)
    {
        var _loc6 = [];
        for (var _loc2 = 0; _loc2 < tempMapData[_loc3].length; ++_loc2)
        {
            var _loc4 = false;
            for (var _loc1 = 0; _loc1 < collisionTiles.length; ++_loc1)
            {
                if (tempMapData[_loc3][_loc2] == collisionTiles[_loc1])
                {
                    _loc4 = true;
                    break;
                } // end if
            } // end of for
            if (_loc4 == true)
            {
                _loc6.push(1);
                continue;
            } // end if
            _loc6.push(0);
        } // end of for
        _loc8.push(_loc6);
    } // end of for
    for (var _loc3 = 0; _loc3 < tempMapData2.length; ++_loc3)
    {
        for (var _loc2 = 0; _loc2 < tempMapData2[_loc3].length; ++_loc2)
        {
            _loc4 = false;
            for (var _loc1 = 0; _loc1 < collisionTiles.length; ++_loc1)
            {
                if (tempMapData2[_loc3][_loc2] == collisionTiles[_loc1])
                {
                    _loc4 = true;
                    break;
                } // end if
            } // end of for
            if (_loc4 == true)
            {
                tempMapData2[_loc3][_loc2] = 1;
            } // end if
        } // end of for
    } // end of for
    return (_loc8);
} // End of the function
function attachLightMap(frameNum)
{
    lightMap = _root.attachMovie("lightMap", "lightMap", _root.getNextHighestDepth());
    lightMap.gotoAndStop(frameNum);
} // End of the function
function finishAttachLightMap(bm, setAlpha)
{
    if (bm == "overlay")
    {
        lightMap.blendMode = "overlay";
    } // end if
    if (setAlpha != undefined)
    {
        lightMap._alpha = setAlpha;
    } // end if
    lightMap._width = lightMap._width * 2;
    lightMap._height = lightMap._height * 2;
    lightMap._x = mapLayer1._x;
    lightMap._y = mapLayer1._y;
    fixDepths();
} // End of the function
function handleGetUserList(resObj)
{
    var _loc3 = parseMultiArray(resObj[2]);
    _loc3.sortOn("0", Array.CASEINSENSITIVE);
    mainGUI.people.namesT.htmlText = "";
    mainGUI.people.nameT.htmlText = "<b>" + _loc3.length + " Online";
    mainGUI.people.namesT._height = 284;
    mainGUI.people.addT._visible = false;
    mainGUI.people.removeT._visible = false;
    mainGUI.people.addB._visible = false;
    mainGUI.people.removeB._visible = false;
    var _loc4 = "";
    for (var _loc1 = 0; _loc1 < _loc3.length; ++_loc1)
    {
        var _loc2 = "";
        if (_loc3[_loc1][1] == "1")
        {
            _loc2 = "#FF3737";
        }
        else if (_loc3[_loc1][1] == "2")
        {
            _loc2 = "#00FFFF";
        }
        else if (_loc3[_loc1][1] == "11" || _loc3[_loc1][1] == "14")
        {
            _loc2 = "#00FF00";
        }
        else if (_loc3[_loc1][1] == "12")
        {
            _loc2 = "#00FF00";
        }
        else if (_loc3[_loc1][1] == "15")
        {
            _loc2 = "#FF9900";
        }
        else if (_loc3[_loc1][1] == "17")
        {
            _loc2 = "#B382C8";
        }
        else if (_loc3[_loc1][1] == "g")
        {
            _loc2 = "#FFCC00";
        }
        else
        {
            _loc2 = "#FFFFFF";
        } // end else if
        _loc4 = _loc4 + ("<b><font color=\'" + _loc2 + "\'>" + _loc3[_loc1][0] + "</font>\n");
    } // end of for
    mainGUI.people.namesT.htmlText = _loc4;
    mainGUI.people.namesT.selectable = true;
} // End of the function
function setFollowPokemon(target, frameX, frameY)
{
    if (target.followPokemonBox.followPokemonImage._currentframe >= 650 && target.followPokemonBox.followPokemonImage._currentframe <= 721 || target.followPokemonBox.followPokemonImage._currentframe >= 650 + _root.shinyDifference && target.followPokemonBox.followPokemonImage._currentframe <= 650 + _root.shinyDifference)
    {
        if (frameX == 0)
        {
            if (frameY == 0)
            {
                frameY = 2;
            }
            else if (frameY == 1)
            {
                frameX = 1;
                frameY = 0;
            }
            else if (frameY == 2)
            {
                frameX = 1;
                frameY = 2;
            }
            else
            {
                frameY = 0;
            } // end else if
        }
        else if (frameX == 1)
        {
            if (frameY == 0)
            {
                frameX = 0;
                frameY = 3;
            }
            else if (frameY == 2)
            {
                frameY = 3;
            }
            else if (frameY == 3)
            {
                frameX = 0;
                frameY = 1;
            } // end else if
        } // end else if
        if (target.followPokemonBox.followPokemonImage._width == 128)
        {
            target.followPokemonBox.followPokemonImage._x = frameX * -64 - 32;
            target.followPokemonBox.followPokemonImage._y = frameY * -64 - 32;
            target.followPokemonBox.box._width = 64;
            target.followPokemonBox.box._height = 64;
        }
        else
        {
            target.followPokemonBox.followPokemonImage._x = frameX * -32 - 16;
            target.followPokemonBox.followPokemonImage._y = frameY * -32 - 16;
            target.followPokemonBox.box._width = 32;
            target.followPokemonBox.box._height = 32;
        } // end else if
    }
    else if (target.followPokemonBox.followPokemonImage._width == 128)
    {
        target.followPokemonBox.followPokemonImage._x = frameX * -64 - 32;
        target.followPokemonBox.followPokemonImage._y = frameY * -64 - 32;
        target.followPokemonBox.box._width = 64;
        target.followPokemonBox.box._height = 64;
    }
    else
    {
        target.followPokemonBox.followPokemonImage._x = frameX * -32 - 16;
        target.followPokemonBox.followPokemonImage._y = frameY * -32 - 16;
        target.followPokemonBox.box._width = 32;
        target.followPokemonBox.box._height = 32;
    } // end else if
} // End of the function
function debug(msg, showSystemMessage)
{
    if (_root.debugOn == true)
    {
        trace ("DEBUG: " + msg);
        if (showSystemMessage != false)
        {
            systemMessage("DEBUG: " + msg);
        } // end if
    } // end if
} // End of the function
function calculateCooldownText(secondsLeft, isGymLeader)
{
    if (isGymLeader == "gymLeader" && _root.map != "Battle Cafe")
    {
        if (_root.map.indexOf("Elite Four") != -1 || _root.map.indexOf("Champion Room") != -1)
        {
            var _loc4 = 1500 - secondsLeft;
        }
        else
        {
            _loc4 = 600 - secondsLeft;
        } // end else if
    }
    else
    {
        _loc4 = 86400 - secondsLeft;
    } // end else if
    var _loc2 = Math.floor(_loc4 / 3600);
    var _loc3 = Math.round((_loc4 - _loc2 * 3600) / 60);
    if (_loc2 > 0)
    {
        if (_loc3 > 0)
        {
            return (_loc2 + " hours, " + _loc3 + " minutes");
        }
        else
        {
            return (_loc2 + " hours");
        } // end else if
    }
    else
    {
        return (_loc3 + " minutes");
    } // end else if
} // End of the function
function calculateGMTime(secondsLeft)
{
    var _loc1 = Math.floor(secondsLeft / 3600);
    var _loc2 = Math.round((secondsLeft - _loc1 * 3600) / 60);
    if (_loc1 > 0)
    {
        if (_loc2 > 0)
        {
            return (_loc1 + " hours, " + _loc2 + " minutes");
        }
        else
        {
            return (_loc1 + " hours");
        } // end else if
    }
    else
    {
        return (_loc2 + " minutes");
    } // end else if
} // End of the function
function pluralize(t)
{
    if (t.charAt(t.length - 1) == "s")
    {
        return (t);
    }
    else
    {
        return (t + "s");
    } // end else if
} // End of the function
function resetFollowPokemon(target)
{
    if (target.frameY == 1)
    {
        setFollowPokemon(target, 0, 3);
    }
    else if (target.frameY == 0)
    {
        setFollowPokemon(target, 0, 0);
    }
    else if (target.frameY == 2)
    {
        setFollowPokemon(target, 0, 1);
    }
    else if (target.frameY == 3)
    {
        setFollowPokemon(target, 0, 2);
    }
    else
    {
        setFollowPokemon(target, 0, 0);
    } // end else if
} // End of the function
function autoKick()
{
    if (_root.username != "Brody" && _root.username.toLowerCase() != "amazoness" && _root.username.toLowerCase() != "anubisius")
    {
        _root.error = "Automatic kick for being AFK";
        _root.gotoAndStop("errorconnecting");
    } // end if
} // End of the function
function autoKick2()
{
    if (_root.username != "Brody" && _root.username.toLowerCase() != "amazoness" && _root.username.toLowerCase() != "anubisius")
    {
        _root.error = "Automatic kick for being logged in for too long";
        _root.gotoAndStop("errorconnecting");
    } // end if
} // End of the function
function resetAutoKick()
{
    clearInterval(_root.autoKickI);
    _root.autoKickI = setInterval(autoKick, 2700000);
} // End of the function
function loadPokedexIconsSeen()
{
    for (var _loc2 = 1; _loc2 <= pokemonAmount; ++_loc2)
    {
        var _loc3 = mainGUI.pokedex.m["pokedexListBg_" + _loc2];
        if (pokedexSeen[_loc2 - 1] == false || pokedexSeen[_loc2 - 1] == "false")
        {
            _loc3._visible = false;
            continue;
        } // end if
        _loc3._visible = true;
        _loc3.idT.htmlText = "<b>" + _loc2;
        _loc3.i.gotoAndStop(_loc2);
        _loc3.i._brightness(0);
        _loc3.nameT.htmlText = "<b>" + upperCase(generalInfoArray[_loc2 - 1][0]);
        _loc3.pokeId = _loc2;
        _loc3.onRelease = function ()
        {
            loadPokedexInfo(this.pokeId);
        };
        if (pokedexCaught[_loc2 - 1] == true || pokedexCaught[_loc2 - 1] == "true")
        {
            if (pokedexCaught2[_loc2 - 1] == true || pokedexCaught2[_loc2 - 1] == "true")
            {
                _loc3.pokeball._brightness(0);
            }
            else
            {
                _loc3.pokeball._brightness(-50);
            } // end else if
            continue;
        } // end if
        _loc3.pokeball._brightness(-100);
    } // end of for
    var _loc4 = 0;
    for (var _loc2 = 1; _loc2 <= pokemonAmount; ++_loc2)
    {
        _loc3 = mainGUI.pokedex.m["pokedexListBg_" + _loc2];
        if (_loc3._visible == true)
        {
            _loc3._y = -183 + _loc4 * 26;
            ++_loc4;
        } // end if
    } // end of for
} // End of the function
function loadPokedexIconsSearch()
{
    var _loc4 = String(mainGUI.pokedex.searchT.text).toLowerCase();
    for (var _loc1 = 1; _loc1 <= pokemonAmount; ++_loc1)
    {
        var _loc2 = mainGUI.pokedex.m["pokedexListBg_" + _loc1];
        if (generalInfoArray[_loc1 - 1][0].indexOf(_loc4) == -1)
        {
            _loc2._visible = false;
            continue;
        } // end if
        if (mainGUI.pokedex.tickBox._currentframe == 2)
        {
            if (pokedexSeen[_loc1 - 1] == false || pokedexSeen[_loc1 - 1] == "false")
            {
                _loc2._visible = false;
            }
            else
            {
                _loc2._visible = true;
            } // end else if
            continue;
        } // end if
        _loc2._visible = true;
    } // end of for
    var _loc3 = 0;
    for (var _loc1 = 1; _loc1 <= pokemonAmount; ++_loc1)
    {
        _loc2 = mainGUI.pokedex.m["pokedexListBg_" + _loc1];
        if (_loc2._visible == true)
        {
            _loc2._y = -183 + _loc3 * 26;
            ++_loc3;
        } // end if
    } // end of for
} // End of the function
function handleCreateClan(resObj)
{
    _root.money = Number(resObj.money);
    _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(_root.money) + "</b>";
    _root.textArray = [];
    _root.textArray.push([26, 14, ["You can create a clan here.", "It looks like you\'re already in a clan. You\'ll have to leave your current clan if you wish to create one."], "Clan Assistant"]);
    _root.clan = String(resObj.clan);
    _root.clanRank = String(resObj.clanRank);
    _root.clanRoster = resObj.clanRoster;
    _root.clanBank = Number(resObj.clanBank);
    _root.rosterSize = Number(resObj.rosterSize);
    _root.creatingClan = false;
    _root.canMove = true;
    _root.guiUp = false;
    removeMovieClip (_root.createClanGUI);
} // End of the function
function handleBattleMovePvPError(resObj)
{
    clearInterval(_root.battleTimerI2);
    _root.battleText = resObj[2].split("|");
    for (var _loc2 = 0; _loc2 < battleText.length; ++_loc2)
    {
        battleText[_loc2] = battleText[_loc2].split(",");
    } // end of for
    displayBattleText();
} // End of the function
function handleBattleMovePvP(resObj)
{
    clearInterval(_root.battleTimerI2);
    _root.userPokemon = parseMultiPokemon(resObj[10]);
    _root.newPokemon = parsePokemon(resObj[11]);
    _root.newPokemon.startingHp = _root.newPokemon.currentHp;
    _root.canSwitchPokemon = true;
    mainGUI.battleBackground.pokemonB.gotoAndStop(1);
    _root.battleText = resObj[9].split("|");
    for (var _loc2 = 0; _loc2 < battleText.length; ++_loc2)
    {
        battleText[_loc2] = battleText[_loc2].split(",");
    } // end of for
    _root.futureActivePokemon = undefined;
    _root.futureHpAmount = Number(resObj[7]);
    _root.activePokemon = Number(resObj[6]);
    userPokemon[activePokemon].battleMoves = resObj[16].split(",");
    if (String(_root.newPokemon.ability) == "23" && (_root.userPokemon[activePokemon].type != 8 && _root.userPokemon[activePokemon].type2 != 8 && String(userPokemon[activePokemon].ability) != "23"))
    {
        if (_root.userPokemon[activePokemon].currentHp > 0 && _root.userPokemon[activePokemon].heldItem != "Shed Shell")
        {
            _root.canSwitchPokemon = false;
            _root.mainGUI.battleBackground.pokemonB.gotoAndStop("dark");
        } // end if
    } // end if
    if (String(_root.newPokemon.ability) == "42" && (_root.userPokemon[activePokemon].type == 9 || _root.userPokemon[activePokemon].type2 == 9) && (_root.userPokemon[activePokemon].type != 8 && _root.userPokemon[activePokemon].type2 != 8))
    {
        if (_root.userPokemon[activePokemon].currentHp > 0 && _root.userPokemon[activePokemon].heldItem != "Shed Shell")
        {
            _root.canSwitchPokemon = false;
            _root.mainGUI.battleBackground.pokemonB.gotoAndStop("dark");
        } // end if
    } // end if
    if (resObj[14] == 1 && _root.userPokemon[activePokemon].currentHp > 0)
    {
        _root.continueButtonText = "<b>Opponent is choosing their next pokemon.";
        _root.continueButton = true;
    } // end if
    var _loc3 = resObj[12].split(",");
    for (var _loc2 = 0; _loc2 < _loc3.length; ++_loc2)
    {
        _loc3[_loc2] = Number(_loc3[_loc2]);
    } // end of for
    var _loc4 = resObj[13].split(",");
    for (var _loc2 = 0; _loc2 < _loc4.length; ++_loc2)
    {
        _loc4[_loc2] = Number(_loc4[_loc2]);
    } // end of for
    _root.ppC = _loc3;
    _root.ppM = _loc4;
    fixPPText();
    if (resObj[17] != "")
    {
        afterFaintContinueButton(resObj[17]);
    } // end if
    _root.statBoosts = parseMultiArray(resObj[18]);
    for (var _loc2 = 0; _loc2 < _root.statBoosts[0].length; ++_loc2)
    {
        _root.statBoosts[0][_loc2] = Number(_root.statBoosts[0][_loc2]);
    } // end of for
    for (var _loc2 = 0; _loc2 < _root.statBoosts[1].length; ++_loc2)
    {
        _root.statBoosts[1][_loc2] = Number(_root.statBoosts[1][_loc2]);
    } // end of for
    _root.battleWeather = statBoosts[2][0];
    _root.battleTurns = Number(statBoosts[3][0]);
    _root.opponentAliveArray = statBoosts[4];
    if (resObj[2] == "W")
    {
        _root.battleWon = true;
    }
    else if (resObj[5] == "1")
    {
        _root.battleEnd = true;
    } // end else if
    displayBattleText();
} // End of the function
function startBattleTimer()
{
    clearInterval(_root.battleTimerI);
    _root.battleTimeLeft = 30;
    _root.mainGUI.battleBackground.battleTimeT.battleTimeT.htmlText = "<b>" + _root.battleTimeLeft;
    _root.battleTimerI = setInterval(updateBattleTimer, 1000);
} // End of the function
function updateBattleTimer()
{
    --_root.battleTimeLeft;
    _root.mainGUI.battleBackground.battleTimeT.battleTimeT.htmlText = "<b>" + _root.battleTimeLeft;
    if (_root.battleTimeLeft <= 0)
    {
        clearInterval(_root.battleTimerI);
        getTimestamp("endBattleDisconnect");
    } // end if
} // End of the function
function stopBattleTimer()
{
    _root.mainGUI.battleBackground.battleTimeT.battleTimeT.htmlText = "";
    clearInterval(_root.battleTimerI);
    _root.battleTimerI2 = setInterval(choseMoveBattleTimer, 50000);
} // End of the function
function choseMoveBattleTimer()
{
    clearInterval(_root.battleTimerI2);
    getTimestamp("endBattleChoseMove");
} // End of the function
function updateHpBattleText()
{
    _root.targetEnemyBattleUI.hpT.htmlText = "<b>" + int(wildPokemon.currentHp / wildPokemon.hp * 100 * 100) / 100 + "%";
    _root.targetUserBattleUI.hpT.htmlText = "<b>" + int(userPokemon[activePokemon].currentHp / userPokemon[activePokemon].hp * 100 * 100) / 100 + "%";
} // End of the function
function handleUpdateMap(resObj)
{
    if (resObj[4] == 1)
    {
        _root.nearestPokecenter = map;
    } // end if
    _root.updatedMap = true;
    if (resObj[7] != "")
    {
        _root.trainerData = parseMultiArray(resObj[7]);
        for (var _loc4 = 0; _loc4 < _root.trainerData.length; ++_loc4)
        {
            _root.trainerData[_loc4][0] = Number(_root.trainerData[_loc4][0]);
            _root.trainerData[_loc4][1] = Number(_root.trainerData[_loc4][1]);
            if (_root.trainerData[_loc4][2] == "true" || _root.trainerData[_loc4][2] == true)
            {
                _root.trainerData[_loc4][2] = true;
                continue;
            } // end if
            _root.trainerData[_loc4][2] = false;
        } // end of for
    } // end if
    if (resObj[3] != "")
    {
        _root.shopList = parseMultiArray(resObj[3]);
        for (var _loc4 = 0; _loc4 < _root.shopList.length; ++_loc4)
        {
            _root.shopList[_loc4][1] = Number(_root.shopList[_loc4][1]);
        } // end of for
    } // end if
    if (resObj[2] != "")
    {
        _root.mapInstance = resObj[2];
    }
    else
    {
        delete _root.mapInstance;
    } // end else if
    resObj[5] = parseMultiArray(resObj[5]);
    if (resObj[5] != "")
    {
        for (var _loc4 = 0; _loc4 < resObj[5].length; ++_loc4)
        {
            resObj[5][_loc4][0] = Number(resObj[5][_loc4][0]);
            resObj[5][_loc4][1] = Number(resObj[5][_loc4][1]);
            var _loc6 = _root.mapLayer1.attachMovie("portablePC", "portablePC_" + resObj[5][_loc4][0] + "_" + resObj[5][_loc4][1], _root.mapLayer1.getNextHighestDepth());
            _loc6._x = resObj[5][_loc4][0] * 32;
            _loc6._y = resObj[5][_loc4][1] * 32;
            _root.portablePCArray.push([resObj[5][_loc4][0], resObj[5][_loc4][1], resObj[5][_loc4][2]]);
        } // end of for
    } // end if
    if (resObj[6] != "")
    {
        resObj[6] = parseMultiArray(resObj[6]);
        for (var _loc4 = 0; _loc4 < resObj[6].length; ++_loc4)
        {
            resObj[6][_loc4][0] = Number(resObj[6][_loc4][0]);
            resObj[6][_loc4][1] = Number(resObj[6][_loc4][1]);
            var _loc5 = _root.mapLayer1.attachMovie("miningRock", "miningRock_" + resObj[6][_loc4][0] + "_" + resObj[6][_loc4][1], _root.mapLayer1.getNextHighestDepth());
            _loc5._x = resObj[6][_loc4][0] * 32;
            _loc5._y = resObj[6][_loc4][1] * 32;
            if (resObj[6][_loc4][4] == "1")
            {
                _loc5.gotoAndStop("gold");
            }
            else if (resObj[6][_loc4][3] == "1")
            {
                _loc5.gotoAndStop(resObj[6][_loc4][2]);
            }
            else
            {
                _loc5.gotoAndStop("blank");
            } // end else if
            _root.collisionArray[resObj[6][_loc4][1]][resObj[6][_loc4][0]] = 1;
        } // end of for
    } // end if
    _root.miningRocks = resObj[6];
    trainerDataLoaded = true;
    if (resObj[8] != undefined && resObj[8] != "")
    {
        _root.mapOwner = resObj[11];
        makeCustomMap(resObj[8], resObj[9], resObj[10]);
    } // end if
    if (resObj[12] == "1")
    {
        _root.badCustomMapLoad = true;
        systemMessage("The custom map you tried to load no longer exists.");
    } // end if
    if (resObj[13] != "")
    {
        _root.questData = parseMultiArray(resObj[13]);
        for (var _loc4 = 0; _loc4 < _root.questArray.length; ++_loc4)
        {
            for (var _loc3 = 0; ij < _root.questArray[_loc4].length; ++_loc3)
            {
                _root.questArray[_loc4][_loc3] = Number(_root.questArray[_loc4][_loc3]);
            } // end of for
        } // end of for
        for (var _loc4 = 0; _loc4 < npcArray.length; ++_loc4)
        {
            if (npcArray[_loc4][10] != undefined)
            {
                for (var _loc3 = 0; _loc3 < _root.questData.length; ++_loc3)
                {
                    if (_root.questData[_loc3][0] == npcArray[_loc4][10])
                    {
                        if (_root.questData[_loc3][1] == 0)
                        {
                            _root.mapLayer2["npc_" + npcArray[_loc4][7]].attachMovie("questIcon", "questIcon", _root.mapLayer2["npc_" + npcArray[_loc4][7]].getNextHighestDepth());
                            continue;
                        } // end if
                        if (_root.questData[_loc3][1] == 1)
                        {
                            _root.mapLayer2["npc_" + npcArray[_loc4][7]].attachMovie("questIcon2", "questIcon", _root.mapLayer2["npc_" + npcArray[_loc4][7]].getNextHighestDepth());
                            continue;
                        } // end if
                        if (_root.questData[_loc3][1] == 2)
                        {
                            if (_root.questData[_loc3][0] == 2)
                            {
                                _root.mapLayer2["npc_" + npcArray[_loc4][7]].attachMovie("questIcon", "questIcon", _root.mapLayer2["npc_" + npcArray[_loc4][7]].getNextHighestDepth());
                            } // end if
                        } // end if
                    } // end if
                } // end of for
                _root.mapLayer2["npc_" + npcArray[_loc4][7]].questIcon._x = 40;
                _root.mapLayer2["npc_" + npcArray[_loc4][7]].questIcon._y = -32;
            } // end if
        } // end of for
    }
    else
    {
        _root.questData = [];
    } // end else if
    _root.eliteChests = parseMultiArray(resObj[14]);
    if (_root.eliteChests.length > 0)
    {
        for (var _loc4 = 0; _loc4 < eliteChests.length; ++_loc4)
        {
            eliteChests[_loc4][0] = Number(eliteChests[_loc4][0]);
            eliteChests[_loc4][1] = Number(eliteChests[_loc4][1]);
            _root.mapLayer1.attachMovie("eliteChest", "eliteChest_" + eliteChests[_loc4][0] + "_" + eliteChests[_loc4][1], _root.mapLayer1.getNextHighestDepth());
            _root.mapLayer1["eliteChest_" + eliteChests[_loc4][0] + "_" + eliteChests[_loc4][1]]._x = eliteChests[_loc4][0] * 32;
            _root.mapLayer1["eliteChest_" + eliteChests[_loc4][0] + "_" + eliteChests[_loc4][1]]._y = eliteChests[_loc4][1] * 32;
            _root.collisionArray[eliteChests[_loc4][1]][eliteChests[_loc4][0]] = 1;
        } // end of for
    } // end if
    if (resObj[15] != "" && resObj[15] != undefined)
    {
        _root.btWinStreak = Number(resObj[15]);
        if ((btWinStreak + 1) % 10 == 0 && btWinStreak > 0)
        {
            _root.mapLayer2.npc_0.container.nameM.nameT.htmlText = "<b>Battle Tower Tycoon " + (_root.btWinStreak + 1) / 10;
            _root.trainerArray[0][5] = "<b>Battle Tower Tycoon " + (_root.btWinStreak + 1) / 10;
        }
        else
        {
            _root.mapLayer2.npc_0.container.nameM.nameT.htmlText = "<b>Battle Tower Trainer " + (_root.btWinStreak + 1);
            _root.trainerArray[0][5] = "<b>Battle Tower Trainer " + (_root.btWinStreak + 1);
        } // end else if
        _root.mapLayer2.npc_0.container.nameM.bg._width = _root.mapLayer2.npc_0.container.nameM.nameT.textWidth + 6;
    }
    else
    {
        delete _root.btWinStreak;
    } // end else if
    if (_root.mapInstance != -1 && _root.mapInstance != undefined)
    {
        mainGUI.mapT.htmlText = "<b>" + map + " (" + _root.mapInstance + ")";
    }
    else
    {
        mainGUI.mapT.htmlText = "<b>" + map;
    } // end else if
    if (avatarType != 0)
    {
        if (_root.map != disabledPlayersMaps[0] && _root.map != disabledPlayersMaps[1] && _root.map != _root.swarmMap && _root.map != _root.worldBossMap)
        {
            getTimestamp("sendAddPlayer");
        } // end if
    } // end if
} // End of the function
function resetGlobalAnimationObj()
{
    _root.globalAnimationObj = {};
    _root.globalAnimationObj.stage = 0;
    _root.globalAnimationObj.counter = 0;
} // End of the function
function fadeMusic(tempMusicLink, getMusicLink, timeToStartAt)
{
    if (getMusicLink == true)
    {
        if (_root.map.indexOf("Corn Maze") != -1)
        {
            tempMusicLink = "Halloween1.mp3";
        }
        else if (_root.map.indexOf("Fright Gym") != -1)
        {
            tempMusicLink = "Halloween2.mp3";
        }
        else if (_root.map.indexOf("Haunted ") != -1 || _root.map.indexOf("Fright ") != -1)
        {
            tempMusicLink = "Halloween3.mp3";
        }
        else if (_root.map.indexOf("Lavender Town") != -1 || _root.map.indexOf("Pokemon Tower") != -1 || _root.map.indexOf("Lost Tower") != -1)
        {
            tempMusicLink = "Lavender Town.mp3";
        }
        else if (_root.map.indexOf("Forest") != -1 || _root.map == "Dreamyard" || _root.map == "Rumination Field" || _root.map == "Abundant Shrine")
        {
            tempMusicLink = "Forest.mp3";
        }
        else if (_root.map.indexOf("Cave") != -1 || _root.map == "Summer Island 5" || _root.map == "Summer Island 4" || _root.map == "Summer Island 3" || _root.map.indexOf("Ancient Dungeon") != -1 || _root.map.indexOf("Mt Moon") != -1 || _root.map == "Mt Silver F1" || _root.map == "Mt Silver F2" || _root.map == "Mt Silver Summit" || _root.map.indexOf("Rock Tunnel") != -1 || _root.map == "Rusturf Tunnel" || _root.map.indexOf("Seafoam Island") != -1 || _root.map.indexOf("Victory Road") != -1 && _root.map != "Sinnoh Victory Road" || _root.map.indexOf("Solaceon Ruins") != -1 || _root.map.indexOf("Celestic Ruins") != -1 || _root.map.indexOf("Deep Oreburgh Mine") != -1 || _root.map.indexOf("Mt Coronet") != -1 || _root.map.indexOf("Oreburgh Gate") != -1 || _root.map.indexOf("Oreburgh Mine") != -1 || _root.map.indexOf("Ravaged Path") != -1 || _root.map.indexOf("Snowpoint Temple") != -1 || _root.map.indexOf("Summer Volcano ") != -1 || _root.map.indexOf("Sinnoh Underground ") != -1 || _root.map.indexOf("Abyssal Ruins") != -1 || _root.map == "Deep Giant Chasm" || _root.map.indexOf("N Castle") != -1 || _root.map.indexOf("Relic Castle") != -1 || _root.map.indexOf("Reversal Mountain") != -1 || _root.map.indexOf("Twist Mountain") != -1 || _root.map == "Water Temple")
        {
            tempMusicLink = "Cave.mp3";
        }
        else if (_root.map == "Pallet Town" || _root.map == "Pallet House 1" || _root.map == "Hero House F1" || _root.map == "Hero House F2" || _root.map == "Rival House" || _root.map == "Professor Oak\'s Lab" || _root.map.indexOf("Viridian City") != -1 || _root.map.indexOf("Viridian House") != -1 || _root.map.indexOf("Pewter City") != -1 || _root.map.indexOf("Pewter House") != -1 || _root.map.indexOf("Cerulean City") != -1 || _root.map == "Bike Shop" || _root.map.indexOf("Vermilion City") != -1 || _root.map == "Fishermans House" || _root.map == "PVP Center" || _root.map == "Clan Building" || _root.map.indexOf("Celadon City") != -1 || _root.map == "Rocket Game Corner" || _root.map == "Prize Shop" || _root.map.indexOf("Saffron City") != -1 || _root.map == "Philanthropist Point Shop" || _root.map == "Clan Building" || _root.map.indexOf("Silph Co") != -1 || _root.map.indexOf("Fuchsia City") != -1 || _root.map == "Safari Zone Entrance")
        {
            tempMusicLink = "Kanto Town.mp3";
        }
        else if (_root.map.indexOf("SS Anne") != -1 || _root.map == "Captains Room")
        {
            tempMusicLink = "Surfing.mp3";
        }
        else if ((_root.map.indexOf(" Town") != -1 || _root.map.indexOf(" City") != -1) && _root.mapType == "Johto")
        {
            tempMusicLink = "Johto Town.mp3";
        }
        else if ((_root.map.indexOf(" Town") != -1 || _root.map.indexOf(" City") != -1) && _root.mapType == "Hoenn")
        {
            tempMusicLink = "Hoenn Town.mp3";
        }
        else if ((_root.map.indexOf(" Town") != -1 || _root.map.indexOf(" City") != -1) && _root.mapType == "Sinnoh")
        {
            tempMusicLink = "Sinnoh Town.mp3";
        }
        else if ((_root.map.indexOf(" Town") != -1 || _root.map.indexOf(" City") != -1) && _root.mapType == "Unova")
        {
            tempMusicLink = "Unova Town.mp3";
        }
        else if (_root.map.indexOf("Elite Four") != -1 || _root.map.indexOf("Rocket Hideout") != -1 || _root.map.indexOf("Clan Wars") != -1)
        {
            tempMusicLink = "Elite 4.mp3";
        }
        else if (_root.mapType == "Hoenn")
        {
            tempMusicLink = "Hoenn Road.mp3";
        }
        else if (_root.mapType == "Johto")
        {
            tempMusicLink = "Johto Road.mp3";
        }
        else if (_root.mapType == "Sinnoh")
        {
            tempMusicLink = "Sinnoh Road.mp3";
        }
        else if (_root.mapType == "Unova")
        {
            tempMusicLink = "Unova Road.mp3";
        }
        else
        {
            tempMusicLink = "Kanto Road.mp3";
        } // end else if
    } // end else if
    if (_root.oldMusicLink != tempMusicLink || _root.fadeOutMusic == true)
    {
        if (mySound != undefined)
        {
            _root.fadeOutMusic = true;
            _root.fadeOutMusicArray = [tempMusicLink, timeToStartAt];
        }
        else
        {
            startPlayingSound(tempMusicLink, timeToStartAt);
        } // end if
    } // end else if
} // End of the function
function startPlayingSound(tempMusicLink, timeToStartAt)
{
    _root.fadeOutMusic = false;
    mySound.stop();
    delete mySound();
    mySound = new Sound();
    foundMusic = false;
    for (var _loc2 = 0; _loc2 < soundArray.length; ++_loc2)
    {
        if (soundArray[_loc2][0] == tempMusicLink)
        {
            mySound = soundArray[_loc2][1];
            foundMusic = true;
            break;
        } // end if
    } // end of for
    if (foundMusic == false)
    {
        mySound.loadSound("https://pokemon-planet.com/newMusic2/" + tempMusicLink, true);
        soundArray.push([tempMusicLink, mySound]);
    } // end if
    if (timeToStartAt != undefined)
    {
        mySound.setVolume(0);
        _root.fadeInMusic = true;
        mySound.start(timeToStartAt / 1000, 0);
    }
    else
    {
        mySound.start(0, 0);
        mySound.setVolume(musicVolume);
    } // end else if
    mySound.onSoundComplete = function ()
    {
        mySound.start();
    };
    _root.oldMusicLink = tempMusicLink;
} // End of the function
function handleHook(resObj)
{
    if (_root.fishing == true && _root.battle == false)
    {
        canMove = false;
        clearInterval(_root.fishingI);
        var _loc2 = _root.mainGUI.attachMovie("hookingUI", "hookingUI", _root.mainGUI.getNextHighestDepth());
        _loc2._visible = false;
        _loc2._y = 40;
        mainGUI.hookingUI.bounces = 0;
        _loc2.dir = rand(1, 2);
        if (_loc2.dir == 1)
        {
            _loc2.hook._x = -158;
        }
        else
        {
            _loc2.hook._x = 158;
        } // end else if
        if (_loc2.dir == 1)
        {
            _loc2.zone._x = rand(-105, 128);
        }
        else
        {
            _loc2.zone._x = rand(-128, 105);
        } // end else if
        if (rand(1, 2) == 1)
        {
            _loc2.perfectZone._x = _loc2.zone._x + 26;
        }
        else
        {
            _loc2.perfectZone._x = _loc2.zone._x - 26;
        } // end else if
        _loc2.encryptedZone = calcMD5(_loc2.zone._x + "1023klasmdsBaysdg897bgui2jkASKhbvsjd092dasdbz" + _root.username);
        showHook();
    } // end if
} // End of the function
function isEquippableItem(item)
{
    if (item.indexOf(" Ears") != -1 || item.indexOf(" Head") != -1 || item.indexOf(" Mask") != -1 || item.indexOf("Wings") != -1 || item.indexOf(" Backpack") != -1 || item.indexOf(" Hat") != -1 || item == "Bunny Head" || item == "Christmas Scarf" || item == "Frosty Head" || item == "Milo Mask" || item == "Halloween Starmie Backpack" || item == "Starmie Backpack" || item == "Houndoom Horns" || item == "Totem Mask" || item == "Snorkel" || item == "Skitty Ears" || item == "Litten Ears" || item == "Diggersby Ears" || item == "Bunnelby Ears" || item == "Crown" || item == "Red Nose" || item == "Antlers" || item == "Guy Fawkes Mask" || item == "Skeleton Mask" || item == "White Fox Mask" || item == "Black Fox Mask" || item == "Mewtwo Mask" || item == "Mew Mask" || item == "Delibird Mask" || item == "Rams Ribbon" || item == "Rems Ribbon" || item == "Gold Cape" || item == "Master Cape" || item == "Bandana" || item == "Bandana 2" || item == "Bunny Ears" || item == "Aqua Bandana" || item == "Backward Cap" || item == "White Beanie" || item == "Cap" || item == "Valentines Bow" || item == "Santa Beard" || item == "Red Butterfly Headphones" || item == "Blue Butterfly Headphones" || item == "Green Butterfly Headphones" || item == "Heart Glasses" || item == "Motorcycle Helmet" || item == "Dracula Cloak" || item == "Beanie" || item == "Flower Scarf" || item == "Chinchou Antennae" || item == "Fedora" || item == "Chinchou Antennae" || item == "Pizza Cape" || item == "Mega Sableye Backpack" || item == "Tie" || item == "Bisharp Helmet" || item == "Bowtie" || item == "Steampunk Helmet" || item == "Knight Helmet" || item == "Greninja Scarf" || item == "Hair Ribbon 3" || item == "Valentines Tophat" || item == "Money Glasses" || item == "Squirtle Glasses" || item == "Pig Nose" || item == "Mining Helmet" || item == "Kings Rock Crown" || item == "Googly Eye Glasses" || item == "Rainbow Flag" || item == "Tiara" || item == "Cofagrigus Arms" || item == "Pinsir Horns" || item == "Omanyte Beard" || item == "Magma Hood" || item == "Headband" || item == "Headphones" || item == "Neko Headphones" || item == "Lickitung Mask" || item == "Hooded Mask" || item == "Shark Head" || item == "Marshmallow Head" || item == "Brawly Glasses" || item == "Space Helmet" || item == "Slowking Crown" || item == "Bunny Tail" || item == "Hipster Glasses" || item == "Pichu Ears" || item == "Dual Plasma Blades" || item == "Plasma Blade" || item == "Dual Katanas" || item == "Katana" || item == "Jetpack" || item == "Marill Tail" || item == "Mew Tail" || item == "Pikachu Tail" || item == "Sunglasses" || item == "Pachirisu Tail" || item == "Umbreon Tail" || item == "Chimchar Tail" || item == "Mewtwo Tail" || item == "Ninja Mask" || item == "Ampharos Tail" || item == "Backwards Cap" || item == "Halo" || item == "Pumpkin Head" || item == "Hair Ribbon" || item == "Hair Ribbon 2" || item == "Santa Hat" || item == "Gastly Head" || item == "Cubone Mask" || item == "Charizard Mask" || item == "Duskull Mask" || item == "Backpack" || item == "Aviator Sunglasses" || item == "Inner Tube" || item == "Bat Hair Clip" || item == "Togepi" || item == "Diving Helmet" || item == "Chikorita Leaf" || item == "Litwick" || item == "Zombie Costume" || item == "Budew" || item == "Bunny Costume" || item == "Skeleton Costume" || item == "Scythe" || item == "Gingerbread Costume" || item == "Candy Canes")
    {
        return (true);
    }
    else
    {
        return (false);
    } // end else if
} // End of the function
function positive(num)
{
    if (num > 0)
    {
        return (num);
    }
    else
    {
        return (num * -1);
    } // end else if
} // End of the function
function setPokemonSummaryNatureRollover(poke)
{
    mainGUI.pokemonSummary.stats.n.onRollOver = function ()
    {
        var _loc1 = {x: _xmouse, y: _ymouse};
        mainGUI.pokemonSummary.stats.globalToLocal(_loc1);
        mainGUI.pokemonSummary.stats.natureHighlight._x = _loc1.x + 10;
        mainGUI.pokemonSummary.stats.natureHighlight._y = _loc1.y;
        switch (poke.nature)
        {
            case "hardy":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>No effect";
                break;
            } 
            case "lonely":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Attack, -10% Defense";
                break;
            } 
            case "brave":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Attack, -10% Speed";
                break;
            } 
            case "adamant":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Attack, -10% Special Attack";
                break;
            } 
            case "naughty":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Attack, -10% Special Defense";
                break;
            } 
            case "bold":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Defense, -10% Attack";
                break;
            } 
            case "docile":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>No effect";
                break;
            } 
            case "relaxed":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Defense, -10% Speed";
                break;
            } 
            case "impish":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Defense, -10% Special Attack";
                break;
            } 
            case "lax":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Defense, -10% Special Defense";
                break;
            } 
            case "timid":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Speed, -10% Attack";
                break;
            } 
            case "hasty":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Speed, -10% Defense";
                break;
            } 
            case "serious":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>No effect";
                break;
            } 
            case "jolly":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Speed, -10% Special Attack";
                break;
            } 
            case "naive":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Speed, -10% Special Defense";
                break;
            } 
            case "modest":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Special Attack, -10% Attack";
                break;
            } 
            case "mild":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Special Attack, -10% Defense";
                break;
            } 
            case "quiet":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Special Attack, -10% Speed";
                break;
            } 
            case "bashful":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>No effect";
                break;
            } 
            case "rash":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Special Attack, -10% Special Defense";
                break;
            } 
            case "calm":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Special Defense, -10% Attack";
                break;
            } 
            case "gentle":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Special Defense, -10% Defense";
                break;
            } 
            case "sassy":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Special Defense, -10% Speed";
                break;
            } 
            case "careful":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>+10% Special Defense, -10% Special Attack";
                break;
            } 
            case "quirky":
            {
                mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>No effect";
                break;
            } 
        } // End of switch
        mainGUI.pokemonSummary.stats.natureHighlight.nameT._width = mainGUI.pokemonSummary.stats.natureHighlight.nameT.textWidth + 10;
        mainGUI.pokemonSummary.stats.natureHighlight.bg._width = mainGUI.pokemonSummary.stats.natureHighlight.nameT.textWidth + 10;
        mainGUI.pokemonSummary.stats.natureHighlight.startDrag();
        mainGUI.pokemonSummary.stats.natureHighlight._visible = true;
    };
    mainGUI.pokemonSummary.stats.n.onRollOut = function ()
    {
        mainGUI.pokemonSummary.stats.natureHighlight.stopDrag();
        mainGUI.pokemonSummary.stats.natureHighlight._visible = false;
    };
} // End of the function
function setPokemonSummaryAbilityRollover(poke)
{
    mainGUI.pokemonSummary.stats.n2.onRollOver = function ()
    {
        var _loc2 = {x: _xmouse, y: _ymouse};
        mainGUI.pokemonSummary.stats.globalToLocal(_loc2);
        mainGUI.pokemonSummary.stats.natureHighlight._x = _loc2.x + 10;
        mainGUI.pokemonSummary.stats.natureHighlight._y = _loc2.y;
        mainGUI.pokemonSummary.stats.natureHighlight.nameT.htmlText = "<b>" + _root.abilityDescriptions[poke.ability - 1];
        mainGUI.pokemonSummary.stats.natureHighlight.nameT._width = mainGUI.pokemonSummary.stats.natureHighlight.nameT.textWidth + 10;
        mainGUI.pokemonSummary.stats.natureHighlight.bg._width = mainGUI.pokemonSummary.stats.natureHighlight.nameT.textWidth + 10;
        mainGUI.pokemonSummary.stats.natureHighlight.startDrag();
        mainGUI.pokemonSummary.stats.natureHighlight._visible = true;
    };
    mainGUI.pokemonSummary.stats.n2.onRollOut = function ()
    {
        mainGUI.pokemonSummary.stats.natureHighlight.stopDrag();
        mainGUI.pokemonSummary.stats.natureHighlight._visible = false;
    };
} // End of the function
function setPokemonSummaryMoveRollovers(poke, target)
{
    if (target == _root.mainGUI.pokemonSummary.moveBank.itemList)
    {
        var _loc4 = poke.moveBank.length;
        var targetMoves = poke.moveBank;
    }
    else
    {
        _loc4 = 4;
        var targetMoves = poke.moves;
    } // end else if
    for (var _loc3 = 1; _loc3 <= _loc4; ++_loc3)
    {
        target["n" + _loc3].num = _loc3 - 1;
        target["n" + _loc3].onRollOver = function ()
        {
            var _loc2 = {x: _xmouse, y: _ymouse};
            target.globalToLocal(_loc2);
            target.movesHighlight._x = _loc2.x + 10;
            target.movesHighlight._y = _loc2.y;
            target.movesHighlight.nameT.htmlText = "<b>" + moveData[targetMoves[this.num]][5] + "-type " + moveData[targetMoves[this.num]][2] + " move. " + moveData[targetMoves[this.num]][3] + " ";
            if (moveData[targetMoves[this.num]][1] != 0)
            {
                target.movesHighlight.nameT.htmlText = target.movesHighlight.nameT.htmlText + ("<b>" + moveData[targetMoves[this.num]][1] + " power. ");
            } // end if
            if (moveData[targetMoves[this.num]][0] != true)
            {
                target.movesHighlight.nameT.htmlText = target.movesHighlight.nameT.htmlText + ("<b>" + moveData[targetMoves[this.num]][0] + " accuracy. ");
            } // end if
            target.movesHighlight.nameT._width = target.movesHighlight.nameT.textWidth + 10;
            target.movesHighlight.bg._width = target.movesHighlight.nameT.textWidth + 10;
            target.movesHighlight.startDrag();
            target.movesHighlight._visible = true;
        };
        target["n" + _loc3].onRollOut = function ()
        {
            target.movesHighlight.stopDrag();
            target.movesHighlight._visible = false;
        };
    } // end of for
    if (target == _root.learnMoveScreen)
    {
        target.n5.onRollOver = function ()
        {
            var _loc2 = {x: _xmouse, y: _ymouse};
            target.globalToLocal(_loc2);
            target.movesHighlight._x = _loc2.x + 10;
            target.movesHighlight._y = _loc2.y;
            target.movesHighlight.nameT.htmlText = "<b>" + moveData[_root.learningMoveNum][5] + "-type " + moveData[_root.learningMoveNum][2] + " move. " + moveData[_root.learningMoveNum][3] + " ";
            if (moveData[_root.learningMoveNum][1] != 0)
            {
                target.movesHighlight.nameT.htmlText = target.movesHighlight.nameT.htmlText + ("<b>" + moveData[_root.learningMoveNum][1] + " power. ");
            } // end if
            if (moveData[_root.learningMoveNum][0] != true)
            {
                target.movesHighlight.nameT.htmlText = target.movesHighlight.nameT.htmlText + ("<b>" + moveData[_root.learningMoveNum][0] + " accuracy. ");
            } // end if
            target.movesHighlight.nameT._width = target.movesHighlight.nameT.textWidth + 10;
            target.movesHighlight.bg._width = target.movesHighlight.nameT.textWidth + 10;
            target.movesHighlight.startDrag();
            target.movesHighlight._visible = true;
        };
        target.n5.onRollOut = function ()
        {
            target.movesHighlight.stopDrag();
            target.movesHighlight._visible = false;
        };
    } // end if
} // End of the function
function makeAchievements()
{
    addDraggableGUI(mainGUI.achievements, 471, 565);
    _root.mainGUI.achievements.itemList.setMask(_root.mainGUI.achievements.maskBg);
    _root.mainGUI.achievements.progressBar.setMask(_root.mainGUI.achievements.maskBg2);
    _root.mainGUI.achievements.scrollBar.onRelease = _root.mainGUI.achievements.scrollBar.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        _root.dragScrollbar = 0;
    };
    _root.mainGUI.achievements.scrollBar.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, this._x, 118, this._x, -200);
        _root.dragScrollbar = 31;
    };
    _root.mainGUI.achievements.scrollBar.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    _root.mainGUI.achievements.scrollBar.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    _root.mainGUI.achievements.scrollUpB.onRelease = _root.mainGUI.achievements.scrollUpB.onReleaseOutside = function ()
    {
        _root.dragScrollbar = 0;
        this.gotoAndStop(1);
    };
    _root.mainGUI.achievements.scrollUpB.onPress = function ()
    {
        _root.dragScrollbar = 30;
        this.gotoAndStop("click");
    };
    _root.mainGUI.achievements.scrollUpB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    _root.mainGUI.achievements.scrollUpB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    _root.mainGUI.achievements.scrollDownB.onRelease = _root.mainGUI.achievements.scrollDownB.onReleaseOutside = function ()
    {
        _root.dragScrollbar = 0;
        this.gotoAndStop(1);
    };
    _root.mainGUI.achievements.scrollDownB.onPress = function ()
    {
        _root.dragScrollbar = 29;
        this.gotoAndStop("click");
    };
    _root.mainGUI.achievements.scrollDownB.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    _root.mainGUI.achievements.scrollDownB.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    for (var _loc4 = 0; _loc4 < _root.achievementsArray.length; ++_loc4)
    {
        var _loc5 = _root.mainGUI.achievements.itemList.attachMovie("achievementBar", "achievementBar" + _loc4, _root.mainGUI.achievements.itemList.getNextHighestDepth());
        _loc5._y = 25 + 54 * _root.achievementsArray[_loc4][5];
        _loc5.rewardBox2._visible = false;
        _loc5.rewardBox3._visible = false;
        for (var _loc3 = 0; _loc3 < achievementsArray[_loc4][3].length; ++_loc3)
        {
            _loc5["rewardBox" + (_loc3 + 1)]._visible = true;
            if (achievementsArray[_loc4][3][_loc3][0].indexOf("HM") != -1 || achievementsArray[_loc4][3][_loc3][0].indexOf("TM") != -1 && achievementsArray[_loc4][3][_loc3][0] != "TM Box")
            {
                _loc5["rewardBox" + (_loc3 + 1)].i.gotoAndStop("tmhm");
            }
            else
            {
                _loc5["rewardBox" + (_loc3 + 1)].i.gotoAndStop(achievementsArray[_loc4][3][_loc3][0]);
            } // end else if
            _loc5["rewardBox" + (_loc3 + 1)].numT.htmlText = "<b>" + achievementsArray[_loc4][3][_loc3][1];
            _loc5["rewardBox" + (_loc3 + 1)].n = achievementsArray[_loc4][3][_loc3][0];
            _loc5["rewardBox" + (_loc3 + 1)].onRollOver = function ()
            {
                var _loc3 = {x: _xmouse, y: _ymouse};
                _root.mainGUI.achievements.globalToLocal(_loc3);
                _root.mainGUI.achievements.rewardHighlight._x = _loc3.x + 10;
                _root.mainGUI.achievements.rewardHighlight._y = _loc3.y;
                _root.mainGUI.achievements.rewardHighlight.nameT.htmlText = "<b>" + this.n;
                _root.mainGUI.achievements.rewardHighlight.startDrag();
                _root.mainGUI.achievements.rewardHighlight._visible = true;
            };
            _loc5["rewardBox" + (_loc3 + 1)].onRollOut = function ()
            {
                _root.mainGUI.achievements.rewardHighlight.stopDrag();
                _root.mainGUI.achievements.rewardHighlight._visible = false;
            };
        } // end of for
        _loc5.nameT.text = achievementsArray[_loc4][0];
        _loc5.difficultyT.text = achievementsArray[_loc4][1];
        var _loc8 = 0;
        for (var _loc7 = 1; _loc7 < _root.achievementData[_loc4].length; ++_loc7)
        {
            _loc8 = _loc8 + Number(_root.achievementData[_loc4][_loc7]);
        } // end of for
        if (_loc8 >= _root.achievementsArray[_loc4][4])
        {
            _loc5.startedB.gotoAndStop(3);
        }
        else if (_loc8 > 0)
        {
            _loc5.startedB.gotoAndStop(2);
        }
        else
        {
            _loc5.startedB.gotoAndStop(1);
        } // end else if
        _loc5.bg.num = _loc4;
        _loc5.bg.onRelease = function ()
        {
            selectAchievement(this.num);
        };
    } // end of for
    selectAchievement(0);
} // End of the function
function selectAchievement(num)
{
    _root.selectedAchievement = num;
    _root.mainGUI.achievements.nameT.text = achievementsArray[num][0];
    _root.mainGUI.achievements.descriptionT.htmlText = "<b>" + achievementsArray[num][2];
    var _loc8 = 0;
    for (var _loc6 = 1; _loc6 < _root.achievementData[num].length; ++_loc6)
    {
        _loc8 = _loc8 + Number(_root.achievementData[num][_loc6]);
    } // end of for
    _root.mainGUI.achievements.progressT.htmlText = "<b>" + format(_loc8) + " / " + format(achievementsArray[num][4]);
    if (_loc8 >= _root.achievementsArray[num][4])
    {
        _root.mainGUI.achievements.startedB.gotoAndStop(3);
    }
    else if (_loc8 > 0)
    {
        _root.mainGUI.achievements.startedB.gotoAndStop(2);
    }
    else
    {
        _root.mainGUI.achievements.startedB.gotoAndStop(1);
    } // end else if
    _root.mainGUI.achievements.rewardBox2._visible = false;
    _root.mainGUI.achievements.rewardBox3._visible = false;
    for (var _loc3 = 0; _loc3 < achievementsArray[num][3].length; ++_loc3)
    {
        _root.mainGUI.achievements["rewardBox" + (_loc3 + 1)]._visible = true;
        if (achievementsArray[num][3][_loc3][0].indexOf("HM") != -1 || achievementsArray[num][3][_loc3][0].indexOf("TM") != -1 && achievementsArray[num][3][_loc3][0] != "TM Box")
        {
            _root.mainGUI.achievements["rewardBox" + (_loc3 + 1)].i.gotoAndStop("tmhm");
        }
        else
        {
            _root.mainGUI.achievements["rewardBox" + (_loc3 + 1)].i.gotoAndStop(achievementsArray[num][3][_loc3][0]);
        } // end else if
        _root.mainGUI.achievements["rewardBox" + (_loc3 + 1)].numT.htmlText = "<b>" + achievementsArray[num][3][_loc3][1];
        _root.mainGUI.achievements["rewardBox" + (_loc3 + 1)].n = achievementsArray[num][3][_loc3][0];
        _root.mainGUI.achievements["rewardBox" + (_loc3 + 1)].onRollOver = function ()
        {
            var _loc3 = {x: _xmouse, y: _ymouse};
            _root.mainGUI.achievements.globalToLocal(_loc3);
            _root.mainGUI.achievements.rewardHighlight._x = _loc3.x + 10;
            _root.mainGUI.achievements.rewardHighlight._y = _loc3.y;
            _root.mainGUI.achievements.rewardHighlight.nameT.htmlText = "<b>" + this.n;
            _root.mainGUI.achievements.rewardHighlight.startDrag();
            _root.mainGUI.achievements.rewardHighlight._visible = true;
        };
        _root.mainGUI.achievements["rewardBox" + (_loc3 + 1)].onRollOut = function ()
        {
            _root.mainGUI.achievements.rewardHighlight.stopDrag();
            _root.mainGUI.achievements.rewardHighlight._visible = false;
        };
    } // end of for
    _root.mainGUI.achievements.progressBar._x = _loc8 / _root.achievementsArray[num][4] * 181 - 95;
    if (_root.mainGUI.achievements.progressBar._x > 86)
    {
        _root.mainGUI.achievements.progressBar._x = 86;
    } // end if
} // End of the function
function handleAchievementCompleted(resObj)
{
    if (resObj[2] == "0")
    {
        achievementData[Number(resObj[2])][1] = "1";
        systemMessage("<b>Congratulations, you\'ve completed the Starting Your Journey achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("Backpack", 1);
    }
    else if (resObj[2] == "1")
    {
        achievementData[Number(resObj[2])][1] = "1";
        systemMessage("<b>Congratulations, you\'ve completed the Champion I achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("1 Day GM Ticket (untradeable)", 1);
    }
    else if (resObj[2] == "2")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Collector I achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("EV Reset (untradeable)", 1);
    }
    else if (resObj[2] == "3")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Fisherman I achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("Poke Ball", 15);
        addInventoryItem("Great Ball", 10);
        addInventoryItem("Ultra Ball", 10);
    }
    else if (resObj[2] == "4")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Philanthropist I achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("Poke Ball", 10);
        addInventoryItem("Great Ball", 10);
        addInventoryItem("Ultra Ball", 10);
    }
    else if (resObj[2] == "5")
    {
        achievementData[Number(resObj[2])][1] = "1";
        systemMessage("<b>Congratulations, you\'ve completed the Catcher I achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("Great Ball", 10);
        addInventoryItem("Ultra Ball", 5);
    }
    else if (resObj[2] == "6")
    {
        achievementData[Number(resObj[2])][1] = "1";
        systemMessage("<b>Congratulations, you\'ve completed the Champion II achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("3 Day GM Ticket (untradeable)", 1);
    }
    else if (resObj[2] == "7")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Collector II achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("Mystery Box", 3);
    }
    else if (resObj[2] == "8")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Fisherman II achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("TM Box", 1);
        addInventoryItem("1 Day GM Ticket (untradeable)", 1);
    }
    else if (resObj[2] == "9")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Philanthropist II achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("World Blessing", 1);
    }
    else if (resObj[2] == "10")
    {
        achievementData[Number(resObj[2])][1] = "1";
        systemMessage("<b>Congratulations, you\'ve completed the Archaeologist achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("1 Day GM Ticket (untradeable)", 1);
    }
    else if (resObj[2] == "11")
    {
        achievementData[Number(resObj[2])][1] = "1";
        achievementData[Number(resObj[2])][2] = "1";
        achievementData[Number(resObj[2])][3] = "1";
        systemMessage("<b>Congratulations, you\'ve completed the Generosity achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("World Blessing", 1);
    }
    else if (resObj[2] == "12")
    {
        achievementData[Number(resObj[2])][1] = "1";
        systemMessage("<b>Congratulations, you\'ve completed the Catcher II achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("Great Ball", 30);
        addInventoryItem("Ultra Ball", 20);
    }
    else if (resObj[2] == "13")
    {
        achievementData[Number(resObj[2])][1] = "1";
        systemMessage("<b>Congratulations, you\'ve completed the Catcher III achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("1 Day GM Ticket (untradeable)", 1);
    }
    else if (resObj[2] == "14")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Millionaire I achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("3 Day GM Ticket (untradeable)", 1);
    }
    else if (resObj[2] == "15")
    {
        achievementData[Number(resObj[2])][1] = "1";
        systemMessage("<b>Congratulations, you\'ve completed the Champion III achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("7 Day GM Ticket (untradeable)", 1);
    }
    else if (resObj[2] == "16")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Collector III achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("Mossy Key", 1);
    }
    else if (resObj[2] == "17")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Fisherman III achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("Pokemon Box", 1);
        addInventoryItem("30 Day GM Ticket (untradeable)", 1);
    }
    else if (resObj[2] == "18")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Philanthropist III achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("Pokemon Box", 1);
    }
    else if (resObj[2] == "19")
    {
        achievementData[Number(resObj[2])][1] = "1";
        systemMessage("<b>Congratulations, you\'ve completed the Catcher IV achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("3 Day GM Ticket (untradeable)", 1);
    }
    else if (resObj[2] == "20")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Millionaire II achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("7 Day GM Ticket (untradeable)", 2);
    }
    else if (resObj[2] == "21")
    {
        achievementData[Number(resObj[2])][1] = "1";
        systemMessage("<b>Congratulations, you\'ve completed the Explorer achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("Ability Capsule (untradeable)", 1);
    }
    else if (resObj[2] == "22")
    {
        achievementData[Number(resObj[2])][1] = "1";
        systemMessage("<b>Congratulations, you\'ve completed the Maxed Out achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("Evolutional Stone Box", 1);
        addInventoryItem("Mystery Box", 1);
    }
    else if (resObj[2] == "23")
    {
        achievementData[Number(resObj[2])][1] = "1";
        systemMessage("<b>Congratulations, you\'ve completed the Catcher V achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("IV Reset (untradeable)", 3);
        addInventoryItem("Mewtwo Mask", 1);
    }
    else if (resObj[2] == "24")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Millionaire III achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("Pokemon Box", 3);
        addInventoryItem("30 Day GM Ticket (untradeable)", 1);
        addInventoryItem("IV Reset (untradeable)", 1);
    }
    else if (resObj[2] == "25")
    {
        achievementData[Number(resObj[2])][1] = "1";
        achievementData[Number(resObj[2])][2] = "1";
        achievementData[Number(resObj[2])][3] = "1";
        achievementData[Number(resObj[2])][4] = "1";
        achievementData[Number(resObj[2])][5] = "1";
        achievementData[Number(resObj[2])][6] = "1";
        achievementData[Number(resObj[2])][7] = "1";
        systemMessage("<b>Congratulations, you\'ve completed the Pseudo achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("IV Reset (untradeable)", 3);
        addInventoryItem("Mew Mask", 1);
    }
    else if (resObj[2] == "26")
    {
        achievementData[Number(resObj[2])][1] = "1";
        systemMessage("<b>Congratulations, you\'ve completed the PvP Master achievement. The reward has been added to your item box.</b>");
        addToItemBox("30 Day GM Ticket (untradeable)", 1);
    }
    else if (resObj[2] == "27")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Philanthropist IV achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("World Blessing", 25);
        addInventoryItem("Pokemon Box", 1);
        addInventoryItem("Item Bomb (Enhanced)", 1);
    }
    else if (resObj[2] == "28")
    {
        achievementData[Number(resObj[2])][1] = "1";
        systemMessage("<b>Congratulations, you\'ve completed the Champion IV achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("7 Day GM Ticket (untradeable)", 2);
    }
    else if (resObj[2] == "29")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Miner I achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("Poke Ball", 15);
        addInventoryItem("Great Ball", 10);
        addInventoryItem("Ultra Ball", 10);
    }
    else if (resObj[2] == "30")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Miner II achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("TM Box", 1);
        addInventoryItem("1 Day GM Ticket (untradeable)", 1);
    }
    else if (resObj[2] == "31")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Miner III achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("Pokemon Box", 1);
        addInventoryItem("30 Day GM Ticket (untradeable)", 1);
    }
    else if (resObj[2] == "32")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Collector IV achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("Castle Key", 1);
        addInventoryItem("IV Reset (untradeable)", 1);
    }
    else if (resObj[2] == "33")
    {
        achievementData[Number(resObj[2])][1] = Number(resObj[3]);
        systemMessage("<b>Congratulations, you\'ve completed the Champion V achievement. The reward has been added to your inventory.</b>");
        addInventoryItem("7 Day GM Ticket", 3);
        addInventoryItem("IV Reset (untradeable)", 1);
    } // end else if
    remakeInventory();
    selectAchievement(_root.selectedAchievement);
    _root.mainGUI.achievements.itemList["achievementBar" + resObj[2]].startedB.gotoAndStop(3);
} // End of the function
function handleMarketplaceSearch(resObj)
{
    removeMovieClip (mainGUI.darkScreen);
    searchMarketplaceListings = [];
    for (var _loc1 = 2; _loc1 < resObj.length; ++_loc1)
    {
        tempSearchPokemon = "";
        oldResName = "";
        if (resObj[_loc1].indexOf("[") != -1)
        {
            if (resObj[_loc1].indexOf("[S]") != -1)
            {
                oldResName = resObj[_loc1].substr(resObj[_loc1].indexOf(",") + 1, resObj[_loc1].length);
                oldResName = oldResName.substr(0, oldResName.indexOf(","));
                resObj[_loc1] = resObj[_loc1].split("[S]").join("");
                tempSearchPokemonString = resObj[_loc1].substr(resObj[_loc1].indexOf("["), resObj[_loc1].lastIndexOf("]") - resObj[_loc1].indexOf("[") + 1);
            }
            else
            {
                tempSearchPokemonString = resObj[_loc1].substr(resObj[_loc1].indexOf("["), resObj[_loc1].lastIndexOf("]") - resObj[_loc1].indexOf("[") + 1);
            } // end else if
            tempSearchPokemon = parsePokemon(tempSearchPokemonString);
            test2 = resObj[_loc1].substr(0, resObj[_loc1].indexOf("["));
            test3 = resObj[_loc1].substr(resObj[_loc1].lastIndexOf("]") + 1, resObj[_loc1].length);
            resObj[_loc1] = test2 + test3;
        } // end if
        resObj[_loc1] = resObj[_loc1].split(",");
        resObj[_loc1][3] = Number(resObj[_loc1][3]);
        resObj[_loc1][4] = Number(resObj[_loc1][4]);
        resObj[_loc1][7] = Number(resObj[_loc1][7]);
        resObj[_loc1][8] = Number(resObj[_loc1][8]);
        resObj[_loc1][9] = Number(resObj[_loc1][9]);
        if (oldResName == "")
        {
            oldResName = resObj[_loc1][1];
        } // end if
        searchMarketplaceListings.push([resObj[_loc1][0], oldResName, tempSearchPokemon, resObj[_loc1][3], resObj[_loc1][4], resObj[_loc1][5], resObj[_loc1][6], resObj[_loc1][7], resObj[_loc1][8], resObj[_loc1][9]]);
    } // end of for
    makeMarketplaceAuctionListings();
    selectedPrice = undefined;
    selectedTradeId = undefined;
    selectedNum = undefined;
} // End of the function
function showDyeUI()
{
    var _loc3 = _root.mainGUI.attachMovie("dyeGUI", "dyeGUI", _root.mainGUI.getNextHighestDepth());
    _loc3.blackB2.onRelease = function ()
    {
        _root.mainGUI.dyeGUI.dyeRa = 35;
        _root.mainGUI.dyeGUI.dyeGa = 35;
        _root.mainGUI.dyeGUI.dyeBa = 35;
        setDyePreviewColor(_root.mainGUI.dyeGUI.dyeRa, _root.mainGUI.dyeGUI.dyeGa, _root.mainGUI.dyeGUI.dyeBa);
    };
    _loc3.greyB2.onRelease = function ()
    {
        _root.mainGUI.dyeGUI.dyeRa = 65;
        _root.mainGUI.dyeGUI.dyeGa = 65;
        _root.mainGUI.dyeGUI.dyeBa = 65;
        setDyePreviewColor(_root.mainGUI.dyeGUI.dyeRa, _root.mainGUI.dyeGUI.dyeGa, _root.mainGUI.dyeGUI.dyeBa);
    };
    _loc3.whiteB2.onRelease = function ()
    {
        _root.mainGUI.dyeGUI.dyeRa = 105;
        _root.mainGUI.dyeGUI.dyeGa = 105;
        _root.mainGUI.dyeGUI.dyeBa = 105;
        setDyePreviewColor(_root.mainGUI.dyeGUI.dyeRa, _root.mainGUI.dyeGUI.dyeGa, _root.mainGUI.dyeGUI.dyeBa);
    };
    _loc3.amberB2.onRelease = function ()
    {
        _root.mainGUI.dyeGUI.dyeGa = 104;
        _root.mainGUI.dyeGUI.dyeBa = 50;
        setDyePreviewColor(_root.mainGUI.dyeGUI.dyeRa, _root.mainGUI.dyeGUI.dyeGa, _root.mainGUI.dyeGUI.dyeBa);
    };
    _loc3.greenB2.onRelease = function ()
    {
        _root.mainGUI.dyeGUI.dyeRa = 24;
        _root.mainGUI.dyeGUI.dyeGa = 105;
        _root.mainGUI.dyeGUI.dyeBa = 5;
        setDyePreviewColor(_root.mainGUI.dyeGUI.dyeRa, _root.mainGUI.dyeGUI.dyeGa, _root.mainGUI.dyeGUI.dyeBa);
    };
    _loc3.tealB2.onRelease = function ()
    {
        _root.mainGUI.dyeGUI.dyeRa = 5;
        _root.mainGUI.dyeGUI.dyeGa = 105;
        _root.mainGUI.dyeGUI.dyeBa = 80;
        setDyePreviewColor(_root.mainGUI.dyeGUI.dyeRa, _root.mainGUI.dyeGUI.dyeGa, _root.mainGUI.dyeGUI.dyeBa);
    };
    _loc3.blueB2.onRelease = function ()
    {
        _root.mainGUI.dyeGUI.dyeRa = 15;
        _root.mainGUI.dyeGUI.dyeGa = 55;
        _root.mainGUI.dyeGUI.dyeBa = 95;
        setDyePreviewColor(_root.mainGUI.dyeGUI.dyeRa, _root.mainGUI.dyeGUI.dyeGa, _root.mainGUI.dyeGUI.dyeBa);
    };
    _loc3.redB2.onRelease = function ()
    {
        _root.mainGUI.dyeGUI.dyeRa = 98;
        _root.mainGUI.dyeGUI.dyeGa = 40;
        _root.mainGUI.dyeGUI.dyeBa = 40;
        setDyePreviewColor(_root.mainGUI.dyeGUI.dyeRa, _root.mainGUI.dyeGUI.dyeGa, _root.mainGUI.dyeGUI.dyeBa);
    };
    _loc3.pinkB2.onRelease = function ()
    {
        _root.mainGUI.dyeGUI.dyeRa = 110;
        _root.mainGUI.dyeGUI.dyeGa = 20;
        _root.mainGUI.dyeGUI.dyeBa = 75;
        setDyePreviewColor(_root.mainGUI.dyeGUI.dyeRa, _root.mainGUI.dyeGUI.dyeGa, _root.mainGUI.dyeGUI.dyeBa);
    };
    _loc3.purpleB2.onRelease = function ()
    {
        _root.mainGUI.dyeGUI.dyeRa = 70;
        _root.mainGUI.dyeGUI.dyeGa = 5;
        _root.mainGUI.dyeGUI.dyeBa = 105;
        setDyePreviewColor(_root.mainGUI.dyeGUI.dyeRa, _root.mainGUI.dyeGUI.dyeGa, _root.mainGUI.dyeGUI.dyeBa);
    };
    _loc3.confirmB.onRelease = function ()
    {
        if (_root.mainGUI.dyeGUI.itemName != undefined)
        {
            if (_root.mainGUI.dyeGUI.dyeRa != undefined)
            {
                if (_root.isBusy == false)
                {
                    getTimestamp("dye");
                } // end if
            }
            else
            {
                systemMessage("Please choose a color.");
            } // end else if
        }
        else
        {
            systemMessage("Please choose a target item.");
        } // end else if
    };
    _loc3.cancelB.onRelease = function ()
    {
        removeMovieClip (_root.mainGUI.dyeGUI);
        canMove = true;
        guiUp = false;
    };
    _loc3.slider4.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, _root.mainGUI.dyeGUI.sliderLine4._x, this._y, _root.mainGUI.dyeGUI.sliderLine4._x + _root.mainGUI.dyeGUI.sliderLine4._width, this._y);
        this.onEnterFrame = function ()
        {
            _root.mainGUI.dyeGUI.dyeRa = Math.round((this._x - _root.mainGUI.dyeGUI.sliderLine4._x) / _root.mainGUI.dyeGUI.sliderLine4._width * 100) + 35;
            if (_root.mainGUI.dyeGUI.dyeRa > 135)
            {
            } // end if
            setDyePreviewColor(_root.mainGUI.dyeGUI.dyeRa, _root.mainGUI.dyeGUI.dyeGa, _root.mainGUI.dyeGUI.dyeBa);
        };
    };
    _loc3.slider4.onRelease = function ()
    {
        this.gotoAndStop("hover");
        this.stopDrag();
        delete this.onEnterFrame;
    };
    _loc3.slider4.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        delete this.onEnterFrame;
    };
    _loc3.slider4.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    _loc3.slider4.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    _loc3.slider5.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, _root.mainGUI.dyeGUI.sliderLine5._x, this._y, _root.mainGUI.dyeGUI.sliderLine5._x + _root.mainGUI.dyeGUI.sliderLine5._width, this._y);
        this.onEnterFrame = function ()
        {
            _root.mainGUI.dyeGUI.dyeGa = Math.round((this._x - _root.mainGUI.dyeGUI.sliderLine5._x) / _root.mainGUI.dyeGUI.sliderLine5._width * 100) + 35;
            if (_root.mainGUI.dyeGUI.dyeGa > 135)
            {
            } // end if
            setDyePreviewColor(_root.mainGUI.dyeGUI.dyeRa, _root.mainGUI.dyeGUI.dyeGa, _root.mainGUI.dyeGUI.dyeBa);
        };
    };
    _loc3.slider5.onRelease = function ()
    {
        this.gotoAndStop("hover");
        this.stopDrag();
        delete this.onEnterFrame;
    };
    _loc3.slider5.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        delete this.onEnterFrame;
    };
    _loc3.slider5.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    _loc3.slider5.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    _loc3.slider6.onPress = function ()
    {
        this.gotoAndStop("click");
        this.startDrag(true, _root.mainGUI.dyeGUI.sliderLine6._x, this._y, _root.mainGUI.dyeGUI.sliderLine6._x + _root.mainGUI.dyeGUI.sliderLine6._width, this._y);
        this.onEnterFrame = function ()
        {
            _root.mainGUI.dyeGUI.dyeBa = Math.round((this._x - _root.mainGUI.dyeGUI.sliderLine6._x) / _root.mainGUI.dyeGUI.sliderLine6._width * 100) + 35;
            if (_root.mainGUI.dyeGUI.dyeBa > 135)
            {
            } // end if
            setDyePreviewColor(_root.mainGUI.dyeGUI.dyeRa, _root.mainGUI.dyeGUI.dyeGa, _root.mainGUI.dyeGUI.dyeBa);
        };
    };
    _loc3.slider6.onRelease = function ()
    {
        this.gotoAndStop("hover");
        this.stopDrag();
        delete this.onEnterFrame;
    };
    _loc3.slider6.onReleaseOutside = function ()
    {
        this.gotoAndStop(1);
        this.stopDrag();
        delete this.onEnterFrame;
    };
    _loc3.slider5.onRollOver = function ()
    {
        this.gotoAndStop("hover");
    };
    _loc3.slider6.onRollOut = function ()
    {
        this.gotoAndStop(1);
    };
    assignMouseEvents(_loc3.confirmB);
    assignMouseEvents(_loc3.cancelB);
    addDraggableGUI(_loc3);
} // End of the function
function resetMapMovementVars()
{
    _root.movingMapJump = false;
    _root.movingMapUp = false;
    _root.movingMapDown = false;
    _root.movingMapRight = false;
    _root.movingMapLeft = false;
    _root.movingMapUpJump = false;
    _root.movingMapDownJump = false;
    _root.movingMapRightJump = false;
    _root.movingMapLeftJump = false;
    _root.player.moveMapAmount = 0;
} // End of the function
function handleSendFace2Goto(resObj)
{
    var _loc5 = resObj[2].split("%");
    _root["player_" + resObj[3]].face2 = _loc5[0];
    if (_loc5[1] != undefined)
    {
        var _loc4 = _loc5[1].split("-");
        var _loc2 = [];
        _loc2 = _loc2.concat([_loc4[0] / 100, 0, 0, 0, 0]);
        _loc2 = _loc2.concat([0, _loc4[1] / 100, 0, 0, 0]);
        _loc2 = _loc2.concat([0, 0, _loc4[2] / 100, 0, 0]);
        _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
        _root["player_" + resObj[3]].face2Filter = new flash.filters.ColorMatrixFilter(_loc2);
    }
    else
    {
        _root["player_" + resObj[3]].face2Filter = undefined;
    } // end else if
    drawPlayer(_root["player_" + resObj[3]], _root["player_" + resObj[3]].frameX, _root["player_" + resObj[3]].frameY);
} // End of the function
function handleSendCapeGoto(resObj)
{
    var _loc4 = resObj[2].split("%");
    _root["player_" + resObj[3]].cape = _loc4[0];
    if (_loc4[1] != undefined)
    {
        var _loc5 = _loc4[1].split("-");
        var _loc2 = [];
        _loc2 = _loc2.concat([_loc5[0] / 100, 0, 0, 0, 0]);
        _loc2 = _loc2.concat([0, _loc5[1] / 100, 0, 0, 0]);
        _loc2 = _loc2.concat([0, 0, _loc5[2] / 100, 0, 0]);
        _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
        _root["player_" + resObj[3]].capeFilter = new flash.filters.ColorMatrixFilter(_loc2);
    }
    else
    {
        _root["player_" + resObj[3]].capeFilter = undefined;
    } // end else if
    drawPlayer(_root["player_" + resObj[3]], _root["player_" + resObj[3]].frameX, _root["player_" + resObj[3]].frameY);
} // End of the function
function handleDye(resObj)
{
    removeItem("Dye", 1);
    removeItem(resObj[2], 1);
    addInventoryItem(resObj[2], 1, resObj[3]);
    remakeInventory();
    _root.mainGUI.dyeGUI.i.gotoAndStop(1);
    _root.mainGUI.dyeGUI.itemName = undefined;
    _root.mainGUI.dyeGUI.dyeRa = undefined;
    _root.mainGUI.dyeGUI.dyeGa = undefined;
    _root.mainGUI.dyeGUI.dyeBa = undefined;
    removeMovieClip (_root.mainGUI.dyeGUI.dyePreview);
    systemMessage("You successfully dyed your " + resObj[2] + ".");
} // End of the function
function handleItemBomb(resObj)
{
    resObj[3] = parseMultiArray(resObj[3]);
    resObj[4] = parseArray(resObj[4]);
    if (resObj[4].length >= 50)
    {
        var _loc5 = "<b><font color=\'#FFFFFF\'>" + resObj[2] + "</font> used an Item Bomb (Enhanced)!";
        globalChatLength = globalChatLength + 51;
        localChatLength = localChatLength + 51;
        tradeChatLength = tradeChatLength + 51;
        nonEnglishChatLength = nonEnglishChatLength + 51;
        customChatLength = customChatLength + 51;
        clanChatLength = clanChatLength + 51;
    }
    else
    {
        _loc5 = "<b><font color=\'#FFFFFF\'>" + resObj[2] + "</font> used an Item Bomb!";
        globalChatLength = globalChatLength + 11;
        localChatLength = localChatLength + 11;
        tradeChatLength = tradeChatLength + 11;
        nonEnglishChatLength = nonEnglishChatLength + 11;
        customChatLength = customChatLength + 11;
        clanChatLength = clanChatLength + 11;
    } // end else if
    for (var _loc2 = 0; _loc2 < resObj[4].length; ++_loc2)
    {
        if (resObj[3][_loc2][1] == "1")
        {
            _loc5 = _loc5 + ("<br>" + resObj[4][_loc2] + " received 1 " + resObj[3][_loc2][0] + ".");
            continue;
        } // end if
        _loc5 = _loc5 + ("<br>" + resObj[4][_loc2] + " received " + resObj[3][_loc2][1] + " " + resObj[3][_loc2][0] + "s.");
    } // end of for
    var _loc7 = checkAutoScroll();
    if (globalChatLength >= 150)
    {
        oldScroll = mainGUI.globalChatT.scroll;
        var _loc6 = mainGUI.globalChatT.text.indexOf("\r");
        --globalChatLength;
        for (var _loc4 = 0; _loc4 < globalChatLength - 149; ++_loc4)
        {
            _loc6 = mainGUI.globalChatT.text.indexOf("\r", _loc6 + 1);
            --globalChatLength;
        } // end of for
        mainGUI.globalChatT.replaceText(0, _loc6 + 1, "");
        if (_loc7)
        {
            mainGUI.globalChatT.scroll = mainGUI.globalChatT.maxscroll;
        }
        else
        {
            mainGUI.globalChatT.scroll = oldScroll;
        } // end if
    } // end else if
    if (localChatLength >= 150)
    {
        oldScroll = mainGUI.localChatT.scroll;
        _loc6 = mainGUI.localChatT.text.indexOf("\r");
        --localChatLength;
        for (var _loc4 = 0; _loc4 < localChatLength - 149; ++_loc4)
        {
            _loc6 = mainGUI.localChatT.text.indexOf("\r", _loc6 + 1);
            --localChatLength;
        } // end of for
        mainGUI.localChatT.replaceText(0, _loc6 + 1, "");
        if (_loc7)
        {
            mainGUI.localChatT.scroll = mainGUI.localChatT.maxscroll;
        }
        else
        {
            mainGUI.localChatT.scroll = oldScroll;
        } // end if
    } // end else if
    if (tradeChatLength >= 150)
    {
        oldScroll = mainGUI.tradeChatT.scroll;
        _loc6 = mainGUI.tradeChatT.text.indexOf("\r");
        --tradeChatLength;
        for (var _loc4 = 0; _loc4 < tradeChatLength - 149; ++_loc4)
        {
            _loc6 = mainGUI.tradeChatT.text.indexOf("\r", _loc6 + 1);
            --tradeChatLength;
        } // end of for
        mainGUI.tradeChatT.replaceText(0, _loc6 + 1, "");
        if (_loc7)
        {
            mainGUI.tradeChatT.scroll = mainGUI.tradeChatT.maxscroll;
        }
        else
        {
            mainGUI.tradeChatT.scroll = oldScroll;
        } // end if
    } // end else if
    if (clanChatLength >= 150)
    {
        oldScroll = mainGUI.clanChatT.scroll;
        _loc6 = mainGUI.clanChatT.text.indexOf("\r");
        --clanChatLength;
        for (var _loc4 = 0; _loc4 < clanChatLength - 149; ++_loc4)
        {
            _loc6 = mainGUI.clanChatT.text.indexOf("\r", _loc6 + 1);
            --clanChatLength;
        } // end of for
        mainGUI.clanChatT.replaceText(0, _loc6 + 1, "");
        if (_loc7)
        {
            mainGUI.clanChatT.scroll = mainGUI.clanChatT.maxscroll;
        }
        else
        {
            mainGUI.clanChatT.scroll = oldScroll;
        } // end if
    } // end else if
    if (nonEnglishChatLength >= 150)
    {
        oldScroll = mainGUI.nonEnglishChatT.scroll;
        _loc6 = mainGUI.nonEnglishChatT.text.indexOf("\r");
        --nonEnglishChatLength;
        for (var _loc4 = 0; _loc4 < nonEnglishChatLength - 149; ++_loc4)
        {
            _loc6 = mainGUI.nonEnglishChatT.text.indexOf("\r", _loc6 + 1);
            --nonEnglishChatLength;
        } // end of for
        mainGUI.nonEnglishChatT.replaceText(0, _loc6 + 1, "");
        if (_loc7)
        {
            mainGUI.nonEnglishChatT.scroll = mainGUI.nonEnglishChatT.maxscroll;
        }
        else
        {
            mainGUI.nonEnglishChatT.scroll = oldScroll;
        } // end if
    } // end else if
    if (customChatLength >= 150)
    {
        oldScroll = mainGUI.customChatT.scroll;
        _loc6 = mainGUI.customChatT.text.indexOf("\r");
        --customChatLength;
        for (var _loc4 = 0; _loc4 < customChatLength - 149; ++_loc4)
        {
            _loc6 = mainGUI.customChatT.text.indexOf("\r", _loc6 + 1);
            --customChatLength;
        } // end of for
        mainGUI.customChatT.replaceText(0, _loc6 + 1, "");
        if (_loc7)
        {
            mainGUI.customChatT.scroll = mainGUI.customChatT.maxscroll;
        }
        else
        {
            mainGUI.customChatT.scroll = oldScroll;
        } // end if
    } // end else if
    fontColor = "#00FF00";
    mainGUI.globalChatT.htmlText = mainGUI.globalChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'" + fontColor + "\'>" + _loc5 + "</font>");
    mainGUI.localChatT.htmlText = mainGUI.localChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'" + fontColor + "\'>" + _loc5 + "</font>");
    mainGUI.tradeChatT.htmlText = mainGUI.tradeChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'" + fontColor + "\'>" + _loc5 + "</font>");
    mainGUI.nonEnglishChatT.htmlText = mainGUI.nonEnglishChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'" + fontColor + "\'>" + _loc5 + "</font>");
    mainGUI.clanChatT.htmlText = mainGUI.clanChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'" + fontColor + "\'>" + _loc5 + "</font>");
    if (customChat != "")
    {
        mainGUI.customChatT.htmlText = mainGUI.customChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\' color=\'" + fontColor + "\'>" + _loc5 + "</font>");
    } // end if
} // End of the function
function handlePortablePcExpired(resObj)
{
    removeMovieClip (_root.mapLayer1["portablePC_" + Number(resObj[2]) + "_" + Number(resObj[3])]);
    systemMessage("<b>The Portable PC placed by " + resObj[4] + " has expired.</b>", "#FFFFFF");
    for (var _loc2 = 0; _loc2 < _root.portablePCArray.length; ++_loc2)
    {
        if (_root.portablePCArray[_loc2][0] == Number(resObj[2]) && _root.portablePCArray[_loc2][1] == Number(resObj[3]) && _root.portablePCArray[_loc2][2] == resObj[4])
        {
            _root.portablePCArray.splice(_loc2, 1);
            break;
        } // end if
    } // end of for
} // End of the function
function genPvPCenterExits()
{
    if (pvpLobbyOpen)
    {
        var _loc5 = 0;
        for (var _loc3 = 0; _loc3 < _root.userPokemon.length; ++_loc3)
        {
            for (var _loc2 = 0; _loc2 < _root.userPokemon[_loc3].moves.length; ++_loc2)
            {
                if (_root.userPokemon[_loc3].moves[_loc2] == 226)
                {
                    ++_loc5;
                    break;
                } // end if
            } // end of for
        } // end of for
        if (userPokemon.length >= 6)
        {
            if (_loc5 <= 0)
            {
                var _loc6 = true;
                var _loc11 = true;
                var _loc10 = true;
                var _loc12 = true;
                var _loc9 = true;
                var _loc8 = true;
                for (var _loc3 = 0; _loc3 < _root.userPokemon.length; ++_loc3)
                {
                    for (var _loc2 = 0; _loc2 < _root.userPokemon.length; ++_loc2)
                    {
                        if (_root.userPokemon[_loc3].id == _root.userPokemon[_loc2].id && _loc3 != _loc2)
                        {
                            _loc6 = false;
                            break;
                        } // end if
                    } // end of for
                } // end of for
                if (_loc6 == true)
                {
                    if (_root.tournamentType == 3)
                    {
                        var _loc7 = _root.userPokemon[0].type;
                        var _loc4 = _root.userPokemon[0].type2;
                        if (_loc4 == 0)
                        {
                            _loc4 = -1;
                        } // end if
                        for (var _loc3 = 0; _loc3 < _root.userPokemon.length; ++_loc3)
                        {
                            if (_root.userPokemon[_loc3].type == _loc7 || _root.userPokemon[_loc3].type2 == _loc7)
                            {
                                continue;
                            } // end if
                            _loc11 = false;
                            break;
                        } // end of for
                        for (var _loc3 = 0; _loc3 < _root.userPokemon.length; ++_loc3)
                        {
                            if (_root.userPokemon[_loc3].type == _loc4 || _root.userPokemon[_loc3].type2 == _loc4)
                            {
                                continue;
                            } // end if
                            _loc10 = false;
                            break;
                        } // end of for
                    } // end if
                    if (_loc11 == true || _loc10 == true)
                    {
                        if (_root.tournamentType != 2)
                        {
                            for (var _loc3 = 0; _loc3 < _root.userPokemon.length; ++_loc3)
                            {
                                if (_root.userPokemon[_loc3].name == "Giratina" || _root.userPokemon[_loc3].id == 386 || _root.userPokemon[_loc3].name == "Deoxys" || _root.userPokemon[_loc3].id == 491 || _root.userPokemon[_loc3].name == "Darkrai" || _root.userPokemon[_loc3].name == "Xerneas" || _root.userPokemon[_loc3].name == "Blaziken" || _root.userPokemon[_loc3].name == "Yveltal" || _root.userPokemon[_loc3].name == "Greninja")
                                {
                                    _loc12 = false;
                                    break;
                                } // end if
                            } // end of for
                        } // end if
                        if (_loc12 == true)
                        {
                            if (_root.tournamentType == 0)
                            {
                                for (var _loc3 = 0; _loc3 < _root.userPokemon.length; ++_loc3)
                                {
                                    if (_root.userPokemon[_loc3].originalCatcher != _root.username)
                                    {
                                        _loc9 = false;
                                        break;
                                    } // end if
                                } // end of for
                            } // end if
                            if (_loc9)
                            {
                                if (_root.tournamentType == 4)
                                {
                                    for (var _loc3 = 0; _loc3 < _root.userPokemon.length; ++_loc3)
                                    {
                                        if (!inArray(_root.littleCupPokemon, _root.userPokemon[_loc3].name))
                                        {
                                            _loc8 = false;
                                            break;
                                        } // end if
                                    } // end of for
                                } // end if
                                if (_loc8)
                                {
                                    _root.mapExits = [[22, 22, "Vermilion City", 14, 38], [22, 12, "PVP Arena", 16, 25]];
                                }
                                else
                                {
                                    _root.customTiles = [[22, 12, "You need to use Little Cup pokemon!"]];
                                } // end else if
                            }
                            else
                            {
                                _root.customTiles = [[22, 12, "You have to use self caught pokemon!"]];
                            } // end else if
                        }
                        else
                        {
                            _root.customTiles = [[22, 12, "You cannot use a banned pokemon."]];
                        } // end else if
                    }
                    else
                    {
                        _root.customTiles = [[22, 12, "All pokemon on your team must share a type to participate in the Monotype Tournament."]];
                    } // end else if
                }
                else
                {
                    _root.customTiles = [[22, 12, "You cannot have two or more of the same type of pokemon on a team."]];
                } // end else if
            }
            else
            {
                _root.mapExits = [[22, 22, "Vermilion City", 14, 38]];
                _root.customTiles = [[22, 12, "Baton Pass clause limits the number of Baton Pass users to 0. Please adjust your team before entering the PVP Arena."]];
            } // end else if
        }
        else
        {
            _root.mapExits = [[22, 22, "Vermilion City", 14, 38]];
            _root.customTiles = [[22, 12, "You need a full pokemon team before entering the PVP Arena."]];
        } // end else if
    }
    else
    {
        _root.mapExits = [[22, 22, "Vermilion City", 14, 38]];
        _root.customTiles = [[22, 12, "No tournaments are currently open."]];
    } // end else if
} // End of the function
function handlePVPLobbyTrue(resObj)
{
    _root.pvpLobbyOpen = true;
    _root.tournamentType = Number(resObj[2]);
    if (map == "PVP Center")
    {
        genPvPCenterExits();
    } // end if
} // End of the function
function handleMarketplaceSearch2(resObj)
{
    removeMovieClip (_root.mainGUI.darkScreen);
    _root.searchMarketplaceListings = [];
    for (var _loc2 = 2; _loc2 < resObj.length; ++_loc2)
    {
        tempSearchPokemon = "";
        oldResName = "";
        if (resObj[_loc2].indexOf("[") != -1)
        {
            if (resObj[_loc2].indexOf("[S]") != -1)
            {
                oldResName = resObj[_loc2].substr(resObj[_loc2].indexOf(",") + 1, resObj[_loc2].length);
                oldResName = oldResName.substr(0, oldResName.indexOf(","));
                resObj[_loc2] = resObj[_loc2].split("[S]").join("");
                tempSearchPokemonString = resObj[_loc2].substr(resObj[_loc2].indexOf("["), resObj[_loc2].lastIndexOf("]") - resObj[_loc2].indexOf("[") + 1);
            }
            else
            {
                tempSearchPokemonString = resObj[_loc2].substr(resObj[_loc2].indexOf("["), resObj[_loc2].lastIndexOf("]") - resObj[_loc2].indexOf("[") + 1);
            } // end else if
            tempSearchPokemon = parsePokemon(tempSearchPokemonString);
            test2 = resObj[_loc2].substr(0, resObj[_loc2].indexOf("["));
            test3 = resObj[_loc2].substr(resObj[_loc2].lastIndexOf("]") + 1, resObj[_loc2].length);
            resObj[_loc2] = test2 + test3;
        } // end if
        resObj[_loc2] = resObj[_loc2].split(",");
        resObj[_loc2][3] = Number(resObj[_loc2][3]);
        resObj[_loc2][4] = Number(resObj[_loc2][4]);
        resObj[_loc2][7] = Number(resObj[_loc2][7]);
        resObj[_loc2][8] = Number(resObj[_loc2][8]);
        resObj[_loc2][9] = Number(resObj[_loc2][9]);
        if (oldResName == "")
        {
            oldResName = resObj[_loc2][1];
        } // end if
        searchMarketplaceListings.push([resObj[_loc2][0], oldResName, tempSearchPokemon, resObj[_loc2][3], resObj[_loc2][4], resObj[_loc2][5], resObj[_loc2][6], resObj[_loc2][7], resObj[_loc2][8], resObj[_loc2][9]]);
    } // end of for
    makeMarketplaceBuyListings();
    _root.selectedPrice = undefined;
    _root.selectedTradeId = undefined;
    _root.selectedNum = undefined;
} // End of the function
function resizeChat()
{
    var _loc46 = _xmouse;
    var _loc19 = mainGUI.chatBg.chatBg._width;
    var _loc11 = mainGUI.hb3._width;
    var _loc4 = mainGUI.globalChatT._width;
    var _loc8 = mainGUI.chatBg.chatBarBg._width;
    var _loc7 = mainGUI.inputT._width;
    var _loc36 = mainGUI.chatSettingsB._x;
    var _loc33 = mainGUI.globalTab._x;
    var _loc29 = mainGUI.tradeTab._x;
    var _loc26 = mainGUI.localTab._x;
    var _loc23 = mainGUI.nonEnglishTab._x;
    var _loc20 = mainGUI.clanTab._x;
    var _loc15 = mainGUI.customTab._x;
    var _loc5 = mainGUI.globalChatT._x;
    var _loc30 = mainGUI.hb1._x;
    var _loc34 = mainGUI.hb2._x;
    var _loc37 = mainGUI.hb3._x;
    var _loc41 = mainGUI.chatBg.chatBarBg2._x;
    var _loc42 = mainGUI.chatBg.inputTBg._x;
    var _loc9 = mainGUI.expandB._x;
    var _loc12 = mainGUI.inputT._x;
    var _loc16 = mainGUI.contractB._x;
    var _loc45 = _ymouse;
    var _loc13 = mainGUI.chatBg.chatBg._height;
    var _loc39 = mainGUI.hb1._height;
    var _loc6 = mainGUI.globalChatT._height;
    var _loc31 = mainGUI.globalTab._y;
    var _loc27 = mainGUI.tradeTab._y;
    var _loc24 = mainGUI.localTab._y;
    var _loc21 = mainGUI.nonEnglishTab._y;
    var _loc17 = mainGUI.clanTab._y;
    var _loc14 = mainGUI.customTab._y;
    var _loc10 = mainGUI.globalChatT._y;
    var _loc18 = mainGUI.tradeChatT._y;
    var _loc22 = mainGUI.localChatT._y;
    var _loc25 = mainGUI.nonEnglishChatT._y;
    var _loc28 = mainGUI.clanChatT._y;
    var _loc32 = mainGUI.customChatT._y;
    var _loc35 = mainGUI.hb1._y;
    var _loc38 = mainGUI.hb2._y;
    var _loc40 = mainGUI.hb3._y;
    var _loc43 = mainGUI.scrollUpB._y;
    var _loc44 = mainGUI.scrollBar._y;
    var _loc2 = _root.chatWidth - 409;
    var _loc3 = _root.chatHeight - 132;
    mainGUI.chatBg.chatBg._width = _loc19 + _loc2;
    mainGUI.hb3._width = _loc11 + _loc2;
    mainGUI.chatBg.chatBarBg._width = _loc8 + _loc2;
    mainGUI.inputT._width = _loc7 + _loc2;
    mainGUI.globalChatT._width = _loc4 + _loc2;
    mainGUI.tradeChatT._width = _loc4 + _loc2;
    mainGUI.localChatT._width = _loc4 + _loc2;
    mainGUI.nonEnglishChatT._width = _loc4 + _loc2;
    mainGUI.clanChatT._width = _loc4 + _loc2;
    mainGUI.customChatT._width = _loc4 + _loc2;
    mainGUI.chatSettingsB._x = _loc36 - _loc2;
    mainGUI.globalTab._x = _loc33 - _loc2;
    mainGUI.tradeTab._x = _loc29 - _loc2;
    mainGUI.localTab._x = _loc26 - _loc2;
    mainGUI.nonEnglishTab._x = _loc23 - _loc2;
    mainGUI.clanTab._x = _loc20 - _loc2;
    mainGUI.customTab._x = _loc15 - _loc2;
    mainGUI.globalChatT._x = _loc5 - _loc2;
    mainGUI.tradeChatT._x = _loc5 - _loc2;
    mainGUI.localChatT._x = _loc5 - _loc2;
    mainGUI.nonEnglishChatT._x = _loc5 - _loc2;
    mainGUI.clanChatT._x = _loc5 - _loc2;
    mainGUI.customChatT._x = _loc5 - _loc2;
    mainGUI.hb1._x = _loc30 - _loc2;
    mainGUI.hb2._x = _loc34 - _loc2;
    mainGUI.hb3._x = _loc37 - _loc2;
    mainGUI.chatBg.chatBarBg2._x = _loc41 - _loc2;
    mainGUI.chatBg.inputTBg._x = _loc42 - _loc2;
    mainGUI.expandB._x = _loc9 - _loc2;
    mainGUI.inputT._x = _loc12 - _loc2;
    mainGUI.contractB._x = _loc16 - _loc2;
    mainGUI.chatBg.chatBg._height = _loc13 + _loc3;
    mainGUI.hb1._height = _loc39 + _loc3;
    mainGUI.globalChatT._height = _loc6 + _loc3;
    mainGUI.tradeChatT._height = _loc6 + _loc3;
    mainGUI.localChatT._height = _loc6 + _loc3;
    mainGUI.nonEnglishChatT._height = _loc6 + _loc3;
    mainGUI.clanChatT._height = _loc6 + _loc3;
    mainGUI.customChatT._height = _loc6 + _loc3;
    mainGUI.globalTab._y = _loc31 - _loc3;
    mainGUI.tradeTab._y = _loc27 - _loc3;
    mainGUI.localTab._y = _loc24 - _loc3;
    mainGUI.nonEnglishTab._y = _loc21 - _loc3;
    mainGUI.clanTab._y = _loc17 - _loc3;
    mainGUI.customTab._y = _loc14 - _loc3;
    mainGUI.globalChatT._y = _loc10 - _loc3;
    mainGUI.tradeChatT._y = _loc18 - _loc3;
    mainGUI.localChatT._y = _loc22 - _loc3;
    mainGUI.nonEnglishChatT._y = _loc25 - _loc3;
    mainGUI.clanChatT._y = _loc28 - _loc3;
    mainGUI.customChatT._y = _loc32 - _loc3;
    mainGUI.hb1._y = _loc35 - _loc3;
    mainGUI.hb2._y = _loc38 - _loc3;
    mainGUI.hb3._y = _loc40 - _loc3;
    mainGUI.scrollUpB._y = _loc43 - _loc3;
    mainGUI.scrollBar._y = _loc44 - _loc3;
} // End of the function
function setChatFontSize()
{
    var _loc2 = mainGUI.globalChatT.getTextFormat();
    _loc2.size = _root.chatFontSize;
    mainGUI.globalChatT.setTextFormat(_loc2);
    mainGUI.localChatT.setTextFormat(_loc2);
    mainGUI.tradeChatT.setTextFormat(_loc2);
    mainGUI.nonEnglishChatT.setTextFormat(_loc2);
    mainGUI.clanChatT.setTextFormat(_loc2);
    mainGUI.customChatT.setTextFormat(_loc2);
} // End of the function
function setNPCFrame(target, frameX, frameY)
{
    target.frameX = frameX;
    target.frameY = frameY;
    target.container.npcBg._x = frameX * -64;
    target.container.npcBg._y = frameY * -64;
} // End of the function
function closeBattleQueue()
{
    _root.mainGUI.battleQueueB.gotoAndStop(1);
    removeMovieClip (_root.mainGUI.battleQueue);
    removeMovieClip (_root.mainGUI.darkScreen);
    if (_root.battle == false && _root.trading == false)
    {
        canMove = true;
    } // end if
} // End of the function
function setRankIcon()
{
    _root.mainGUI.battleQueue.ratingT.htmlText = "Rating: " + _root.battleQueueRating;
    _root.mainGUI.battleQueue.cpT.htmlText = "Competitive Points: " + format(_root.competitivePoints);
    _root.mainGUI.battleQueue.wbT.htmlText = "Weekly Battles: " + _root.weeklyBattles;
    if (_root.battleQueueRating <= 1099)
    {
        _root.mainGUI.battleQueue.rankIcon.gotoAndStop(1);
    }
    else if (_root.battleQueueRating <= 1199)
    {
        _root.mainGUI.battleQueue.rankIcon.gotoAndStop(2);
    }
    else if (_root.battleQueueRating <= 1299)
    {
        _root.mainGUI.battleQueue.rankIcon.gotoAndStop(3);
    }
    else if (_root.battleQueueRating <= 1399)
    {
        _root.mainGUI.battleQueue.rankIcon.gotoAndStop(4);
    }
    else if (_root.battleQueueRating <= 1499)
    {
        _root.mainGUI.battleQueue.rankIcon.gotoAndStop(5);
    }
    else if (_root.battleQueueRating <= 1599)
    {
        _root.mainGUI.battleQueue.rankIcon.gotoAndStop(6);
    }
    else if (_root.battleQueueRating <= 1699)
    {
        _root.mainGUI.battleQueue.rankIcon.gotoAndStop(7);
    }
    else if (_root.battleQueueRating <= 1799)
    {
        _root.mainGUI.battleQueue.rankIcon.gotoAndStop(8);
    }
    else if (_root.battleQueueRating <= 1899)
    {
        _root.mainGUI.battleQueue.rankIcon.gotoAndStop(9);
    }
    else if (_root.battleQueueRating <= 1999)
    {
        _root.mainGUI.battleQueue.rankIcon.gotoAndStop(10);
    }
    else
    {
        _root.mainGUI.battleQueue.rankIcon.gotoAndStop(11);
    } // end else if
} // End of the function
function loadNearestPokecenter()
{
    if (_root.nearestPokecenter == "Accumula Pokecenter" || _root.nearestPokecenter == "Nacrene Pokecenter" || _root.nearestPokecenter == "Castelia Pokecenter" || _root.nearestPokecenter == "Nimbasa Pokecenter" || _root.nearestPokecenter == "Driftveil Pokecenter" || _root.nearestPokecenter == "Mistralton Pokecenter" || _root.nearestPokecenter == "Opelucid Pokecenter" || _root.nearestPokecenter == "Lacunosa Pokecenter" || _root.nearestPokecenter == "Undella Pokecenter" || _root.nearestPokecenter == "Lentimas Pokecenter" || _root.nearestPokecenter == "Black City Pokecenter" || _root.nearestPokecenter == "Unova Victory Road Pokecenter")
    {
        loadMap(true, _root.nearestPokecenter, 10, 17);
    }
    else if (_root.nearestPokecenter == "Indigo Plateau")
    {
        loadMap(true, _root.nearestPokecenter, 8, 20);
    }
    else if (_root.nearestPokecenter == "Hoenn Pokemon League Lobby")
    {
        loadMap(true, _root.nearestPokecenter, 15, 15);
    }
    else
    {
        loadMap(true, _root.nearestPokecenter, 19, 14);
    } // end else if
} // End of the function
function setBattleQueueHighscores()
{
    for (var _loc2 = 1; _loc2 <= 20; ++_loc2)
    {
        _root.mainGUI.battleQueueHighscores["rank" + _loc2 + "T"].htmlText = "";
        _root.mainGUI.battleQueueHighscores["username" + _loc2 + "T"].htmlText = "";
        _root.mainGUI.battleQueueHighscores["rating" + _loc2 + "T"].htmlText = "";
        _root.mainGUI.battleQueueHighscores["wins" + _loc2 + "T"].htmlText = "";
        _root.mainGUI.battleQueueHighscores["losses" + _loc2 + "T"].htmlText = "";
    } // end of for
    for (var _loc2 = 1; _loc2 <= _root.battleQueueHighscores.length; ++_loc2)
    {
        _root.mainGUI.battleQueueHighscores["rank" + _loc2 + "T"].htmlText = "<b>" + (_loc2 + (_root.battleQueueHighscoresPage - 1) * 20);
        _root.mainGUI.battleQueueHighscores["username" + _loc2 + "T"].htmlText = "<b>" + _root.battleQueueHighscores[_loc2 - 1][0];
        _root.mainGUI.battleQueueHighscores["rating" + _loc2 + "T"].htmlText = "<b>" + format(_root.battleQueueHighscores[_loc2 - 1][1]);
        _root.mainGUI.battleQueueHighscores["wins" + _loc2 + "T"].htmlText = "<b>" + format(_root.battleQueueHighscores[_loc2 - 1][2]);
        _root.mainGUI.battleQueueHighscores["losses" + _loc2 + "T"].htmlText = "<b>" + format(_root.battleQueueHighscores[_loc2 - 1][3]);
    } // end of for
    _root.mainGUI.battleQueueHighscores.pageT.htmlText = "<b>Page " + _root.battleQueueHighscoresPage + "/10";
} // End of the function
function handleReleasePokemonStorage(resObj)
{
    _root.mainGUI.pokemonSummary._visible = false;
    removeMovieClip (_root.confirmBox);
    removeMovieClip (_root.darkScreen);
    _root.canReleasePokemon = true;
    if (Number(resObj[2]) != 1)
    {
        systemMessage("Bye bye " + _root["storagePokemon" + Number(resObj[2])][Number(resObj[3]) - 1].name + "!");
        _root["storagePokemon" + Number(resObj[2])].splice(Number(resObj[3]) - 1, 1);
    }
    else
    {
        systemMessage("Bye bye " + _root.storagePokemon[Number(resObj[3]) - 1].name + "!");
        _root.storagePokemon.splice(Number(resObj[3]) - 1, 1);
    } // end else if
    if (storage.currentTab == Number(resObj[2]))
    {
        loadStorageIcons(storage.currentTab);
    } // end if
} // End of the function
function handleMessageFromServer(resObj)
{
    mainGUI.globalChatT.htmlText = mainGUI.globalChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\'>" + resObj[2] + "</font>");
    mainGUI.localChatT.htmlText = mainGUI.localChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\'>" + resObj[2] + "</font>");
    mainGUI.tradeChatT.htmlText = mainGUI.tradeChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\'>" + resObj[2] + "</font>");
    mainGUI.nonEnglishChatT.htmlText = mainGUI.nonEnglishChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\'>" + resObj[2] + "</font>");
    mainGUI.clanChatT.htmlText = mainGUI.clanChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\'>" + resObj[2] + "</font>");
    if (customChat != "")
    {
        mainGUI.customChatT.htmlText = mainGUI.customChatT.htmlText + ("<font size=\'" + _root.chatFontSize + "\'>" + resObj[2] + "</font>");
    } // end if
    if (checkAutoScroll() == true)
    {
        mainGUI.globalChatT.scroll = mainGUI.globalChatT.maxscroll;
        mainGUI.localChatT.scroll = mainGUI.localChatT.maxscroll;
        mainGUI.tradeChatT.scroll = mainGUI.tradeChatT.maxscroll;
        mainGUI.battleChatT.scroll = mainGUI.battleChatT.maxscroll;
        mainGUI.nonEnglishChatT.scroll = mainGUI.nonEnglishChatT.maxscroll;
        mainGUI.clanChatT.scroll = mainGUI.clanChatT.maxscroll;
        mainGUI.customChatT.scroll = mainGUI.customChatT.maxscroll;
    } // end if
    ++globalChatLength;
    ++localChatLength;
    ++tradeChatLength;
    ++clanChatLength;
    ++nonEnglishChatLength;
    if (customChat != "")
    {
        ++customChatLength;
    } // end if
    deleteText();
} // End of the function
function handleMiningRockDepleted(resObj)
{
    resObj[2] = Number(resObj[2]);
    resObj[3] = Number(resObj[3]);
    for (var _loc2 = 0; _loc2 < _root.miningRocks.length; ++_loc2)
    {
        if (_root.miningRocks[_loc2][0] == resObj[2] && _root.miningRocks[_loc2][1] == resObj[3])
        {
            _root.miningRocks[_loc2][3] = "0";
            _root.mapLayer1["miningRock_" + resObj[2] + "_" + resObj[3]].gotoAndStop("blank");
            break;
        } // end if
    } // end of for
} // End of the function
function handleMiningRockRestored(resObj)
{
    resObj[2] = Number(resObj[2]);
    resObj[3] = Number(resObj[3]);
    for (var _loc2 = 0; _loc2 < _root.miningRocks.length; ++_loc2)
    {
        if (_root.miningRocks[_loc2][0] == resObj[2] && _root.miningRocks[_loc2][1] == resObj[3])
        {
            _root.miningRocks[_loc2][3] = "1";
            if (resObj[4] == "1")
            {
                _root.mapLayer1["miningRock_" + resObj[2] + "_" + resObj[3]].gotoAndStop("gold");
            }
            else
            {
                _root.mapLayer1["miningRock_" + resObj[2] + "_" + resObj[3]].gotoAndStop(_root.miningRocks[_loc2][2]);
            } // end else if
            break;
        } // end if
    } // end of for
} // End of the function
function handleSinnohSafariTimeOver(resObj)
{
    if (resObj[2] != undefined)
    {
        loadMap(true, resObj[2], Number(resObj[4]), Number(resObj[5]));
    }
    else
    {
        if (_root.map == "Sinnoh Safari Zone Entrance")
        {
            _root.npcArray[0] = [4, 7, "right", "", "sinnohSafariZoneTicket", "Ticket Seller", ["You don’t have a Sinnoh Safari Zone ticket. You can purchase one here."], 0];
            _root.customTiles.push([5, 2, "You need a Sinnoh Safari Ticket."]);
            _root.mapExits.splice(1, 1);
        } // end if
        _root.canMove = true;
    } // end else if
    _root.sinnohSafariTime2 = 0;
    _root.sinnohSafariTimeUp = false;
} // End of the function
function handlePurchaseSinnohSafariZoneTicket(resObj)
{
    removeMovieClip (_root.merchantBox);
    removeMovieClip (_root.darkScreen);
    _root.guiUp = false;
    _root.money = Number(resObj[4]);
    _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(_root.money) + "</b>";
    _root.sinnohSafariTime = Number(resObj[2]);
    clearInterval(_root.sinnohSafariTimeOverI);
    _root.sinnohSafariTime2 = Number(resObj[3]);
    _root.sinnohSafariTimeOverI = setInterval(sinnohSafariTimeOver, _root.sinnohSafariTime2 * 1000);
    _root.mapExits.push([5, 2, "Sinnoh Safari Zone Area 1", 23, 24]);
    _root.npcArray[0] = [4, 7, "right", "", "sinnohSafariZoneTicket", "Ticket Seller", ["Your Sinnoh Safari Zone ticket expires in " + Math.floor(_root.sinnohSafariTime2 / 3600) + " hours. You can purchase another ticket and extend the time."], 0];
    _root.customTiles = [];
    _root.guiUp = false;
    _root.canMove = true;
} // End of the function
function handleFinishMining(resObj)
{
    if (resObj[3] != undefined)
    {
        _root.miningLevel = Number(resObj[3]);
    } // end if
    _root.currentMiningExp = Number(resObj[2]);
    _root.mainGUI.trainerCard.trainerLevels.miningLevelT.htmlText = "<b>Lv " + miningLevel;
    _root.mainGUI.trainerCard.trainerLevels.expT2.htmlText = "<b>" + format(currentMiningExp) + " / " + format(miningLevel * miningLevel * miningLevel + 40);
    _root.mainGUI.trainerCard.trainerLevels.m2._x = -205.500000 + currentMiningExp / (miningLevel * miningLevel * miningLevel + 40) * 180;
    if (_root.mainGUI.trainerCard.trainerLevels.m2._x > 385.500000)
    {
        _root.mainGUI.trainerCard.trainerLevels.m2._x = 385.500000;
    } // end if
    stopMining("silent");
} // End of the function
function handleSoldGemstones(resObj)
{
    _root.money = Number(resObj[2]);
    _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(money);
    _root.shopBox.moneyT.htmlText = "<b>" + format(money);
    if (resObj[3] == "1")
    {
        removeItem("Red Gemstone", getInventoryAmount("Red Gemstone"));
        _root.mainGUI.allButtonBox.b1T.htmlText = "<b>Sell 0 Red Gemstones for $0";
    }
    else if (resObj[3] == "2")
    {
        removeItem("Blue Gemstone", getInventoryAmount("Blue Gemstone"));
        _root.mainGUI.allButtonBox.b2T.htmlText = "<b>Sell 0 Blue Gemstones for $0";
    }
    else if (resObj[3] == "3")
    {
        removeItem("Green Gemstone", getInventoryAmount("Green Gemstone"));
        _root.mainGUI.allButtonBox.b3T.htmlText = "<b>Sell 0 Green Gemstones for $0";
    }
    else if (resObj[3] == "4")
    {
        removeItem("Prism Gemstone", getInventoryAmount("Prism Gemstone"));
        _root.mainGUI.allButtonBox.b4T.htmlText = "<b>Sell 0 Prism Gemstones for $0";
    }
    else if (resObj[3] == "5")
    {
        removeItem("Pale Gemstone", getInventoryAmount("Pale Gemstone"));
        _root.mainGUI.allButtonBox.b5T.htmlText = "<b>Sell 0 Pale Gemstones for $0";
    }
    else if (resObj[3] == "6")
    {
        removeItem("Dark Gemstone", getInventoryAmount("Dark Gemstone"));
        _root.mainGUI.allButtonBox.b6T.htmlText = "<b>Sell 0 Dark Gemstones for $0";
    }
    else if (resObj[3] == "7")
    {
        removeItem("Rainbow Gemstone", getInventoryAmount("Rainbow Gemstone"));
        _root.mainGUI.allButtonBox.b7T.htmlText = "<b>Sell 0 Rainbow Gemstones for $0";
    }
    else if (resObj[3] == "8")
    {
        removeItem("Gold Gemstone", getInventoryAmount("Gold Gemstone"));
        _root.mainGUI.allButtonBox.b8T.htmlText = "<b>Sell 0 Gold Gemstones for $0";
    } // end else if
    remakeInventory();
} // End of the function
function handleAuctionWinPokemon(resObj)
{
    for (var _loc2 in searchMarketplaceListings)
    {
        if (searchMarketplaceListings[_loc2][9] == Number(resObj[2]))
        {
            searchMarketplaceListings[_loc2][4] = Number(resObj[3]);
        } // end if
    } // end of for...in
    makeMarketplaceAuctionListings();
    okBox = mainGUI.attachMovie("okBox", "okBox", mainGUI.getNextHighestDepth());
    assignMouseEvents(okBox.confirmB);
    assignMouseEvents(okBox.exitB);
    okBox.msgT.htmlText = "<b>The current bid on the item you were trying to bid has changed.";
    okBox.exitB.onRelease = function ()
    {
        removeMovieClip (mainGUI.darkScreen);
        removeMovieClip (okBox);
    };
    okBox.confirmB.onRelease = function ()
    {
        removeMovieClip (mainGUI.darkScreen);
        removeMovieClip (okBox);
    };
} // End of the function
function handlePPBuy(resObj)
{
    resObj[2] = Number(resObj[2]);
    if (resObj[2] == 1)
    {
        addInventoryItem("Halo", 1);
        remakeInventory();
        _root.ppCurrent = _root.ppCurrent - 10000;
    }
    else if (resObj[2] == 2)
    {
        addInventoryItem("Angel Wings", 1);
        remakeInventory();
        _root.ppCurrent = _root.ppCurrent - 7500;
    }
    else if (resObj[2] == 3)
    {
        addInventoryItem("Choice Band", 1);
        remakeInventory();
        _root.ppCurrent = _root.ppCurrent - 6000;
    }
    else if (resObj[2] == 4)
    {
        addInventoryItem("Choice Scarf", 1);
        remakeInventory();
        _root.ppCurrent = _root.ppCurrent - 6000;
    }
    else if (resObj[2] == 5)
    {
        addInventoryItem("Choice Specs", 1);
        remakeInventory();
        _root.ppCurrent = _root.ppCurrent - 6000;
    }
    else if (resObj[2] == 6)
    {
        addInventoryItem("Ancient Key (Tooth Half)", 1);
        remakeInventory();
        _root.ppCurrent = _root.ppCurrent - 15000;
    }
    else if (resObj[2] == 7)
    {
        addInventoryItem("Amie Stone", 1);
        remakeInventory();
        _root.ppCurrent = _root.ppCurrent - 30000;
    }
    else if (resObj[2] == 8)
    {
        addInventoryItem("Crown", 1);
        remakeInventory();
        _root.ppCurrent = _root.ppCurrent - 100000;
    }
    else if (resObj[2] == 9)
    {
        _root.userPokemon = parseMultiPokemon(resObj[3]);
        loadPokemonIcons(false);
        _root.ppCurrent = _root.ppCurrent - 200000;
    }
    else if (resObj[2] == 10)
    {
        addInventoryItem("Gold Cape", 1);
        remakeInventory();
        _root.ppCurrent = _root.ppCurrent - 100000;
    }
    else if (resObj[2] == 11)
    {
        addInventoryItem("Money Glasses", 1);
        remakeInventory();
        _root.ppCurrent = _root.ppCurrent - 100000;
    } // end else if
} // End of the function
function handleUpdateSafariTime(resObj)
{
    removeMovieClip (_root.merchantBox);
    removeMovieClip (_root.darkScreen);
    _root.guiUp = false;
    if (resObj.money != undefined)
    {
        _root.money = Number(resObj.money);
        _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(_root.money) + "</b>";
    } // end if
    if (resObj.safariTime != undefined)
    {
        _root.safariTime = Number(resObj.safariTime);
        clearInterval(safariTimeOverI);
        _root.safariTime2 = Number(resObj.safariTime2);
        _root.safariTimeOverI = setInterval(safariTimeOver, safariTime2 * 1000);
    } // end if
    _root.npcArray[0] = [15, 12, "right", "", "safariZoneTicket", "", ["Your Safari Zone ticket expires in " + Math.floor(_root.safariTime2 / 3600) + " hours. You can purchase another ticket and extend the time."], 0];
    _root.mapExits.push([17, 6, "Safari Zone", 69, 2]);
    _root.customTiles = [];
    _root.guiUp = false;
    _root.canMove = true;
} // End of the function
function handleSwarmStarted(resObj)
{
    mainGUI.swarmT.htmlText = "<b>" + resObj[2] + " Swarm Active (" + resObj[3] + ", " + resObj[4] + ", " + resObj[5] + ")";
    mainGUI.swarmT._visible = true;
    _root.swarmMap = resObj[2];
} // End of the function
function handleGoldRushStarted(resObj)
{
    mainGUI.goldRushT.htmlText = "<b>" + resObj[2] + " Gold Rush Active (" + resObj[3] + ")";
    mainGUI.goldRushT._visible = true;
} // End of the function
function handleWorldBossStarted(resObj)
{
    mainGUI.worldBossT.htmlText = "<b>" + resObj[4] + " World Boss Active (" + resObj[2] + ", " + resObj[3] + ")";
    mainGUI.worldBossT._visible = true;
    _root.worldBossMap = resObj[2];
} // End of the function
function handleSwarmEnded(resObj)
{
    mainGUI.swarmT.htmlText = "";
    mainGUI.swarmT._visible = false;
    _root.swarmMap = undefined;
} // End of the function
function handleGoldRushEnded(resObj)
{
    mainGUI.goldRushT.htmlText = "";
    mainGUI.goldRushT._visible = false;
} // End of the function
function finishLoadingClanRoster(resObj)
{
    var _loc4 = parseArray(resObj[2]);
    for (var _loc3 = 0; _loc3 < clanRoster.length; ++_loc3)
    {
        tempItem = mainGUI.clanGUI.clanBg.rosterList.attachMovie("rosterItem", "rosterItem" + _loc3, mainGUI.clanGUI.clanBg.rosterList.getNextHighestDepth());
        tempItem._x = -13;
        tempItem._y = -64 + 34 * _loc3;
        if (_loc4[_loc3] == "1")
        {
            tempItem.gotoAndStop(1);
        }
        else
        {
            tempItem.gotoAndStop(2);
        } // end else if
        tempItem.nameT.htmlText = "<b>" + clanRoster[_loc3][0];
        tempItem.rankT.htmlText = "<b>" + clanRoster[_loc3][1];
        if ((_root.clanRank == "Leader" || _root.clanRank == "General") && clanRoster[_loc3][0] != _root.username)
        {
            tempItem.kickB._visible = true;
            if (clanRoster[_loc3][1] == "Leader" && _root.clanRank == "General")
            {
                tempItem.promoteB._visible = false;
            }
            else
            {
                tempItem.promoteB._visible = true;
            } // end else if
            tempItem.kickB.loopNum = _loc3;
            tempItem.promoteB.loopNum = _loc3;
            tempItem.kickB.memberName = clanRoster[_loc3][0];
            tempItem.promoteB.memberName = clanRoster[_loc3][0];
            tempItem.kickB.onRelease = function ()
            {
                this.gotoAndStop(1);
                if (darkScreen._x == undefined)
                {
                    darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                    darkScreen._width = Stage.width;
                    darkScreen._height = Stage.height;
                    darkScreen._alpha = 70;
                    darkScreen._x = newWidth / 2;
                    darkScreen._y = newHeight / 2;
                    disbandBox = _root.attachMovie("disbandBox", "disbandBox", _root.getNextHighestDepth());
                    disbandBox.nameT.htmlText = "<b>Kick Clan Member";
                    disbandBox.msgT.htmlText = "<b>Are you sure you wish to kick " + this.memberName + "?";
                    disbandBox._x = newWidth / 2;
                    disbandBox._y = newHeight / 2;
                    disbandBox.confirmB.loopNum = this.loopNum;
                    disbandBox.confirmB.memberName = this.memberName;
                    disbandBox.confirmB.onRelease = function ()
                    {
                        if (isBusy == false)
                        {
                            if (clanRoster[this.loopNum][1] != "Leader")
                            {
                                getTimestamp("kickClanMember", this.memberName);
                            } // end if
                        } // end if
                    };
                    disbandBox.cancelB.onRelease = function ()
                    {
                        removeMovieClip (disbandBox);
                        removeMovieClip (darkScreen);
                    };
                    disbandBox.exitB.onRelease = function ()
                    {
                        removeMovieClip (disbandBox);
                        removeMovieClip (darkScreen);
                    };
                    assignMouseEvents(disbandBox.confirmB);
                    assignMouseEvents(disbandBox.cancelB);
                    assignMouseEvents(disbandBox.exitB);
                } // end if
            };
            tempItem.promoteB.onRelease = function ()
            {
                this.gotoAndStop(1);
                if (darkScreen._x == undefined)
                {
                    darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                    darkScreen._width = Stage.width;
                    darkScreen._height = Stage.height;
                    darkScreen._alpha = 70;
                    darkScreen._x = newWidth / 2;
                    darkScreen._y = newHeight / 2;
                    _root.promoteName = this.memberName;
                    _root.promoteSlot = this.loopNum;
                    if (_root.clanRank == "Leader")
                    {
                        promoteBox = _root.attachMovie("leaderPromoteBox", "promoteBox", _root.getNextHighestDepth());
                        promoteBox._x = newWidth / 2;
                        promoteBox._y = newHeight / 2;
                        assignMouseEvents(promoteBox.recruitB);
                        assignMouseEvents(promoteBox.warriorB);
                        assignMouseEvents(promoteBox.generalB);
                        assignMouseEvents(promoteBox.leaderB);
                    }
                    else
                    {
                        promoteBox = _root.attachMovie("generalPromoteBox", "promoteBox", _root.getNextHighestDepth());
                        promoteBox._x = newWidth / 2;
                        promoteBox._y = newHeight / 2;
                        assignMouseEvents(promoteBox.recruitB);
                        assignMouseEvents(promoteBox.generalB);
                        assignMouseEvents(promoteBox.warriorB);
                    } // end else if
                    promoteBox.msgT.htmlText = "<b>Promote " + _root.promoteName + " to:";
                    promoteBox.recruitB.onRelease = function ()
                    {
                        if (isBusy == false)
                        {
                            if (clanRoster[_root.promoteSlot][1] != "Recruit")
                            {
                                removeMovieClip (promoteBox);
                                removeMovieClip (darkScreen);
                                getTimestamp("promoteMember", _root.promoteName, "Recruit");
                                systemMessage("Promoting " + _root.promoteName + "..");
                            }
                            else
                            {
                                systemMessage(_root.promoteName + " is already a Recruit.");
                            } // end if
                        } // end else if
                    };
                    promoteBox.warriorB.onRelease = function ()
                    {
                        if (isBusy == false)
                        {
                            if (clanRoster[_root.promoteSlot][1] != "Warrior")
                            {
                                removeMovieClip (promoteBox);
                                removeMovieClip (darkScreen);
                                getTimestamp("promoteMember", _root.promoteName, "Warrior");
                                systemMessage("Promoting " + _root.promoteName + "..");
                            }
                            else
                            {
                                systemMessage(_root.promoteName + " is already a Warrior.");
                            } // end if
                        } // end else if
                    };
                    promoteBox.generalB.onRelease = function ()
                    {
                        if (isBusy == false)
                        {
                            if (clanRoster[_root.promoteSlot][1] != "General")
                            {
                                removeMovieClip (promoteBox);
                                removeMovieClip (darkScreen);
                                getTimestamp("promoteMember", _root.promoteName, "General");
                                systemMessage("Promoting " + _root.promoteName);
                            }
                            else
                            {
                                systemMessage(_root.promoteName + " is already a General.");
                            } // end if
                        } // end else if
                    };
                    promoteBox.leaderB.onRelease = function ()
                    {
                        if (isBusy == false)
                        {
                            if (clanRoster[_root.promoteSlot][1] != "Leader")
                            {
                                removeMovieClip (promoteBox);
                                removeMovieClip (darkScreen);
                                getTimestamp("promoteMember", _root.promoteName, "Leader");
                                systemMessage("Promoting " + _root.promoteName);
                            }
                            else
                            {
                                systemMessage(_root.promoteName + " is already a Leader.");
                            } // end if
                        } // end else if
                    };
                    promoteBox.exitB.onRelease = function ()
                    {
                        removeMovieClip (promoteBox);
                        removeMovieClip (darkScreen);
                    };
                    assignMouseEvents(promoteBox.confirmB);
                    assignMouseEvents(promoteBox.exitB);
                } // end if
            };
            assignMouseEvents(tempItem.kickB);
            assignMouseEvents(tempItem.promoteB);
            continue;
        } // end if
        tempItem.kickB._visible = false;
        tempItem.promoteB._visible = false;
    } // end of for
} // End of the function
function membershipExpiration()
{
    clearInterval(_root.membershipExpirationI);
    getTimestamp("membershipExpiration");
} // End of the function
function handleMembershipExpiration(resObj)
{
    systemMessage("Your Gold Membership has expired.");
    _root.memberType = "free";
    _root.memberTime = 0;
} // End of the function
function handleDeoxysFormChange(resObj)
{
    userPokemon[0] = parsePokemon(resObj[2]);
    systemMessage("Your Deoxys touches the Meteorite..");
    loadPokemonIcons(false);
} // End of the function
function npcUndergroundMan()
{
    if (guiUp == false)
    {
        guiUp = true;
        canMove = false;
        yesNoBox = _root.attachMovie("yesNoBox", "yesNoBox", _root.getNextHighestDepth());
        yesNoBox._x = newWidth / 2;
        yesNoBox._y = newHeight / 2;
        yesNoBox.nameT.htmlText = "<b>Underground Man";
        if (_root.map.indexOf("Sinnoh Underground") != -1)
        {
            yesNoBox.msgT.text = "Return to the surface.";
        }
        else
        {
            yesNoBox.msgT.text = "If you\'ve achieved at least Lv 50 mining I can take you to the Sinnoh Underground.";
        } // end else if
        yesNoBox.yesT.htmlText = "<b>Sure, let\'s go.";
        yesNoBox.noT.htmlText = "<b>No thanks.";
        assignMouseEvents(yesNoBox.yesB);
        assignMouseEvents(yesNoBox.noB);
        yesNoBox.yesB.onRelease = function ()
        {
            if (_root.miningLevel >= 50)
            {
                removeMovieClip (yesNoBox);
                if (_root.map == "Sunnyshore City")
                {
                    globalAnimationObj.map = "Sinnoh Underground Bottom Right";
                    globalAnimationObj.x = 75;
                    globalAnimationObj.y = 21;
                }
                else if (_root.map == "Sinnoh Underground Bottom Right")
                {
                    globalAnimationObj.map = "Sunnyshore City";
                    globalAnimationObj.x = 62;
                    globalAnimationObj.y = 53;
                }
                else if (_root.map == "Oreburgh City")
                {
                    globalAnimationObj.map = "Sinnoh Underground Bottom Left";
                    globalAnimationObj.x = 40;
                    globalAnimationObj.y = 29;
                }
                else if (_root.map == "Sinnoh Underground Bottom Left")
                {
                    globalAnimationObj.map = "Oreburgh City";
                    globalAnimationObj.x = 42;
                    globalAnimationObj.y = 48;
                }
                else if (_root.map == "Celestic Town")
                {
                    globalAnimationObj.map = "Sinnoh Underground Middle Left";
                    globalAnimationObj.x = 68;
                    globalAnimationObj.y = 39;
                }
                else if (_root.map == "Sinnoh Underground Middle Left")
                {
                    globalAnimationObj.map = "Celestic Town";
                    globalAnimationObj.x = 20;
                    globalAnimationObj.y = 21;
                }
                else if (_root.map == "Fight Area")
                {
                    globalAnimationObj.map = "Sinnoh Underground Top Right";
                    globalAnimationObj.x = 27;
                    globalAnimationObj.y = 27;
                }
                else if (_root.map == "Sinnoh Underground Top Right")
                {
                    globalAnimationObj.map = "Fight Area";
                    globalAnimationObj.x = 54;
                    globalAnimationObj.y = 13;
                }
                else if (_root.map == "Full Moon Island")
                {
                    globalAnimationObj.map = "Sinnoh Underground Top Left";
                    globalAnimationObj.x = 53;
                    globalAnimationObj.y = 3;
                }
                else if (_root.map == "Sinnoh Underground Top Left")
                {
                    globalAnimationObj.map = "Full Moon Island";
                    globalAnimationObj.x = 20;
                    globalAnimationObj.y = 14;
                } // end else if
                globalAnimationObj.animation = "fadeScreenTeleport";
            }
            else
            {
                systemMessage("You need at least Lv 50 mining!");
            } // end else if
        };
        yesNoBox.noB.onRelease = function ()
        {
            removeMovieClip (yesNoBox);
            guiUp = false;
            canMove = true;
        };
    } // end if
} // End of the function
function setWildPokemonIcon()
{
    var _loc2 = mainGUI.battleBackground.enemyHp.wildPokemonT;
    if (_root.bt == "d")
    {
        _loc2 = mainGUI.battleBackground.enemyHp2.wildPokemonT;
        if (wildPokemon2.shiny == true)
        {
            mainGUI.battleBackground.wildPokemonIcon2.gotoAndStop(wildPokemon2.id + shinyDifference);
            if (wildPokemon2.form != "default" && wildPokemon2.form != undefined && wildPokemon2.form != "undefined")
            {
                if (wildPokemon2.elite == "true")
                {
                    mainGUI.battleBackground.enemyHp2.wildPokemonT2.htmlText = "<b>[S][E]" + wildPokemon2.name + " (" + upperCase(wildPokemon2.form) + ")";
                }
                else
                {
                    mainGUI.battleBackground.enemyHp2.wildPokemonT2.htmlText = "<b>[S]" + wildPokemon2.name + " (" + upperCase(wildPokemon2.form) + ")";
                } // end else if
                mainGUI.battleBackground.wildPokemonIcon2.i.gotoAndStop(wildPokemon2.form);
            }
            else
            {
                if (wildPokemon2.elite == "true")
                {
                    mainGUI.battleBackground.enemyHp2.wildPokemonT2.htmlText = "<b>[S][E]" + wildPokemon2.name;
                }
                else
                {
                    mainGUI.battleBackground.enemyHp2.wildPokemonT2.htmlText = "<b>[S]" + wildPokemon2.name;
                } // end else if
                mainGUI.battleBackground.wildPokemonIcon2.i.gotoAndStop(1);
            } // end else if
        }
        else
        {
            mainGUI.battleBackground.wildPokemonIcon2.gotoAndStop(wildPokemon2.id);
            if (wildPokemon2.form != "default" && wildPokemon2.form != undefined && wildPokemon2.form != "undefined")
            {
                if (wildPokemon2.elite == "true")
                {
                    mainGUI.battleBackground.enemyHp2.wildPokemonT2.htmlText = "<b>[E]" + wildPokemon2.name + " (" + upperCase(wildPokemon2.form) + ")";
                }
                else
                {
                    mainGUI.battleBackground.enemyHp2.wildPokemonT2.htmlText = "<b>" + wildPokemon2.name + " (" + upperCase(wildPokemon2.form) + ")";
                } // end else if
                mainGUI.battleBackground.wildPokemonIcon2.i.gotoAndStop(wildPokemon2.form);
            }
            else
            {
                if (wildPokemon2.elite == "true")
                {
                    mainGUI.battleBackground.enemyHp2.wildPokemonT2.htmlText = "<b>[E]" + wildPokemon2.name;
                }
                else
                {
                    mainGUI.battleBackground.enemyHp2.wildPokemonT2.htmlText = "<b>" + wildPokemon2.name;
                } // end else if
                mainGUI.battleBackground.wildPokemonIcon2.i.gotoAndStop(1);
            } // end if
        } // end else if
    } // end else if
    if (wildPokemon.shiny == true)
    {
        mainGUI.battleBackground.wildPokemonIcon.gotoAndStop(wildPokemon.id + shinyDifference);
        if (wildPokemon.form != "default" && wildPokemon.form != undefined && wildPokemon.form != "undefined")
        {
            if (wildPokemon.elite == "true")
            {
                _loc2.htmlText = "<b>[S][E]" + wildPokemon.name + " (" + upperCase(wildPokemon.form) + ")";
            }
            else
            {
                _loc2.htmlText = "<b>[S]" + wildPokemon.name + " (" + upperCase(wildPokemon.form) + ")";
            } // end else if
            mainGUI.battleBackground.wildPokemonIcon.i.gotoAndStop(wildPokemon.form);
        }
        else
        {
            if (wildPokemon.elite == "true")
            {
                _loc2.htmlText = "<b>[S][E]" + wildPokemon.name;
            }
            else
            {
                _loc2.htmlText = "<b>[S]" + wildPokemon.name;
            } // end else if
            mainGUI.battleBackground.wildPokemonIcon.i.gotoAndStop(1);
        } // end else if
    }
    else
    {
        mainGUI.battleBackground.wildPokemonIcon.gotoAndStop(wildPokemon.id);
        if (wildPokemon.form != "default" && wildPokemon.form != undefined && wildPokemon.form != "undefined")
        {
            if (wildPokemon.elite == "true")
            {
                _loc2.htmlText = "<b>[E]" + wildPokemon.name + " (" + upperCase(wildPokemon.form) + ")";
            }
            else
            {
                _loc2.htmlText = "<b>" + wildPokemon.name + " (" + upperCase(wildPokemon.form) + ")";
            } // end else if
            mainGUI.battleBackground.wildPokemonIcon.i.gotoAndStop(wildPokemon.form);
        }
        else
        {
            if (wildPokemon.elite == "true")
            {
                _loc2.htmlText = "<b>[E]" + wildPokemon.name;
            }
            else
            {
                _loc2.htmlText = "<b>" + wildPokemon.name;
            } // end else if
            mainGUI.battleBackground.wildPokemonIcon.i.gotoAndStop(1);
        } // end else if
    } // end else if
    _root.mainGUI.battleBackground.h.msgT.htmlText = _loc2.htmlText;
    _root.mainGUI.battleBackground.h.t1.gotoAndStop(wildPokemon.type);
    if (wildPokemon.type2 != 0)
    {
        _root.mainGUI.battleBackground.h.t2.gotoAndStop(wildPokemon.type2);
        _root.mainGUI.battleBackground.h.t2._visible = true;
    }
    else
    {
        _root.mainGUI.battleBackground.h.t2._visible = false;
    } // end else if
    _root.mainGUI.battleBackground.h.t1._x = Math.round(_root.mainGUI.battleBackground.h.msgT.textWidth + _root.mainGUI.battleBackground.h.t1._width / 2 + 10);
    _root.mainGUI.battleBackground.h.t2._x = _root.mainGUI.battleBackground.h.t1._x + 42;
    if (_root.mainGUI.battleBackground.h.t2._visible == false)
    {
        _root.mainGUI.battleBackground.h.bg._width = _root.mainGUI.battleBackground.h.t1._x + 24;
    }
    else
    {
        _root.mainGUI.battleBackground.h.bg._width = _root.mainGUI.battleBackground.h.t2._x + 24;
    } // end else if
    _root.mainGUI.battleBackground.wildPokemonIcon.onRollOver = function ()
    {
        var _loc2 = {x: _xmouse, y: _ymouse};
        _root.mainGUI.battleBackground.globalToLocal(_loc2);
        _root.mainGUI.battleBackground.h._x = Math.round(_loc2.x) + 10;
        _root.mainGUI.battleBackground.h._y = Math.round(_loc2.y) - 5;
        _root.mainGUI.battleBackground.h.startDrag();
        _root.mainGUI.battleBackground.h._visible = true;
    };
    _root.mainGUI.battleBackground.wildPokemonIcon.onRollOut = function ()
    {
        _root.mainGUI.battleBackground.h.stopDrag();
        _root.mainGUI.battleBackground.h._visible = false;
    };
    _root.mainGUI.battleBackground.wildPokemonIcon.onReleaseOutside = function ()
    {
        _root.mainGUI.battleBackground.h.stopDrag();
        _root.mainGUI.battleBackground.h._visible = false;
    };
    fixMoveEText();
} // End of the function
function handleSendTailGoto(resObj)
{
    var _loc5 = resObj[2].split("%");
    _root["player_" + resObj[3]].tail = _loc5[0];
    if (tempHat[1] != undefined)
    {
        var _loc4 = _loc5[1].split("-");
        var _loc2 = [];
        _loc2 = _loc2.concat([_loc4[0] / 100, 0, 0, 0, 0]);
        _loc2 = _loc2.concat([0, _loc4[1] / 100, 0, 0, 0]);
        _loc2 = _loc2.concat([0, 0, _loc4[2] / 100, 0, 0]);
        _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
        _root["player_" + resObj[3]].tailFilter = new flash.filters.ColorMatrixFilter(_loc2);
    }
    else
    {
        _root["player_" + resObj[3]].tailFilter = undefined;
    } // end else if
    drawPlayer(_root["player_" + resObj[3]], _root["player_" + resObj[3]].frameX, _root["player_" + resObj[3]].frameY);
} // End of the function
function handleSendWingGoto(resObj)
{
    var _loc4 = resObj[2].split("%");
    _root["player_" + resObj[3]].wings = _loc4[0];
    if (_loc4[1] != undefined)
    {
        var _loc5 = _loc4[1].split("-");
        var _loc2 = [];
        _loc2 = _loc2.concat([_loc5[0] / 100, 0, 0, 0, 0]);
        _loc2 = _loc2.concat([0, _loc5[1] / 100, 0, 0, 0]);
        _loc2 = _loc2.concat([0, 0, _loc5[2] / 100, 0, 0]);
        _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
        _root["player_" + resObj[3]].wingsFilter = new flash.filters.ColorMatrixFilter(_loc2);
    }
    else
    {
        _root["player_" + resObj[3]].wingsFilter = undefined;
    } // end else if
    drawPlayer(_root["player_" + resObj[3]], _root["player_" + resObj[3]].frameX, _root["player_" + resObj[3]].frameY);
} // End of the function
function handleSendNeckGoto(resObj)
{
    var _loc4 = resObj[2].split("%");
    _root["player_" + resObj[3]].neck = _loc4[0];
    if (_loc4[1] != undefined)
    {
        var _loc5 = _loc4[1].split("-");
        var _loc2 = [];
        _loc2 = _loc2.concat([_loc5[0] / 100, 0, 0, 0, 0]);
        _loc2 = _loc2.concat([0, _loc5[1] / 100, 0, 0, 0]);
        _loc2 = _loc2.concat([0, 0, _loc5[2] / 100, 0, 0]);
        _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
        _root["player_" + resObj[3]].neckFilter = new flash.filters.ColorMatrixFilter(_loc2);
    }
    else
    {
        _root["player_" + resObj[3]].neckFilter = undefined;
    } // end else if
    drawPlayer(_root["player_" + resObj[3]], _root["player_" + resObj[3]].frameX, _root["player_" + resObj[3]].frameY);
} // End of the function
function handleSendCostumeGoto(resObj)
{
    var _loc4 = resObj[2].split("%");
    _root["player_" + resObj[3]].costume = _loc4[0];
    if (_loc4[1] != undefined)
    {
        var _loc5 = _loc4[1].split("-");
        var _loc2 = [];
        _loc2 = _loc2.concat([_loc5[0] / 100, 0, 0, 0, 0]);
        _loc2 = _loc2.concat([0, _loc5[1] / 100, 0, 0, 0]);
        _loc2 = _loc2.concat([0, 0, _loc5[2] / 100, 0, 0]);
        _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
        _root["player_" + resObj[3]].costumeFilter = new flash.filters.ColorMatrixFilter(_loc2);
    }
    else
    {
        _root["player_" + resObj[3]].costumeFilter = undefined;
    } // end else if
    drawPlayer(_root["player_" + resObj[3]], _root["player_" + resObj[3]].frameX, _root["player_" + resObj[3]].frameY);
} // End of the function
function handleSendShirtGoto(resObj)
{
    var _loc4 = resObj[2].split("%");
    _root["player_" + resObj[3]].shirt = _loc4[0];
    if (_loc4[1] != undefined)
    {
        var _loc5 = _loc4[1].split("-");
        var _loc2 = [];
        _loc2 = _loc2.concat([_loc5[0] / 100, 0, 0, 0, 0]);
        _loc2 = _loc2.concat([0, _loc5[1] / 100, 0, 0, 0]);
        _loc2 = _loc2.concat([0, 0, _loc5[2] / 100, 0, 0]);
        _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
        _root["player_" + resObj[3]].shirtFilter = new flash.filters.ColorMatrixFilter(_loc2);
    }
    else
    {
        _root["player_" + resObj[3]].shirtFilter = undefined;
    } // end else if
    drawPlayer(_root["player_" + resObj[3]], _root["player_" + resObj[3]].frameX, _root["player_" + resObj[3]].frameY);
} // End of the function
function handleSendPantsGoto(resObj)
{
    var _loc4 = resObj[2].split("%");
    _root["player_" + resObj[3]].pants = _loc4[0];
    if (_loc4[1] != undefined)
    {
        var _loc5 = _loc4[1].split("-");
        var _loc2 = [];
        _loc2 = _loc2.concat([_loc5[0] / 100, 0, 0, 0, 0]);
        _loc2 = _loc2.concat([0, _loc5[1] / 100, 0, 0, 0]);
        _loc2 = _loc2.concat([0, 0, _loc5[2] / 100, 0, 0]);
        _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
        _root["player_" + resObj[3]].pantsFilter = new flash.filters.ColorMatrixFilter(_loc2);
    }
    else
    {
        _root["player_" + resObj[3]].pantsFilter = undefined;
    } // end else if
    drawPlayer(_root["player_" + resObj[3]], _root["player_" + resObj[3]].frameX, _root["player_" + resObj[3]].frameY);
} // End of the function
function handleUpdateMount(resObj)
{
    if (resObj[3] != "0")
    {
        _root["player_" + resObj[2]].mount = resObj[3];
    }
    else
    {
        delete _root["player_" + resObj[2]].mount;
    } // end else if
} // End of the function
function handleListItemSell(resObj)
{
    _root.marketplaceListings.push([resObj[2], Number(resObj[3]), Number(resObj[4]), resObj[5], Number(resObj[6]), Number(resObj[7])]);
    _root.marketplace.sell.listingDetails.gotoAndStop(1);
    _root.marketplace.sell.i.gotoAndStop("none");
    _root.marketplace.sell.i2._visible = false;
    _root.marketplace.sell.nameT.htmlText = "<b>Drag item here to sell";
    _root.itemForSale = -1;
    _root.itemForSaleAmount = -1;
    if (resObj[8] == "inventory")
    {
        removeItem(resObj[2], resObj[3]);
        remakeInventory();
        _root.money = Number(resObj[9]);
        _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(_root.money) + "</b>";
        _root.marketplace.auction.moneyT.htmlText = "<b>" + format(_root.money);
        _root.marketplace.buy.moneyT.htmlText = "<b>" + format(_root.money);
        _root.marketplace.sell.moneyT.htmlText = "<b>" + format(_root.money);
    }
    else
    {
        _root.userPokemon.splice(resObj[9], 1);
        loadPokemonIcons();
        _root.money = Number(resObj[10]);
        _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(_root.money) + "</b>";
        _root.marketplace.auction.moneyT.htmlText = "<b>" + format(_root.money);
        _root.marketplace.buy.moneyT.htmlText = "<b>" + format(_root.money);
        _root.marketplace.sell.moneyT.htmlText = "<b>" + format(_root.money);
    } // end else if
    makeMarketplaceListings();
    removeMovieClip (_root.mainGUI.darkScreen);
} // End of the function
function handleb178(resObj)
{
    getTimestamp("b178", resObj[2]);
} // End of the function
function handleUpdateMoney(resObj)
{
    _root.money = Number(resObj[2]);
    _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(_root.money) + "</b>";
} // End of the function
function handleBattleQueuePrize(resObj)
{
    systemMessage("<b>Your Battle Queue prize has been added to your account.<b>");
    credits = credits + Number(resObj[3]);
    mainGUI.creditsT.htmlText = "<b>" + format(credits) + "c</b>";
    mainGUI.creditShop.creditsT.htmlText = "<b>" + format(credits) + "c";
    addToItemBox("PvP Token", Number(resObj[2]));
} // End of the function
function handlePVPBattle(resObj)
{
    _root.mainGUI.battleQueue._visible = false;
    _root.battleText = resObj.battleText;
    _root.canMove = false;
    _root.canSwitchPokemon = true;
    _root.mainGUI.battleBackground.pokemonB.gotoAndStop(1);
    _root.continueButton = false;
    _root.userPokemon = resObj.userPokemon;
    _root.bt = resObj.bt;
    if (_root.bt == "d")
    {
        _root.wildPokemon = resObj.wildPokemon[0];
        _root.wildPokemon2 = resObj.wildPokemon[1];
        _root.activePokemon = Number(resObj.ap[0]);
        _root.activePokemon2 = Number(resObj.ap[1]);
        userPokemon[activePokemon].battleMoves = resObj.bm[0];
        userPokemon[activePokemon2].battleMoves = resObj.bm[1];
        _root.ppC = resObj.pp[0];
        _root.ppM = [_root.ppC[0], _root.ppC[1], _root.ppC[2], _root.ppC[3]];
        _root.ppC2 = resObj.pp[1];
        _root.ppM2 = [_root.ppC2[0], _root.ppC2[1], _root.ppC2[2], _root.ppC2[3]];
        fixPPText();
        _root.wildPokemon2.startingHp = _root.wildPokemon2.currentHp;
        _root.userStartingHp2 = _root.userPokemon[activePokemon2].currentHp;
    }
    else
    {
        _root.wildPokemon = resObj.wildPokemon;
        _root.activePokemon = Number(resObj.ap);
        userPokemon[activePokemon].battleMoves = resObj.bm;
        _root.ppC = resObj.pp;
        _root.ppM = [_root.ppC[0], _root.ppC[1], _root.ppC[2], _root.ppC[3]];
        fixPPText();
    } // end else if
    _root.wildPokemon.startingHp = _root.wildPokemon.currentHp;
    _root.userStartingHp = _root.userPokemon[activePokemon].currentHp;
    _root.battleType = "pvp";
    _root.trainerName = resObj.trainerName;
    _root.mainGUI.battleQueue.cancelSearchB._visible = false;
    if (String(_root.wildPokemon.ability) == "23" && (_root.userPokemon[activePokemon].type != 8 && _root.userPokemon[activePokemon].type2 != 8 && String(userPokemon[activePokemon].ability) != "23"))
    {
        if (_root.userPokemon[activePokemon].currentHp > 0 && _root.userPokemon[activePokemon].heldItem != "Shed Shell")
        {
            _root.canSwitchPokemon = false;
            _root.mainGUI.battleBackground.pokemonB.gotoAndStop("dark");
        } // end if
    } // end if
    if (String(_root.wildPokemon.ability) == "42" && (_root.userPokemon[activePokemon].type == 9 || _root.userPokemon[activePokemon].type2 == 9) && (_root.userPokemon[activePokemon].type != 8 && _root.userPokemon[activePokemon].type2 != 8))
    {
        if (_root.userPokemon[activePokemon].currentHp > 0 && _root.userPokemon[activePokemon].heldItem != "Shed Shell")
        {
            _root.canSwitchPokemon = false;
            _root.mainGUI.battleBackground.pokemonB.gotoAndStop("dark");
        } // end if
    } // end if
    if (resObj.sl != undefined)
    {
        _root.setLevel = resObj.sl;
    }
    else
    {
        _root.setLevel = 0;
    } // end else if
    if (resObj.m != undefined)
    {
        _root.money = Number(resObj.m);
        _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(money);
    } // end if
    delete _root.opponentPokemonArray;
    _root.opponentPokemonArray = parseMultiArray(resObj.tp);
    _root.statBoosts = parseMultiArray(resObj.si);
    for (var _loc2 = 0; _loc2 < _root.statBoosts[0].length; ++_loc2)
    {
        _root.statBoosts[0][_loc2] = Number(_root.statBoosts[0][_loc2]);
    } // end of for
    for (var _loc2 = 0; _loc2 < _root.statBoosts[1].length; ++_loc2)
    {
        _root.statBoosts[1][_loc2] = Number(_root.statBoosts[1][_loc2]);
    } // end of for
    _root.battleWeather = statBoosts[2][0];
    _root.battleTurns = 0;
    _root.opponentAliveArray = statBoosts[4];
    _root.battle = true;
    fadeScreen();
    _root.battleReady = true;
} // End of the function
function handleLearnMove(resObj)
{
    _root.canMove = false;
    _root.userPokemon = resObj.userPokemon;
    _root.learnMoves = true;
    _root.guiUp = true;
    _root.attachMovie("learnMoveScreen", "learnMoveScreen", _root.getNextHighestDepth());
    _root.learnMoveScreen.movesHighlight._visible = false;
    _root.learnMoveScreen._x = newWidth / 2;
    _root.learnMoveScreen._y = newHeight / 2;
    if (resObj.fromBattle == true)
    {
        _root.learnMoveScreen._visible = false;
    }
    else
    {
        _root.learnMoveScreen._visible = true;
    } // end else if
    _root.learnMoveScreen.nameT.htmlText = "<b>" + _root.userPokemon[Number(resObj.slot)].name + " is trying to learn " + resObj.moveName;
    _root.learnMoveScreen.move1T.htmlText = "<b>" + moveIdToName(_root.userPokemon[Number(resObj.slot)].moves[0]);
    _root.learnMoveScreen.move2T.htmlText = "<b>" + moveIdToName(_root.userPokemon[Number(resObj.slot)].moves[1]);
    _root.learnMoveScreen.move3T.htmlText = "<b>" + moveIdToName(_root.userPokemon[Number(resObj.slot)].moves[2]);
    _root.learnMoveScreen.move4T.htmlText = "<b>" + moveIdToName(_root.userPokemon[Number(resObj.slot)].moves[3]);
    _root.learningMoveNum = resObj.n;
    setPokemonSummaryMoveRollovers(_root.userPokemon[Number(resObj.slot)], _root.learnMoveScreen);
} // End of the function
function parseInventory(inv)
{
    _root.inventory = parseMultiArray(String(inv));
    for (var _loc2 = 0; _loc2 < _root.inventory.length; ++_loc2)
    {
        _root.inventory[_loc2][1] = Number(_root.inventory[_loc2][1]);
    } // end of for
} // End of the function
function handleUseItem2(resObj)
{
    _root.usedAnItem = false;
    parseInventory(resObj[2]);
    _root.userPokemon = parseMultiPokemon(resObj[3]);
    if (resObj[4] == "1" || resObj[4] == "3" || resObj[4] == "7" || resObj[4] == "30" || resObj[4] == "365")
    {
        clearInterval(_root.membershipExpirationI);
        _root.memberType = "gold";
        _root.memberTime = _root.memberTime + Number(resObj[4]) * 86400;
        if (_root.memberTime > 0 && _root.memberTime <= 172800)
        {
            _root.membershipExpirationI = setInterval(membershipExpiration, _root.memberTime * 1000);
        } // end if
        makeCreditShop("Main");
    } // end if
    if (resObj[5] != undefined && resObj[5] != "")
    {
        _root.tileX = player.tileX;
        _root.tileY = player.tileY;
        removeMovieClip (player);
        _root.avatarType = Number(resObj[5]);
        showCharacterCreation();
        _root.canMove = false;
    } // end if
    if (resObj[6] != undefined && resObj[6] != "")
    {
        _root.money = Number(resObj[6]);
        _root.mainGUI.inventory.moneyT.htmlText = "<b>" + format(money) + "</b>";
    } // end if
    if (resObj[15] != undefined && resObj[15] != "")
    {
        credits = Number(resObj[15]);
        mainGUI.creditsT.htmlText = "<b>" + format(credits) + "c</b>";
        mainGUI.creditShop.creditsT.htmlText = "<b>" + format(credits) + "c";
    } // end if
    if (resObj[7] == "1")
    {
        masterShopAccess = true;
    } // end if
    if (resObj[8] == "2")
    {
        _root.movementSpeedMod = 2;
    }
    else if (resObj[8] == "0.5")
    {
        _root.movementSpeedMod = 0.500000;
    }
    else if (resObj[8] == "1")
    {
        _root.movementSpeedMod = 1;
    } // end else if
    if (_root.moveType == "bike")
    {
        _root.moveMapSpeed = 16 * movementSpeedMod;
    }
    else if (_root.moveType == "surf" && hasItem("Surfboard"))
    {
        moveMapSpeed = 16 * movementSpeedMod;
    }
    else
    {
        moveMapSpeed = 8 * movementSpeedMod;
    } // end else if
    if (resObj[9] != undefined && resObj[9] != "")
    {
        systemMessage(resObj[9]);
    } // end if
    loadPokemonIcons(false);
    _root.itemOnPokemon = false;
    _root.itemOnPokemonName = "";
    if (resObj[10] != undefined && resObj[10] != "")
    {
        if (fishing == true)
        {
            stopFishing();
        } // end if
        if (mining == true)
        {
            stopMining();
        } // end if
        _root.canMove = false;
        if (resObj[10] == "Indigo Plateau")
        {
            loadMap(true, resObj[10], 8, 20);
        }
        else if (resObj[10] == "Hoenn Pokemon League Lobby")
        {
            loadMap(true, resObj[10], 15, 15);
        }
        else if (resObj[10] == "Accumula Pokecenter" || resObj[10] == "Striaton Pokecenter" || resObj[10] == "Nacrene Pokecenter" || resObj[10] == "Castelia Pokecenter" || resObj[10] == "Nimbasa Pokecenter" || resObj[10] == "Driftveil Pokecenter" || resObj[10] == "Mistralton Pokecenter" || resObj[10] == "Icirrus Pokecenter" || resObj[10] == "Opelucid Pokecenter" || resObj[10] == "Lacunosa Pokecenter" || resObj[10] == "Undella Pokecenter" || resObj[10] == "Lentimas Pokecenter" || resObj[10] == "Black City Pokecenter" || resObj[10] == "Humilau Pokecenter" || resObj[10] == "Unova Victory Road Pokecenter")
        {
            loadMap(true, resObj[10], 10, 17);
        }
        else
        {
            loadMap(true, resObj[10], 19, 14);
        } // end else if
        removeMovieClip (_root.marketplace);
        removeMovieClip (_root.prizeShop);
        removeMovieClip (_root.shopBox);
        removeMovieClip (_root.merchantBox);
        removeMovieClip (_root.altarGUI);
        if (_root.mainGUI.storage != undefined)
        {
            closeStorage();
        } // end if
    } // end if
    if (resObj[11] == "100")
    {
        _root.repelAmount = _root.repelAmount + 100;
        _root.encryptedRepelAmount = calcMD5(_root.repelAmount + "dsf09jf30f9jsapdfn30fesanfipas" + _root.username);
    }
    else if (resObj[11] == "250")
    {
        _root.repelAmount = _root.repelAmount + 250;
        _root.encryptedRepelAmount = calcMD5(_root.repelAmount + "dsf09jf30f9jsapdfn30fesanfipas" + _root.username);
    } // end else if
    if (resObj[12] != undefined && resObj[12] != "")
    {
        _root.acTime = Number(resObj[12]);
        _root.acTime2 = Number(resObj[13]);
        _root.mapExits.unshift([87, 7, "Altering Cave", 48, 46]);
        _root.customTiles = [];
    } // end if
    if (resObj[14] != undefined && resObj[14] != "")
    {
        var _loc3 = parseArray(resObj[14]);
        confirmBox["box" + _root.lootBoxNum].gotoAndStop("item");
        if (_loc3[0].indexOf("TM") == -1 || _loc3[0] == "TM Box")
        {
            confirmBox["box" + _root.lootBoxNum].i.gotoAndStop(_loc3[0]);
        }
        else
        {
            confirmBox["box" + _root.lootBoxNum].i.gotoAndStop("tmhm");
        } // end else if
        confirmBox["box" + _root.lootBoxNum].onRollOver = function ()
        {
        };
        confirmBox["box" + _root.lootBoxNum].onRollOut = function ()
        {
        };
        if (_loc3.length > 2)
        {
            guaranteedItemData[_root.lootBoxType][0] = _loc3[2];
            if (guaranteedItemData[_root.lootBoxType][0].indexOf("TM") == -1)
            {
                confirmBox.i.gotoAndStop(guaranteedItemData[_root.lootBoxType][0]);
            }
            else
            {
                confirmBox.i.gotoAndStop("tmhm");
            } // end if
        } // end else if
        ++guaranteedItemData[_root.lootBoxType][1];
        updateGuaranteedItemText(_root.lootBoxType);
        if (confirmBox.box1.n == 0 && confirmBox.box2.n == 0 && confirmBox.box3.n == 0 && confirmBox.box4.n == 0 && confirmBox.box5.n == 0)
        {
            _root.moreBoxesI = setInterval(moreBoxes, 2500);
        } // end if
    }
    else
    {
        _root.guiUp = false;
        if (learnMoves == false)
        {
            _root.canMove = true;
        } // end if
    } // end else if
    remakeInventory();
} // End of the function
function moreBoxes()
{
    clearInterval(_root.moreBoxesI);
    if (confirmBox._x != undefined)
    {
        for (var _loc3 = 0; _loc3 < 5; ++_loc3)
        {
            confirmBox["box" + (_loc3 + 1)]._visible = false;
        } // end of for
        var _loc4 = getInventoryAmount(_root.lootBoxType);
        if (_loc4 > 5)
        {
            _loc4 = 5;
        } // end if
        for (var _loc3 = 0; _loc3 < _loc4; ++_loc3)
        {
            confirmBox["box" + (_loc3 + 1)].gotoAndStop(_root.lootBoxType);
            confirmBox["box" + (_loc3 + 1)]._visible = true;
            confirmBox["box" + (_loc3 + 1)].n = _root.lootBoxType;
            confirmBox["box" + (_loc3 + 1)].onRelease = function ()
            {
                if (isBusy == false && this.n != 0)
                {
                    getTimestamp("useItem2", 0, this.n);
                    this.n = 0;
                    _root.lootBoxNum = this.num;
                } // end if
            };
        } // end of for
    } // end if
} // End of the function
function handleReorderStoragePokemon(resObj)
{
    _root.userPokemon = resObj.userPokemon;
    if (resObj.s != undefined)
    {
        if (resObj.t == 1)
        {
            _root.storagePokemon.push(resObj.s);
        }
        else if (resObj.t == 2)
        {
            _root.storagePokemon2.push(resObj.s);
        }
        else if (resObj.t == 3)
        {
            _root.storagePokemon3.push(resObj.s);
        }
        else if (resObj.t == 4)
        {
            _root.storagePokemon4.push(resObj.s);
        }
        else if (resObj.t == 5)
        {
            _root.storagePokemon5.push(resObj.s);
        }
        else if (resObj.t == 6)
        {
            _root.storagePokemon6.push(resObj.s);
        }
        else if (resObj.t == 7)
        {
            _root.storagePokemon7.push(resObj.s);
        }
        else if (resObj.t == 8)
        {
            _root.storagePokemon8.push(resObj.s);
        }
        else if (resObj.t == 9)
        {
            _root.storagePokemon9.push(resObj.s);
        }
        else if (resObj.t == 10)
        {
            _root.storagePokemon10.push(resObj.s);
        } // end else if
    } // end else if
    if (resObj.u != undefined)
    {
        if (resObj.t == 1)
        {
            _root.storagePokemon.splice(Number(resObj.u), 1);
        }
        else if (resObj.t == 2)
        {
            _root.storagePokemon2.splice(Number(resObj.u), 1);
        }
        else if (resObj.t == 3)
        {
            _root.storagePokemon3.splice(Number(resObj.u), 1);
        }
        else if (resObj.t == 4)
        {
            _root.storagePokemon4.splice(Number(resObj.u), 1);
        }
        else if (resObj.t == 5)
        {
            _root.storagePokemon5.splice(Number(resObj.u), 1);
        }
        else if (resObj.t == 6)
        {
            _root.storagePokemon6.splice(Number(resObj.u), 1);
        }
        else if (resObj.t == 7)
        {
            _root.storagePokemon7.splice(Number(resObj.u), 1);
        }
        else if (resObj.t == 8)
        {
            _root.storagePokemon8.splice(Number(resObj.u), 1);
        }
        else if (resObj.t == 9)
        {
            _root.storagePokemon9.splice(Number(resObj.u), 1);
        }
        else if (resObj.t == 10)
        {
            _root.storagePokemon10.splice(Number(resObj.u), 1);
        } // end else if
    } // end else if
    loadPokemonIcons();
    loadStorageIcons(storage.currentTab);
    if (map == "PVP Center")
    {
        genPvPCenterExits();
    } // end if
} // End of the function
function handleEliteBuy(resObj)
{
    if (resObj[2] == "1")
    {
        if (resObj[3] != undefined)
        {
            _root.userPokemon = parseMultiPokemon(resObj[4]);
            loadPokemonIcons(false);
            removeItem("Elite Token", 150);
        } // end if
    }
    else if (resObj[2] == "2")
    {
        addInventoryItem("Shiny Charm", 1);
        removeItem("Elite Token", 30);
    }
    else if (resObj[2] == "3")
    {
        addInventoryItem("AFK Rod", 1);
        removeItem("Elite Token", 50);
    }
    else if (resObj[2] == "4")
    {
        addInventoryItem("Exp Share (Enhanced)", 1);
        removeItem("Elite Token", 20);
    }
    else if (resObj[2] == "5")
    {
        addInventoryItem("Cleanse Tag", 1);
        removeItem("Elite Token", 10);
    }
    else if (resObj[2] == "6")
    {
        addInventoryItem("Treasure Key", 1);
        removeItem("Elite Token", 1);
    }
    else if (resObj[2] == "7")
    {
        addInventoryItem("Old Sea Map", 1);
        removeItem("Elite Token", 125);
    }
    else if (resObj[2] == "8")
    {
        addInventoryItem("Transfer Move Ticket", 1);
        removeItem("Elite Token", 15);
    }
    else if (resObj[2] == "9")
    {
        addInventoryItem("Smoke Ball", 1);
        removeItem("Elite Token", 20);
    } // end else if
    remakeInventory();
    if (resObj[3] != undefined)
    {
        systemMessage(resObj[3]);
    }
    else
    {
        systemMessage("You don\'t have enough Elite Tokens.");
    } // end else if
} // End of the function
function npcQuest0()
{
    if (guiUp == false)
    {
        _root.canMove = false;
        _root.guiUp = true;
        var activeQuestData = [];
        for (var _loc2 = 0; _loc2 < _root.questData.length; ++_loc2)
        {
            if (_root.questData[_loc2][0] == 0)
            {
                activeQuestData = _root.questData[_loc2];
                break;
            } // end if
        } // end of for
        if (activeQuestData[1] == 0)
        {
            yesNoBox = _root.mainGUI.attachMovie("yesNoBox", "yesNoBox", _root.mainGUI.getNextHighestDepth());
            yesNoBox.nameT.htmlText = "<b>Bug Catcher Milo (Quest)";
            yesNoBox.msgT.htmlText = "I\'ve had it with these bugs! Can you help me clear them out?\n\n<font color=\'#00FF00\'>Quest Objective: Defeat 10 Caterpie and 10 Weedle\nDifficulty: Easy\nRewards: $2000, 15 Great Balls";
            yesNoBox.yesT.htmlText = "<b>Accept Quest";
            yesNoBox.noT.htmlText = "<b>No Thanks";
            assignMouseEvents(yesNoBox.yesB);
            assignMouseEvents(yesNoBox.noB);
            yesNoBox.yesB.onRelease = function ()
            {
                getTimestamp("acceptQuest", activeQuestData[0]);
                removeMovieClip (yesNoBox);
                _root.canMove = true;
                _root.guiUp = false;
            };
            yesNoBox.noB.onRelease = function ()
            {
                removeMovieClip (yesNoBox);
                _root.canMove = true;
                _root.guiUp = false;
            };
        }
        else if (activeQuestData[1] == 1)
        {
            yesNoBox = _root.mainGUI.attachMovie("yesNoBox", "yesNoBox", _root.mainGUI.getNextHighestDepth());
            yesNoBox.nameT.htmlText = "<b>Bug Catcher Milo (Quest)";
            yesNoBox.msgT.htmlText = "Have you cleared out the bugs yet?\n\n<font color=\'#00FF00\'>Quest Progress: \n" + activeQuestData[2] + "/10 Caterpie\n" + activeQuestData[3] + "/10 Weedle";
            if (activeQuestData[2] >= 10 && activeQuestData[3] >= 10)
            {
                yesNoBox.yesT.htmlText = "<b>Complete Quest";
                yesNoBox.noT.htmlText = "<b>Goodbye";
                yesNoBox.yesB.onRelease = function ()
                {
                    getTimestamp("completeQuest", activeQuestData[0]);
                };
                yesNoBox.noB.onRelease = function ()
                {
                    removeMovieClip (yesNoBox);
                    _root.canMove = true;
                    _root.guiUp = false;
                };
                assignMouseEvents(yesNoBox.noB);
            }
            else
            {
                yesNoBox.yesT.htmlText = "<b>Goodbye";
                yesNoBox.noB._visible = false;
                yesNoBox.yesB.onRelease = function ()
                {
                    removeMovieClip (yesNoBox);
                    _root.canMove = true;
                    _root.guiUp = false;
                };
            } // end else if
            assignMouseEvents(yesNoBox.yesB);
        }
        else if (activeQuestData[1] == 2)
        {
            chatBox(["Thanks so much!"], "Bug Catcher Milo");
            _root.guiUp = false;
        } // end else if
    } // end else if
} // End of the function
function npcQuest1()
{
    if (guiUp == false)
    {
        _root.canMove = false;
        _root.guiUp = true;
        var activeQuestData = [];
        for (var _loc2 = 0; _loc2 < _root.questData.length; ++_loc2)
        {
            if (_root.questData[_loc2][0] == 1)
            {
                activeQuestData = _root.questData[_loc2];
                break;
            } // end if
        } // end of for
        if (activeQuestData[1] == 0)
        {
            yesNoBox = _root.mainGUI.attachMovie("yesNoBox", "yesNoBox", _root.mainGUI.getNextHighestDepth());
            yesNoBox.nameT.htmlText = "<b>Explorer James (Quest)";
            yesNoBox.msgT.htmlText = "<font color=\'#00FF00\'>Quest Objective: Find Explorer\'s Notes\nDifficulty: Easy\nRewards: $4,000, 15 Ultra Balls";
            yesNoBox.yesT.htmlText = "<b>Accept Quest";
            yesNoBox.noT.htmlText = "<b>No Thanks";
            assignMouseEvents(yesNoBox.yesB);
            assignMouseEvents(yesNoBox.noB);
            yesNoBox.yesB.onRelease = function ()
            {
                getTimestamp("acceptQuest", activeQuestData[0]);
                removeMovieClip (yesNoBox);
                _root.canMove = true;
                _root.guiUp = false;
            };
            yesNoBox.noB.onRelease = function ()
            {
                removeMovieClip (yesNoBox);
                _root.canMove = true;
                _root.guiUp = false;
            };
        }
        else if (activeQuestData[1] == 1)
        {
            yesNoBox = _root.mainGUI.attachMovie("yesNoBox", "yesNoBox", _root.mainGUI.getNextHighestDepth());
            yesNoBox.nameT.htmlText = "<b>Explorer James (Quest)";
            yesNoBox.msgT.htmlText = "Have you found the notes yet?\n\n<font color=\'#00FF00\'>Quest Progress: \n" + activeQuestData[2] + "/1 Explorer\'s Notes";
            if (activeQuestData[2] >= 1)
            {
                yesNoBox.yesT.htmlText = "<b>Complete Quest";
                yesNoBox.noT.htmlText = "<b>Goodbye";
                yesNoBox.yesB.onRelease = function ()
                {
                    getTimestamp("completeQuest", activeQuestData[0]);
                };
                yesNoBox.noB.onRelease = function ()
                {
                    removeMovieClip (yesNoBox);
                    _root.canMove = true;
                    _root.guiUp = false;
                };
                assignMouseEvents(yesNoBox.noB);
            }
            else
            {
                yesNoBox.yesT.htmlText = "<b>Goodbye";
                yesNoBox.noB._visible = false;
                yesNoBox.yesB.onRelease = function ()
                {
                    removeMovieClip (yesNoBox);
                    _root.canMove = true;
                    _root.guiUp = false;
                };
            } // end else if
            assignMouseEvents(yesNoBox.yesB);
        }
        else if (activeQuestData[1] == 2)
        {
            chatBox(["Thanks so much!"], "Explorer James");
            _root.guiUp = false;
        } // end else if
    } // end else if
} // End of the function
function npcQuest2()
{
    if (guiUp == false)
    {
        _root.canMove = false;
        _root.guiUp = true;
        var activeQuestData = [];
        for (var _loc2 = 0; _loc2 < _root.questData.length; ++_loc2)
        {
            if (_root.questData[_loc2][0] == 2)
            {
                activeQuestData = _root.questData[_loc2];
                break;
            } // end if
        } // end of for
        if (activeQuestData[1] == 0 || activeQuestData[1] == 2)
        {
            yesNoBox = _root.mainGUI.attachMovie("yesNoBox", "yesNoBox", _root.mainGUI.getNextHighestDepth());
            yesNoBox.nameT.htmlText = "<b>Scientist Don (Daily Quest)";
            yesNoBox.msgT.htmlText = "<font color=\'#00FF00\'>Quest Objective: Catch 10 Rare+ pokemon and bring their DNA samples to Don.\nDifficulty: Medium\nRewards: $10,000, 1 Elite Token";
            yesNoBox.yesT.htmlText = "<b>Accept Quest";
            yesNoBox.noT.htmlText = "<b>No Thanks";
            assignMouseEvents(yesNoBox.yesB);
            assignMouseEvents(yesNoBox.noB);
            yesNoBox.yesB.onRelease = function ()
            {
                getTimestamp("acceptQuest", activeQuestData[0]);
                removeMovieClip (yesNoBox);
                _root.canMove = true;
                _root.guiUp = false;
            };
            yesNoBox.noB.onRelease = function ()
            {
                removeMovieClip (yesNoBox);
                _root.canMove = true;
                _root.guiUp = false;
            };
        }
        else if (activeQuestData[1] == 1)
        {
            yesNoBox = _root.mainGUI.attachMovie("yesNoBox", "yesNoBox", _root.mainGUI.getNextHighestDepth());
            yesNoBox.nameT.htmlText = "<b>Scientist Don (Daily Quest)";
            yesNoBox.msgT.htmlText = "Do you have the DNA samples yet?\n\n<font color=\'#00FF00\'>Quest Progress: \n" + activeQuestData[2] + "/10 Rare DNA Samples";
            if (activeQuestData[2] >= 10)
            {
                yesNoBox.yesT.htmlText = "<b>Complete Quest";
                yesNoBox.noT.htmlText = "<b>Goodbye";
                yesNoBox.yesB.onRelease = function ()
                {
                    getTimestamp("completeQuest", activeQuestData[0]);
                };
                yesNoBox.noB.onRelease = function ()
                {
                    removeMovieClip (yesNoBox);
                    _root.canMove = true;
                    _root.guiUp = false;
                };
                assignMouseEvents(yesNoBox.noB);
            }
            else
            {
                yesNoBox.yesT.htmlText = "<b>Goodbye";
                yesNoBox.noB._visible = false;
                yesNoBox.yesB.onRelease = function ()
                {
                    removeMovieClip (yesNoBox);
                    _root.canMove = true;
                    _root.guiUp = false;
                };
            } // end else if
            assignMouseEvents(yesNoBox.yesB);
        } // end if
    } // end else if
} // End of the function
function npcQuest3()
{
    if (guiUp == false)
    {
        _root.canMove = false;
        _root.guiUp = true;
        var activeQuestData = [];
        for (var _loc2 = 0; _loc2 < _root.questData.length; ++_loc2)
        {
            if (_root.questData[_loc2][0] == 3)
            {
                activeQuestData = _root.questData[_loc2];
                break;
            } // end if
        } // end of for
        if (activeQuestData[1] == 0 || activeQuestData[1] == 2)
        {
            yesNoBox = _root.mainGUI.attachMovie("yesNoBox", "yesNoBox", _root.mainGUI.getNextHighestDepth());
            yesNoBox.nameT.htmlText = "<b>Flannery (Daily Quest)";
            yesNoBox.msgT.htmlText = "Think you can help me defeat them?\n\n<font color=\'#00FF00\'>Quest Objective: Defeat 5 Elite Pokemon.\nDifficulty: Hard\nRewards: $10,000, 1 Elite Token, 1 Mystery Box";
            yesNoBox.yesT.htmlText = "<b>Accept Quest";
            yesNoBox.noT.htmlText = "<b>No Thanks";
            assignMouseEvents(yesNoBox.yesB);
            assignMouseEvents(yesNoBox.noB);
            yesNoBox.yesB.onRelease = function ()
            {
                getTimestamp("acceptQuest", activeQuestData[0]);
                removeMovieClip (yesNoBox);
                _root.canMove = true;
                _root.guiUp = false;
            };
            yesNoBox.noB.onRelease = function ()
            {
                removeMovieClip (yesNoBox);
                _root.canMove = true;
                _root.guiUp = false;
            };
        }
        else if (activeQuestData[1] == 1)
        {
            yesNoBox = _root.mainGUI.attachMovie("yesNoBox", "yesNoBox", _root.mainGUI.getNextHighestDepth());
            yesNoBox.nameT.htmlText = "<b>Flannery (Daily Quest)";
            yesNoBox.msgT.htmlText = "Have you defeated the Elites yet?\n\n<font color=\'#00FF00\'>Quest Progress: \n" + activeQuestData[2] + "/5 Elite Pokemon";
            if (activeQuestData[2] >= 5)
            {
                yesNoBox.yesT.htmlText = "<b>Complete Quest";
                yesNoBox.noT.htmlText = "<b>Goodbye";
                yesNoBox.yesB.onRelease = function ()
                {
                    getTimestamp("completeQuest", activeQuestData[0]);
                };
                yesNoBox.noB.onRelease = function ()
                {
                    removeMovieClip (yesNoBox);
                    _root.canMove = true;
                    _root.guiUp = false;
                };
                assignMouseEvents(yesNoBox.noB);
            }
            else
            {
                yesNoBox.yesT.htmlText = "<b>Goodbye";
                yesNoBox.noB._visible = false;
                yesNoBox.yesB.onRelease = function ()
                {
                    removeMovieClip (yesNoBox);
                    _root.canMove = true;
                    _root.guiUp = false;
                };
            } // end else if
            assignMouseEvents(yesNoBox.yesB);
        } // end if
    } // end else if
} // End of the function
function generateRandomString(newLength)
{
    var _loc5 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    var _loc2 = _loc5.split("");
    var _loc3 = "";
    for (var _loc1 = 0; _loc1 < newLength; ++_loc1)
    {
        _loc3 = _loc3 + _loc2[Math.floor(Math.random() * _loc2.length)];
    } // end of for
    return (_loc3);
} // End of the function
function handleGlobalAnimations()
{
    if (globalAnimation != "")
    {
        if (globalAnimation == "Elite Four")
        {
            if (globalAnimationStage == 0)
            {
                canMove = false;
                darkScreen2 = _root.attachMovie("darkScreen", "darkScreen2", _root.getNextHighestDepth());
                darkScreen2._width = Stage.width;
                darkScreen2._height = Stage.height;
                darkScreen2._alpha = 0;
                darkScreen2._x = newWidth / 2;
                darkScreen2._y = newHeight / 2;
                globalAnimationStage = 1;
            }
            else if (globalAnimationStage == 1)
            {
                darkScreen2._alpha = darkScreen2._alpha + 2;
                if (darkScreen2._alpha >= 100)
                {
                    globalAnimationStage = 2;
                } // end if
            }
            else if (globalAnimationStage == 2)
            {
                timesBeaten = 0;
                for (var _loc2 = 0; _loc2 < questArray.length; ++_loc2)
                {
                    if (questArray[_loc2][0] == "Elite Four")
                    {
                        timesBeaten = questArray[_loc2][1];
                        break;
                    } // end if
                } // end of for
                if (timesBeaten == 1)
                {
                    congratsT = _root.attachMovie("congratsT", "congratsT", _root.getNextHighestDepth());
                    congratsT._x = newWidth / 2;
                    congratsT._y = newHeight / 2;
                    globalAnimationStage = 3;
                }
                else
                {
                    globalAnimationStage = 4;
                } // end else if
            }
            else if (globalAnimationStage == 3)
            {
                ++globalAnimationCounter;
                if (globalAnimationCounter >= 140)
                {
                    globalAnimationStage = 4;
                } // end if
            }
            else if (globalAnimationStage == 4)
            {
                loadMap(true, "Indigo Plateau", 8, 10);
                removeMovieClip (congratsT);
                globalAnimationStage = 5;
            }
            else if (globalAnimationStage == 5)
            {
                darkScreen2._alpha = darkScreen2._alpha - 2;
                if (darkScreen2._alpha <= 0)
                {
                    removeMovieClip (darkScreen2);
                    globalAnimationStage = 0;
                    globalAnimationCounter = 0;
                    globalAnimation = "";
                } // end else if
            } // end else if
        }
        else if (globalAnimation == "Johto Elite Four")
        {
            if (globalAnimationStage == 0)
            {
                darkScreen2 = _root.attachMovie("darkScreen", "darkScreen2", _root.getNextHighestDepth());
                darkScreen2._width = Stage.width;
                darkScreen2._height = Stage.height;
                darkScreen2._alpha = 0;
                darkScreen2._x = newWidth / 2;
                darkScreen2._y = newHeight / 2;
                globalAnimationStage = 1;
            }
            else if (globalAnimationStage == 1)
            {
                darkScreen2._alpha = darkScreen2._alpha + 2;
                if (darkScreen2._alpha >= 100)
                {
                    globalAnimationStage = 2;
                } // end if
            }
            else if (globalAnimationStage == 2)
            {
                timesBeaten = 0;
                for (var _loc2 = 0; _loc2 < questArray.length; ++_loc2)
                {
                    if (questArray[_loc2][0] == "Johto Elite Four")
                    {
                        timesBeaten = questArray[_loc2][1];
                        break;
                    } // end if
                } // end of for
                if (timesBeaten == 1)
                {
                    congratsT = _root.attachMovie("congratsT", "congratsT", _root.getNextHighestDepth());
                    congratsT._x = newWidth / 2;
                    congratsT._y = newHeight / 2;
                    globalAnimationStage = 3;
                }
                else
                {
                    globalAnimationStage = 4;
                } // end else if
            }
            else if (globalAnimationStage == 3)
            {
                ++globalAnimationCounter;
                if (globalAnimationCounter >= 140)
                {
                    globalAnimationStage = 4;
                } // end if
            }
            else if (globalAnimationStage == 4)
            {
                loadMap(true, "Indigo Plateau", 8, 20);
                removeMovieClip (congratsT);
                globalAnimationStage = 5;
            }
            else if (globalAnimationStage == 5)
            {
                darkScreen2._alpha = darkScreen2._alpha - 2;
                if (darkScreen2._alpha <= 0)
                {
                    removeMovieClip (darkScreen2);
                    globalAnimationStage = 0;
                    globalAnimationCounter = 0;
                    globalAnimation = "";
                } // end else if
            } // end else if
        }
        else if (globalAnimation == "Hoenn Elite Four")
        {
            delete hoennEliteFourBeat;
            if (globalAnimationStage == 0)
            {
                darkScreen2 = _root.attachMovie("darkScreen", "darkScreen2", _root.getNextHighestDepth());
                darkScreen2._width = Stage.width;
                darkScreen2._height = Stage.height;
                darkScreen2._alpha = 0;
                darkScreen2._x = newWidth / 2;
                darkScreen2._y = newHeight / 2;
                globalAnimationStage = 1;
            }
            else if (globalAnimationStage == 1)
            {
                darkScreen2._alpha = darkScreen2._alpha + 2;
                if (darkScreen2._alpha >= 100)
                {
                    globalAnimationStage = 2;
                } // end if
            }
            else if (globalAnimationStage == 2)
            {
                timesBeaten = 0;
                for (var _loc2 = 0; _loc2 < questArray.length; ++_loc2)
                {
                    if (questArray[_loc2][0] == "Hoenn Elite Four")
                    {
                        timesBeaten = questArray[_loc2][1];
                        break;
                    } // end if
                } // end of for
                if (timesBeaten == 1)
                {
                    congratsT = _root.attachMovie("congratsT", "congratsT", _root.getNextHighestDepth());
                    congratsT._x = newWidth / 2;
                    congratsT._y = newHeight / 2;
                    globalAnimationStage = 3;
                }
                else
                {
                    globalAnimationStage = 4;
                } // end else if
            }
            else if (globalAnimationStage == 3)
            {
                ++globalAnimationCounter;
                if (globalAnimationCounter >= 140)
                {
                    globalAnimationStage = 4;
                } // end if
            }
            else if (globalAnimationStage == 4)
            {
                loadMap(true, "Hoenn Pokemon League Lobby", 15, 15);
                removeMovieClip (congratsT);
                globalAnimationStage = 5;
            }
            else if (globalAnimationStage == 5)
            {
                darkScreen2._alpha = darkScreen2._alpha - 2;
                if (darkScreen2._alpha <= 0)
                {
                    removeMovieClip (darkScreen2);
                    globalAnimationStage = 0;
                    globalAnimationCounter = 0;
                    globalAnimation = "";
                } // end else if
            } // end else if
        }
        else if (globalAnimation == "Sinnoh Elite Four")
        {
            delete sinnohEliteFourBeat;
            if (globalAnimationStage == 0)
            {
                darkScreen2 = _root.attachMovie("darkScreen", "darkScreen2", _root.getNextHighestDepth());
                darkScreen2._width = Stage.width;
                darkScreen2._height = Stage.height;
                darkScreen2._alpha = 0;
                darkScreen2._x = newWidth / 2;
                darkScreen2._y = newHeight / 2;
                globalAnimationStage = 1;
            }
            else if (globalAnimationStage == 1)
            {
                darkScreen2._alpha = darkScreen2._alpha + 2;
                if (darkScreen2._alpha >= 100)
                {
                    globalAnimationStage = 2;
                } // end if
            }
            else if (globalAnimationStage == 2)
            {
                timesBeaten = 0;
                for (var _loc2 = 0; _loc2 < questArray.length; ++_loc2)
                {
                    if (questArray[_loc2][0] == "Sinnoh Elite Four")
                    {
                        timesBeaten = questArray[_loc2][1];
                        break;
                    } // end if
                } // end of for
                if (timesBeaten == 1)
                {
                    congratsT = _root.attachMovie("congratsT", "congratsT", _root.getNextHighestDepth());
                    congratsT._x = newWidth / 2;
                    congratsT._y = newHeight / 2;
                    globalAnimationStage = 3;
                }
                else
                {
                    globalAnimationStage = 4;
                } // end else if
            }
            else if (globalAnimationStage == 3)
            {
                ++globalAnimationCounter;
                if (globalAnimationCounter >= 140)
                {
                    globalAnimationStage = 4;
                } // end if
            }
            else if (globalAnimationStage == 4)
            {
                loadMap(true, "Sinnoh Pokemon League", 15, 17);
                removeMovieClip (congratsT);
                globalAnimationStage = 5;
            }
            else if (globalAnimationStage == 5)
            {
                darkScreen2._alpha = darkScreen2._alpha - 2;
                if (darkScreen2._alpha <= 0)
                {
                    removeMovieClip (darkScreen2);
                    globalAnimationStage = 0;
                    globalAnimationCounter = 0;
                    globalAnimation = "";
                } // end else if
            } // end else if
        }
        else if (globalAnimation == "Unova Elite Four")
        {
            delete unovaEliteFourBeat;
            if (globalAnimationStage == 0)
            {
                darkScreen2 = _root.attachMovie("darkScreen", "darkScreen2", _root.getNextHighestDepth());
                darkScreen2._width = Stage.width;
                darkScreen2._height = Stage.height;
                darkScreen2._alpha = 0;
                darkScreen2._x = newWidth / 2;
                darkScreen2._y = newHeight / 2;
                globalAnimationStage = 1;
            }
            else if (globalAnimationStage == 1)
            {
                darkScreen2._alpha = darkScreen2._alpha + 2;
                if (darkScreen2._alpha >= 100)
                {
                    globalAnimationStage = 2;
                } // end if
            }
            else if (globalAnimationStage == 2)
            {
                timesBeaten = 0;
                for (var _loc2 = 0; _loc2 < questArray.length; ++_loc2)
                {
                    if (questArray[_loc2][0] == "Unova Elite Four")
                    {
                        timesBeaten = questArray[_loc2][1];
                        break;
                    } // end if
                } // end of for
                if (timesBeaten == 1)
                {
                    congratsT = _root.attachMovie("congratsT", "congratsT", _root.getNextHighestDepth());
                    congratsT._x = newWidth / 2;
                    congratsT._y = newHeight / 2;
                    globalAnimationStage = 3;
                }
                else
                {
                    globalAnimationStage = 4;
                } // end else if
            }
            else if (globalAnimationStage == 3)
            {
                ++globalAnimationCounter;
                if (globalAnimationCounter >= 140)
                {
                    globalAnimationStage = 4;
                } // end if
            }
            else if (globalAnimationStage == 4)
            {
                loadMap(true, "Unova Pokemon League", 15, 17);
                removeMovieClip (congratsT);
                globalAnimationStage = 5;
            }
            else if (globalAnimationStage == 5)
            {
                darkScreen2._alpha = darkScreen2._alpha - 2;
                if (darkScreen2._alpha <= 0)
                {
                    removeMovieClip (darkScreen2);
                    globalAnimationStage = 0;
                    globalAnimationCounter = 0;
                    globalAnimation = "";
                } // end else if
            } // end else if
        }
        else if (globalAnimation == "fadeScreenToOneIsland")
        {
            if (globalAnimationStage == 0)
            {
                darkScreen2 = _root.attachMovie("darkScreen", "darkScreen2", _root.getNextHighestDepth());
                darkScreen2._width = Stage.width;
                darkScreen2._height = Stage.height;
                darkScreen2._alpha = 0;
                darkScreen2._x = newWidth / 2;
                darkScreen2._y = newHeight / 2;
                globalAnimationStage = 1;
            }
            else if (globalAnimationStage == 1)
            {
                darkScreen2._alpha = darkScreen2._alpha + 2;
                if (darkScreen2._alpha >= 100)
                {
                    globalAnimationStage = 2;
                } // end if
            }
            else if (globalAnimationStage == 2)
            {
                loadMap(true, "One Island Ferry Station", 9, 5);
                canMove = false;
                globalAnimationStage = 3;
            }
            else if (globalAnimationStage == 3)
            {
                darkScreen2._alpha = darkScreen2._alpha - 2;
                if (darkScreen2._alpha <= 0)
                {
                    removeMovieClip (darkScreen2);
                    globalAnimationStage = 0;
                    globalAnimationCounter = 0;
                    globalAnimation = "";
                    chatBox(["Just talk to me when you want to leave."], "Bill");
                    guiUp = false;
                } // end else if
            } // end else if
        }
        else if (globalAnimation == "fadeScreenToTwoIsland")
        {
            if (globalAnimationStage == 0)
            {
                darkScreen2 = _root.attachMovie("darkScreen", "darkScreen2", _root.getNextHighestDepth());
                darkScreen2._width = Stage.width;
                darkScreen2._height = Stage.height;
                darkScreen2._alpha = 0;
                darkScreen2._x = newWidth / 2;
                darkScreen2._y = newHeight / 2;
                globalAnimationStage = 1;
            }
            else if (globalAnimationStage == 1)
            {
                darkScreen2._alpha = darkScreen2._alpha + 2;
                if (darkScreen2._alpha >= 100)
                {
                    globalAnimationStage = 2;
                } // end if
            }
            else if (globalAnimationStage == 2)
            {
                loadMap(true, "Two Island Ferry Station", 9, 5);
                canMove = false;
                globalAnimationStage = 3;
            }
            else if (globalAnimationStage == 3)
            {
                darkScreen2._alpha = darkScreen2._alpha - 2;
                if (darkScreen2._alpha <= 0)
                {
                    removeMovieClip (darkScreen2);
                    globalAnimationStage = 0;
                    globalAnimationCounter = 0;
                    globalAnimation = "";
                    chatBox(["Just talk to me when you want to leave."], "Bill");
                    guiUp = false;
                } // end else if
            } // end else if
        }
        else if (globalAnimation == "fadeScreenToThreeIsland")
        {
            if (globalAnimationStage == 0)
            {
                darkScreen2 = _root.attachMovie("darkScreen", "darkScreen2", _root.getNextHighestDepth());
                darkScreen2._width = Stage.width;
                darkScreen2._height = Stage.height;
                darkScreen2._alpha = 0;
                darkScreen2._x = newWidth / 2;
                darkScreen2._y = newHeight / 2;
                globalAnimationStage = 1;
            }
            else if (globalAnimationStage == 1)
            {
                darkScreen2._alpha = darkScreen2._alpha + 2;
                if (darkScreen2._alpha >= 100)
                {
                    globalAnimationStage = 2;
                } // end if
            }
            else if (globalAnimationStage == 2)
            {
                loadMap(true, "Three Island Ferry Station", 9, 5);
                canMove = false;
                globalAnimationStage = 3;
            }
            else if (globalAnimationStage == 3)
            {
                darkScreen2._alpha = darkScreen2._alpha - 2;
                if (darkScreen2._alpha <= 0)
                {
                    removeMovieClip (darkScreen2);
                    globalAnimationStage = 0;
                    globalAnimationCounter = 0;
                    globalAnimation = "";
                    chatBox(["Just talk to me when you want to leave."], "Bill");
                    guiUp = false;
                } // end else if
            } // end else if
        }
        else if (globalAnimation == "fadeScreenToCinnabarIsland")
        {
            if (globalAnimationStage == 0)
            {
                darkScreen2 = _root.attachMovie("darkScreen", "darkScreen2", _root.getNextHighestDepth());
                darkScreen2._width = Stage.width;
                darkScreen2._height = Stage.height;
                darkScreen2._alpha = 0;
                darkScreen2._x = newWidth / 2;
                darkScreen2._y = newHeight / 2;
                globalAnimationStage = 1;
            }
            else if (globalAnimationStage == 1)
            {
                darkScreen2._alpha = darkScreen2._alpha + 2;
                if (darkScreen2._alpha >= 100)
                {
                    globalAnimationStage = 2;
                } // end if
            }
            else if (globalAnimationStage == 2)
            {
                loadMap(true, "Cinnabar Island", 36, 14);
                canMove = false;
                globalAnimationStage = 3;
            }
            else if (globalAnimationStage == 3)
            {
                darkScreen2._alpha = darkScreen2._alpha - 2;
                if (darkScreen2._alpha <= 0)
                {
                    removeMovieClip (darkScreen2);
                    globalAnimationStage = 0;
                    globalAnimationCounter = 0;
                    globalAnimation = "";
                    chatBox(["Talk to me if you\'d like to go to One Island again."], "Bill");
                    guiUp = false;
                } // end else if
            } // end else if
        }
        else if (globalAnimation == "fadeScreenToSlateport")
        {
            if (globalAnimationStage == 0)
            {
                darkScreen2 = _root.attachMovie("darkScreen", "darkScreen2", _root.getNextHighestDepth());
                darkScreen2._width = Stage.width;
                darkScreen2._height = Stage.height;
                darkScreen2._alpha = 0;
                darkScreen2._x = newWidth / 2;
                darkScreen2._y = newHeight / 2;
                globalAnimationStage = 1;
            }
            else if (globalAnimationStage == 1)
            {
                darkScreen2._alpha = darkScreen2._alpha + 2;
                if (darkScreen2._alpha >= 100)
                {
                    globalAnimationStage = 2;
                } // end if
            }
            else if (globalAnimationStage == 2)
            {
                loadMap(true, "Slateport City", 56, 18);
                canMove = false;
                globalAnimationStage = 3;
            }
            else if (globalAnimationStage == 3)
            {
                darkScreen2._alpha = darkScreen2._alpha - 2;
                if (darkScreen2._alpha <= 0)
                {
                    removeMovieClip (darkScreen2);
                    globalAnimationStage = 0;
                    globalAnimationCounter = 0;
                    globalAnimation = "";
                    guiUp = false;
                    canMove = true;
                } // end else if
            } // end else if
        }
        else if (globalAnimation == "fadeScreenToOlivine")
        {
            if (globalAnimationStage == 0)
            {
                darkScreen2 = _root.attachMovie("darkScreen", "darkScreen2", _root.getNextHighestDepth());
                darkScreen2._width = Stage.width;
                darkScreen2._height = Stage.height;
                darkScreen2._alpha = 0;
                darkScreen2._x = newWidth / 2;
                darkScreen2._y = newHeight / 2;
                globalAnimationStage = 1;
            }
            else if (globalAnimationStage == 1)
            {
                darkScreen2._alpha = darkScreen2._alpha + 2;
                if (darkScreen2._alpha >= 100)
                {
                    globalAnimationStage = 2;
                } // end if
            }
            else if (globalAnimationStage == 2)
            {
                loadMap(true, "Olivine City", 34, 72);
                canMove = false;
                globalAnimationStage = 3;
            }
            else if (globalAnimationStage == 3)
            {
                darkScreen2._alpha = darkScreen2._alpha - 2;
                if (darkScreen2._alpha <= 0)
                {
                    removeMovieClip (darkScreen2);
                    globalAnimationStage = 0;
                    globalAnimationCounter = 0;
                    globalAnimation = "";
                    guiUp = false;
                    canMove = true;
                } // end else if
            } // end else if
        }
        else if (globalAnimation == "fadeScreenToVermilion")
        {
            if (globalAnimationStage == 0)
            {
                darkScreen2 = _root.attachMovie("darkScreen", "darkScreen2", _root.getNextHighestDepth());
                darkScreen2._width = Stage.width;
                darkScreen2._height = Stage.height;
                darkScreen2._alpha = 0;
                darkScreen2._x = newWidth / 2;
                darkScreen2._y = newHeight / 2;
                globalAnimationStage = 1;
            }
            else if (globalAnimationStage == 1)
            {
                darkScreen2._alpha = darkScreen2._alpha + 2;
                if (darkScreen2._alpha >= 100)
                {
                    globalAnimationStage = 2;
                } // end if
            }
            else if (globalAnimationStage == 2)
            {
                loadMap(true, "Vermilion City", 36, 59);
                canMove = false;
                globalAnimationStage = 3;
            }
            else if (globalAnimationStage == 3)
            {
                darkScreen2._alpha = darkScreen2._alpha - 2;
                if (darkScreen2._alpha <= 0)
                {
                    removeMovieClip (darkScreen2);
                    globalAnimationStage = 0;
                    globalAnimationCounter = 0;
                    globalAnimation = "";
                    guiUp = false;
                    canMove = true;
                } // end else if
            } // end else if
        }
        else if (globalAnimation == "fadeScreenToLilycove")
        {
            if (globalAnimationStage == 0)
            {
                darkScreen2 = _root.attachMovie("darkScreen", "darkScreen2", _root.getNextHighestDepth());
                darkScreen2._width = Stage.width;
                darkScreen2._height = Stage.height;
                darkScreen2._alpha = 0;
                darkScreen2._x = newWidth / 2;
                darkScreen2._y = newHeight / 2;
                globalAnimationStage = 1;
            }
            else if (globalAnimationStage == 1)
            {
                darkScreen2._alpha = darkScreen2._alpha + 2;
                if (darkScreen2._alpha >= 100)
                {
                    globalAnimationStage = 2;
                } // end if
            }
            else if (globalAnimationStage == 2)
            {
                loadMap(true, "Lilycove City", 57, 24);
                canMove = false;
                globalAnimationStage = 3;
            }
            else if (globalAnimationStage == 3)
            {
                darkScreen2._alpha = darkScreen2._alpha - 2;
                if (darkScreen2._alpha <= 0)
                {
                    removeMovieClip (darkScreen2);
                    globalAnimationStage = 0;
                    globalAnimationCounter = 0;
                    globalAnimation = "";
                    guiUp = false;
                    canMove = true;
                } // end else if
            } // end else if
        }
        else if (globalAnimation == "createCharacter")
        {
            if (globalAnimationStage == 0)
            {
                darkScreen2 = _root.attachMovie("whiteScreen", "darkScreen2", _root.getNextHighestDepth());
                darkScreen2._width = Stage.width;
                darkScreen2._height = Stage.height;
                darkScreen2._alpha = 0;
                darkScreen2._x = newWidth / 2;
                darkScreen2._y = newHeight / 2;
                globalAnimationStage = 1;
            }
            else if (globalAnimationStage == 1)
            {
                ++darkScreen2._alpha;
                if (darkScreen2._alpha >= 100)
                {
                    globalAnimationStage = 2;
                } // end if
            }
            else if (globalAnimationStage == 2)
            {
                removeMovieClip (creation);
                removeMovieClip (bgM);
                if (_root.createCharacter == true)
                {
                    avatarType = 1;
                    _root.player = _root.createEmptyMovieClip("player", _root.getNextHighestDepth());
                    _root.player.attachMovie("shadow", "shadow", _root.player.getNextHighestDepth());
                    _root.player.shadow._y = 16;
                    _root.player.createEmptyMovieClip("player", _root.player.getNextHighestDepth());
                    makePlayer(player);
                    addFollowPokemon();
                    darkScreen2.swapDepths(_root.getNextHighestDepth());
                    player._x = newWidth / 2;
                    player._y = newHeight / 2 - _root.playerHeightOffset;
                    player.tileX = _root.tileX;
                    player.tileY = _root.tileY;
                    player.name = _root.username;
                    player.moveMapAmount = 0;
                    player.nextStep = false;
                    player.hat = hat;
                    player.hair = hair;
                    player.wings = wings;
                    player.tail = tail;
                    player.eyes = eyes;
                    player.shirt = shirt;
                    player.pants = pants;
                    player.body = body;
                    player.face = face;
                    player.costume = "";
                    if (wings != "")
                    {
                        assignEquippableState(wings);
                    } // end if
                    if (tail != "")
                    {
                        assignEquippableState(tail);
                    } // end if
                    if (hat != "")
                    {
                        assignEquippableState(hat);
                    } // end if
                    if (face2 != "")
                    {
                        assignEquippableState(face2);
                    } // end if
                    if (cape != "")
                    {
                        assignEquippableState(cape);
                    } // end if
                    var _loc3 = [];
                    _loc3 = _loc3.concat([hairRa / 100, 0, 0, 0, 0]);
                    _loc3 = _loc3.concat([0, hairGa / 100, 0, 0, 0]);
                    _loc3 = _loc3.concat([0, 0, hairBa / 100, 0, 0]);
                    _loc3 = _loc3.concat([0, 0, 0, 1, 0]);
                    player.hairFilter = new flash.filters.ColorMatrixFilter(_loc3);
                    _loc3 = [];
                    _loc3 = _loc3.concat([eyeRa / 100, 0, 0, 0, 0]);
                    _loc3 = _loc3.concat([0, eyeGa / 100, 0, 0, 0]);
                    _loc3 = _loc3.concat([0, 0, eyeBa / 100, 0, 0]);
                    _loc3 = _loc3.concat([0, 0, 0, 1, 0]);
                    player.eyeFilter = new flash.filters.ColorMatrixFilter(_loc3);
                    _loc3 = [];
                    _loc3 = _loc3.concat([shirtRa / 100, 0, 0, 0, 0]);
                    _loc3 = _loc3.concat([0, shirtGa / 100, 0, 0, 0]);
                    _loc3 = _loc3.concat([0, 0, shirtBa / 100, 0, 0]);
                    _loc3 = _loc3.concat([0, 0, 0, 1, 0]);
                    player.shirtFilter = new flash.filters.ColorMatrixFilter(_loc3);
                    _loc3 = [];
                    _loc3 = _loc3.concat([pantsRa / 100, 0, 0, 0, 0]);
                    _loc3 = _loc3.concat([0, pantsGa / 100, 0, 0, 0]);
                    _loc3 = _loc3.concat([0, 0, pantsBa / 100, 0, 0]);
                    _loc3 = _loc3.concat([0, 0, 0, 1, 0]);
                    player.pantsFilter = new flash.filters.ColorMatrixFilter(_loc3);
                    drawPlayer(player, 0, 0);
                    globalAnimationStage = 3;
                } // end if
            }
            else if (globalAnimationStage == 3)
            {
                --darkScreen2._alpha;
                if (darkScreen2._alpha <= 0)
                {
                    _root.showPublicMessages = true;
                    getTimestamp("sendAddPlayer");
                    removeMovieClip (darkScreen2);
                    globalAnimationStage = 0;
                    globalAnimationCounter = 0;
                    globalAnimation = "";
                    guiUp = false;
                    canMove = true;
                    fixDepths();
                } // end else if
            } // end else if
        } // end else if
    }
    else if (globalAnimationObj.animation != "")
    {
        if (globalAnimationObj.animation == "fadeScreenTeleport")
        {
            if (globalAnimationObj.stage == 0)
            {
                darkScreen2 = _root.attachMovie("darkScreen", "darkScreen2", _root.getNextHighestDepth());
                darkScreen2._width = Stage.width;
                darkScreen2._height = Stage.height;
                darkScreen2._alpha = 0;
                darkScreen2._x = newWidth / 2;
                darkScreen2._y = newHeight / 2;
                globalAnimationObj.stage = 1;
            }
            else if (globalAnimationObj.stage == 1)
            {
                darkScreen2._alpha = darkScreen2._alpha + 6;
                if (darkScreen2._alpha >= 100)
                {
                    globalAnimationObj.stage = 2;
                } // end if
            }
            else if (globalAnimationObj.stage == 2)
            {
                loadMap(true, globalAnimationObj.map, globalAnimationObj.x, globalAnimationObj.y);
                canMove = false;
                globalAnimationObj.stage = 3;
            }
            else if (globalAnimationObj.stage == 3)
            {
                darkScreen2._alpha = darkScreen2._alpha - 6;
                if (darkScreen2._alpha <= 0)
                {
                    removeMovieClip (darkScreen2);
                    resetGlobalAnimationObj();
                    guiUp = false;
                    canMove = true;
                } // end else if
            } // end else if
        } // end else if
    } // end else if
} // End of the function
function handleDragging()
{
    if (_root.dragScrollbar != 0)
    {
        if (_root.dragScrollbar == 1)
        {
            if (_root.mainGUI.prizeShop.scrollBar._y > -87)
            {
                _root.mainGUI.prizeShop.scrollBar._y = _root.mainGUI.prizeShop.scrollBar._y - 4;
                mainGUI.prizeShop.itemList._y = (mainGUI.prizeShop.scrollBar._y + 87) / 197 * -57 + 11.500000;
            } // end if
        }
        else if (_root.dragScrollbar == 2)
        {
            if (_root.mainGUI.prizeShop.scrollBar._y < 110)
            {
                _root.mainGUI.prizeShop.scrollBar._y = _root.mainGUI.prizeShop.scrollBar._y + 4;
                mainGUI.prizeShop.itemList._y = (mainGUI.prizeShop.scrollBar._y + 87) / 197 * -57 + 11.500000;
            } // end if
        }
        else if (_root.dragScrollbar == 3)
        {
            if (searchMarketplaceListings.length > 8 && marketplace.auction.buyItemList._y > -(searchMarketplaceListings.length - 8) * 45 + 16)
            {
                marketplace.auction.buyItemList._y = marketplace.auction.buyItemList._y - 6;
            } // end if
        }
        else if (_root.dragScrollbar == 4)
        {
            if (marketplace.auction.buyItemList._y < 16)
            {
                marketplace.auction.buyItemList._y = marketplace.auction.buyItemList._y + 6;
            } // end if
        }
        else if (_root.dragScrollbar == 5)
        {
            if (searchMarketplaceListings.length > 8)
            {
                marketplace.auction.buyItemList._y = (marketplace.auction.scrollBar._y + 138) / 295 * -(searchMarketplaceListings.length - 8) * 45 + 16;
            } // end if
        }
        else if (_root.dragScrollbar == 6)
        {
            if (searchMarketplaceListings.length > 8 && marketplace.buy.buyItemList._y > -(searchMarketplaceListings.length - 8) * 45 + 16)
            {
                marketplace.buy.buyItemList._y = marketplace.buy.buyItemList._y - 6;
            } // end if
        }
        else if (_root.dragScrollbar == 7)
        {
            if (marketplace.buy.buyItemList._y < 16)
            {
                marketplace.buy.buyItemList._y = marketplace.buy.buyItemList._y + 6;
            } // end if
        }
        else if (_root.dragScrollbar == 8)
        {
            if (searchMarketplaceListings.length > 8)
            {
                marketplace.buy.buyItemList._y = (marketplace.buy.scrollBar._y + 138) / 295 * -(searchMarketplaceListings.length - 8) * 45 + 16;
            } // end if
        }
        else if (_root.dragScrollbar == 9)
        {
            if (addedToSell > 4 && marketplace.sell.sellItemList._y > -(addedToSell - 4) * 45 + 154)
            {
                marketplace.sell.sellItemList._y = marketplace.sell.sellItemList._y - 6;
            } // end if
        }
        else if (_root.dragScrollbar == 10)
        {
            if (marketplace.sell.sellItemList._y < 154)
            {
                marketplace.sell.sellItemList._y = marketplace.sell.sellItemList._y + 6;
            } // end if
        }
        else if (_root.dragScrollbar == 11)
        {
            if (addedToSell > 4)
            {
                marketplace.sell.sellItemList._y = (marketplace.sell.bScrollBar._y - 77) / 115 * -(addedToSell - 4) * 45 + 154;
            } // end if
        }
        else if (_root.dragScrollbar == 12)
        {
            if (addedToAuction > 4 && marketplace.sell.auctionItemList._y > -(addedToAuction - 4) * 45 - 71)
            {
                marketplace.sell.auctionItemList._y = marketplace.sell.auctionItemList._y - 6;
            } // end if
        }
        else if (_root.dragScrollbar == 13)
        {
            if (marketplace.sell.auctionItemList._y < -71)
            {
                marketplace.sell.auctionItemList._y = marketplace.sell.auctionItemList._y + 6;
            } // end if
        }
        else if (_root.dragScrollbar == 14)
        {
            if (addedToAuction > 4)
            {
                marketplace.sell.auctionItemList._y = (marketplace.sell.aScrollBar._y + 138) / 160 * -(addedToAuction - 4) * 45 - 71;
            } // end if
        }
        else if (_root.dragScrollbar == 15)
        {
            if (relearnMoveArray.length > 5)
            {
                relearnGUI.itemList._y = (relearnGUI.scrollBar._y + 88) / 199 * -(relearnMoveArray.length - 5) * 56;
            } // end if
        }
        else if (_root.dragScrollbar == 16)
        {
            if (clanRoster.length > 5 && mainGUI.clanGUI.clanBg.rosterList._y > -((clanRoster.length - 5) * 34 - 25))
            {
                mainGUI.clanGUI.clanBg.rosterList._y = mainGUI.clanGUI.clanBg.rosterList._y - 3;
            } // end if
        }
        else if (_root.dragScrollbar == 17)
        {
            if (mainGUI.clanGUI.clanBg.rosterList._y < 25)
            {
                mainGUI.clanGUI.clanBg.rosterList._y = mainGUI.clanGUI.clanBg.rosterList._y + 3;
            } // end if
        }
        else if (_root.dragScrollbar == 18)
        {
            if (clanRoster.length > 5)
            {
                mainGUI.clanGUI.clanBg.rosterList._y = (mainGUI.clanGUI.scrollBar._y + 11) / 81 * -(clanRoster.length - 5) * 34 + 25;
            } // end if
        }
        else if (_root.dragScrollbar == 19)
        {
            if (shopList.length > 5 && shopBox.itemList._y > -(shopList.length - 5) * 56)
            {
                shopBox.itemList._y = shopBox.itemList._y - 3;
            } // end if
        }
        else if (_root.dragScrollbar == 20)
        {
            if (shopBox.itemList._y < 0)
            {
                shopBox.itemList._y = shopBox.itemList._y + 3;
            } // end if
        }
        else if (_root.dragScrollbar == 21)
        {
            if (mainGUI.inventory.inventoryIcons._y > -((Math.ceil(inventory.length / 5) - 8) * 37 + 2.850000))
            {
                mainGUI.inventory.inventoryIcons._y = mainGUI.inventory.inventoryIcons._y - 3;
            } // end if
        }
        else if (_root.dragScrollbar == 22)
        {
            if (mainGUI.inventory.inventoryIcons._y < -2.850000)
            {
                mainGUI.inventory.inventoryIcons._y = mainGUI.inventory.inventoryIcons._y + 3;
            } // end if
        }
        else if (_root.dragScrollbar == 23)
        {
            if ((movesAdded / 2 - 7) % 2 == 0)
            {
                mainGUI.pokedex.moveHolder._y = (mainGUI.pokedex.scrollBar2._y + 5) / 266 * -(movesAdded / 2 - 7) * 50 + 132;
            }
            else
            {
                mainGUI.pokedex.moveHolder._y = (mainGUI.pokedex.scrollBar2._y + 5) / 266 * -((movesAdded + 1) / 2 - 7) * 50 + 132;
            } // end else if
        }
        else if (_root.dragScrollbar == 24)
        {
            mainGUI.pokedex.m._y = (mainGUI.pokedex.scrollBar._y + 64) / 325 * -(pokemonAmount - 15) * 26 + 112;
        }
        else if (_root.dragScrollbar == 25)
        {
            if (mainGUI.creditShop.mainTab._currentframe == 2)
            {
                mainGUI.creditShop.itemList._y = (mainGUI.creditShop.scrollBar._y + 159) / 337 * -Math.ceil(creditShopArray.length / 3 - 3) * 142;
            }
            else if (mainGUI.creditShop.eventTab._currentframe == 2)
            {
            }
            else if (mainGUI.creditShop.mountTab._currentframe == 2)
            {
                mainGUI.creditShop.itemList._y = (mainGUI.creditShop.scrollBar._y + 159) / 337 * -Math.ceil(creditShopMountArray.length / 3 - 3) * 142;
            }
            else
            {
                mainGUI.creditShop.itemList._y = (mainGUI.creditShop.scrollBar._y + 159) / 337 * -Math.ceil(creditShopDecorativeArray.length / 3 - 3) * 142;
            } // end else if
        }
        else if (_root.dragScrollbar == 26)
        {
            mainGUI.pvpPrizeShop.itemList._y = Math.round((mainGUI.pvpPrizeShop.scrollBar._y + 87) / 197 * -1824 + 11.500000);
        }
        else if (_root.dragScrollbar == 27)
        {
            mainGUI.clanPrizeShop.itemList._y = (mainGUI.clanPrizeShop.scrollBar._y + 87) / 197 * -399 + 11.500000;
        }
        else if (_root.dragScrollbar == 28)
        {
            mainGUI.tilesetGUI.tileset._y = (mainGUI.tilesetGUI.scrollBar._y + 835) / 391 * -1380 - 829;
        }
        else if (_root.dragScrollbar == 29)
        {
            if (mainGUI.achievements.itemList._y > -(_root.achievementsArray.length - 7) * 54 - 217)
            {
                mainGUI.achievements.itemList._y = mainGUI.achievements.itemList._y - 3;
            } // end if
        }
        else if (_root.dragScrollbar == 30)
        {
            if (mainGUI.achievements.itemList._y < -217)
            {
                mainGUI.achievements.itemList._y = mainGUI.achievements.itemList._y + 3;
            } // end if
        }
        else if (_root.dragScrollbar == 31)
        {
            mainGUI.achievements.itemList._y = (mainGUI.achievements.scrollBar._y + 200) / 318 * -(_root.achievementsArray.length - 7) * 54 - 217;
        }
        else if (_root.dragScrollbar == 32)
        {
            mainGUI.ppShop.itemList._y = (mainGUI.ppShop.scrollBar._y + 87) / 249 * -275 - 129;
        }
        else if (_root.dragScrollbar == 33)
        {
            mainGUI.prizeShop.itemList._y = (mainGUI.prizeShop.scrollBar._y + 87) / 197 * -57 + 11.500000;
        }
        else if (_root.dragScrollbar == 34)
        {
            mainGUI.prizeShop.itemList._y = (mainGUI.prizeShop.scrollBar._y + 87) / 197 * -1539 + 11.500000;
        }
        else if (_root.dragScrollbar == 35)
        {
            if (shopList.length > 5)
            {
                shopBox.itemList._y = (shopBox.scrollBar._y + 104) / 199 * -(shopList.length - 5) * 56;
            } // end if
        }
        else if (_root.dragScrollbar == 36)
        {
            if (inventory.length > 40)
            {
                mainGUI.inventory.inventoryIcons._y = (mainGUI.inventory.scrollBar._y + 104) / 199 * -((Math.ceil(inventory.length / 5) - 8) * 37 + 2.850000);
            } // end if
        }
        else if (_root.dragScrollbar == 37)
        {
            mainGUI.people.namesT.scroll = (mainGUI.people.scrollBar._y + 103) / 223 * mainGUI.people.namesT.maxscroll;
        }
        else if (_root.dragScrollbar == 38)
        {
            var _loc2 = mainGUI.scrollUpB._y + mainGUI.scrollUpB._height / 2;
            var _loc3 = (mainGUI.scrollBar._y - mainGUI.scrollBar._height / 2 - _loc2) / (mainGUI.scrollDownB._y - mainGUI.scrollDownB._height / 2 - mainGUI.scrollBar._height - _loc2);
            mainGUI.globalChatT.scroll = Math.ceil(_loc3 * mainGUI.globalChatT.maxscroll);
            mainGUI.localChatT.scroll = Math.ceil(_loc3 * mainGUI.localChatT.maxscroll);
            mainGUI.tradeChatT.scroll = Math.ceil(_loc3 * mainGUI.tradeChatT.maxscroll);
            mainGUI.nonEnglishChatT.scroll = Math.ceil(_loc3 * mainGUI.nonEnglishChatT.maxscroll);
            mainGUI.clanChatT.scroll = Math.ceil(_loc3 * mainGUI.clanChatT.maxscroll);
            mainGUI.customChatT.scroll = Math.ceil(_loc3 * mainGUI.customChatT.maxscroll);
        }
        else if (_root.dragScrollbar == 39)
        {
            ++scrollBarCount;
            if (scrollBarCount >= 3)
            {
                scrollBarCount = 0;
                ++mainGUI.globalChatT.scroll;
                ++mainGUI.localChatT.scroll;
                ++mainGUI.tradeChatT.scroll;
                ++mainGUI.battleChatT.scroll;
                ++mainGUI.nonEnglishChatT.scroll;
                ++mainGUI.clanChatT.scroll;
                ++mainGUI.customChatT.scroll;
            } // end if
        }
        else if (_root.dragScrollbar == 40)
        {
            ++scrollBarCount;
            if (scrollBarCount >= 3)
            {
                scrollBarCount = 0;
                --mainGUI.globalChatT.scroll;
                --mainGUI.localChatT.scroll;
                --mainGUI.tradeChatT.scroll;
                --mainGUI.battleChatT.scroll;
                --mainGUI.nonEnglishChatT.scroll;
                --mainGUI.clanChatT.scroll;
                --mainGUI.customChatT.scroll;
            } // end if
        }
        else if (_root.dragScrollbar == 41)
        {
            _root.mainGUI.battleQueuePrizeShop.itemList._y = (_root.mainGUI.battleQueuePrizeShop.scrollBar._y + 87) / 197 * -1653 + 11.500000;
        }
        else if (_root.dragScrollbar == 42)
        {
            if (mainGUI.pokedex.scrollBar._y > -64)
            {
                mainGUI.pokedex.scrollBar._y = mainGUI.pokedex.scrollBar._y - 0.250000;
                if (mainGUI.pokedex.scrollBar._y < -64)
                {
                    mainGUI.pokedex.scrollBar._y = -64;
                } // end if
                mainGUI.pokedex.m._y = (mainGUI.pokedex.scrollBar._y + 64) / 325 * -(pokemonAmount - 15) * 26 + 112;
            } // end if
        }
        else if (_root.dragScrollbar == 43)
        {
            if (mainGUI.pokedex.scrollBar._y < 261)
            {
                mainGUI.pokedex.scrollBar._y = mainGUI.pokedex.scrollBar._y + 0.250000;
                if (mainGUI.pokedex.scrollBar._y > 261)
                {
                    mainGUI.pokedex.scrollBar._y = 261;
                } // end if
                mainGUI.pokedex.m._y = (mainGUI.pokedex.scrollBar._y + 64) / 325 * -(pokemonAmount - 15) * 26 + 112;
            } // end if
        }
        else if (_root.dragScrollbar == 44)
        {
            if (mainGUI.pokedex.scrollBar2._y > 5)
            {
                mainGUI.pokedex.scrollBar2._y = mainGUI.pokedex.scrollBar2._y - 2;
                if (mainGUI.pokedex.scrollBar._y < 5)
                {
                    mainGUI.pokedex.scrollBar._y = 5;
                } // end if
                if ((movesAdded / 2 - 7) % 2 == 0)
                {
                    mainGUI.pokedex.moveHolder._y = (mainGUI.pokedex.scrollBar2._y + 5) / 266 * -(movesAdded / 2 - 7) * 50 + 132;
                }
                else
                {
                    mainGUI.pokedex.moveHolder._y = (mainGUI.pokedex.scrollBar2._y + 5) / 266 * -((movesAdded + 1) / 2 - 7) * 50 + 132;
                } // end if
            } // end else if
        }
        else if (_root.dragScrollbar == 45)
        {
            if (mainGUI.pokedex.scrollBar2._y < 261)
            {
                mainGUI.pokedex.scrollBar2._y = mainGUI.pokedex.scrollBar2._y + 2;
                if (mainGUI.pokedex.scrollBar2._y > 261)
                {
                    mainGUI.pokedex.scrollBar2._y = 261;
                } // end if
                if ((movesAdded / 2 - 7) % 2 == 0)
                {
                    mainGUI.pokedex.moveHolder._y = (mainGUI.pokedex.scrollBar2._y + 5) / 266 * -(movesAdded / 2 - 7) * 50 + 132;
                }
                else
                {
                    mainGUI.pokedex.moveHolder._y = (mainGUI.pokedex.scrollBar2._y + 5) / 266 * -((movesAdded + 1) / 2 - 7) * 50 + 132;
                } // end if
            } // end else if
        }
        else if (_root.dragScrollbar == 46)
        {
            _root.mainGUI.eliteShop.itemList._y = Math.round((_root.mainGUI.eliteShop.scrollBar._y + 87) / 197 * -228 + 11.500000);
        }
        else if (_root.dragScrollbar == 47)
        {
            _root.mainGUI.battleTowerPrizeShop.itemList._y = Math.round((_root.mainGUI.battleTowerPrizeShop.scrollBar._y + 87) / 197 * -570 + 11.500000);
        }
        else if (_root.dragScrollbar == 48)
        {
            if (_root.pokemonSummaryType != "trade")
            {
                if (_root.userPokemon[pokemonSummaryNum].moveBank.length > 4)
                {
                    _root.mainGUI.pokemonSummary.moveBank.itemList._y = Math.round((_root.mainGUI.pokemonSummary.moveBank.scrollBar._y + 41) / 126 * -(_root.userPokemon[pokemonSummaryNum].moveBank.length - 4) * 55);
                } // end if
            }
            else if (_root.tradePoke.moveBank.length > 4)
            {
                _root.mainGUI.pokemonSummary.moveBank.itemList._y = Math.round((_root.mainGUI.pokemonSummary.moveBank.scrollBar._y + 41) / 126 * -(_root.tradePoke.moveBank.length - 4) * 55);
            } // end else if
        }
        else if (_root.dragScrollbar == 49)
        {
            if (_root.mainGUI.pokemonSummary.moveBank.scrollBar._y > -41)
            {
                _root.mainGUI.pokemonSummary.moveBank.scrollBar._y = _root.mainGUI.pokemonSummary.moveBank.scrollBar._y - 6;
                if (_root.mainGUI.pokemonSummary.moveBank.scrollBar._y < -41)
                {
                    _root.mainGUI.pokemonSummary.moveBank.scrollBar._y = -41;
                } // end if
                if (_root.pokemonSummaryType != "trade")
                {
                    if (_root.userPokemon[pokemonSummaryNum].moveBank.length > 4)
                    {
                        _root.mainGUI.pokemonSummary.moveBank.itemList._y = Math.round((_root.mainGUI.pokemonSummary.moveBank.scrollBar._y + 41) / 126 * -(_root.userPokemon[pokemonSummaryNum].moveBank.length - 4) * 55 + 0);
                    } // end if
                }
                else if (_root.tradePoke.moveBank.length > 4)
                {
                    _root.mainGUI.pokemonSummary.moveBank.itemList._y = Math.round((_root.mainGUI.pokemonSummary.moveBank.scrollBar._y + 41) / 126 * -(_root.tradePoke.moveBank.length - 4) * 55 + 0);
                } // end if
            } // end else if
        }
        else if (_root.dragScrollbar == 50)
        {
            if (_root.mainGUI.pokemonSummary.moveBank.scrollBar._y < 85)
            {
                _root.mainGUI.pokemonSummary.moveBank.scrollBar._y = _root.mainGUI.pokemonSummary.moveBank.scrollBar._y + 6;
                if (_root.mainGUI.pokemonSummary.moveBank.scrollBar._y > 85)
                {
                    _root.mainGUI.pokemonSummary.moveBank.scrollBar._y = 85;
                } // end if
                if (_root.pokemonSummaryType != "trade")
                {
                    if (_root.userPokemon[pokemonSummaryNum].moveBank.length > 4)
                    {
                        _root.mainGUI.pokemonSummary.moveBank.itemList._y = Math.round((_root.mainGUI.pokemonSummary.moveBank.scrollBar._y + 41) / 126 * -(_root.userPokemon[pokemonSummaryNum].moveBank.length - 4) * 55 + 0);
                    } // end if
                }
                else if (_root.tradePoke.moveBank.length > 4)
                {
                    _root.mainGUI.pokemonSummary.moveBank.itemList._y = Math.round((_root.mainGUI.pokemonSummary.moveBank.scrollBar._y + 41) / 126 * -(_root.tradePoke.moveBank.length - 4) * 55 + 0);
                } // end if
            } // end else if
        }
        else if (_root.dragScrollbar == 51)
        {
            if (_root.mainGUI.prizeShop.scrollBar._y > -87)
            {
                mainGUI.prizeShop.scrollBar._y = mainGUI.prizeShop.scrollBar._y - 2;
                if (mainGUI.prizeShop.scrollBar._y < -87)
                {
                    mainGUI.prizeShop.scrollBar._y = -87;
                } // end if
                mainGUI.prizeShop.itemList._y = (mainGUI.prizeShop.scrollBar._y + 87) / 197 * -1539 + 11.500000;
            } // end if
        }
        else if (_root.dragScrollbar == 52)
        {
            if (_root.mainGUI.prizeShop.scrollBar._y < 110)
            {
                mainGUI.prizeShop.scrollBar._y = mainGUI.prizeShop.scrollBar._y + 2;
                if (mainGUI.prizeShop.scrollBar._y > 110)
                {
                    mainGUI.prizeShop.scrollBar._y = 110;
                } // end if
                mainGUI.prizeShop.itemList._y = (mainGUI.prizeShop.scrollBar._y + 87) / 197 * -1539 + 11.500000;
            } // end if
        }
        else if (_root.dragScrollbar == 53)
        {
            _loc2 = mainGUI.usageUI.scrollUpB._y + mainGUI.usageUI.scrollUpB._height / 2;
            _loc3 = (mainGUI.usageUI.scrollBar._y - mainGUI.usageUI.scrollBar._height / 2 - _loc2) / (mainGUI.usageUI.scrollDownB._y - mainGUI.usageUI.scrollDownB._height / 2 - mainGUI.usageUI.scrollBar._height - _loc2);
            mainGUI.usageUI.usageT.scroll = Math.ceil(_loc3 * mainGUI.usageUI.usageT.maxscroll);
        }
        else if (_root.dragScrollbar == 54)
        {
            ++mainGUI.usageUI.usageT.scroll;
        }
        else if (_root.dragScrollbar == 55)
        {
            --mainGUI.usageUI.usageT.scroll;
        } // end else if
    } // end else if
} // End of the function
function handlePlayerMovement()
{
    if (canMove == true)
    {
        if ((Key.isDown(38) || Key.isDown(87) && typing == false) && sDown == false)
        {
            wDown = true;
            if (moving == false)
            {
                if (moveType == "")
                {
                    drawPlayer(player, 0, 1);
                }
                else if (moveType == "surf")
                {
                    drawPlayer(player, 12, 1);
                }
                else if (moveType == "bike")
                {
                    if (!(player.frameX == 6 && player.frameY == 1 || player.frameX == 7 && player.frameY == 1 || player.frameX == 8 && player.frameY == 1))
                    {
                        drawPlayer(player, 6, 1);
                    } // end else if
                } // end else if
                if (fishing == true)
                {
                    stopFishing();
                } // end if
                if (mining == true)
                {
                    stopMining(undefined, true);
                } // end if
                dir = "up";
            } // end if
            ++bDownTime;
            if (canWalkOnTile(collisionArray[player.tileY - 1][player.tileX]) && moving == false && bDownTime >= 4)
            {
                if (moveType == "surf")
                {
                    if (collisionArray[player.tileY - 1][player.tileX] == 2 || collisionArray[player.tileY - 1][player.tileX] == 24 || collisionArray[player.tileY - 1][player.tileX] == 25 || collisionArray[player.tileY - 1][player.tileX] == 12 || collisionArray[player.tileY - 1][player.tileX] == 15)
                    {
                        moveMapSurf("up");
                    }
                    else
                    {
                        fadeMusic(undefined, true);
                        moveType = "";
                        moveMapSpeed = 8 * movementSpeedMod;
                        if (!useMount())
                        {
                            delete _root.player.mount;
                            getTimestamp("updateMount", _root.player.mount);
                        } // end if
                        moveMap("up");
                    } // end else if
                }
                else
                {
                    moveMap("up");
                } // end else if
            }
            else if (moving == false && collisionArray[player.tileY - 1][player.tileX] == 26)
            {
                moveMapJump("up");
            } // end else if
        }
        else if ((Key.isDown(37) || Key.isDown(65) && typing == false) && dDown == false)
        {
            aDown = true;
            if (moving == false)
            {
                if (moveType == "")
                {
                    drawPlayer(player, 0, 2);
                }
                else if (moveType == "surf")
                {
                    drawPlayer(player, 12, 2);
                }
                else if (moveType == "bike")
                {
                    if (!(player.frameX == 6 && player.frameY == 2 || player.frameX == 7 && player.frameY == 2 || player.frameX == 8 && player.frameY == 2))
                    {
                        drawPlayer(player, 6, 2);
                    } // end else if
                } // end else if
                if (fishing == true)
                {
                    stopFishing();
                } // end if
                if (mining == true)
                {
                    stopMining(undefined, true);
                } // end if
                dir = "left";
            } // end if
            ++bDownTime;
            if (canWalkOnTile(collisionArray[player.tileY][player.tileX - 1]) && moving == false && bDownTime >= 4)
            {
                if (moveType == "surf")
                {
                    if (collisionArray[player.tileY][player.tileX - 1] == 2 || collisionArray[player.tileY][player.tileX - 1] == 24 || collisionArray[player.tileY][player.tileX - 1] == 25 || collisionArray[player.tileY][player.tileX - 1] == 12 || collisionArray[player.tileY][player.tileX - 1] == 15)
                    {
                        moveMapSurf("left");
                    }
                    else
                    {
                        fadeMusic(undefined, true);
                        moveType = "";
                        moveMapSpeed = 8 * movementSpeedMod;
                        if (!useMount())
                        {
                            delete _root.player.mount;
                            getTimestamp("updateMount", _root.player.mount);
                        } // end if
                        moveMap("left");
                    } // end else if
                }
                else
                {
                    moveMap("left");
                } // end else if
            }
            else if (moving == false && collisionArray[player.tileY][player.tileX - 1] == 27)
            {
                moveMapJump("left");
            } // end else if
        }
        else if ((Key.isDown(40) || Key.isDown(83) && typing == false) && wDown == false)
        {
            sDown = true;
            if (moving == false)
            {
                if (moveType == "")
                {
                    drawPlayer(player, 0, 0);
                }
                else if (moveType == "surf")
                {
                    drawPlayer(player, 12, 0);
                }
                else if (moveType == "bike")
                {
                    if (!(player.frameX == 6 && player.frameY == 0 || player.frameX == 7 && player.frameY == 0 || player.frameX == 8 && player.frameY == 0))
                    {
                        drawPlayer(player, 6, 0);
                    } // end else if
                } // end else if
                if (fishing == true)
                {
                    stopFishing();
                } // end if
                if (mining == true)
                {
                    stopMining(undefined, true);
                } // end if
                dir = "down";
            } // end if
            ++bDownTime;
            if (canWalkOnTile(collisionArray[player.tileY + 1][player.tileX]) && moving == false && bDownTime >= 4)
            {
                if (moveType == "surf")
                {
                    if (collisionArray[player.tileY + 1][player.tileX] == 2 || collisionArray[player.tileY + 1][player.tileX] == 24 || collisionArray[player.tileY + 1][player.tileX] == 25 || collisionArray[player.tileY + 1][player.tileX] == 12 || collisionArray[player.tileY + 1][player.tileX] == 15)
                    {
                        moveMapSurf("down");
                    }
                    else
                    {
                        fadeMusic(undefined, true);
                        moveType = "";
                        moveMapSpeed = 8 * movementSpeedMod;
                        if (!useMount())
                        {
                            delete _root.player.mount;
                            getTimestamp("updateMount", _root.player.mount);
                        } // end if
                        moveMap("down");
                    } // end else if
                }
                else
                {
                    moveMap("down");
                } // end else if
            }
            else if (moving == false && collisionArray[player.tileY + 1][player.tileX] == 4)
            {
                moveMapJump("down");
            } // end else if
        }
        else if ((Key.isDown(39) || Key.isDown(68) && typing == false) && aDown == false)
        {
            dDown = true;
            if (moving == false)
            {
                if (moveType == "")
                {
                    drawPlayer(player, 0, 3);
                }
                else if (moveType == "surf")
                {
                    drawPlayer(player, 12, 3);
                }
                else if (moveType == "bike")
                {
                    if (!(player.frameX == 6 && player.frameY == 3 || player.frameX == 7 && player.frameY == 3 || player.frameX == 8 && player.frameY == 3))
                    {
                        drawPlayer(player, 6, 3);
                    } // end else if
                } // end else if
                if (fishing == true)
                {
                    stopFishing();
                } // end if
                if (mining == true)
                {
                    stopMining(undefined, true);
                } // end if
                dir = "right";
            } // end if
            ++bDownTime;
            if (canWalkOnTile(collisionArray[player.tileY][player.tileX + 1]) && moving == false && bDownTime >= 4)
            {
                if (moveType == "surf")
                {
                    if (collisionArray[player.tileY][player.tileX + 1] == 2 || collisionArray[player.tileY][player.tileX + 1] == 24 || collisionArray[player.tileY][player.tileX + 1] == 25 || collisionArray[player.tileY][player.tileX + 1] == 12 || collisionArray[player.tileY][player.tileX + 1] == 15)
                    {
                        moveMapSurf("right");
                    }
                    else
                    {
                        fadeMusic(undefined, true);
                        moveType = "";
                        moveMapSpeed = 8 * movementSpeedMod;
                        if (!useMount())
                        {
                            delete _root.player.mount;
                            getTimestamp("updateMount", _root.player.mount);
                        } // end if
                        moveMap("right");
                    } // end else if
                }
                else
                {
                    moveMap("right");
                } // end else if
            }
            else if (moving == false && collisionArray[player.tileY][player.tileX + 1] == 28)
            {
                moveMapJump("right");
            } // end else if
        } // end else if
    } // end else if
} // End of the function
function handleMoveMap()
{
    if (movingMapUp == true)
    {
        checkPlayerMovement("up", player);
        if (player.moveMapAmount < 64)
        {
            player.moveMapAmount = player.moveMapAmount + moveMapSpeed;
            mapLayer1._y = mapLayer1._y + moveMapSpeed;
            mapLayer1_2._y = mapLayer1_2._y + moveMapSpeed;
            mapLayer2._y = mapLayer2._y + moveMapSpeed;
            mapLayer3._y = mapLayer3._y + moveMapSpeed;
            lightMap._y = lightMap._y + moveMapSpeed;
            for (var _loc2 = 0; _loc2 < players.length; ++_loc2)
            {
                players[_loc2]._y = players[_loc2]._y + moveMapSpeed;
            } // end of for
        }
        else
        {
            if (encryptedTileY == calcMD5(player.tileY + _root.kg1() + _root.username))
            {
                --player.tileY;
                encryptedTileY = calcMD5(player.tileY + _root.kg1() + _root.username);
            }
            else
            {
                _root.error = "Coordinate encryption error";
                _root.gotoAndStop("errorconnecting");
            } // end else if
            checkRepel();
            checkMapExits();
            player.moveMapAmount = 0;
            if (collisionArray[player.tileY][player.tileX] == 16 && canWalkOnTile(collisionArray[player.tileY - 1][player.tileX]))
            {
                moveMap("up");
            }
            else
            {
                movingMapUp = false;
                movingMapDown = false;
                movingMapRight = false;
                movingMapLeft = false;
                holdButtonMoveMap();
            } // end else if
        } // end else if
    }
    else if (movingMapDown == true)
    {
        checkPlayerMovement("down", player);
        if (player.moveMapAmount < 64)
        {
            player.moveMapAmount = player.moveMapAmount + moveMapSpeed;
            mapLayer1._y = mapLayer1._y - moveMapSpeed;
            mapLayer1_2._y = mapLayer1_2._y - moveMapSpeed;
            mapLayer2._y = mapLayer2._y - moveMapSpeed;
            mapLayer3._y = mapLayer3._y - moveMapSpeed;
            lightMap._y = lightMap._y - moveMapSpeed;
            for (var _loc2 = 0; _loc2 < players.length; ++_loc2)
            {
                players[_loc2]._y = players[_loc2]._y - moveMapSpeed;
            } // end of for
        }
        else
        {
            if (encryptedTileY == calcMD5(player.tileY + _root.kg1() + _root.username))
            {
                ++player.tileY;
                encryptedTileY = calcMD5(player.tileY + _root.kg1() + _root.username);
            }
            else
            {
                _root.error = "Coordinate encryption error";
                _root.gotoAndStop("errorconnecting");
            } // end else if
            checkRepel();
            checkMapExits();
            player.moveMapAmount = 0;
            if (collisionArray[player.tileY][player.tileX] == 16 && canWalkOnTile(collisionArray[player.tileY + 1][player.tileX]))
            {
                moveMap("down");
            }
            else
            {
                movingMapUp = false;
                movingMapDown = false;
                movingMapRight = false;
                movingMapLeft = false;
                holdButtonMoveMap();
            } // end else if
        } // end else if
    }
    else if (movingMapRight == true)
    {
        checkPlayerMovement("right", player);
        if (player.moveMapAmount < 64)
        {
            player.moveMapAmount = player.moveMapAmount + moveMapSpeed;
            mapLayer1._x = mapLayer1._x - moveMapSpeed;
            mapLayer1_2._x = mapLayer1_2._x - moveMapSpeed;
            mapLayer2._x = mapLayer2._x - moveMapSpeed;
            mapLayer3._x = mapLayer3._x - moveMapSpeed;
            lightMap._x = lightMap._x - moveMapSpeed;
            for (var _loc2 = 0; _loc2 < players.length; ++_loc2)
            {
                players[_loc2]._x = players[_loc2]._x - moveMapSpeed;
            } // end of for
        }
        else
        {
            if (encryptedTileX == calcMD5(player.tileX + _root.kg1() + _root.username))
            {
                ++player.tileX;
                encryptedTileX = calcMD5(player.tileX + _root.kg1() + _root.username);
            }
            else
            {
                _root.error = "Coordinate encryption error";
                _root.gotoAndStop("errorconnecting");
            } // end else if
            checkRepel();
            checkMapExits();
            player.moveMapAmount = 0;
            if (collisionArray[player.tileY][player.tileX] == 16 && canWalkOnTile(collisionArray[player.tileY][player.tileX + 1]))
            {
                moveMap("right");
            }
            else
            {
                movingMapUp = false;
                movingMapDown = false;
                movingMapRight = false;
                movingMapLeft = false;
                holdButtonMoveMap();
            } // end else if
        } // end else if
    }
    else if (movingMapLeft == true)
    {
        checkPlayerMovement("left", player);
        if (player.moveMapAmount < 64)
        {
            player.moveMapAmount = player.moveMapAmount + moveMapSpeed;
            mapLayer1._x = mapLayer1._x + moveMapSpeed;
            mapLayer1_2._x = mapLayer1_2._x + moveMapSpeed;
            mapLayer2._x = mapLayer2._x + moveMapSpeed;
            mapLayer3._x = mapLayer3._x + moveMapSpeed;
            lightMap._x = lightMap._x + moveMapSpeed;
            for (var _loc2 = 0; _loc2 < players.length; ++_loc2)
            {
                players[_loc2]._x = players[_loc2]._x + moveMapSpeed;
            } // end of for
        }
        else
        {
            if (encryptedTileX == calcMD5(player.tileX + _root.kg1() + _root.username))
            {
                --player.tileX;
                encryptedTileX = calcMD5(player.tileX + _root.kg1() + _root.username);
            }
            else
            {
                _root.error = "Coordinate encryption error";
                _root.gotoAndStop("errorconnecting");
            } // end else if
            checkRepel();
            checkMapExits();
            player.moveMapAmount = 0;
            if (collisionArray[player.tileY][player.tileX] == 16 && canWalkOnTile(collisionArray[player.tileY][player.tileX - 1]))
            {
                moveMap("left");
            }
            else
            {
                movingMapUp = false;
                movingMapDown = false;
                movingMapRight = false;
                movingMapLeft = false;
                holdButtonMoveMap();
            } // end else if
        } // end else if
    } // end else if
    if (movingMapJump == true)
    {
        if (movingMapDownJump == true)
        {
            if (moveType == "")
            {
                if (player.nextStep == true)
                {
                    drawPlayer(player, 1, 0);
                }
                else
                {
                    drawPlayer(player, 2, 0);
                } // end else if
            }
            else if (moveType == "bike")
            {
                if (player.nextStep == true)
                {
                    drawPlayer(player, 7, 0);
                }
                else
                {
                    drawPlayer(player, 8, 0);
                } // end else if
            } // end else if
            if (player.moveMapAmount < 128)
            {
                player.moveMapAmount = player.moveMapAmount + moveMapSpeed;
                mapLayer1._y = mapLayer1._y - moveMapSpeed;
                mapLayer1_2._y = mapLayer1_2._y - moveMapSpeed;
                mapLayer2._y = mapLayer2._y - moveMapSpeed;
                mapLayer3._y = mapLayer3._y - moveMapSpeed;
                lightMap._y = lightMap._y - moveMapSpeed;
                for (var _loc2 = 0; _loc2 < players.length; ++_loc2)
                {
                    players[_loc2]._y = players[_loc2]._y - moveMapSpeed;
                } // end of for
            }
            else
            {
                if (encryptedTileY == calcMD5(player.tileY + _root.kg1() + _root.username))
                {
                    player.tileY = player.tileY + 2;
                    encryptedTileY = calcMD5(player.tileY + _root.kg1() + _root.username);
                }
                else
                {
                    _root.error = "Coordinate encryption error";
                    _root.gotoAndStop("errorconnecting");
                } // end else if
                checkRepel();
                checkMapExits();
                if (moveType == "")
                {
                    drawPlayer(player, 0, 0);
                }
                else
                {
                    drawPlayer(player, 6, 0);
                } // end else if
                resetMapMovementVars();
                holdButtonMoveMap();
            } // end else if
        }
        else if (movingMapUpJump == true)
        {
            if (moveType == "")
            {
                if (player.nextStep == true)
                {
                    drawPlayer(player, 1, 1);
                }
                else
                {
                    drawPlayer(player, 2, 1);
                } // end else if
            }
            else if (moveType == "bike")
            {
                if (player.nextStep == true)
                {
                    drawPlayer(player, 7, 1);
                }
                else
                {
                    drawPlayer(player, 8, 1);
                } // end else if
            } // end else if
            if (player.moveMapAmount < 128)
            {
                player.moveMapAmount = player.moveMapAmount + moveMapSpeed;
                mapLayer1._y = mapLayer1._y + moveMapSpeed;
                mapLayer1_2._y = mapLayer1_2._y + moveMapSpeed;
                mapLayer2._y = mapLayer2._y + moveMapSpeed;
                mapLayer3._y = mapLayer3._y + moveMapSpeed;
                lightMap._y = lightMap._y + moveMapSpeed;
                for (var _loc2 = 0; _loc2 < players.length; ++_loc2)
                {
                    players[_loc2]._y = players[_loc2]._y + moveMapSpeed;
                } // end of for
            }
            else
            {
                if (encryptedTileY == calcMD5(player.tileY + _root.kg1() + _root.username))
                {
                    player.tileY = player.tileY - 2;
                    encryptedTileY = calcMD5(player.tileY + _root.kg1() + _root.username);
                }
                else
                {
                    _root.error = "Coordinate encryption error";
                    _root.gotoAndStop("errorconnecting");
                } // end else if
                checkRepel();
                checkMapExits();
                if (moveType == "")
                {
                    drawPlayer(player, 0, 1);
                }
                else
                {
                    drawPlayer(player, 6, 1);
                } // end else if
                resetMapMovementVars();
                holdButtonMoveMap();
            } // end else if
        }
        else if (movingMapRightJump == true)
        {
            if (moveType == "")
            {
                if (player.nextStep == true)
                {
                    drawPlayer(player, 1, 3);
                }
                else
                {
                    drawPlayer(player, 2, 3);
                } // end else if
            }
            else if (moveType == "bike")
            {
                if (player.nextStep == true)
                {
                    drawPlayer(player, 7, 3);
                }
                else
                {
                    drawPlayer(player, 8, 3);
                } // end else if
            } // end else if
            if (player.moveMapAmount < 128)
            {
                player.moveMapAmount = player.moveMapAmount + moveMapSpeed;
                mapLayer1._x = mapLayer1._x - moveMapSpeed;
                mapLayer1_2._x = mapLayer1_2._x - moveMapSpeed;
                mapLayer2._x = mapLayer2._x - moveMapSpeed;
                mapLayer3._x = mapLayer3._x - moveMapSpeed;
                lightMap._x = lightMap._x - moveMapSpeed;
                for (var _loc2 = 0; _loc2 < players.length; ++_loc2)
                {
                    players[_loc2]._x = players[_loc2]._x - moveMapSpeed;
                } // end of for
            }
            else
            {
                if (encryptedTileX == calcMD5(player.tileX + _root.kg1() + _root.username))
                {
                    player.tileX = player.tileX + 2;
                    encryptedTileX = calcMD5(player.tileX + _root.kg1() + _root.username);
                }
                else
                {
                    _root.error = "Coordinate encryption error";
                    _root.gotoAndStop("errorconnecting");
                } // end else if
                checkRepel();
                checkMapExits();
                if (moveType == "")
                {
                    drawPlayer(player, 0, 3);
                }
                else
                {
                    drawPlayer(player, 6, 3);
                } // end else if
                resetMapMovementVars();
                holdButtonMoveMap();
            } // end else if
        }
        else if (movingMapLeftJump == true)
        {
            if (moveType == "")
            {
                if (player.nextStep == true)
                {
                    drawPlayer(player, 1, 2);
                }
                else
                {
                    drawPlayer(player, 2, 2);
                } // end else if
            }
            else if (moveType == "bike")
            {
                if (player.nextStep == true)
                {
                    drawPlayer(player, 7, 2);
                }
                else
                {
                    drawPlayer(player, 8, 2);
                } // end else if
            } // end else if
            if (player.moveMapAmount < 128)
            {
                player.moveMapAmount = player.moveMapAmount + moveMapSpeed;
                mapLayer1._x = mapLayer1._x + moveMapSpeed;
                mapLayer1_2._x = mapLayer1_2._x + moveMapSpeed;
                mapLayer2._x = mapLayer2._x + moveMapSpeed;
                mapLayer3._x = mapLayer3._x + moveMapSpeed;
                lightMap._x = lightMap._x + moveMapSpeed;
                for (var _loc2 = 0; _loc2 < players.length; ++_loc2)
                {
                    players[_loc2]._x = players[_loc2]._x + moveMapSpeed;
                } // end of for
            }
            else
            {
                if (encryptedTileX == calcMD5(player.tileX + _root.kg1() + _root.username))
                {
                    player.tileX = player.tileX - 2;
                    encryptedTileX = calcMD5(player.tileX + _root.kg1() + _root.username);
                }
                else
                {
                    _root.error = "Coordinate encryption error";
                    _root.gotoAndStop("errorconnecting");
                } // end else if
                checkRepel();
                checkMapExits();
                if (moveType == "")
                {
                    drawPlayer(player, 0, 2);
                }
                else
                {
                    drawPlayer(player, 6, 2);
                } // end else if
                resetMapMovementVars();
                holdButtonMoveMap();
            } // end else if
        } // end else if
    } // end else if
} // End of the function
function handleNpcMovement()
{
    for (var _loc1 = 0; _loc1 < activeNPCs.length; ++_loc1)
    {
        activeNPCs[_loc1].moveMapAmount = activeNPCs[_loc1].moveMapAmount + activeNPCs[_loc1].speed;
        if (activeNPCs[_loc1].trainer == false)
        {
            if (activeNPCs[_loc1].moveMapAmount == activeNPCs[_loc1].speed && activeNPCs[_loc1].directions[activeNPCs[_loc1].pathNum] != activeNPCs[_loc1].directions[activeNPCs[_loc1].pathNum - 1])
            {
                if (activeNPCs[_loc1].directions[activeNPCs[_loc1].pathNum] == "d")
                {
                    setNPCFrame(activeNPCs[_loc1], 0, 0);
                }
                else if (activeNPCs[_loc1].directions[activeNPCs[_loc1].pathNum] == "u")
                {
                    setNPCFrame(activeNPCs[_loc1], 0, 1);
                }
                else if (activeNPCs[_loc1].directions[activeNPCs[_loc1].pathNum] == "l")
                {
                    setNPCFrame(activeNPCs[_loc1], 0, 2);
                }
                else if (activeNPCs[_loc1].directions[activeNPCs[_loc1].pathNum] == "r")
                {
                    setNPCFrame(activeNPCs[_loc1], 0, 3);
                } // end else if
            } // end else if
            if (activeNPCs[_loc1].directions[activeNPCs[_loc1].pathNum] == "d")
            {
                activeNPCs[_loc1]._y = activeNPCs[_loc1]._y + activeNPCs[_loc1].speed;
                checkNPCMovement("down", activeNPCs[_loc1]);
            }
            else if (activeNPCs[_loc1].directions[activeNPCs[_loc1].pathNum] == "u")
            {
                activeNPCs[_loc1]._y = activeNPCs[_loc1]._y - activeNPCs[_loc1].speed;
                checkNPCMovement("up", activeNPCs[_loc1]);
            }
            else if (activeNPCs[_loc1].directions[activeNPCs[_loc1].pathNum] == "r")
            {
                activeNPCs[_loc1]._x = activeNPCs[_loc1]._x + activeNPCs[_loc1].speed;
                checkNPCMovement("right", activeNPCs[_loc1]);
            }
            else if (activeNPCs[_loc1].directions[activeNPCs[_loc1].pathNum] == "l")
            {
                activeNPCs[_loc1]._x = activeNPCs[_loc1]._x - activeNPCs[_loc1].speed;
                checkNPCMovement("left", activeNPCs[_loc1]);
            } // end else if
            if (activeNPCs[_loc1].moveMapAmount >= 64)
            {
                activeNPCs[_loc1].moveMapAmount = 0;
                if (activeNPCs[_loc1].directions[activeNPCs[_loc1].pathNum + 1] != undefined)
                {
                    ++activeNPCs[_loc1].pathNum;
                    if (activeNPCs[_loc1].directions[activeNPCs[_loc1].pathNum] != activeNPCs[_loc1].directions[activeNPCs[_loc1].pathNum - 1])
                    {
                        if (activeNPCs[_loc1].directions[activeNPCs[_loc1].pathNum] == "d")
                        {
                            setNPCFrame(activeNPCs[_loc1], 0, 0);
                        }
                        else if (activeNPCs[_loc1].directions[activeNPCs[_loc1].pathNum] == "u")
                        {
                            setNPCFrame(activeNPCs[_loc1], 0, 1);
                        }
                        else if (activeNPCs[_loc1].directions[activeNPCs[_loc1].pathNum] == "l")
                        {
                            setNPCFrame(activeNPCs[_loc1], 0, 2);
                        }
                        else if (activeNPCs[_loc1].directions[activeNPCs[_loc1].pathNum] == "r")
                        {
                            setNPCFrame(activeNPCs[_loc1], 0, 3);
                        } // end else if
                    } // end else if
                }
                else
                {
                    if (activeNPCs[_loc1].finalDirection == "up")
                    {
                        setNPCFrame(activeNPCs[_loc1], 0, 1);
                    }
                    else if (activeNPCs[_loc1].finalDirection == "down")
                    {
                        setNPCFrame(activeNPCs[_loc1], 0, 0);
                    }
                    else if (activeNPCs[_loc1].finalDirection == "left")
                    {
                        setNPCFrame(activeNPCs[_loc1], 0, 2);
                    }
                    else if (activeNPCs[_loc1].finalDirection == "right")
                    {
                        setNPCFrame(activeNPCs[_loc1], 0, 3);
                    } // end else if
                    if (activeNPCs[_loc1].trainerBattleNPC != undefined && activeNPCs[_loc1].trainerBattleNPC == true)
                    {
                        canMove = true;
                    } // end if
                    activeNPCs[_loc1].traversing = false;
                    activeNPCs.splice(_loc1, 1);
                    break;
                } // end if
            } // end else if
            continue;
        } // end if
        if (activeNPCs[_loc1].moveMapAmount == activeNPCs[_loc1].speed)
        {
            if (activeNPCs[_loc1].dir == "down")
            {
                setNPCFrame(activeNPCs[_loc1], 0, 0);
            }
            else if (activeNPCs[_loc1].dir == "up")
            {
                setNPCFrame(activeNPCs[_loc1], 0, 1);
            }
            else if (activeNPCs[_loc1].dir == "left")
            {
                setNPCFrame(activeNPCs[_loc1], 0, 2);
            }
            else if (activeNPCs[_loc1].dir == "right")
            {
                setNPCFrame(activeNPCs[_loc1], 0, 3);
            } // end else if
        } // end else if
        if (activeNPCs[_loc1].moveMapAmount > 64)
        {
            activeNPCs[_loc1].moveMapAmount = 0;
            if (activeNPCs[_loc1].dir == "up")
            {
                --activeNPCs[_loc1].y;
            }
            else if (activeNPCs[_loc1].dir == "down")
            {
                ++activeNPCs[_loc1].y;
            }
            else if (activeNPCs[_loc1].dir == "left")
            {
                --activeNPCs[_loc1].x;
            }
            else if (activeNPCs[_loc1].dir == "right")
            {
                ++activeNPCs[_loc1].x;
            } // end else if
            if (activeNPCs[_loc1].x == activeNPCs[_loc1].endTile[0] && activeNPCs[_loc1].y == activeNPCs[_loc1].endTile[1])
            {
                if (activeNPCs[_loc1].dir == "down")
                {
                    setNPCFrame(activeNPCs[_loc1], 0, 0);
                }
                else if (activeNPCs[_loc1].dir == "up")
                {
                    setNPCFrame(activeNPCs[_loc1], 0, 1);
                }
                else if (activeNPCs[_loc1].dir == "left")
                {
                    setNPCFrame(activeNPCs[_loc1], 0, 2);
                }
                else if (activeNPCs[_loc1].dir == "right")
                {
                    setNPCFrame(activeNPCs[_loc1], 0, 3);
                } // end else if
                chatBox(activeNPCs[_loc1].mArray, trainerName);
                activeNPCs.splice(_loc1, 1);
                break;
            } // end if
            continue;
        } // end if
        if (!(activeNPCs[_loc1].x == activeNPCs[_loc1].endTile[0] && activeNPCs[_loc1].y == activeNPCs[_loc1].endTile[1]))
        {
            if (activeNPCs[_loc1].dir == "up")
            {
                activeNPCs[_loc1]._y = activeNPCs[_loc1]._y - activeNPCs[_loc1].speed;
            }
            else if (activeNPCs[_loc1].dir == "down")
            {
                activeNPCs[_loc1]._y = activeNPCs[_loc1]._y + activeNPCs[_loc1].speed;
            }
            else if (activeNPCs[_loc1].dir == "left")
            {
                activeNPCs[_loc1]._x = activeNPCs[_loc1]._x - activeNPCs[_loc1].speed;
            }
            else if (activeNPCs[_loc1].dir == "right")
            {
                activeNPCs[_loc1]._x = activeNPCs[_loc1]._x + activeNPCs[_loc1].speed;
            } // end else if
            checkNPCMovement(activeNPCs[_loc1].dir, activeNPCs[_loc1]);
            continue;
        } // end if
        if (activeNPCs[_loc1].dir == "down")
        {
            setNPCFrame(activeNPCs[_loc1], 0, 0);
        }
        else if (activeNPCs[_loc1].dir == "up")
        {
            setNPCFrame(activeNPCs[_loc1], 0, 1);
        }
        else if (activeNPCs[_loc1].dir == "left")
        {
            setNPCFrame(activeNPCs[_loc1], 0, 2);
        }
        else if (activeNPCs[_loc1].dir == "right")
        {
            setNPCFrame(activeNPCs[_loc1], 0, 3);
        } // end else if
        chatBox(activeNPCs[_loc1].mArray, trainerName);
        activeNPCs.splice(_loc1, 1);
        break;
    } // end of for
} // End of the function
function handleBattleText()
{
    if (displayingBattleText == true)
    {
        if (battleText[battleTextIndex] == undefined && battleTextNumber == 1)
        {
            battleTextNumber = 2;
            battleTextIndex = 0;
        } // end if
        ++battleTextFrameCount;
        if (battleTextFrameCount >= 40 || battleTextIndex == 0 && battleTextNumber == 1)
        {
            mainGUI.battleBackground.move1B._visible = false;
            mainGUI.battleBackground.move2B._visible = false;
            mainGUI.battleBackground.move3B._visible = false;
            mainGUI.battleBackground.move4B._visible = false;
            mainGUI.battleBackground.runB._visible = false;
            mainGUI.battleBackground.fightB._visible = false;
            mainGUI.battleBackground.bagB._visible = false;
            mainGUI.battleBackground.pokemonB._visible = false;
            mainGUI.battleBackground.backB._visible = false;
            mainGUI.battleBackground.itemBg._visible = false;
            mainGUI.battleBackground.useItemRightB._visible = false;
            mainGUI.battleBackground.useItemLeftB._visible = false;
            mainGUI.battleBackground.useItemB._visible = false;
            mainGUI.battleBackground.itemImage.gotoAndStop(1);
            mainGUI.battleBackground.itemTexts.itemNameT.text = "";
            mainGUI.battleBackground.itemTexts.itemAmountT.text = "";
            mainGUI.battleBackground.continueT.continueT.text = "";
            mainGUI.battleBackground.continueB._visible = false;
            mainGUI.battleBackground.bg.gotoAndStop(1);
            mainGUI.battleBackground.battleT.battleT.text = "";
            mainGUI.battleBackground.battleT._visible = true;
            _root.mainGUI.battleBackground.turnT.htmlText = "<b>" + _root.battleTurns;
            if (battleTextNumber == 1)
            {
                if (battleText[battleTextIndex] != undefined)
                {
                    if (battleText[battleTextIndex][5] == "")
                    {
                        if (battleText[battleTextIndex][3].toLowerCase() == _root.lowercaseUsername)
                        {
                            applyDamage("player", battleTextIndex);
                        }
                        else
                        {
                            applyDamage("opponent", battleTextIndex);
                        } // end else if
                    }
                    else
                    {
                        if (battleText[battleTextIndex][5] == "switchPokemon")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                                wildPokemon = newPokemon;
                                wildPokemon.startingHp = Number(battleText[battleTextIndex][1]);
                                reloadEnemyBattleGUI(Number(battleText[battleTextIndex][1]));
                            }
                            else
                            {
                                reloadBattleGUI(_root.futureHpAmount);
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "fly1")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                                mainGUI.battleBackground.wildPokemonIcon._visible = false;
                            }
                            else
                            {
                                mainGUI.battleBackground.backPokemon._visible = false;
                                showContinueButton("<b>" + userPokemon[activePokemon].name + " is flying in the air.");
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "fly2")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                                mainGUI.battleBackground.wildPokemonIcon._visible = true;
                            }
                            else
                            {
                                mainGUI.battleBackground.backPokemon._visible = true;
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "dig1")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                                mainGUI.battleBackground.wildPokemonIcon._visible = false;
                            }
                            else
                            {
                                mainGUI.battleBackground.backPokemon._visible = false;
                                showContinueButton("<b>" + userPokemon[activePokemon].name + " is underground.");
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "dig2")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                                mainGUI.battleBackground.wildPokemonIcon._visible = true;
                            }
                            else
                            {
                                mainGUI.battleBackground.backPokemon._visible = true;
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5].indexOf("magmaStorm-") != -1 || battleText[battleTextIndex][5].indexOf("bind-") != -1 || battleText[battleTextIndex][5].indexOf("wrap-") != -1 || battleText[battleTextIndex][5].indexOf("clamp-") != -1 || battleText[battleTextIndex][5].indexOf("sandtomb-") != -1 || battleText[battleTextIndex][5].indexOf("firespin-") != -1 || battleText[battleTextIndex][5].indexOf("whirlpool-") != -1 || battleText[battleTextIndex][5].indexOf("infestation-") != -1)
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                                var _loc4 = Number(battleText[battleTextIndex][5].substr(battleText[battleTextIndex][5].indexOf("-") + 1, battleText[battleTextIndex][5].length));
                                if (userPokemon[activePokemon].currentHp > 0 && _loc4 > 0 && _root.userPokemon[activePokemon].heldItem != "Shed Shell")
                                {
                                    canSwitchPokemon = false;
                                    mainGUI.battleBackground.pokemonB.gotoAndStop("dark");
                                } // end if
                            } // end if
                        }
                        else if (battleText[battleTextIndex][5] == "thrash")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                            }
                            else if (userPokemon[activePokemon].currentHp > 0)
                            {
                                showContinueButton("<b>" + userPokemon[activePokemon].name + " is thrashing.");
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "bide")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() == _root.lowercaseUsername)
                            {
                                if (userPokemon[activePokemon].currentHp > 0)
                                {
                                    showContinueButton("<b>" + userPokemon[activePokemon].name + " is using Bide.");
                                } // end if
                            } // end if
                        }
                        else if (battleText[battleTextIndex][5] == "skullbash")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() == _root.lowercaseUsername)
                            {
                                if (userPokemon[activePokemon].currentHp > 0)
                                {
                                    showContinueButton("<b>" + userPokemon[activePokemon].name + " is ready to use Skull Bash.");
                                } // end if
                            } // end if
                        }
                        else if (battleText[battleTextIndex][5] == "skyattack")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() == _root.lowercaseUsername)
                            {
                                if (userPokemon[activePokemon].currentHp > 0)
                                {
                                    showContinueButton("<b>" + userPokemon[activePokemon].name + " is ready to use Sky Attack.");
                                } // end if
                            } // end if
                        }
                        else if (battleText[battleTextIndex][5] == "outrage")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                            }
                            else if (userPokemon[activePokemon].currentHp > 0)
                            {
                                showContinueButton("<b>" + userPokemon[activePokemon].name + " is in an outrage.");
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "rollout")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                            }
                            else if (userPokemon[activePokemon].currentHp > 0)
                            {
                                showContinueButton("<b>" + userPokemon[activePokemon].name + " is using Rollout.");
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "dive1")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                                mainGUI.battleBackground.wildPokemonIcon._visible = false;
                            }
                            else
                            {
                                mainGUI.battleBackground.backPokemon._visible = false;
                                showContinueButton("<b>" + userPokemon[activePokemon].name + " is swimming underwater.");
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "dive2")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                                mainGUI.battleBackground.wildPokemonIcon._visible = true;
                            }
                            else
                            {
                                mainGUI.battleBackground.backPokemon._visible = true;
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "iceball")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                            }
                            else if (userPokemon[activePokemon].currentHp > 0)
                            {
                                showContinueButton("<b>" + userPokemon[activePokemon].name + " is using Ice Ball.");
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "bounce1")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                                mainGUI.battleBackground.wildPokemonIcon._visible = false;
                            }
                            else
                            {
                                mainGUI.battleBackground.backPokemon._visible = false;
                                showContinueButton("<b>" + userPokemon[activePokemon].name + " is in the air.");
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "bounce2")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                                mainGUI.battleBackground.wildPokemonIcon._visible = true;
                            }
                            else
                            {
                                mainGUI.battleBackground.backPokemon._visible = true;
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "recharge")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                            }
                            else if (userPokemon[activePokemon].currentHp > 0)
                            {
                                showContinueButton("<b>" + userPokemon[activePokemon].name + " is recharging.");
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "shadowforce1")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                                mainGUI.battleBackground.wildPokemonIcon._visible = false;
                            }
                            else
                            {
                                mainGUI.battleBackground.backPokemon._visible = false;
                                showContinueButton("<b>" + userPokemon[activePokemon].name + " has vanished.");
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "shadowforce2")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                                mainGUI.battleBackground.wildPokemonIcon._visible = true;
                            }
                            else
                            {
                                mainGUI.battleBackground.backPokemon._visible = true;
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "skydrop")
                        {
                            if (userPokemon[activePokemon].currentHp > 0)
                            {
                                mainGUI.battleBackground.wildPokemonIcon._visible = false;
                                mainGUI.battleBackground.backPokemon._visible = false;
                                showContinueButton("<b>" + userPokemon[activePokemon].name + " is in the air.");
                            } // end if
                        }
                        else if (battleText[battleTextIndex][5] == "skydrop2")
                        {
                            mainGUI.battleBackground.wildPokemonIcon._visible = true;
                            mainGUI.battleBackground.backPokemon._visible = true;
                        }
                        else if (battleText[battleTextIndex][5] == "freezeshock")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() == _root.lowercaseUsername)
                            {
                                if (userPokemon[activePokemon].currentHp > 0)
                                {
                                    showContinueButton("<b>" + userPokemon[activePokemon].name + " is ready to use Freeze Shock.");
                                } // end if
                            } // end if
                        }
                        else if (battleText[battleTextIndex][5] == "phantomforce1")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                                mainGUI.battleBackground.wildPokemonIcon._visible = false;
                            }
                            else
                            {
                                mainGUI.battleBackground.backPokemon._visible = false;
                                showContinueButton("<b>" + userPokemon[activePokemon].name + " has vanished.");
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "phantomforce2")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                                mainGUI.battleBackground.wildPokemonIcon._visible = true;
                            }
                            else
                            {
                                mainGUI.battleBackground.backPokemon._visible = true;
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "razorwind")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() == _root.lowercaseUsername)
                            {
                                if (userPokemon[activePokemon].currentHp > 0)
                                {
                                    showContinueButton("<b>" + userPokemon[activePokemon].name + " is ready to use Razor Wind.");
                                } // end if
                            } // end if
                        }
                        else if (battleText[battleTextIndex][5] == "solarbeam")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() == _root.lowercaseUsername)
                            {
                                if (userPokemon[activePokemon].currentHp > 0)
                                {
                                    showContinueButton("<b>" + userPokemon[activePokemon].name + " is ready to use Solar Beam.");
                                } // end if
                            } // end if
                        }
                        else if (battleText[battleTextIndex][5] == "geomancy")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() == _root.lowercaseUsername)
                            {
                                if (userPokemon[activePokemon].currentHp > 0)
                                {
                                    showContinueButton("<b>" + userPokemon[activePokemon].name + " is ready to use Geomancy.");
                                } // end if
                            } // end if
                        }
                        else if (battleText[battleTextIndex][5] == "petaldance")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                            }
                            else if (userPokemon[activePokemon].currentHp > 0)
                            {
                                showContinueButton("<b>" + userPokemon[activePokemon].name + " is using Petal Dance.");
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "uproar")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                            }
                            else if (userPokemon[activePokemon].currentHp > 0)
                            {
                                showContinueButton("<b>" + userPokemon[activePokemon].name + " is in an uproar.");
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5].indexOf("mimic-") != -1)
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() == _root.lowercaseUsername)
                            {
                                mainGUI.battleBackground.move1B.nameT.htmlText = "<b>" + moveIdToName(userPokemon[activePokemon].battleMoves[0]);
                                mainGUI.battleBackground.move2B.nameT.htmlText = "<b>" + moveIdToName(userPokemon[activePokemon].battleMoves[1]);
                                mainGUI.battleBackground.move3B.nameT.htmlText = "<b>" + moveIdToName(userPokemon[activePokemon].battleMoves[2]);
                                mainGUI.battleBackground.move4B.nameT.htmlText = "<b>" + moveIdToName(userPokemon[activePokemon].battleMoves[3]);
                                mainGUI.battleBackground.move1B.moveName = moveIdToName(userPokemon[activePokemon].battleMoves[0]);
                                mainGUI.battleBackground.move2B.moveName = moveIdToName(userPokemon[activePokemon].battleMoves[1]);
                                mainGUI.battleBackground.move3B.moveName = moveIdToName(userPokemon[activePokemon].battleMoves[2]);
                                mainGUI.battleBackground.move4B.moveName = moveIdToName(userPokemon[activePokemon].battleMoves[3]);
                                fixMoveEText();
                            } // end if
                        }
                        else if (battleText[battleTextIndex][5].indexOf("transform-") != -1)
                        {
                            var _loc3 = Number(battleText[battleTextIndex][5].substr(battleText[battleTextIndex][5].indexOf("-") + 1, battleText[battleTextIndex][5].length));
                            if (battleText[battleTextIndex][3].toLowerCase() == _root.lowercaseUsername)
                            {
                                mainGUI.battleBackground.move1B.nameT.htmlText = "<b>" + moveIdToName(userPokemon[activePokemon].battleMoves[0]);
                                mainGUI.battleBackground.move2B.nameT.htmlText = "<b>" + moveIdToName(userPokemon[activePokemon].battleMoves[1]);
                                mainGUI.battleBackground.move3B.nameT.htmlText = "<b>" + moveIdToName(userPokemon[activePokemon].battleMoves[2]);
                                mainGUI.battleBackground.move4B.nameT.htmlText = "<b>" + moveIdToName(userPokemon[activePokemon].battleMoves[3]);
                                mainGUI.battleBackground.move1B.moveName = moveIdToName(userPokemon[activePokemon].battleMoves[0]);
                                mainGUI.battleBackground.move2B.moveName = moveIdToName(userPokemon[activePokemon].battleMoves[1]);
                                mainGUI.battleBackground.move3B.moveName = moveIdToName(userPokemon[activePokemon].battleMoves[2]);
                                mainGUI.battleBackground.move4B.moveName = moveIdToName(userPokemon[activePokemon].battleMoves[3]);
                                fixMoveEText();
                                if (userPokemon[activePokemon].shiny != true)
                                {
                                    mainGUI.battleBackground.backPokemon.gotoAndStop(_loc3);
                                }
                                else
                                {
                                    mainGUI.battleBackground.backPokemon.gotoAndStop(_loc3 + _root.shinyDifference);
                                } // end else if
                                if (userPokemon[activePokemon].form != "default" && userPokemon[activePokemon].form != undefined && userPokemon[activePokemon].form != "undefined")
                                {
                                    mainGUI.battleBackground.backPokemon.i.gotoAndStop(userPokemon[activePokemon].form);
                                }
                                else
                                {
                                    mainGUI.battleBackground.backPokemon.i.gotoAndStop(1);
                                } // end else if
                            }
                            else
                            {
                                mainGUI.battleBackground.wildPokemonIcon.gotoAndStop(_loc3);
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "v")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                                mainGUI.battleBackground.wildPokemonIcon._visible = true;
                            }
                            else
                            {
                                mainGUI.battleBackground.backPokemon._visible = true;
                                _root.continueButtonText = "";
                                _root.continueButton = false;
                            } // end else if
                        }
                        else if (battleText[battleTextIndex][5] == "vs")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() == _root.lowercaseUsername)
                            {
                                _root.voltSwitching = true;
                                _root.continueButton = false;
                            }
                            else
                            {
                                _root.opponentVoltSwitching = true;
                                showContinueButton("<b>Waiting for opponent to choose a pokemon..");
                            } // end else if
                        } // end else if
                        if (battleText[battleTextIndex][5] != "switchPokemon")
                        {
                            if (battleText[battleTextIndex][3].toLowerCase() != _root.lowercaseUsername)
                            {
                                applyDamage("opponent", battleTextIndex);
                            }
                            else
                            {
                                applyDamage("player", battleTextIndex);
                            } // end if
                        } // end else if
                    } // end else if
                    mainGUI.battleBackground.battleT.battleT.htmlText = "<b>" + battleText[battleTextIndex][0];
                    mainGUI.battleBackground.sb.setScrollPosition(mainGUI.battleBackground.battleT.battleT.maxscroll);
                    ++battleTextIndex;
                }
                else
                {
                    battleTextNumber = 2;
                    battleTextIndex = 0;
                } // end else if
            }
            else if (learnMoves == false && evolving == false || _root.battleType == "pvp")
            {
                displayingBattleText = false;
                if (_root.continueButton == true)
                {
                    mainGUI.battleBackground.continueT.continueT.htmlText = _root.continueButtonText;
                    mainGUI.battleBackground.continueB._visible = true;
                }
                else if (_root.voltSwitching != true)
                {
                    mainGUI.battleBackground.fightB._visible = true;
                    mainGUI.battleBackground.pokemonB._visible = true;
                    mainGUI.battleBackground.bagB._visible = true;
                    mainGUI.battleBackground.runB._visible = true;
                }
                else
                {
                    for (var _loc2 = 1; _loc2 < 7; ++_loc2)
                    {
                        if (userPokemon[_loc2 - 1] != undefined)
                        {
                            mainGUI.battleBackground["pokemon" + _loc2 + "B"].i.gotoAndStop(userPokemon[_loc2 - 1].id);
                            mainGUI.battleBackground["pokemon" + _loc2 + "B"].nameT.htmlText = "<b>" + userPokemon[_loc2 - 1].name;
                            mainGUI.battleBackground["pokemon" + _loc2 + "B"]._visible = true;
                        } // end if
                    } // end of for
                } // end else if
                _root.userStartingHp = _root.userPokemon[activePokemon].currentHp;
                _root.userStartingHp2 = _root.userPokemon[activePokemon2].currentHp;
                fixPlayerHpBar();
                if (_root.newPokemon != undefined)
                {
                    _root.wildPokemon.startingHp = _root.newPokemon.currentHp;
                }
                else
                {
                    _root.wildPokemon.startingHp = _root.wildPokemon.currentHp;
                } // end else if
                fixEnemyHpBar();
                _root.continueButton = false;
                if (userPokemon[activePokemon].ailment != "" && userPokemon[activePokemon].ailment != undefined && userPokemon[activePokemon].ailment != "undefined")
                {
                    mainGUI.battleBackground.battleIcon1.gotoAndStop(userPokemon[activePokemon].ailment);
                    mainGUI.battleBackground.battleIcon1._visible = true;
                }
                else
                {
                    mainGUI.battleBackground.battleIcon1._visible = false;
                } // end else if
                if (newPokemon.ailment != "" && newPokemon.ailment != undefined && newPokemon.ailment != "undefined")
                {
                    mainGUI.battleBackground.battleIcon2.gotoAndStop(newPokemon.ailment);
                    mainGUI.battleBackground.battleIcon2._visible = true;
                }
                else
                {
                    mainGUI.battleBackground.battleIcon2._visible = false;
                } // end else if
                if (_root.statBoosts[0][7] >= 1 && _root.statBoosts[0][7] != undefined)
                {
                    mainGUI.battleBackground.battleIcon3.gotoAndStop("substitute");
                    mainGUI.battleBackground.battleIcon3._visible = true;
                }
                else
                {
                    mainGUI.battleBackground.battleIcon3._visible = false;
                } // end else if
                if (_root.statBoosts[1][7] >= 1 && _root.statBoosts[1][7] != undefined)
                {
                    mainGUI.battleBackground.battleIcon4.gotoAndStop("substitute");
                    mainGUI.battleBackground.battleIcon4._visible = true;
                }
                else
                {
                    mainGUI.battleBackground.battleIcon4._visible = false;
                } // end else if
                sortStatBoosts("user");
                sortStatBoosts("opponent");
                if (_root.newSettings[0] != "1")
                {
                    if (_root.battleWeather == "none" || _root.battleWeather == undefined)
                    {
                        if (_root.battleBg == "snowyforest")
                        {
                            _root.mainGUI.battleBackground.weather.gotoAndStop("snow");
                            _root.mainGUI.battleBackground.weather._visible = true;
                        }
                        else
                        {
                            _root.mainGUI.battleBackground.weather._visible = false;
                        } // end else if
                    }
                    else
                    {
                        _root.mainGUI.battleBackground.weather.gotoAndStop(_root.battleWeather);
                        _root.mainGUI.battleBackground.weather._visible = true;
                    } // end if
                } // end else if
                mainGUI.battleBackground.battleT._visible = false;
                if (battleLost == false)
                {
                    isWaiting = false;
                    mainGUI.battleBackground.darkOverlay._alpha = 0;
                } // end if
                if (battleWon == true || battleEnd == true || battleLost == true)
                {
                    if (battleLost == true)
                    {
                        canMove = false;
                        loadMap(true, _root.temporaryMap, _root.tempTileX, _root.tempTileY, undefined, _root.map);
                        endBattle(true);
                    }
                    else
                    {
                        endBattle();
                    } // end if
                } // end else if
                loadPokemonIcons(false);
                if (_root.battleType == "pvp" && _root.battle == true)
                {
                    startBattleTimer();
                } // end if
            }
            else if (learnMoves == true)
            {
                learnMoveScreen._visible = true;
            }
            else if (evolving == true)
            {
                evolveUI._visible = true;
                darkScreen._visible = true;
            } // end else if
            if (battleTextFrameCount != 9029)
            {
                battleTextFrameCount = 0;
            } // end if
        } // end if
    } // end if
} // End of the function
function loadMapImage()
{
    if (map.indexOf("Pokecenter") != -1 && (_root.map == "Accumula Pokecenter" || _root.map == "Striaton Pokecenter" || _root.map == "Nacrene Pokecenter" || _root.map == "Castelia Pokecenter" || _root.map == "Nimbasa Pokecenter" || _root.map == "Driftveil Pokecenter" || _root.map == "Mistralton Pokecenter" || _root.map == "Icirrus Pokecenter" || _root.map == "Opelucid Pokecenter" || _root.map == "Lacunosa Pokecenter" || _root.map == "Undella Pokecenter" || _root.map == "Lentimas Pokecenter" || _root.map == "Black City Pokecenter" || _root.map == "Humilau Pokecenter" || _root.map == "Unova Victory Road Pokecenter"))
    {
        _root.mcLoader.loadClip("https://pokemon-planet.com/MapFiles/Unova Pokecenter/1.png", mapLayer1.bg);
    }
    else if (map.indexOf("Pokecenter") != -1)
    {
        _root.mcLoader.loadClip("https://pokemon-planet.com/MapFiles/Pokecenter/1.png", mapLayer1.bg);
    }
    else if (map.indexOf("Pokemart") != -1)
    {
        _root.mcLoader.loadClip("https://pokemon-planet.com/MapFiles/Pokemart/1.png", mapLayer1.bg);
    }
    else
    {
        _root.mcLoader.loadClip("https://pokemon-planet.com/MapFiles/" + map + "/1.png?v=3", mapLayer1.bg);
    } // end else if
} // End of the function
function setSurfMount()
{
    delete _root.player.mount;
    for (var _loc2 = 0; _loc2 < _root.inventory.length; ++_loc2)
    {
        if (inArray(_root.surfMounts, _root.inventory[_loc2][0]))
        {
            _root.player.mount = _root.inventory[_loc2][0];
            break;
        } // end if
    } // end of for
    if (_root.player.mount == undefined || (_root.map == "Clan Wars T1" || _root.map == "Clan Wars T2" || _root.map == "Clan Wars T3"))
    {
        _root.player.mount = "surf";
    } // end if
} // End of the function
function updateGuaranteedItemText(n)
{
    if (n == "Mystery Box")
    {
        if (guaranteedItemData[n][1] >= 30)
        {
            guaranteedItemData[n][1] = 0;
        } // end if
        confirmBox.itemT.htmlText = "<b>" + guaranteedItemData[n][1] + "/30";
    }
    else if (n == "TM Box")
    {
        if (guaranteedItemData[n][1] >= 20)
        {
            guaranteedItemData[n][1] = 0;
        } // end if
        confirmBox.itemT.htmlText = "<b>" + guaranteedItemData[n][1] + "/20";
    }
    else if (n == "Evolutional Stone Box")
    {
        if (guaranteedItemData[n][1] >= 10)
        {
            guaranteedItemData[n][1] = 0;
        } // end if
        confirmBox.itemT.htmlText = "<b>" + guaranteedItemData[n][1] + "/10";
    }
    else if (n == "Pokemon Box")
    {
        if (guaranteedItemData[n][1] >= 10)
        {
            guaranteedItemData[n][1] = 0;
        } // end if
        confirmBox.itemT.htmlText = "<b>" + guaranteedItemData[n][1] + "/10";
    } // end else if
} // End of the function
function sortStatBoosts(target)
{
    if (target == "user")
    {
        var _loc6 = -1;
        var _loc5 = 0;
        var _loc3 = _root.targetUserBattleUI;
        var _loc2 = 0;
        for (var _loc4 = 0; _loc4 < _root.statBoosts[_loc5].length; ++_loc4)
        {
            if (_root.statBoosts[_loc5][_loc4] != 0)
            {
                ++_loc2;
            } // end if
        } // end of for
    }
    else
    {
        _loc6 = 1;
        _loc5 = 1;
        _loc3 = _root.targetEnemyBattleUI;
        _loc2 = 1;
    } // end else if
    for (var _loc4 = 1; _loc4 <= 7; ++_loc4)
    {
        _loc3["sbn" + _loc4]._visible = false;
        _loc3["sb" + _loc4]._visible = false;
    } // end of for
    if (_root.statBoosts[_loc5][0] > 0)
    {
        _loc3["sbn" + _loc2].gotoAndStop(_root.statBoosts[_loc5][0]);
        _loc3["sb" + _loc2].gotoAndStop(3);
        _loc3["sbn" + _loc2]._visible = true;
        _loc3["sb" + _loc2]._visible = true;
        _loc2 = _loc2 + _loc6;
    }
    else if (_root.statBoosts[_loc5][0] < 0)
    {
        _loc3["sbn" + _loc2].gotoAndStop(_root.statBoosts[_loc5][0] * -1 + 6);
        _loc3["sb" + _loc2].gotoAndStop(10);
        _loc3["sbn" + _loc2]._visible = true;
        _loc3["sb" + _loc2]._visible = true;
        _loc2 = _loc2 + _loc6;
    }
    else
    {
        _loc3["sbn" + _loc2]._visible = false;
        _loc3["sb" + _loc2]._visible = false;
    } // end else if
    if (_root.statBoosts[_loc5][1] > 0)
    {
        _loc3["sbn" + _loc2].gotoAndStop(_root.statBoosts[_loc5][1]);
        _loc3["sb" + _loc2].gotoAndStop(4);
        _loc3["sbn" + _loc2]._visible = true;
        _loc3["sb" + _loc2]._visible = true;
        _loc2 = _loc2 + _loc6;
    }
    else if (_root.statBoosts[_loc5][1] < 0)
    {
        _loc3["sbn" + _loc2].gotoAndStop(_root.statBoosts[_loc5][1] * -1 + 6);
        _loc3["sb" + _loc2].gotoAndStop(11);
        _loc3["sbn" + _loc2]._visible = true;
        _loc3["sb" + _loc2]._visible = true;
        _loc2 = _loc2 + _loc6;
    }
    else
    {
        _loc3["sbn" + _loc2]._visible = false;
        _loc3["sb" + _loc2]._visible = false;
    } // end else if
    if (_root.statBoosts[_loc5][2] > 0)
    {
        _loc3["sbn" + _loc2].gotoAndStop(_root.statBoosts[_loc5][2]);
        _loc3["sb" + _loc2].gotoAndStop(5);
        _loc3["sbn" + _loc2]._visible = true;
        _loc3["sb" + _loc2]._visible = true;
        _loc2 = _loc2 + _loc6;
    }
    else if (_root.statBoosts[_loc5][2] < 0)
    {
        _loc3["sbn" + _loc2].gotoAndStop(_root.statBoosts[_loc5][2] * -1 + 6);
        _loc3["sb" + _loc2].gotoAndStop(12);
        _loc3["sbn" + _loc2]._visible = true;
        _loc3["sb" + _loc2]._visible = true;
        _loc2 = _loc2 + _loc6;
    }
    else
    {
        _loc3["sbn" + _loc2]._visible = false;
        _loc3["sb" + _loc2]._visible = false;
    } // end else if
    if (_root.statBoosts[_loc5][3] > 0)
    {
        _loc3["sbn" + _loc2].gotoAndStop(_root.statBoosts[_loc5][3]);
        _loc3["sb" + _loc2].gotoAndStop(6);
        _loc3["sbn" + _loc2]._visible = true;
        _loc3["sb" + _loc2]._visible = true;
        _loc2 = _loc2 + _loc6;
    }
    else if (_root.statBoosts[_loc5][3] < 0)
    {
        _loc3["sbn" + _loc2].gotoAndStop(_root.statBoosts[_loc5][3] * -1 + 6);
        _loc3["sb" + _loc2].gotoAndStop(13);
        _loc3["sbn" + _loc2]._visible = true;
        _loc3["sb" + _loc2]._visible = true;
        _loc2 = _loc2 + _loc6;
    }
    else
    {
        _loc3["sbn" + _loc2]._visible = false;
        _loc3["sb" + _loc2]._visible = false;
    } // end else if
    if (_root.statBoosts[_loc5][4] > 0)
    {
        _loc3["sbn" + _loc2].gotoAndStop(_root.statBoosts[_loc5][4]);
        _loc3["sb" + _loc2].gotoAndStop(7);
        _loc3["sbn" + _loc2]._visible = true;
        _loc3["sb" + _loc2]._visible = true;
        _loc2 = _loc2 + _loc6;
    }
    else if (_root.statBoosts[_loc5][4] < 0)
    {
        _loc3["sbn" + _loc2].gotoAndStop(_root.statBoosts[_loc5][4] * -1 + 6);
        _loc3["sb" + _loc2].gotoAndStop(14);
        _loc3["sbn" + _loc2]._visible = true;
        _loc3["sb" + _loc2]._visible = true;
        _loc2 = _loc2 + _loc6;
    }
    else
    {
        _loc3["sbn" + _loc2]._visible = false;
        _loc3["sb" + _loc2]._visible = false;
    } // end else if
    if (_root.statBoosts[_loc5][5] > 0)
    {
        _loc3["sbn" + _loc2].gotoAndStop(_root.statBoosts[_loc5][5]);
        _loc3["sb" + _loc2].gotoAndStop(1);
        _loc3["sbn" + _loc2]._visible = true;
        _loc3["sb" + _loc2]._visible = true;
        _loc2 = _loc2 + _loc6;
    }
    else if (_root.statBoosts[_loc5][5] < 0)
    {
        _loc3["sbn" + _loc2].gotoAndStop(_root.statBoosts[_loc5][5] * -1 + 6);
        _loc3["sb" + _loc2].gotoAndStop(8);
        _loc3["sbn" + _loc2]._visible = true;
        _loc3["sb" + _loc2]._visible = true;
        _loc2 = _loc2 + _loc6;
    }
    else
    {
        _loc3["sbn" + _loc2]._visible = false;
        _loc3["sb" + _loc2]._visible = false;
    } // end else if
    if (_root.statBoosts[_loc5][6] > 0)
    {
        _loc3["sbn" + _loc2].gotoAndStop(_root.statBoosts[_loc5][6]);
        _loc3["sb" + _loc2].gotoAndStop(2);
        _loc3["sbn" + _loc2]._visible = true;
        _loc3["sb" + _loc2]._visible = true;
    }
    else if (_root.statBoosts[_loc5][6] < 0)
    {
        _loc3["sbn" + _loc2].gotoAndStop(_root.statBoosts[_loc5][6] * -1 + 6);
        _loc3["sb" + _loc2].gotoAndStop(9);
        _loc3["sbn" + _loc2]._visible = true;
        _loc3["sb" + _loc2]._visible = true;
    }
    else
    {
        _loc3["sbn" + _loc2]._visible = false;
        _loc3["sb" + _loc2]._visible = false;
    } // end else if
} // End of the function
function updateUserBattleX()
{
    for (var _loc2 = 0; _loc2 < _root.userPokemon.length; ++_loc2)
    {
        if (_root.userPokemon[_loc2].currentHp <= 0)
        {
            _root.targetUserBattleUI["x" + (_loc2 + 1)]._visible = true;
            _root.targetUserBattleUI["bp" + (_loc2 + 1)].gotoAndStop(2);
        } // end if
    } // end of for
} // End of the function
function updateEnemyBattleX()
{
    if (_root.opponentAliveArray != undefined)
    {
        for (var _loc2 = 0; _loc2 < _root.opponentAliveArray.length; ++_loc2)
        {
            if (_root.opponentAliveArray[_loc2] == "0")
            {
                _root.targetEnemyBattleUI["x" + (_loc2 + 1)]._visible = true;
                _root.targetEnemyBattleUI["bp" + (_loc2 + 1)].gotoAndStop(2);
            } // end if
        } // end of for
    } // end if
} // End of the function
function setUserRollOver()
{
    _root.mainGUI.battleBackground.h2.msgT.htmlText = _root.targetUserBattleUI.userPokemonT.htmlText;
    _root.mainGUI.battleBackground.h2.t1.gotoAndStop(userPokemon[activePokemon].type);
    if (userPokemon[activePokemon].type2 != 0)
    {
        _root.mainGUI.battleBackground.h2.t2.gotoAndStop(userPokemon[activePokemon].type2);
        _root.mainGUI.battleBackground.h2.t2._visible = true;
    }
    else
    {
        _root.mainGUI.battleBackground.h2.t2._visible = false;
    } // end else if
    _root.mainGUI.battleBackground.h2.t1._x = Math.round(_root.mainGUI.battleBackground.h2.msgT.textWidth + _root.mainGUI.battleBackground.h2.t1._width / 2 + 10);
    _root.mainGUI.battleBackground.h2.t2._x = _root.mainGUI.battleBackground.h2.t1._x + 42;
    if (_root.mainGUI.battleBackground.h2.t2._visible == false)
    {
        _root.mainGUI.battleBackground.h2.bg._width = _root.mainGUI.battleBackground.h2.t1._x + 24;
    }
    else
    {
        _root.mainGUI.battleBackground.h2.bg._width = _root.mainGUI.battleBackground.h2.t2._x + 24;
    } // end else if
    _root.mainGUI.battleBackground.hb.onRollOver = function ()
    {
        var _loc2 = {x: _xmouse, y: _ymouse};
        _root.mainGUI.battleBackground.globalToLocal(_loc2);
        _root.mainGUI.battleBackground.h2._x = Math.round(_loc2.x) + 10;
        _root.mainGUI.battleBackground.h2._y = Math.round(_loc2.y) - 5;
        _root.mainGUI.battleBackground.h2.startDrag();
        _root.mainGUI.battleBackground.h2._visible = true;
    };
    _root.mainGUI.battleBackground.hb.onRollOut = function ()
    {
        _root.mainGUI.battleBackground.h2.stopDrag();
        _root.mainGUI.battleBackground.h2._visible = false;
    };
    _root.mainGUI.battleBackground.hb.onReleaseOutside = function ()
    {
        _root.mainGUI.battleBackground.h2.stopDrag();
        _root.mainGUI.battleBackground.h2._visible = false;
    };
    if (_root.bt == "d")
    {
    } // end if
} // End of the function
function fixMoveEText()
{
    _root.mainGUI.battleBackground.move1B.e = "<b>" + getEffectiveness(0);
    _root.mainGUI.battleBackground.move2B.e = "<b>" + getEffectiveness(1);
    _root.mainGUI.battleBackground.move3B.e = "<b>" + getEffectiveness(2);
    _root.mainGUI.battleBackground.move4B.e = "<b>" + getEffectiveness(3);
    _root.mainGUI.battleBackground.move1B.eT.htmlText = _root.mainGUI.battleBackground.move1B.e;
    _root.mainGUI.battleBackground.move2B.eT.htmlText = _root.mainGUI.battleBackground.move2B.e;
    _root.mainGUI.battleBackground.move3B.eT.htmlText = _root.mainGUI.battleBackground.move3B.e;
    _root.mainGUI.battleBackground.move4B.eT.htmlText = _root.mainGUI.battleBackground.move4B.e;
} // End of the function
function getEffectiveness(moveNum)
{
    if (moveName != "")
    {
        if (moveName != "Struggle")
        {
            if (moveData[userPokemon[activePokemon].moves[moveNum]][2] != "Status")
            {
                return ("x" + getDamageTypeMod(moveData[userPokemon[activePokemon].moves[moveNum]][5], wildPokemon.type, wildPokemon.type2));
            }
            else
            {
                return ("");
            } // end else if
        }
        else
        {
            return ("x1");
        } // end else if
    }
    else
    {
        return ("");
    } // end else if
} // End of the function
function getDamageTypeMod(moveType, targetPokemonType1, targetPokemonType2)
{
    var _loc4 = 1;
    var _loc3 = 1;
    switch (moveType)
    {
        case "Normal":
        {
            moveType = 1;
            break;
        } 
        case "Fighting":
        {
            moveType = 2;
            break;
        } 
        case "Flying":
        {
            moveType = 3;
            break;
        } 
        case "Poison":
        {
            moveType = 4;
            break;
        } 
        case "Ground":
        {
            moveType = 5;
            break;
        } 
        case "Rock":
        {
            moveType = 6;
            break;
        } 
        case "Bug":
        {
            moveType = 7;
            break;
        } 
        case "Ghost":
        {
            moveType = 8;
            break;
        } 
        case "Steel":
        {
            moveType = 9;
            break;
        } 
        case "Fire":
        {
            moveType = 10;
            break;
        } 
        case "Water":
        {
            moveType = 11;
            break;
        } 
        case "Grass":
        {
            moveType = 12;
            break;
        } 
        case "Electric":
        {
            moveType = 13;
            break;
        } 
        case "Psychic":
        {
            moveType = 14;
            break;
        } 
        case "Ice":
        {
            moveType = 15;
            break;
        } 
        case "Dragon":
        {
            moveType = 16;
            break;
        } 
        case "Dark":
        {
            moveType = 17;
            break;
        } 
        case "Fairy":
        {
            moveType = 18;
            break;
        } 
        default:
        {
            return ("");
            break;
        } 
    } // End of switch
    if (moveType == 1)
    {
        if (targetPokemonType1 == 1 || targetPokemonType1 == 10 || targetPokemonType1 == 11 || targetPokemonType1 == 13 || targetPokemonType1 == 12 || targetPokemonType1 == 15 || targetPokemonType1 == 2 || targetPokemonType1 == 4 || targetPokemonType1 == 5 || targetPokemonType1 == 3 || targetPokemonType1 == 14 || targetPokemonType1 == 7 || targetPokemonType1 == 16 || targetPokemonType1 == 17)
        {
            _loc4 = 1;
        } // end if
        if (targetPokemonType2 == 1 || targetPokemonType2 == 10 || targetPokemonType2 == 11 || targetPokemonType2 == 13 || targetPokemonType2 == 12 || targetPokemonType2 == 15 || targetPokemonType2 == 2 || targetPokemonType2 == 4 || targetPokemonType2 == 5 || targetPokemonType2 == 3 || targetPokemonType2 == 14 || targetPokemonType2 == 7 || targetPokemonType2 == 16 || targetPokemonType2 == 17)
        {
            _loc3 = 1;
        } // end if
        if (targetPokemonType1 == 6 || targetPokemonType1 == 9)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 6 || targetPokemonType2 == 9)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 8)
        {
            _loc4 = 0;
        } // end if
        if (targetPokemonType2 == 8)
        {
            _loc3 = 0;
        } // end if
    } // end if
    if (moveType == 10)
    {
        if (targetPokemonType1 == 1 || targetPokemonType1 == 13 || targetPokemonType1 == 2 || targetPokemonType1 == 4 || targetPokemonType1 == 5 || targetPokemonType1 == 3 || targetPokemonType1 == 14 || targetPokemonType1 == 8 || targetPokemonType1 == 17)
        {
            _loc4 = 1;
        } // end if
        if (targetPokemonType2 == 1 || targetPokemonType2 == 13 || targetPokemonType2 == 2 || targetPokemonType2 == 4 || targetPokemonType2 == 5 || targetPokemonType2 == 3 || targetPokemonType2 == 14 || targetPokemonType2 == 8 || targetPokemonType2 == 17)
        {
            _loc3 = 1;
        } // end if
        if (targetPokemonType1 == 10 || targetPokemonType1 == 6 || targetPokemonType1 == 11 || targetPokemonType1 == 16)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 10 || targetPokemonType2 == 6 || targetPokemonType2 == 11 || targetPokemonType2 == 16)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 12 || targetPokemonType1 == 15 || targetPokemonType1 == 7 || targetPokemonType1 == 9)
        {
            _loc4 = 2;
        } // end if
        if (targetPokemonType2 == 12 || targetPokemonType2 == 15 || targetPokemonType2 == 7 || targetPokemonType2 == 9)
        {
            _loc3 = 2;
        } // end if
    } // end if
    if (moveType == 11)
    {
        if (targetPokemonType1 == 1 || targetPokemonType1 == 13 || targetPokemonType1 == 15 || targetPokemonType1 == 2 || targetPokemonType1 == 4 || targetPokemonType1 == 3 || targetPokemonType1 == 14 || targetPokemonType1 == 7 || targetPokemonType1 == 8 || targetPokemonType1 == 17 || targetPokemonType1 == 9)
        {
            _loc4 = 1;
        } // end if
        if (targetPokemonType2 == 1 || targetPokemonType2 == 13 || targetPokemonType2 == 15 || targetPokemonType2 == 2 || targetPokemonType2 == 4 || targetPokemonType2 == 3 || targetPokemonType2 == 14 || targetPokemonType2 == 7 || targetPokemonType2 == 8 || targetPokemonType2 == 17 || targetPokemonType2 == 9)
        {
            _loc3 = 1;
        } // end if
        if (targetPokemonType1 == 11 || targetPokemonType1 == 12 || targetPokemonType1 == 16)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 11 || targetPokemonType2 == 12 || targetPokemonType2 == 16)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 10 || targetPokemonType1 == 5 || targetPokemonType1 == 6)
        {
            _loc4 = 2;
        } // end if
        if (targetPokemonType2 == 10 || targetPokemonType2 == 5 || targetPokemonType2 == 6)
        {
            _loc3 = 2;
        } // end if
    } // end if
    if (moveType == 13)
    {
        if (targetPokemonType1 == 1 || targetPokemonType1 == 10 || targetPokemonType1 == 15 || targetPokemonType1 == 2 || targetPokemonType1 == 4 || targetPokemonType1 == 14 || targetPokemonType1 == 7 || targetPokemonType1 == 6 || targetPokemonType1 == 8 || targetPokemonType1 == 17 || targetPokemonType1 == 9)
        {
            _loc4 = 1;
        } // end if
        if (targetPokemonType2 == 1 || targetPokemonType2 == 10 || targetPokemonType2 == 15 || targetPokemonType2 == 2 || targetPokemonType2 == 4 || targetPokemonType2 == 14 || targetPokemonType2 == 7 || targetPokemonType2 == 6 || targetPokemonType2 == 8 || targetPokemonType2 == 17 || targetPokemonType2 == 9)
        {
            _loc3 = 1;
        } // end if
        if (targetPokemonType1 == 13 || targetPokemonType1 == 12 || targetPokemonType1 == 16)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 13 || targetPokemonType2 == 12 || targetPokemonType2 == 16)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 11 || targetPokemonType1 == 3)
        {
            _loc4 = 2;
        } // end if
        if (targetPokemonType2 == 11 || targetPokemonType2 == 3)
        {
            _loc3 = 2;
        } // end if
        if (targetPokemonType1 == 5)
        {
            _loc4 = 0;
        } // end if
        if (targetPokemonType2 == 5)
        {
            _loc3 = 0;
        } // end if
    } // end if
    if (moveType == 12)
    {
        if (targetPokemonType1 == 1 || targetPokemonType1 == 13 || targetPokemonType1 == 15 || targetPokemonType1 == 2 || targetPokemonType1 == 14 || targetPokemonType1 == 8 || targetPokemonType1 == 17)
        {
            _loc4 = 1;
        } // end if
        if (targetPokemonType2 == 1 || targetPokemonType2 == 13 || targetPokemonType2 == 15 || targetPokemonType2 == 2 || targetPokemonType2 == 14 || targetPokemonType2 == 8 || targetPokemonType2 == 17)
        {
            _loc3 = 1;
        } // end if
        if (targetPokemonType1 == 10 || targetPokemonType1 == 12 || targetPokemonType1 == 4 || targetPokemonType1 == 7 || targetPokemonType1 == 3 || targetPokemonType1 == 16 || targetPokemonType1 == 9)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 10 || targetPokemonType2 == 12 || targetPokemonType2 == 4 || targetPokemonType2 == 7 || targetPokemonType2 == 3 || targetPokemonType2 == 16 || targetPokemonType2 == 9)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 11 || targetPokemonType1 == 5 || targetPokemonType1 == 6)
        {
            _loc4 = 2;
        } // end if
        if (targetPokemonType2 == 11 || targetPokemonType2 == 5 || targetPokemonType2 == 6)
        {
            _loc3 = 2;
        } // end if
    } // end if
    if (moveType == 15)
    {
        if (targetPokemonType1 == 1 || targetPokemonType1 == 13 || targetPokemonType1 == 2 || targetPokemonType1 == 4 || targetPokemonType1 == 14 || targetPokemonType1 == 7 || targetPokemonType1 == 6 || targetPokemonType1 == 8 || targetPokemonType1 == 17)
        {
            _loc4 = 1;
        } // end if
        if (targetPokemonType2 == 1 || targetPokemonType2 == 13 || targetPokemonType2 == 2 || targetPokemonType2 == 4 || targetPokemonType2 == 14 || targetPokemonType2 == 7 || targetPokemonType2 == 6 || targetPokemonType2 == 8 || targetPokemonType2 == 17)
        {
            _loc3 = 1;
        } // end if
        if (targetPokemonType1 == 10 || targetPokemonType1 == 11 || targetPokemonType1 == 15 || targetPokemonType1 == 9)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 10 || targetPokemonType2 == 11 || targetPokemonType2 == 15 || targetPokemonType2 == 9)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 12 || targetPokemonType1 == 5 || targetPokemonType1 == 3 || targetPokemonType1 == 16)
        {
            _loc4 = 2;
        } // end if
        if (targetPokemonType2 == 12 || targetPokemonType2 == 5 || targetPokemonType2 == 3 || targetPokemonType2 == 16)
        {
            _loc3 = 2;
        } // end if
    } // end if
    if (moveType == 2)
    {
        if (targetPokemonType1 == 10 || targetPokemonType1 == 11 || targetPokemonType1 == 13 || targetPokemonType1 == 12 || targetPokemonType1 == 2 || targetPokemonType1 == 5 || targetPokemonType1 == 16)
        {
            _loc4 = 1;
        } // end if
        if (targetPokemonType2 == 10 || targetPokemonType2 == 11 || targetPokemonType2 == 13 || targetPokemonType2 == 12 || targetPokemonType2 == 2 || targetPokemonType2 == 5 || targetPokemonType2 == 16)
        {
            _loc3 = 1;
        } // end if
        if (targetPokemonType1 == 4 || targetPokemonType1 == 3 || targetPokemonType1 == 14 || targetPokemonType1 == 7 || targetPokemonType1 == 18)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 4 || targetPokemonType2 == 3 || targetPokemonType2 == 14 || targetPokemonType2 == 7 || targetPokemonType2 == 18)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 1 || targetPokemonType1 == 15 || targetPokemonType1 == 6 || targetPokemonType1 == 17 || targetPokemonType1 == 9)
        {
            _loc4 = 2;
        } // end if
        if (targetPokemonType2 == 1 || targetPokemonType2 == 15 || targetPokemonType2 == 6 || targetPokemonType2 == 17 || targetPokemonType2 == 9)
        {
            _loc3 = 2;
        } // end if
        if (targetPokemonType1 == 8)
        {
            _loc4 = 0;
        } // end if
        if (targetPokemonType2 == 8)
        {
            _loc3 = 0;
        } // end if
    } // end if
    if (moveType == 4)
    {
        if (targetPokemonType1 == 1 || targetPokemonType1 == 10 || targetPokemonType1 == 11 || targetPokemonType1 == 13 || targetPokemonType1 == 15 || targetPokemonType1 == 2 || targetPokemonType1 == 3 || targetPokemonType1 == 14 || targetPokemonType1 == 7 || targetPokemonType1 == 16 || targetPokemonType1 == 17)
        {
            _loc4 = 1;
        } // end if
        if (targetPokemonType2 == 1 || targetPokemonType2 == 10 || targetPokemonType2 == 11 || targetPokemonType2 == 13 || targetPokemonType2 == 15 || targetPokemonType2 == 2 || targetPokemonType2 == 3 || targetPokemonType2 == 14 || targetPokemonType2 == 7 || targetPokemonType2 == 16 || targetPokemonType2 == 17)
        {
            _loc3 = 1;
        } // end if
        if (targetPokemonType1 == 4 || targetPokemonType1 == 5 || targetPokemonType1 == 6 || targetPokemonType1 == 8)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 4 || targetPokemonType2 == 5 || targetPokemonType2 == 6 || targetPokemonType2 == 8)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 12 || targetPokemonType1 == 18)
        {
            _loc4 = 2;
        } // end if
        if (targetPokemonType2 == 12 || targetPokemonType2 == 18)
        {
            _loc3 = 2;
        } // end if
        if (targetPokemonType1 == 9)
        {
            _loc4 = 0;
        } // end if
        if (targetPokemonType2 == 9)
        {
            _loc3 = 0;
        } // end if
    } // end if
    if (moveType == 5)
    {
        if (targetPokemonType1 == 1 || targetPokemonType1 == 11 || targetPokemonType1 == 15 || targetPokemonType1 == 2 || targetPokemonType1 == 5 || targetPokemonType1 == 14 || targetPokemonType1 == 8 || targetPokemonType1 == 16 || targetPokemonType1 == 17)
        {
            _loc4 = 1;
        } // end if
        if (targetPokemonType2 == 1 || targetPokemonType2 == 11 || targetPokemonType2 == 15 || targetPokemonType2 == 2 || targetPokemonType2 == 5 || targetPokemonType2 == 14 || targetPokemonType2 == 8 || targetPokemonType2 == 16 || targetPokemonType2 == 17)
        {
            _loc3 = 1;
        } // end if
        if (targetPokemonType1 == 12 || targetPokemonType1 == 7)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 12 || targetPokemonType2 == 7)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 10 || targetPokemonType1 == 13 || targetPokemonType1 == 4 || targetPokemonType1 == 6 || targetPokemonType1 == 9)
        {
            _loc4 = 2;
        } // end if
        if (targetPokemonType2 == 10 || targetPokemonType2 == 13 || targetPokemonType2 == 4 || targetPokemonType2 == 6 || targetPokemonType2 == 9)
        {
            _loc3 = 2;
        } // end if
        if (targetPokemonType1 == 3)
        {
            _loc4 = 0;
        } // end if
        if (targetPokemonType2 == 3)
        {
            _loc3 = 0;
        } // end if
    } // end if
    if (moveType == 3)
    {
        if (targetPokemonType1 == 1 || targetPokemonType1 == 10 || targetPokemonType1 == 11 || targetPokemonType1 == 15 || targetPokemonType1 == 4 || targetPokemonType1 == 5 || targetPokemonType1 == 3 || targetPokemonType1 == 14 || targetPokemonType1 == 8 || targetPokemonType1 == 16 || targetPokemonType1 == 17)
        {
            _loc4 = 1;
        } // end if
        if (targetPokemonType2 == 1 || targetPokemonType2 == 10 || targetPokemonType2 == 11 || targetPokemonType2 == 15 || targetPokemonType2 == 4 || targetPokemonType2 == 5 || targetPokemonType2 == 3 || targetPokemonType2 == 14 || targetPokemonType2 == 8 || targetPokemonType2 == 16 || targetPokemonType2 == 17)
        {
            _loc3 = 1;
        } // end if
        if (targetPokemonType1 == 13 || targetPokemonType1 == 6 || targetPokemonType1 == 9)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 13 || targetPokemonType2 == 6 || targetPokemonType2 == 9)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 12 || targetPokemonType1 == 2 || targetPokemonType1 == 7)
        {
            _loc4 = 2;
        } // end if
        if (targetPokemonType2 == 12 || targetPokemonType2 == 2 || targetPokemonType2 == 7)
        {
            _loc3 = 2;
        } // end if
    } // end if
    if (moveType == 14)
    {
        if (targetPokemonType1 == 1 || targetPokemonType1 == 10 || targetPokemonType1 == 11 || targetPokemonType1 == 13 || targetPokemonType1 == 12 || targetPokemonType1 == 15 || targetPokemonType1 == 5 || targetPokemonType1 == 3 || targetPokemonType1 == 7 || targetPokemonType1 == 6 || targetPokemonType1 == 8 || targetPokemonType1 == 16)
        {
            _loc4 = 1;
        } // end if
        if (targetPokemonType2 == 1 || targetPokemonType2 == 10 || targetPokemonType2 == 11 || targetPokemonType2 == 13 || targetPokemonType2 == 12 || targetPokemonType2 == 15 || targetPokemonType2 == 5 || targetPokemonType2 == 3 || targetPokemonType2 == 7 || targetPokemonType2 == 6 || targetPokemonType2 == 8 || targetPokemonType2 == 16)
        {
            _loc3 = 1;
        } // end if
        if (targetPokemonType1 == 14 || targetPokemonType1 == 9)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 14 || targetPokemonType2 == 9)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 2 || targetPokemonType1 == 4)
        {
            _loc4 = 2;
        } // end if
        if (targetPokemonType2 == 2 || targetPokemonType2 == 4)
        {
            _loc3 = 2;
        } // end if
        if (targetPokemonType1 == 17)
        {
            _loc4 = 0;
        } // end if
        if (targetPokemonType2 == 17)
        {
            _loc3 = 0;
        } // end if
    } // end if
    if (moveType == 7)
    {
        if (targetPokemonType1 == 1 || targetPokemonType1 == 11 || targetPokemonType1 == 13 || targetPokemonType1 == 15 || targetPokemonType1 == 5 || targetPokemonType1 == 6 || targetPokemonType1 == 7 || targetPokemonType1 == 16)
        {
            _loc4 = 1;
        } // end if
        if (targetPokemonType2 == 1 || targetPokemonType2 == 11 || targetPokemonType2 == 13 || targetPokemonType2 == 15 || targetPokemonType2 == 5 || targetPokemonType2 == 6 || targetPokemonType2 == 7 || targetPokemonType2 == 16)
        {
            _loc3 = 1;
        } // end if
        if (targetPokemonType1 == 10 || targetPokemonType1 == 2 || targetPokemonType1 == 4 || targetPokemonType1 == 3 || targetPokemonType1 == 8 || targetPokemonType1 == 9 || targetPokemonType1 == 18)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 10 || targetPokemonType2 == 2 || targetPokemonType2 == 4 || targetPokemonType2 == 3 || targetPokemonType2 == 8 || targetPokemonType2 == 9 || targetPokemonType2 == 18)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 12 || targetPokemonType1 == 14 || targetPokemonType1 == 17)
        {
            _loc4 = 2;
        } // end if
        if (targetPokemonType2 == 12 || targetPokemonType2 == 14 || targetPokemonType2 == 17)
        {
            _loc3 = 2;
        } // end if
    } // end if
    if (moveType == 6)
    {
        if (targetPokemonType1 == 1 || targetPokemonType1 == 11 || targetPokemonType1 == 13 || targetPokemonType1 == 12 || targetPokemonType1 == 4 || targetPokemonType1 == 14 || targetPokemonType1 == 6 || targetPokemonType1 == 16 || targetPokemonType1 == 17)
        {
            _loc4 = 1;
        } // end if
        if (targetPokemonType2 == 1 || targetPokemonType2 == 11 || targetPokemonType2 == 13 || targetPokemonType2 == 12 || targetPokemonType2 == 4 || targetPokemonType2 == 14 || targetPokemonType2 == 6 || targetPokemonType2 == 16 || targetPokemonType2 == 17)
        {
            _loc3 = 1;
        } // end if
        if (targetPokemonType1 == 2 || targetPokemonType1 == 5 || targetPokemonType1 == 9)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 2 || targetPokemonType2 == 5 || targetPokemonType2 == 9)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 10 || targetPokemonType1 == 15 || targetPokemonType1 == 3 || targetPokemonType1 == 7)
        {
            _loc4 = 2;
        } // end if
        if (targetPokemonType2 == 10 || targetPokemonType2 == 15 || targetPokemonType2 == 3 || targetPokemonType2 == 7)
        {
            _loc3 = 2;
        } // end if
    } // end if
    if (moveType == 8)
    {
        if (targetPokemonType1 == 10 || targetPokemonType1 == 11 || targetPokemonType1 == 13 || targetPokemonType1 == 12 || targetPokemonType1 == 15 || targetPokemonType1 == 2 || targetPokemonType1 == 4 || targetPokemonType1 == 5 || targetPokemonType1 == 3 || targetPokemonType1 == 7 || targetPokemonType1 == 6 || targetPokemonType1 == 16)
        {
            _loc4 = 1;
        } // end if
        if (targetPokemonType2 == 10 || targetPokemonType2 == 11 || targetPokemonType2 == 13 || targetPokemonType2 == 12 || targetPokemonType2 == 15 || targetPokemonType2 == 2 || targetPokemonType2 == 4 || targetPokemonType2 == 5 || targetPokemonType2 == 3 || targetPokemonType2 == 7 || targetPokemonType2 == 6 || targetPokemonType2 == 16)
        {
            _loc3 = 1;
        } // end if
        if (targetPokemonType1 == 17)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 17)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 14 || targetPokemonType1 == 8)
        {
            _loc4 = 2;
        } // end if
        if (targetPokemonType2 == 14 || targetPokemonType2 == 8)
        {
            _loc3 = 2;
        } // end if
        if (targetPokemonType1 == 1)
        {
            _loc4 = 0;
        } // end if
        if (targetPokemonType2 == 1)
        {
            _loc3 = 0;
        } // end if
    } // end if
    if (moveType == 16)
    {
        if (targetPokemonType1 == 1 || targetPokemonType1 == 10 || targetPokemonType1 == 11 || targetPokemonType1 == 13 || targetPokemonType1 == 12 || targetPokemonType1 == 15 || targetPokemonType1 == 2 || targetPokemonType1 == 4 || targetPokemonType1 == 5 || targetPokemonType1 == 3 || targetPokemonType1 == 14 || targetPokemonType1 == 7 || targetPokemonType1 == 6 || targetPokemonType1 == 8 || targetPokemonType1 == 17)
        {
            _loc4 = 1;
        } // end if
        if (targetPokemonType2 == 1 || targetPokemonType2 == 10 || targetPokemonType2 == 11 || targetPokemonType2 == 13 || targetPokemonType2 == 12 || targetPokemonType2 == 15 || targetPokemonType2 == 2 || targetPokemonType2 == 4 || targetPokemonType2 == 5 || targetPokemonType2 == 3 || targetPokemonType2 == 14 || targetPokemonType2 == 7 || targetPokemonType2 == 6 || targetPokemonType2 == 8 || targetPokemonType2 == 17)
        {
            _loc3 = 1;
        } // end if
        if (targetPokemonType1 == 9)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 9)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 16)
        {
            _loc4 = 2;
        } // end if
        if (targetPokemonType2 == 16)
        {
            _loc3 = 2;
        } // end if
        if (targetPokemonType1 == 18)
        {
            _loc4 = 0;
        } // end if
        if (targetPokemonType2 == 18)
        {
            _loc3 = 0;
        } // end if
    } // end if
    if (moveType == 17)
    {
        if (targetPokemonType1 == 1 || targetPokemonType1 == 10 || targetPokemonType1 == 11 || targetPokemonType1 == 13 || targetPokemonType1 == 12 || targetPokemonType1 == 15 || targetPokemonType1 == 4 || targetPokemonType1 == 5 || targetPokemonType1 == 3 || targetPokemonType1 == 7 || targetPokemonType1 == 6 || targetPokemonType1 == 16)
        {
            _loc4 = 1;
        } // end if
        if (targetPokemonType2 == 1 || targetPokemonType2 == 10 || targetPokemonType2 == 11 || targetPokemonType2 == 13 || targetPokemonType2 == 12 || targetPokemonType2 == 15 || targetPokemonType2 == 4 || targetPokemonType2 == 5 || targetPokemonType2 == 3 || targetPokemonType2 == 7 || targetPokemonType2 == 6 || targetPokemonType2 == 16)
        {
            _loc3 = 1;
        } // end if
        if (targetPokemonType1 == 2 || targetPokemonType1 == 17 || targetPokemonType1 == 18)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 2 || targetPokemonType2 == 17 || targetPokemonType2 == 18)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 14 || targetPokemonType1 == 8)
        {
            _loc4 = 2;
        } // end if
        if (targetPokemonType2 == 14 || targetPokemonType2 == 8)
        {
            _loc3 = 2;
        } // end if
    } // end if
    if (moveType == 9)
    {
        if (targetPokemonType1 == 1 || targetPokemonType1 == 12 || targetPokemonType1 == 2 || targetPokemonType1 == 4 || targetPokemonType1 == 5 || targetPokemonType1 == 3 || targetPokemonType1 == 14 || targetPokemonType1 == 5 || targetPokemonType1 == 7 || targetPokemonType1 == 8 || targetPokemonType1 == 16 || targetPokemonType1 == 8)
        {
            _loc4 = 1;
        } // end if
        if (targetPokemonType2 == 1 || targetPokemonType2 == 12 || targetPokemonType2 == 2 || targetPokemonType2 == 4 || targetPokemonType2 == 5 || targetPokemonType2 == 3 || targetPokemonType2 == 14 || targetPokemonType2 == 5 || targetPokemonType2 == 7 || targetPokemonType2 == 8 || targetPokemonType2 == 16 || targetPokemonType2 == 8)
        {
            _loc3 = 1;
        } // end if
        if (targetPokemonType1 == 10 || targetPokemonType1 == 11 || targetPokemonType1 == 13 || targetPokemonType1 == 9)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 10 || targetPokemonType2 == 11 || targetPokemonType2 == 13 || targetPokemonType2 == 9)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 15 || targetPokemonType1 == 6 || targetPokemonType1 == 18)
        {
            _loc4 = 2;
        } // end if
        if (targetPokemonType2 == 15 || targetPokemonType2 == 6 || targetPokemonType2 == 18)
        {
            _loc3 = 2;
        } // end if
    } // end if
    if (moveType == 18)
    {
        if (targetPokemonType1 == 4 || targetPokemonType1 == 9 || targetPokemonType1 == 10)
        {
            _loc4 = 0.500000;
        } // end if
        if (targetPokemonType2 == 4 || targetPokemonType2 == 9 || targetPokemonType2 == 10)
        {
            _loc3 = 0.500000;
        } // end if
        if (targetPokemonType1 == 2 || targetPokemonType1 == 16 || targetPokemonType1 == 17)
        {
            _loc4 = 2;
        } // end if
        if (targetPokemonType2 == 2 || targetPokemonType2 == 16 || targetPokemonType2 == 17)
        {
            _loc3 = 2;
        } // end if
    } // end if
    return ("" + _loc4 * _loc3);
} // End of the function
function useMount()
{
    for (var _loc2 = 0; _loc2 < _root.inventory.length; ++_loc2)
    {
        if (inArray(_root.mounts, _root.inventory[_loc2][0]))
        {
            if (moveType == "")
            {
                moveType = "bike";
                moveMapSpeed = 16 * movementSpeedMod;
                if (_root.map == "Clan Wars T1" || _root.map == "Clan Wars T2" || _root.map == "Clan Wars T3")
                {
                    _root.player.mount = "Bike";
                }
                else
                {
                    _root.player.mount = _root.inventory[_loc2][0];
                } // end else if
                if (dir == "up")
                {
                    drawPlayer(player, 6, 1);
                }
                else if (dir == "down")
                {
                    drawPlayer(player, 6, 0);
                }
                else if (dir == "left")
                {
                    drawPlayer(player, 6, 2);
                }
                else if (dir == "right")
                {
                    drawPlayer(player, 6, 3);
                } // end else if
            }
            else if (moveType == "bike")
            {
                moveType = "";
                moveMapSpeed = 8 * movementSpeedMod;
                delete _root.player.mount;
                if (dir == "up")
                {
                    drawPlayer(player, 0, 1);
                }
                else if (dir == "down")
                {
                    drawPlayer(player, 0, 0);
                }
                else if (dir == "left")
                {
                    drawPlayer(player, 0, 2);
                }
                else if (dir == "right")
                {
                    drawPlayer(player, 0, 3);
                } // end else if
            } // end else if
            getTimestamp("updateMount", _root.player.mount);
            return (true);
            break;
        } // end if
    } // end of for
    return (false);
} // End of the function
function parseMoveBank(moveBank)
{
    if (moveBank != "" && moveBank != "[]")
    {
        moveBank = replaceChar(moveBank, "-", ",");
        var _loc2 = parseArray(moveBank);
        return (_loc2);
    }
    else
    {
        return ([]);
    } // end else if
} // End of the function
function stringifyMoveBank(moveBank)
{
    if (moveBank.length > 0)
    {
        var _loc1 = "[" + moveBank + "]";
        _loc1 = replaceChar(_loc1, ",", "-");
        return (_loc1);
    }
    else
    {
        return ("[]");
    } // end else if
} // End of the function
function updateBackPokemonSprite()
{
    var _loc2 = mainGUI.battleBackground.userHp.userPokemonT;
    if (_root.bt == "d")
    {
        _loc2 = mainGUI.battleBackground.userHp2.userPokemonT;
        if (userPokemon[activePokemon2].shiny == true)
        {
            if (userPokemon[activePokemon2].form != "default" && userPokemon[activePokemon2].form != undefined && userPokemon[activePokemon2].form != "undefined")
            {
                mainGUI.battleBackground.userHp2.userPokemonT2.htmlText = "<b>[S]" + userPokemon[activePokemon2].name + " (" + upperCase(userPokemon[activePokemon2].form) + ")";
            }
            else
            {
                mainGUI.battleBackground.userHp2.userPokemonT2.htmlText = "<b>[S]" + userPokemon[activePokemon2].name;
            } // end else if
        }
        else if (userPokemon[activePokemon2].form != "default" && userPokemon[activePokemon2].form != undefined && userPokemon[activePokemon2].form != "undefined")
        {
            mainGUI.battleBackground.userHp2.userPokemonT2.htmlText = "<b>" + userPokemon[activePokemon2].name + " (" + upperCase(userPokemon[activePokemon2].form) + ")";
        }
        else
        {
            mainGUI.battleBackground.userHp2.userPokemonT2.htmlText = "<b>" + userPokemon[activePokemon2].name;
        } // end else if
        if (userPokemon[activePokemon2].shiny == true)
        {
            mainGUI.battleBackground.backPokemon2.gotoAndStop(userPokemon[activePokemon2].id + _root.shinyDifference);
        }
        else
        {
            mainGUI.battleBackground.backPokemon2.gotoAndStop(userPokemon[activePokemon2].id);
        } // end else if
        mainGUI.battleBackground.backPokemon._alpha = 100;
        if (userPokemon[activePokemon2].form != "default" && userPokemon[activePokemon2].form != undefined && userPokemon[activePokemon2].form != "undefined")
        {
            mainGUI.battleBackground.backPokemon2.i.gotoAndStop(userPokemon[activePokemon2].form);
        } // end if
    } // end if
    if (userPokemon[activePokemon].shiny == true)
    {
        if (userPokemon[activePokemon].form != "default" && userPokemon[activePokemon].form != undefined && userPokemon[activePokemon].form != "undefined")
        {
            _loc2.htmlText = "<b>[S]" + userPokemon[activePokemon].name + " (" + upperCase(userPokemon[activePokemon].form) + ")";
        }
        else
        {
            _loc2.htmlText = "<b>[S]" + userPokemon[activePokemon].name;
        } // end else if
    }
    else if (userPokemon[activePokemon].form != "default" && userPokemon[activePokemon].form != undefined && userPokemon[activePokemon].form != "undefined")
    {
        _loc2.htmlText = "<b>" + userPokemon[activePokemon].name + " (" + upperCase(userPokemon[activePokemon].form) + ")";
    }
    else
    {
        _loc2.htmlText = "<b>" + userPokemon[activePokemon].name;
    } // end else if
    if (userPokemon[activePokemon].shiny == true)
    {
        mainGUI.battleBackground.backPokemon.gotoAndStop(userPokemon[activePokemon].id + _root.shinyDifference);
    }
    else
    {
        mainGUI.battleBackground.backPokemon.gotoAndStop(userPokemon[activePokemon].id);
    } // end else if
    mainGUI.battleBackground.backPokemon._alpha = 100;
    if (userPokemon[activePokemon].form != "default" && userPokemon[activePokemon].form != undefined && userPokemon[activePokemon].form != "undefined")
    {
        mainGUI.battleBackground.backPokemon.i.gotoAndStop(userPokemon[activePokemon].form);
    }
    else
    {
        mainGUI.battleBackground.backPokemon.i.gotoAndStop(1);
    } // end else if
} // End of the function
function makeInitialPlayer(resObj)
{
    var _loc1 = resObj[loopNum + 9].split("%");
    player.hat = _loc1[0];
    player.hair = _loc1[1];
    player.wings = _loc1[2];
    player.tail = _loc1[3];
    player.eyes = _loc1[4];
    player.shirt = _loc1[5];
    player.pants = _loc1[6];
    player.body = _loc1[7];
    player.face = _loc1[8];
    player.face2 = _loc1[16];
    player.cape = _loc1[17];
    player.neck = _loc1[20];
    player.costume = _loc1[22];
    var _loc10 = _loc1[9].split("-");
    var _loc13 = _loc1[10].split("-");
    var _loc11 = _loc1[11].split("-");
    var _loc12 = _loc1[12].split("-");
    var _loc5 = _loc1[13].split("-");
    var _loc8 = _loc1[14].split("-");
    var _loc7 = _loc1[15].split("-");
    var _loc9 = _loc1[18].split("-");
    var _loc3 = _loc1[19].split("-");
    var _loc4 = _loc1[21].split("-");
    var _loc6 = _loc1[23].split("-");
    var _loc2 = [];
    _loc2 = _loc2.concat([_loc10[0] / 100, 0, 0, 0, 0]);
    _loc2 = _loc2.concat([0, _loc10[1] / 100, 0, 0, 0]);
    _loc2 = _loc2.concat([0, 0, _loc10[2] / 100, 0, 0]);
    _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
    player.hairFilter = new flash.filters.ColorMatrixFilter(_loc2);
    _loc2 = [];
    _loc2 = _loc2.concat([_loc13[0] / 100, 0, 0, 0, 0]);
    _loc2 = _loc2.concat([0, _loc13[1] / 100, 0, 0, 0]);
    _loc2 = _loc2.concat([0, 0, _loc13[2] / 100, 0, 0]);
    _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
    player.eyeFilter = new flash.filters.ColorMatrixFilter(_loc2);
    _loc2 = [];
    _loc2 = _loc2.concat([_loc11[0] / 100, 0, 0, 0, 0]);
    _loc2 = _loc2.concat([0, _loc11[1] / 100, 0, 0, 0]);
    _loc2 = _loc2.concat([0, 0, _loc11[2] / 100, 0, 0]);
    _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
    player.shirtFilter = new flash.filters.ColorMatrixFilter(_loc2);
    _loc2 = [];
    _loc2 = _loc2.concat([_loc12[0] / 100, 0, 0, 0, 0]);
    _loc2 = _loc2.concat([0, _loc12[1] / 100, 0, 0, 0]);
    _loc2 = _loc2.concat([0, 0, _loc12[2] / 100, 0, 0]);
    _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
    player.pantsFilter = new flash.filters.ColorMatrixFilter(_loc2);
    if (_loc5[0] != "undefined" && _loc5[0] != undefined)
    {
        _loc2 = [];
        _loc2 = _loc2.concat([_loc5[0] / 100, 0, 0, 0, 0]);
        _loc2 = _loc2.concat([0, _loc5[1] / 100, 0, 0, 0]);
        _loc2 = _loc2.concat([0, 0, _loc5[2] / 100, 0, 0]);
        _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
        player.hatFilter = new flash.filters.ColorMatrixFilter(_loc2);
    } // end if
    if (_loc8[0] != "undefined" && _loc8[0] != undefined)
    {
        _loc2 = [];
        _loc2 = _loc2.concat([_loc8[0] / 100, 0, 0, 0, 0]);
        _loc2 = _loc2.concat([0, _loc8[1] / 100, 0, 0, 0]);
        _loc2 = _loc2.concat([0, 0, _loc8[2] / 100, 0, 0]);
        _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
        player.wingsFilter = new flash.filters.ColorMatrixFilter(_loc2);
    } // end if
    if (_loc7[0] != "undefined" && _loc7[0] != undefined)
    {
        _loc2 = [];
        _loc2 = _loc2.concat([_loc7[0] / 100, 0, 0, 0, 0]);
        _loc2 = _loc2.concat([0, _loc7[1] / 100, 0, 0, 0]);
        _loc2 = _loc2.concat([0, 0, _loc7[2] / 100, 0, 0]);
        _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
        player.tailFilter = new flash.filters.ColorMatrixFilter(_loc2);
    } // end if
    if (_loc9[0] != "undefined" && _loc9[0] != undefined)
    {
        _loc2 = [];
        _loc2 = _loc2.concat([_loc9[0] / 100, 0, 0, 0, 0]);
        _loc2 = _loc2.concat([0, _loc9[1] / 100, 0, 0, 0]);
        _loc2 = _loc2.concat([0, 0, _loc9[2] / 100, 0, 0]);
        _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
        player.face2Filter = new flash.filters.ColorMatrixFilter(_loc2);
    } // end if
    if (_loc3[0] != "undefined" && _loc3[0] != undefined)
    {
        _loc2 = [];
        _loc2 = _loc2.concat([_loc3[0] / 100, 0, 0, 0, 0]);
        _loc2 = _loc2.concat([0, _loc3[1] / 100, 0, 0, 0]);
        _loc2 = _loc2.concat([0, 0, _loc3[2] / 100, 0, 0]);
        _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
        player.capeFilter = new flash.filters.ColorMatrixFilter(_loc2);
    } // end if
    if (_loc4[0] != "undefined" && _loc4[0] != undefined)
    {
        _loc2 = [];
        _loc2 = _loc2.concat([_loc4[0] / 100, 0, 0, 0, 0]);
        _loc2 = _loc2.concat([0, _loc4[1] / 100, 0, 0, 0]);
        _loc2 = _loc2.concat([0, 0, _loc4[2] / 100, 0, 0]);
        _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
        player.neckFilter = new flash.filters.ColorMatrixFilter(_loc2);
    } // end if
    if (_loc6[0] != "undefined" && _loc6[0] != undefined)
    {
        _loc2 = [];
        _loc2 = _loc2.concat([_loc6[0] / 100, 0, 0, 0, 0]);
        _loc2 = _loc2.concat([0, _loc6[1] / 100, 0, 0, 0]);
        _loc2 = _loc2.concat([0, 0, _loc6[2] / 100, 0, 0]);
        _loc2 = _loc2.concat([0, 0, 0, 1, 0]);
        player.costumeFilter = new flash.filters.ColorMatrixFilter(_loc2);
    } // end if
    false;
    if (wings != "")
    {
        assignEquippableState(wings);
    } // end if
    if (tail != "")
    {
        assignEquippableState(tail);
    } // end if
    if (hat != "")
    {
        assignEquippableState(hat);
    } // end if
    if (face2 != "")
    {
        assignEquippableState(face2);
    } // end if
    if (cape != "")
    {
        assignEquippableState(cape);
    } // end if
    if (neck != "")
    {
        assignEquippableState(neck);
    } // end if
    if (costume != "")
    {
        assignEquippableState(costume);
    } // end if
    drawPlayer(player, 0, 0);
} // End of the function
function sha1(msg)
{
    function rotate_left(n, s)
    {
        var _loc1 = n << s | n >>> 32 - s;
        return (_loc1);
    } // End of the function
    function lsb_hex(val)
    {
        var _loc5 = "";
        var _loc1;
        var _loc2;
        var _loc3;
        for (var _loc1 = 0; _loc1 <= 6; _loc1 = _loc1 + 2)
        {
            _loc2 = val >>> _loc1 * 4 + 4 & 15;
            _loc3 = val >>> _loc1 * 4 & 15;
            _loc5 = _loc5 + (_loc2.toString(16) + _loc3.toString(16));
        } // end of for
        return (_loc5);
    } // End of the function
    function cvt_hex(val)
    {
        var _loc3 = "";
        var _loc1;
        var _loc2;
        for (var _loc1 = 7; _loc1 >= 0; --_loc1)
        {
            _loc2 = val >>> _loc1 * 4 & 15;
            _loc3 = _loc3 + _loc2.toString(16);
        } // end of for
        return (_loc3);
    } // End of the function
    function Utf8Encode(string)
    {
        var _loc2 = "";
        for (var _loc3 = 0; _loc3 < string.length; ++_loc3)
        {
            var _loc1 = string.charCodeAt(_loc3);
            if (_loc1 < 128)
            {
                _loc2 = _loc2 + String.fromCharCode(_loc1);
                continue;
            } // end if
            if (_loc1 > 127 && _loc1 < 2048)
            {
                _loc2 = _loc2 + String.fromCharCode(_loc1 >> 6 | 192);
                _loc2 = _loc2 + String.fromCharCode(_loc1 & 63 | 128);
                continue;
            } // end if
            _loc2 = _loc2 + String.fromCharCode(_loc1 >> 12 | 224);
            _loc2 = _loc2 + String.fromCharCode(_loc1 >> 6 & 63 | 128);
            _loc2 = _loc2 + String.fromCharCode(_loc1 & 63 | 128);
        } // end of for
        return (_loc2);
    } // End of the function
    var _loc12;
    var _loc1;
    var _loc22;
    var _loc6 = new Array(80);
    var _loc18 = 1732584193;
    var _loc17 = 4023233417.000000;
    var _loc16 = 2562383102.000000;
    var _loc15 = 271733878;
    var _loc14 = 3285377520.000000;
    var _loc5;
    var _loc2;
    var _loc3;
    var _loc4;
    var _loc7;
    var _loc25;
    msg = Utf8Encode(msg);
    var _loc19 = msg.length;
    var _loc9 = new Array();
    for (var _loc1 = 0; _loc1 < _loc19 - 3; _loc1 = _loc1 + 4)
    {
        _loc22 = msg.charCodeAt(_loc1) << 24 | msg.charCodeAt(_loc1 + 1) << 16 | msg.charCodeAt(_loc1 + 2) << 8 | msg.charCodeAt(_loc1 + 3);
        _loc9.push(_loc22);
    } // end of for
    switch (_loc19 % 4)
    {
        case 0:
        {
            _loc1 = 2147483648.000000;
            break;
        } 
        case 1:
        {
            _loc1 = msg.charCodeAt(_loc19 - 1) << 24 | 8388608;
            break;
        } 
        case 2:
        {
            _loc1 = msg.charCodeAt(_loc19 - 2) << 24 | msg.charCodeAt(_loc19 - 1) << 16 | 32768;
            break;
        } 
        case 3:
        {
            _loc1 = msg.charCodeAt(_loc19 - 3) << 24 | msg.charCodeAt(_loc19 - 2) << 16 | msg.charCodeAt(_loc19 - 1) << 8 | 128;
            break;
        } 
    } // End of switch
    _loc9.push(_loc1);
    while (_loc9.length % 16 != 14)
    {
        _loc9.push(0);
    } // end while
    _loc9.push(_loc19 >>> 29);
    _loc9.push(_loc19 << 3 & 4294967295.000000);
    for (var _loc12 = 0; _loc12 < _loc9.length; _loc12 = _loc12 + 16)
    {
        for (var _loc1 = 0; _loc1 < 16; ++_loc1)
        {
            _loc6[_loc1] = _loc9[_loc12 + _loc1];
        } // end of for
        for (var _loc1 = 16; _loc1 <= 79; ++_loc1)
        {
            _loc6[_loc1] = rotate_left(_loc6[_loc1 - 3] ^ _loc6[_loc1 - 8] ^ _loc6[_loc1 - 14] ^ _loc6[_loc1 - 16], 1);
        } // end of for
        _loc5 = _loc18;
        _loc2 = _loc17;
        _loc3 = _loc16;
        _loc4 = _loc15;
        _loc7 = _loc14;
        for (var _loc1 = 0; _loc1 <= 19; ++_loc1)
        {
            _loc25 = rotate_left(_loc5, 5) + (_loc2 & _loc3 | (_loc2 ^ 4294967295.000000) & _loc4) + _loc7 + _loc6[_loc1] + 1518500249 & 4294967295.000000;
            _loc7 = _loc4;
            _loc4 = _loc3;
            _loc3 = rotate_left(_loc2, 30);
            _loc2 = _loc5;
            _loc5 = _loc25;
        } // end of for
        for (var _loc1 = 20; _loc1 <= 39; ++_loc1)
        {
            _loc25 = rotate_left(_loc5, 5) + (_loc2 ^ _loc3 ^ _loc4) + _loc7 + _loc6[_loc1] + 1859775393 & 4294967295.000000;
            _loc7 = _loc4;
            _loc4 = _loc3;
            _loc3 = rotate_left(_loc2, 30);
            _loc2 = _loc5;
            _loc5 = _loc25;
        } // end of for
        for (var _loc1 = 40; _loc1 <= 59; ++_loc1)
        {
            _loc25 = rotate_left(_loc5, 5) + (_loc2 & _loc3 | _loc2 & _loc4 | _loc3 & _loc4) + _loc7 + _loc6[_loc1] + 2400959708.000000 & 4294967295.000000;
            _loc7 = _loc4;
            _loc4 = _loc3;
            _loc3 = rotate_left(_loc2, 30);
            _loc2 = _loc5;
            _loc5 = _loc25;
        } // end of for
        for (var _loc1 = 60; _loc1 <= 79; ++_loc1)
        {
            _loc25 = rotate_left(_loc5, 5) + (_loc2 ^ _loc3 ^ _loc4) + _loc7 + _loc6[_loc1] + 3395469782.000000 & 4294967295.000000;
            _loc7 = _loc4;
            _loc4 = _loc3;
            _loc3 = rotate_left(_loc2, 30);
            _loc2 = _loc5;
            _loc5 = _loc25;
        } // end of for
        _loc18 = _loc18 + _loc5 & 4294967295.000000;
        _loc17 = _loc17 + _loc2 & 4294967295.000000;
        _loc16 = _loc16 + _loc3 & 4294967295.000000;
        _loc15 = _loc15 + _loc4 & 4294967295.000000;
        _loc14 = _loc14 + _loc7 & 4294967295.000000;
    } // end of for
    _loc25 = cvt_hex(_loc18) + cvt_hex(_loc17) + cvt_hex(_loc16) + cvt_hex(_loc15) + cvt_hex(_loc14);
    return (_loc25.toLowerCase());
} // End of the function
function removeLoginErrorText()
{
    clearInterval(_root.removeLoginErrorTextI);
    _root.removeLoginErrorTextI = setInterval(finishRemovingLoginErrorText, 5000);
} // End of the function
function finishRemovingLoginErrorText()
{
    login.errorT.text = "";
} // End of the function
function showUsageStats()
{
    if (_root.usageStats != undefined)
    {
        mainGUI.usageUI.usageT.htmlText = _root.usageStats;
    }
    else
    {
        getTimestamp("getUsageStats");
    } // end else if
} // End of the function
stop ();
var hex_chr = "0123456789abcdef";
stop ();
Stage.showMenu = false;
_root.clientVersion = "10";
var resolutionX = 1920;
var resolutionY = 1080;
var testClient = false;
var webClient = false;
if (!webClient)
{
    fscommand("trapallkeys", "true");
} // end if
var mcLoader = new MovieClipLoader();
mcLoader.addListener(this);
var keyListener = new Object();
var focusListener = new Object();
focusListener.onSetFocus = function (old, new2)
{
    if (login._x != undefined)
    {
        if (new2 == _root.login.usernameT)
        {
            login.usernameField.gotoAndStop(2);
            login.passwordField.gotoAndStop(1);
        }
        else if (new2 == _root.login.passwordT)
        {
            login.passwordField.gotoAndStop(2);
            login.usernameField.gotoAndStop(1);
        } // end else if
    }
    else if (new2 != null)
    {
        typing = true;
        mainGUI.chatBg.inputTBg._visible = false;
    }
    else
    {
        typing = false;
    } // end else if
};
Selection.addListener(focusListener);
var darkMode = false;
var darkModeMapDarkenAmount = 50;
var debugOn = false;
var port = 9339;
var zone = "PokemonPlanet";
var smartfox = new it.gotoandplay.smartfoxserver.SmartFoxClient();
smartfox.rawProtocolSeparator = "`";
smartfox.onConnection = handleConnection;
smartfox.debug = false;
if (testClient)
{
    _root.debugOn = true;
    var ip = "127.0.0.1";
    login.usernameT.text = "test" + generateRandomString(3);
    login.passwordT.text = "123";
}
else
{
    var ip = "167.114.159.20";
} // end else if
if (!webClient)
{
    smartfox.connect(ip, port);
} // end if
var loginBusy = false;
login.loginB.onRelease = function ()
{
    this.gotoAndStop(1);
    if (connected)
    {
        if (login.usernameT.text != "" && login.passwordT.text != "")
        {
            if (!loginBusy)
            {
                loginBusy = true;
                _root.username = String(login.usernameT.text);
                _root.lowercaseUsername = _root.username.toLowerCase();
                _root.hashpassword = sha1(_root.lowercaseUsername + String(login.passwordT.text));
                smartfox.login(zone, String(username), hashpassword);
            } // end if
        } // end if
    } // end if
};
login.registerB.onRelease = function ()
{
    this.gotoAndStop(1);
    getURL("https://pokemon-planet.com/", "_blank");
};
login.forgotPasswordB.onRelease = function ()
{
    getURL("https://pokemon-planet.com/forums/index.php?action=reminder", "_blank");
};
login.usernameField.gotoAndStop(2);
Selection.setFocus(login.usernameT);
login.usernameField.onRollOver = login.passwordField.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
login.usernameField.onRollOut = login.passwordField.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
assignMouseEvents(login.loginB);
assignMouseEvents(login.registerB);
if (webClient)
{
    var ip = "167.114.159.20";
    var my_lv = new LoadVars();
    my_lv.onLoad = function (success)
    {
        if (success)
        {
            _root.id = Number(this.id);
            _root.username = String(this.username);
            _root.hashpassword = String(this.hashpassword);
            _root.lowercaseUsername = _root.username.toLowerCase();
            smartfox.connect(ip, port);
        }
        else
        {
            trace ("Error loading/parsing LoadVars: " + this.id + ", " + this.username + ", " + this.hashpassword);
            error = "Error loading login info from website - please try again";
            gotoAndStop("errorconnecting");
        } // end else if
    };
    if (_root._url.indexOf("www.") == -1)
    {
        my_lv.load("https://pokemon-planet.com/getUserInfo.php");
    }
    else
    {
        my_lv.load("https://www.pokemon-planet.com/getUserInfo.php");
    } // end if
} // end else if
var connected = false;
smartfox.onJoinRoom = function (roomObj)
{
    _root.isBusy = false;
    delete loginBusy;
    removeLogin();
    getTimestamp("getStartingInfo");
};
smartfox.onRoomListUpdate = function (roomList)
{
    this.autoJoin();
};
smartfox.onConnectionLost = function ()
{
    removeLogin();
    error = "Connection Lost";
    _root.gotoAndStop("errorconnecting");
};
MovieClip.prototype.tabEnabled = Button.prototype.tabEnabled = TextField.prototype.tabEnabled = false;
ASSetPropFlags(MovieClip.prototype, ["tabEnabled"], 1);
ASSetPropFlags(Button.prototype, ["tabEnabled"], 1);
ASSetPropFlags(TextField.prototype, ["tabEnabled"], 1);
MovieClip.prototype._brightness = function (amount)
{
    var _loc4 = new Color(this);
    var _loc3 = 100 - Math.abs(amount);
    var _loc2 = 2.550000 * (amount > 0 ? (amount) : (0));
    myColorTransform = {ra: _loc3, rb: _loc2, ga: _loc3, gb: _loc2, ba: _loc3, bb: _loc2};
    _loc4.setTransform(myColorTransform);
};
var disabledPlayersMaps = ["PVP Arena", "Battle Room"];
var bDownTime = 0;
var currentMsg = 0;
var count = 0;
var activePokemon = 0;
var battleTextFrameCount = 0;
var battleTextIndex = 0;
var battleTextNumber = 1;
var storagePage = 1;
var shinyDifference = 721;
var storagePerScreen = 21;
var trainerId = 0;
var scrollBarCount = 0;
var battleAnimation = 0;
var globalAnimationStage = 0;
var globalAnimationCounter = 0;
var repelAmount = 0;
var lastMessage = 0;
var lastTradeMessage = -60000;
var stepsWalked = 0;
var lastClickX = 0;
var lastClickY = 0;
var sameClick2 = 0;
var globalChatLength = 1;
var localChatLength = 1;
var tradeChatLength = 1;
var clanChatLength = 1;
var nonEnglishChatLength = 1;
var customChatLength = 1;
var lastSaveSettings = 0;
var lastChatSaveSettings = 0;
var trainerRange = 4;
var pokemonAmount = 721;
if (webClient)
{
    var widthOffset = (Stage.width - 1024) / 2;
    var heightOffset = (Stage.height - 640) / 2;
    var newWidth = Stage.width - widthOffset * 2;
    var newHeight = Stage.height - heightOffset * 2;
}
else
{
    var widthOffset = (Stage.width - 1024) / 2;
    var heightOffset = (Stage.height - 640) / 2;
    var newWidth = Stage.width;
    var newHeight = Stage.height;
} // end else if
login.bg._width = Stage.width;
login.bg._height = Stage.height;
login._x = Math.round(Stage.width / 2);
login._y = Math.round(Stage.height / 2);
if (resolutionX == 1024)
{
    mainGUI._x = 517;
    mainGUI._y = 318.500000;
    loadingBall._x = 513;
    loadingBall._y = 270;
    loadingT._x = 223;
    loadingT._y = 353;
}
else if (resolutionX == 1600)
{
    mainGUI._x = 804;
    mainGUI._y = 448.500000;
    loadingBall._x = 800;
    loadingBall._y = 400;
    loadingT._x = 510;
    loadingT._y = 483;
}
else if (resolutionX == 1920)
{
    mainGUI._x = 964;
    mainGUI._y = 538.500000;
    loadingBall._x = 960;
    loadingBall._y = 490;
    loadingT._x = 670;
    loadingT._y = 573;
} // end else if
loadingBall._visible = true;
loadingT.text = "Communicating With Server";
var newWidth2 = newWidth / 2;
var newHeight2 = newHeight / 2;
var movesAdded = 0;
var clanWarTier = 1;
var firstLoad = 0;
var setLevel = 0;
var playerHeightOffset = 24;
var lastFollowPokemonUpdateId = 0;
var mapInstance = -1;
var selectedAchievement = 0;
var goodRequests = 0;
var badRequests = 0;
var movementPresses = 0;
var mouseClicks = 0;
var stepsSinceLastBattle = 0;
var maxClanRosterSize = 50;
var showMoveInfo = true;
var playersEnabled = true;
var particleEffectsEnabled = true;
var canReleasePokemon = true;
var init = false;
var wDown = false;
var aDown = false;
var sDown = false;
var dDown = false;
var moving = false;
var movingMapJump = false;
var movingMapUp = false;
var movingMapDown = false;
var movingMapLeft = false;
var movingMapRight = false;
var movingMapUpJump = false;
var movingMapDownJump = false;
var movingMapLeftJump = false;
var movingMapRightJump = false;
var canMove = false;
var chatBoxOpen = false;
var startAnimation = false;
var battle = false;
var battleReady = false;
var isWaiting = false;
var displayingBattleText = false;
var battleWon = false;
var battleLost = false;
var battleEnd = false;
var learnMoves = false;
var itemList = false;
var storageOpen = false;
var isBusy = false;
var isBusyEnabled = false;
var trading = false;
var evolving = false;
var guiUp = false;
var typing = false;
var canBuyItem = true;
var checkForBattle = false;
var buttonClicked = false;
var itemOnPokemon = false;
var muted = false;
var bW = false;
var trainerDataLoaded = false;
var creatingClan = false;
var continueButton = false;
var usedAnItem = false;
var canUseSlots = true;
var seamlessMaps = true;
var smallMap = false;
var fishing = false;
var mining = false;
var showPublicMessages = true;
var offsetAmount2 = 64;
var offsetAmountFollowPokemon = 64;
var moveMapSpeed = 8;
var creditShopArray = [["7 Day GM Ticket", "Gold Membership for 7 days:<br>+50% exp and money<br>+50% UC/R/VR/ER/L encounter rates<br>+20% shiny rate", 200], ["30 Day GM Ticket", "Gold Membership for 30 days:<br>+50% exp and money<br>+50% UC/R/VR/ER/L encounter rates<br>+20% shiny rate", 700], ["IV Reset", "Feeding this to a pokemon will generate new IVs.", 450], ["World Blessing", "Applies +5% experience for all players for 1 hour. If used while another World Blessing is active, an additional 5% will be added up to 100%.", 200], ["Mystery Box", "Contains a random prize. 0.1% chance for Jackpot.", 80], ["Evolutional Stone Box", "Contains a random evolutional stone.", 200], ["TM Box", "Contains a random TM.", 150], ["Pokemon Box", "1% Chance for Meloetta, otherwise contains one of the following pokemon: Eevee, Lapras, Porygon, Tyrogue, Lickitung, Togepi, Swirlix, Flabebe.", 1000], ["Appearance Reset", "Allows you to reselect your base avatar, hair, clothes, etc.", 200], ["Item Bomb", "Gives prizes to random online players. The user will always receive 1 item.", 1000], ["EV Reset", "Feeding this to a pokemon will reset all of its effort values back to 0.", 50], ["Portable PC", "You can place a Portable PC on any map, which allows you to heal pokemon and access storage for 1 hour.", 100], ["Honey", "You can spread Honey on any map, which increase the encounter rate of all pokemon (except common) by 25% for 1 hour, for all players.", 500]];
var creditShopDecorativeArray = [["Dye", "Used to change the color of any decorative item. One time use. Dyed items become untradeable.", 500], ["Dye Remover", "Used to remove the dye from a decorative item. One time use.", 100], ["Aerodactyl Wings", "Decorative Aerodactyl Wings.", 500], ["Articuno Wings", "Decorative Articuno Wings.", 500], ["Beautifly Wings", "Decorative Beautifly Wings.", 500], ["Bulbasaur Backpack", "Decorative Bulbasaur Backpack.", 500], ["Butterfree Wings", "Decorative Butterfree Wings.", 500], ["Charizard Wings", "Decorative Charizard Wings.", 500], ["Charizard X Wings", "Decorative Mega Charizard X Wings.", 500], ["Charizard Y Wings", "Decorative Mega Charizard Y Wings.", 500], ["Cofagrigus Arms", "Decorative Cofagrigus Arms.", 500], ["Crobat Wings", "Decorative Crobat Wings.", 500], ["Dragonite Wings", "Decorative Dragonite Wings.", 500], ["Flygon Wings", "Decorative Flygon Wings.", 500], ["Ho-Oh Wings", "Decorative Ho-Oh Wings.", 500], ["Honchkrow Wings", "Decorative Honchkrow Wings.", 500], ["Jetpack", "Decorative Jetpack.", 500], ["Katana", "Decorative Katana.", 500], ["Dual Katanas", "Decorative Dual Katanas.", 500], ["Latias Wings", "Decorative Latias Wings.", 500], ["Latios Wings", "Decorative Latios Wings.", 500], ["Lugia Wings", "Decorative Lugia Wings.", 500], ["Masquerain Wings", "Decorative Masquerain Wings.", 500], ["Mega Pinsir Wings", "Decorative Mega Pinsir Wings.", 500], ["Mega Sableye Backpack", "Decorative Mega Sableye Backpack.", 500], ["Moltres Wings", "Decorative Moltres Wings.", 500], ["Ninjask Wings", "Decorative Ninjask Wings.", 500], ["Pizza Cape", "Decorative Pizza Cape.", 500], ["Plasma Blade", "Decorative Plasma Blade.", 500], ["Dual Plasma Blades", "Decorative Dual Plasma Blades.", 500], ["Salamence Wings", "Decorative Salamence Wings.", 500], ["Scizor Wings", "Decorative Scizor Wings.", 500], ["Skarmory Wings", "Decorative Skarmory Wings.", 500], ["Squirtle Backpack", "Decorative Squirtle Backpack.", 500], ["Starmie Backpack", "Decorative Starmie Backpack.", 500], ["Togekiss Wings", "Decorative Togekiss Wings.", 500], ["Tropius Wings", "Decorative Tropius Wings.", 500], ["Yanma Wings", "Decorative Yanma Wings.", 500], ["Zapdos Wings", "Decorative Zapdos Wings.", 500], ["Zubat Wings", "Decorative Zubat Wings.", 500], ["Aqua Bandana", "Decorative Aqua Bandana.", 500], ["Anubis Mask", "Decorative Anubis Mask.", 500], ["Azurill Ears", "Decorative Azurill Ears.", 500], ["Backwards Cap", "Decorative Backwards Cap.", 500], ["Bandana", "Decorative Bandana.", 500], ["Bandana 2", "Decorative Bandana 2.", 500], ["Beanie", "Decorative Beanie.", 500], ["Bidoof Mask", "Decorative Bidoof Mask.", 500], ["Birthday Hat", "Decorative Birthday Hat.", 500], ["Bisharp Helmet", "Decorative Bisharp Helmet.", 500], ["Bucket Head", "Decorative Bucket Head.", 500], ["Bowtie", "Decorative Bowtie.", 500], ["Bug Catcher Hat", "Decorative Bug Catcher Hat.", 500], ["Bunny Ears", "Decorative Bunny Ears.", 500], ["Cofagrigus Mask", "Decorative Cofagrigus Mask.", 500], ["Camper Hat", "Decorative Camper Hat.", 500], ["Cap", "Decorative Cap.", 500], ["Captains Hat", "Decorative Captains Hat.", 500], ["Charizard Mask", "Decorative Charizard Mask.", 500], ["Chinchou Antennae", "Decorative Chinchou Antennae.", 500], ["Chefs Hat", "Decorative Chefs Hat.", 500], ["Clay Hat", "Decorative Clay Hat.", 500], ["Clefable Ears", "Decorative Clefable Ears.", 500], ["Clefairy Mask", "Decorative Clefairy Mask.", 500], ["Cowboy Hat", "Decorative Cowboy Hat.", 500], ["Cubone Mask", "Decorative Cubone Mask.", 500], ["Drake Hat", "Decorative Drake Hat.", 500], ["Eevee Ears", "Decorative Eevee Ears.", 500], ["Entei Mask", "Decorative Entei Mask.", 500], ["Evil Bear Mask", "Decorative Evil Bear Mask.", 500], ["Fedora", "Decorative Fedora.", 500], ["Fennekin Ears", "Decorative Fennekin Ears.", 500], ["Fisherman Hat", "Decorative Fisherman Hat.", 500], ["Foongus Hat", "Decorative Foongus Hat.", 500], ["Froakie Hat", "Decorative Froakie Hat.", 500], ["Googly Eye Glasses", "Decorative Googly Eye Glasses.", 500], ["Great Ball Head", "Decorative Great Ball Head.", 500], ["Greninja Scarf", "Decorative Greninja Scarf.", 500], ["Guy Fawkes Mask", "Decorative Guy Fawkes Mask.", 500], ["Hamburger Head", "Decorative Hamburger Head.", 500], ["Hard Hat", "Decorative Hard Hat.", 500], ["Hipster Glasses", "Decorative Hipster Glasses.", 500], ["Honchkrow Hat", "Decorative Honchkrow Hat.", 500], ["Kings Rock Crown", "Decorative Kings Rock Crown.", 500], ["Knight Helmet", "Decorative Knight Helmet.", 500], ["Lickitung Mask", "Decorative Lickitung Mask. Lick Lick!", 500], ["Litten Ears", "Decorative Litten Ears.", 500], ["Ludicolo Mask", "Decorative Ludicolo Mask.", 500], ["Lunatone Mask", "Decorative Lunatone Mask.", 500], ["Magikarp Hat", "Decorative Magikarp Hat.", 500], ["Magma Hood", "Decorative Magma Hood.", 500], ["Marshmallow Head", "Decorative Marshmallow Head.", 500], ["Master Ball Head", "Decorative Master Ball Head.", 500], ["Military Hat", "Decorative Military Hat.", 500], ["Mining Helmet", "Decorative Mining Helmet.", 500], ["Motorcycle Helmet", "Decorative Motorcycle Helmet.", 500], ["Munchlax Mask", "Decorative Munchlax Mask.", 500], ["Neko Headphones", "Decorative Neko Headphones.", 500], ["Noibat Ears", "Decorative Noibat Ears.", 500], ["Nurse Hat", "Decorative Nurse Hat.", 500], ["Ninja Mask", "Decorative Ninja Mask.", 500], ["Omanyte Beard", "Decorative Omanyte Beard.", 500], ["Omastar Mask", "Decorative Omastar Mask.", 500], ["Party Hat", "Decorative Party Hat.", 500], ["Panda Head", "Decorative Panda Head.", 500], ["Paper Bag Mask", "Decorative Paper Bag Mask.", 500], ["Pichu Ears", "Decorative Pichu Ears.", 500], ["Pig Nose", "Decorative Pig Nose.", 500], ["Pikachu Hat", "Decorative Pikachu Hat.", 500], ["Pinsir Horns", "Decorative Pinsir Horns.", 500], ["Poke Ball Head", "Decorative Poke Ball Head.", 500], ["Police Hat", "Decorative Police Hat.", 500], ["Psyduck Mask", "Decorative Psyduck Mask.", 500], ["Hair Ribbon", "Decorative Hair Ribbon.", 500], ["Hair Ribbon 2", "Decorative Hair Ribbon 2.", 500], ["Hair Ribbon 3", "Decorative Hair Ribbon 3.", 500], ["Headband", "Decorative Headband.", 500], ["Headphones", "Decorative Headphones.", 500], ["Hooded Mask", "Decorative Hooded Mask.", 500], ["Raikou Mask", "Decorative Raikou Mask.", 500], ["Rainbow Flag", "Decorative Rainbow Flag.", 500], ["Rainbow Hat", "Decorative Rainbow Hat.", 500], ["Rams Ribbon", "Decorative Rams Ribbon.", 500], ["Rems Ribbon", "Decorative Rems Ribbon.", 500], ["Sailor Hat", "Decorative Sailor Hat.", 500], ["Scizor Mask", "Decorative Scizor Mask.", 500], ["Shark Head", "Decorative Shark Head.", 500], ["Skitty Ears", "Decorative Skitty Ears.", 500], ["Slowking Crown", "Decorative Slowking Crown.", 500], ["Slowpoke Mask", "Decorative Slowpoke Mask.", 500], ["Snowboard Mask", "Decorative Snowboard Mask.", 500], ["Solrock Mask", "Decorative Solrock Mask.", 500], ["Space Helmet", "Decorative Space Helmet.", 500], ["Squirtle Glasses", "Decorative Squirtle Glasses.", 500], ["Starly Mask", "Decorative Starly Mask.", 500], ["Steampunk Cat Mask", "Decorative Steampunk Cat Mask.", 500], ["Steampunk Helmet", "Decorative Steampunk Helmet.", 500], ["Straw Hat", "Decorative Straw Hat.", 500], ["Suicune Mask", "Decorative Suicune Mask.", 500], ["Sunglasses", "Decorative Sunglasses.", 500], ["Surgical Mask", "Decorative Surgical Mask.", 500], ["Team Rocket Hat", "Decorative Team Rocket Hat.", 500], ["Teddiursa Hat", "Decorative Teddiursa Hat.", 500], ["Tiara", "Decorative Tiara.", 500], ["Tie", "Decorative Tie.", 500], ["Top Hat", "Decorative Top Hat.", 500], ["Trainer Hat", "Decorative Trainer Hat.", 500], ["Ultra Ball Head", "Decorative Ultra Ball Head.", 500], ["Umbreon Ears", "Decorative Umbreon Ears.", 500], ["Unicorn Mask", "Decorative Unicorn Mask.", 500], ["Wallace Hat", "Decorative Wallace Hat.", 500], ["White Beanie", "Decorative White Beanie.", 500], ["Wobbuffet Mask", "Decorative Wobbuffet Mask.", 500], ["Ampharos Tail", "Decorative Ampharos Tail.", 500], ["Chimchar Tail", "Decorative Chimchar Tail.", 500], ["Marill Tail", "Decorative Marill Tail.", 500], ["Mew Tail", "Decorative Mew Tail.", 500], ["Mewtwo Tail", "Decorative Mewtwo Tail.", 500], ["Pachirisu Tail", "Decorative Pachirisu Tail.", 500], ["Pikachu Tail", "Decorative Pikachu Tail.", 500], ["Umbreon Tail", "Decorative Umbreon Tail.", 500]];
var creditShopEventArray = [["Litwick", "Decorative Litwick. Sits on head. Limited edition.", 500], ["Shadow Wings", "Decorative Shadow Wings. Limited edition.", 500], ["Evil Scarecrow Head", "Decorative Evil Scarecrow Head. Limited edition.", 500], ["Darkrai Mount", "Darkrai Mount. Limited edition.", 2000], ["Honchkrow Mount", "Honchkrow Mount. Limited edition.", 2000], ["Chandelure Mount", "Chandelure Mount. Limited edition.", 2000]];
var creditShopMountArray = [["Bike (Black)", "Black Bike.", 500], ["Bike (Cyan)", "Cyan Bike.", 500], ["Bike (Green)", "Green Bike.", 500], ["Bike (Orange)", "Orange Bike.", 500], ["Bike (Pink)", "Pink Bike.", 500], ["Bike (Purple)", "Purple Bike.", 500], ["Bike (Red)", "Red Bike.", 500], ["Bike (White)", "White Bike.", 500], ["Bike (Yellow)", "Yellow Bike.", 500], ["Dirt Bike", "Dirt Bike.", 1000], ["Motorcycle", "Motorcycle.", 1000], ["Sports Bike", "Sports Bike.", 1000], ["Absol Mount", "Absol Mount.", 1000], ["Aerodactyl Mount", "Aerodactyl Mount.", 1000], ["Aggron Mount", "Aggron Mount.", 1000], ["Arcanine Mount", "Arcanine Mount.", 1000], ["Arceus Mount", "Arceus Mount.", 2000], ["Articuno Mount", "Articuno Mount.", 2000], ["Ashe Butterfree Mount", "Ashe Butterfree Mount.", 1000], ["Bidoof Mount", "Bidoof Mount.", 1000], ["Camel Mount", "Camel Mount.", 1000], ["Charizard Mount", "Charizard Mount.", 1000], ["Chansey Mount", "Chansey Mount.", 1000], ["Cobalion Mount", "Cobalion Mount.", 2000], ["Cresselia Mount", "Cresselia Mount.", 2000], ["Dialga Mount", "Dialga Mount.", 2000], ["Dodrio Mount", "Dodrio Mount.", 1000], ["Entei Mount", "Entei Mount.", 2000], ["Feraligatr Mount", "Feraligatr Mount.", 1000], ["Flygon Mount", "Flygon Mount.", 1000], ["Giratina Mount", "Giratina Mount.", 2000], ["Glaceon Mount", "Glaceon Mount.", 1000], ["Groudon Mount", "Groudon Mount.", 2000], ["Heatran Mount", "Heatran Mount.", 2000], ["Ho-oh Mount", "Ho-oh Mount.", 2000], ["Houndoom Mount", "Houndoom Mount.", 1000], ["Jolteon Mount", "Jolteon Mount.", 1000], ["Kangaskhan Mount", "Kangaskhan Mount.", 1000], ["Keldeo Mount", "Keldeo Mount.", 2000], ["Latias Mount", "Latias Mount.", 2000], ["Latios Mount", "Latios Mount.", 2000], ["Lugia Mount", "Lugia Mount.", 2000], ["Manectric Mount", "Manectric Mount.", 1000], ["Mechadoof Mount", "Mechadoof Mount.", 1000], ["Mecha Mew Mount", "Mecha Mew Mount.", 2000], ["Metagross Mount", "Metagross Mount.", 1000], ["Moltres Mount", "Moltres Mount.", 2000], ["Ninetales Mount", "Ninetales Mount.", 1000], ["Palkia Mount", "Palkia Mount.", 2000], ["Raikou Mount", "Raikou Mount.", 2000], ["Rapidash Mount", "Rapidash Mount.", 1000], ["Rayquaza Mount", "Rayquaza Mount.", 2000], ["Shadow Lugia Mount", "Shadow Lugia Mount.", 2000], ["Shaymin Mount", "Shaymin Mount.", 2000], ["Shuckle Mount", "Shuckle Mount.", 1000], ["Stantler Mount", "Stantler Mount.", 1000], ["Staraptor Mount", "Staraptor Mount.", 1000], ["Suicune Mount", "Suicune Mount.", 2000], ["Sylveon Mount", "Sylveon Mount.", 1000], ["Talonflame Mount", "Talonflame Mount.", 1000], ["Terrakion Mount", "Terrakion Mount.", 2000], ["Togekiss Mount", "Togekiss Mount.", 1000], ["Torkoal Mount", "Torkoal Mount.", 1000], ["Typhlosion Mount", "Typhlosion Mount.", 1000], ["Tyranitar Mount", "Tyranitar Mount.", 1000], ["Umbreon Mount", "Umbreon Mount.", 1000], ["Venusaur Mount", "Venusaur Mount.", 1000], ["Virizion Mount", "Virizion Mount.", 2000], ["Zapdos Mount", "Zapdos Mount.", 2000], ["Zekrom Mount", "Zekrom Mount.", 2000], ["Crawdaunt Mount", "Crawdaunt Surf Mount.", 1000], ["Kyogre Mount", "Kyogre Surf Mount.", 2000], ["Lapras Mount", "Lapras Surf Mount.", 1000], ["Manaphy Mount", "Manaphy Surf Mount.", 2000], ["Mantine Mount", "Mantine Surf Mount.", 1000], ["Milotic Mount", "Milotic Surf Mount.", 1000], ["Pelipper Mount", "Pelipper Surf Mount.", 1000], ["Shellder Mount", "Shellder Surf Mount.", 1000], ["Sharpedo Mount", "Sharpedo Surf Mount.", 1000], ["Spheal Mount", "Spheal Surf Mount.", 1000], ["Starmie Mount", "Starmie Surf Mount.", 1000], ["Snorlax Mount", "Snorlax Surf Mount.", 1000], ["Swanna Mount", "Swanna Surf Mount.", 1000], ["Tentacruel Mount", "Tentacruel Surf Mount.", 1000], ["Tirtouga Mount", "Tirtouga Surf Mount.", 1000], ["Vaporeon Mount", "Vaporeon Surf Mount.", 1000], ["Wailmer Mount", "Wailmer Surf Mount.", 1000], ["Whiscash Mount", "Whiscash Surf Mount.", 1000]];
var achievementsArray = [["Starting Your Journey", "Easy", "Receive your first pokemon from Professor Oak.", [["Backpack", 1]], 1, 0], ["Champion I", "Easy", "Defeat the Kanto Elite Four.", [["1 Day GM Ticket (untradeable)", 1]], 1, 1], ["Collector I", "Easy", "Catch 50 different kinds of pokemon.", [["EV Reset (untradeable)", 1]], 50, 2], ["Fisherman I", "Easy", "Reach Lv 10 fishing.", [["Poke Ball", 15], ["Great Ball", 10], ["Ultra Ball", 10]], 10, 3], ["Philanthropist I", "Easy", "Earn a total of 1,000 philanthropist points.", [["Poke Ball", 10], ["Great Ball", 10], ["Ultra Ball", 10]], 1000, 5], ["Catcher I", "Easy", "Catch a rare pokemon.", [["Great Ball", 10], ["Ultra Ball", 5]], 1, 6], ["Champion II", "Medium", "Defeat the Johto Elite Four.", [["3 Day GM Ticket (untradeable)", 1]], 1, 7], ["Collector II", "Medium", "Catch 200 different kinds of pokemon.", [["Mystery Box", 3]], 200, 8], ["Fisherman II", "Medium", "Reach Lv 50 fishing.", [["TM Box", 1], ["1 Day GM Ticket (untradeable)", 1]], 50, 9], ["Philanthropist II", "Medium", "Earn a total of 20,000 philanthropist points.", [["World Blessing", 1]], 20000, 11], ["Archaeologist", "Medium", "Revive a fossil pokemon.", [["1 Day GM Ticket (untradeable)", 1]], 1, 12], ["Generosity", "Medium", "Use a Blessing, Item Bomb, and top off the Legendary Altar.", [["World Blessing", 1]], 3, 13], ["Catcher II", "Medium", "Catch a very rare pokemon.", [["Great Ball", 30], ["Ultra Ball", 20]], 1, 14], ["Catcher III", "Medium", "Catch a shiny pokemon.", [["1 Day GM Ticket (untradeable)", 1]], 1, 15], ["Millionaire I", "Medium", "Earn $1,000,000 from wild or NPC battles.", [["3 Day GM Ticket (untradeable)", 1]], 1000000, 16], ["Champion III", "Hard", "Defeat the Hoenn Elite Four.", [["7 Day GM Ticket (untradeable)", 1]], 1, 17], ["Collector III", "Hard", "Catch 350 different kinds of pokemon.", [["Mossy Key", 1]], 350, 19], ["Fisherman III", "Hard", "Reach Lv 100 fishing.", [["Pokemon Box", 1], ["30 Day GM Ticket (untradeable)", 1]], 100, 20], ["Philanthropist III", "Hard", "Earn a total of 80,000 philanthropist points.", [["Pokemon Box", 1]], 80000, 22], ["Catcher IV", "Hard", "Catch an extremely rare pokemon.", [["3 Day GM Ticket (untradeable)", 1]], 1, 23], ["Millionaire II", "Hard", "Earn $10,000,000 from wild or NPC battles.", [["7 Day GM Ticket (untradeable)", 2]], 10000000, 24], ["Explorer", "Hard", "Enter the Ancient Dungeon.", [["Ability Capsule (untradeable)", 1]], 1, 25], ["Maxed Out", "Hard", "Level a pokemon to 100.", [["Evolutional Stone Box", 1], ["Mystery Box", 1]], 1, 26], ["Catcher V", "Master", "Catch a legendary pokemon.", [["IV Reset (untradeable)", 3], ["Mewtwo Mask", 1]], 1, 27], ["Millionaire III", "Master", "Earn $100,000,000 from wild or NPC battles.", [["Pokemon Box", 3], ["30 Day GM Ticket (untradeable)", 1], ["IV Reset (untradeable)", 1]], 100000000, 28], ["Pseudo", "Master", "Catch each of the following (or any of their evolutions): Dratini, Larvitar, Bagon, Beldum, Gible, Deino, and Goomy.", [["IV Reset (untradeable)", 3], ["Mew Mask", 1]], 7, 29], ["PvP Master", "Master", "Place first in a weekly tournament.", [["30 Day GM Ticket (untradeable)", 1]], 1, 30], ["Philanthropist IV", "Master", "Earn a total of 200,000 philanthropist points.", [["World Blessing", 25], ["Pokemon Box", 1], ["Item Bomb (Enhanced)", 1]], 200000, 31], ["Champion IV", "Hard", "Defeat the Sinnoh Elite Four.", [["7 Day GM Ticket (untradeable)", 2]], 1, 18], ["Miner I", "Easy", "Reach Lv 10 mining.", [["Poke Ball", 15], ["Great Ball", 10], ["Ultra Ball", 10]], 10, 4], ["Miner II", "Medium", "Reach Lv 50 mining.", [["TM Box", 1], ["1 Day GM Ticket (untradeable)", 1]], 50, 10], ["Miner III", "Hard", "Reach Lv 100 mining.", [["Pokemon Box", 1], ["30 Day GM Ticket (untradeable)", 1]], 100, 21], ["Collector IV", "Master", "Catch 500 different kinds of pokemon.", [["Castle Key", 1], ["IV Reset (untradeable)", 1]], 500, 32], ["Champion V", "Master", "Defeat the Unova Elite Four.", [["7 Day GM Ticket (untradeable)", 3], ["IV Reset (untradeable)", 1]], 1, 33]];
var newMounts = ["Latias", "Latios", "Mecha Mew", "Raikou", "Cobalion", "Entei", "Heatran", "Suicune", "Zapdos", "Staraptor", "Aerodactyl", "Ashe Butterfree", "Talonflame", "Shuckle", "Ho-oh", "Rapidash", "Camel", "Rayquaza", "Metagross", "Groudon", "Moltres", "Palkia", "Zekrom", "Articuno", "Charizard", "Dialga", "Ninetales", "Giratina", "Origin Giratina", "Mega Gengar", "Virizion", "Tyranitar", "Chansey", "Kangaskhan", "Typhlosion", "Shadow Lugia", "Sylveon", "Arceus", "Terrakion", "Feraligatr", "Kangaskhan", "Mamoswine", "Xerneas", "Aggron", "Aurorus", "Skitty", "Valentines Furret", "Mew", "Celebi", "Venusaur", "Volcarona", "Volcanion", "Jynx", "Torkoal", "Broom", "Milo", "Landorus", "Tornadus", "Pumpkaboo", "Thundurus", "Yveltal", "Beartic", "Sled", "Sleigh", "Hot Dog", "Christmas Milo", "Jolteon", "Regice", "Altaria", "Chesnaught", "Lopunny", "Mega Altaria", "Mega Venusaur", "Hydreigon", "Flance", "Chandelure", "Darkrai", "Honchkrow", "Undead Rapidash"];
var mounts = ["Bike", "Bike (Cyan)", "Bike (Black)", "Bike (Green)", "Bike (Orange)", "Bike (Pink)", "Bike (Purple)", "Bike (Red)", "Bike (White)", "Bike (Yellow)", "Motorcycle", "Dirt Bike", "Sports Bike", "Arcanine Mount", "Shiny Arcanine Mount", "Glaceon Mount", "Houndoom Mount", "Keldeo Mount", "Manectric Mount", "Shiny Glaceon Mount", "Shiny Houndoom Mount", "Shiny Keldeo Mount", "Shiny Manectric Mount", "Stantler Mount", "Shiny Stantler Mount", "Absol Mount", "Shiny Absol Mount", "Bidoof Mount", "Shiny Bidoof Mount", "Mechadoof Mount", "Dodrio Mount", "Shiny Dodrio Mount", "Shaymin Mount", "Shiny Shaymin Mount", "Umbreon Mount", "Shiny Umbreon Mount", "Cresselia Mount", "Shiny Cresselia Mount", "Flygon Mount", "Shiny Flygon Mount", "Lugia Mount", "Shiny Lugia Mount", "Reshiram Mount", "Shiny Reshiram Mount", "Togekiss Mount", "Shiny Togekiss Mount"];
var surfMounts = ["Wailmer Mount", "Kyogre Mount", "Shellder Mount", "Spheal Mount", "Crawdaunt Mount", "Lapras Mount", "Mantine Mount", "Pelipper Mount", "Sharpedo Mount", "Swanna Mount", "Tentacruel Mount", "Tirtouga Mount", "Whiscash Mount", "Shiny Wailmer Mount", "Shiny Kyogre Mount", "Shiny Shellder Mount", "Shiny Spheal Mount", "Shiny Crawdaunt Mount", "Shiny Lapras Mount", "Shiny Mantine Mount", "Shiny Pelipper Mount", "Shiny Sharpedo Mount", "Shiny Swanna Mount", "Shiny Tentacruel Mount", "Shiny Tirtouga Mount", "Shiny Whiscash Mount", "Milotic Mount", "Shiny Milotic Mount", "Starmie Mount", "Shiny Starmie Mount", "Snorlax Mount", "Shiny Snorlax Mount", "Manaphy Mount", "Shiny Manaphy Mount", "Vaporeon Mount", "Shiny Vaporeon Mount", "Froakie Mount", "Shiny Froakie Mount", "The Golden Savior Mount", "Pirate Ship Mount", "Rubber Duck Mount"];
var landMounts = [];
landMounts["Arcanine Mount"] = 1;
landMounts["Shiny Arcanine Mount"] = 1;
landMounts["Glaceon Mount"] = 1;
landMounts["Shiny Glaceon Mount"] = 1;
landMounts["Houndoom Mount"] = 1;
landMounts["Shiny Houndoom Mount"] = 1;
landMounts["Keldeo Mount"] = 1;
landMounts["Shiny Keldeo Mount"] = 1;
landMounts["Manectric Mount"] = 1;
landMounts["Shiny Manectric Mount"] = 1;
landMounts["Stantler Mount"] = 1;
landMounts["Shiny Stantler Mount"] = 1;
landMounts["Absol Mount"] = 1;
landMounts["Shiny Absol Mount"] = 1;
landMounts["Bidoof Mount"] = 1;
landMounts["Shiny Bidoof Mount"] = 1;
landMounts["Dodrio Mount"] = 1;
landMounts["Shiny Dodrio Mount"] = 1;
landMounts["Mechadoof Mount"] = 1;
landMounts["Shiny Mechadoof Mount"] = 1;
landMounts["Shaymin Mount"] = 1;
landMounts["Shiny Shaymin Mount"] = 1;
landMounts["Umbreon Mount"] = 1;
landMounts["Shiny Umbreon Mount"] = 1;
landMounts["Flygon Mount"] = 1;
landMounts["Shiny Flygon Mount"] = 1;
landMounts["Togekiss Mount"] = 1;
landMounts["Shiny Togekiss Mount"] = 1;
landMounts["Lugia Mount"] = 1;
landMounts["Shiny Lugia Mount"] = 1;
landMounts["Cresselia Mount"] = 1;
landMounts["Shiny Cresselia Mount"] = 1;
landMounts["Reshiram Mount"] = 1;
landMounts["Shiny Reshiram Mount"] = 1;
var i = 0;
while (i < newMounts.length)
{
    mounts.push(newMounts[i] + " Mount");
    landMounts[newMounts[i] + " Mount"] = 1;
    if (newMounts[i] != "Mecha Mew" && newMounts[i] != "Ashe Butterfree" && newMounts[i] != "Shadow Lugia" && newMounts[i] != "Valentines Furret" && newMounts[i] != "Broom" && newMounts[i] != "Milo" && newMounts[i] != "Sled" && newMounts[i] != "Sleigh" && newMounts[i] != "Christmas Milo" && newMounts[i] != "Hot Dog" && newMounts[i] != "Flance" && newMounts[i] != "Undead Rapidash")
    {
        mounts.push("Shiny " + newMounts[i] + " Mount");
        landMounts["Shiny " + newMounts[i] + " Mount"] = 1;
    } // end if
    ++i;
} // end while
loadBitmaps();
var walkableTiles = [0, 3, 16, 17, 19, 20, 21];
var craftingArray = [[""], [""], [""], [""], [""], [""], [""], [""], [""]];
var clientQueue = [];
var mapExits = [];
var collisionArray = [];
var textArray = [];
var activeNPCs = [];
var players = [];
var moveList = [];
var inventory = [];
var pcArray = [];
var casinoArray = [];
var storagePokemon = [];
var badges = [];
var npcArray = [];
var questData = [];
var trainerArray = [];
var trainerStartingCoords = [];
var trainerData = [];
var shopArray = [];
var shopList = [];
var currentNPC = [];
var customTiles = [];
var treeArray = [];
var soundArray = [];
var activePlayers = [];
var ppC = [];
var ppM = [];
var portablePCArray = [];
var requestArray = [];
var moveList = [[1, "Pound"], [2, "Karate Chop"], [3, "Double Slap"], [4, "Comet Punch"], [5, "Mega Punch"], [6, "Pay Day"], [7, "Fire Punch"], [8, "Ice Punch"], [9, "Thunder Punch"], [10, "Scratch"], [11, "Vice Grip"], [12, "Guillotine"], [13, "Razor Wind"], [14, "Swords Dance"], [15, "Cut"], [16, "Gust"], [17, "Wing Attack"], [18, "Whirlwind"], [19, "Fly"], [20, "Bind"], [21, "Slam"], [22, "Vine Whip"], [23, "Stomp"], [24, "Double Kick"], [25, "Mega Kick"], [26, "Jump Kick"], [27, "Rolling Kick"], [28, "Sand Attack"], [29, "Headbutt"], [30, "Horn Attack"], [31, "Fury Attack"], [32, "Horn Drill"], [33, "Tackle"], [34, "Body Slam"], [35, "Wrap"], [36, "Take Down"], [37, "Thrash"], [38, "Double-Edge"], [39, "Tail Whip"], [40, "Poison Sting"], [41, "Twineedle"], [42, "Pin Missile"], [43, "Leer"], [44, "Bite"], [45, "Growl"], [46, "Roar"], [47, "Sing"], [48, "Supersonic"], [49, "Sonic Boom"], [50, "Disable"], [51, "Acid"], [52, "Ember"], [53, "Flamethrower"], [54, "Mist"], [55, "Water Gun"], [56, "Hydro Pump"], [57, "Surf"], [58, "Ice Beam"], [59, "Blizzard"], [60, "Psybeam"], [61, "Bubble Beam"], [62, "Aurora Beam"], [63, "Hyper Beam"], [64, "Peck"], [65, "Drill Peck"], [66, "Submission"], [67, "Low Kick"], [68, "Counter"], [69, "Seismic Toss"], [70, "Strength"], [71, "Absorb"], [72, "Mega Drain"], [73, "Leech Seed"], [74, "Growth"], [75, "Razor Leaf"], [76, "Solar Beam"], [77, "Poison Powder"], [78, "Stun Spore"], [79, "Sleep Powder"], [80, "Petal Dance"], [81, "String Shot"], [82, "Dragon Rage"], [83, "Fire Spin"], [84, "Thunder Shock"], [85, "Thunderbolt"], [86, "Thunder Wave"], [87, "Thunder"], [88, "Rock Throw"], [89, "Earthquake"], [90, "Fissure"], [91, "Dig"], [92, "Toxic"], [93, "Confusion"], [94, "Psychic"], [95, "Hypnosis"], [96, "Meditate"], [97, "Agility"], [98, "Quick Attack"], [99, "Rage"], [100, "Teleport"], [101, "Night Shade"], [102, "Mimic"], [103, "Screech"], [104, "Double Team"], [105, "Recover"], [106, "Harden"], [107, "Minimize"], [108, "Smokescreen"], [109, "Confuse Ray"], [110, "Withdraw"], [111, "Defense Curl"], [112, "Barrier"], [113, "Light Screen"], [114, "Haze"], [115, "Reflect"], [116, "Focus Energy"], [117, "Bide"], [118, "Metronome"], [119, "Mirror Move"], [120, "Self-Destruct"], [121, "Egg Bomb"], [122, "Lick"], [123, "Smog"], [124, "Sludge"], [125, "Bone Club"], [126, "Fire Blast"], [127, "Waterfall"], [128, "Clamp"], [129, "Swift"], [130, "Skull Bash"], [131, "Spike Cannon"], [132, "Constrict"], [133, "Amnesia"], [134, "Kinesis"], [135, "Soft-Boiled"], [136, "High Jump Kick"], [137, "Glare"], [138, "Dream Eater"], [139, "Poison Gas"], [140, "Barrage"], [141, "Leech Life"], [142, "Lovely Kiss"], [143, "Sky Attack"], [144, "Transform"], [145, "Bubble"], [146, "Dizzy Punch"], [147, "Spore"], [148, "Flash"], [149, "Psywave"], [150, "Splash"], [151, "Acid Armor"], [152, "Crabhammer"], [153, "Explosion"], [154, "Fury Swipes"], [155, "Bonemerang"], [156, "Rest"], [157, "Rock Slide"], [158, "Hyper Fang"], [159, "Sharpen"], [160, "Conversion"], [161, "Tri Attack"], [162, "Super Fang"], [163, "Slash"], [164, "Substitute"], [165, "Struggle"], [166, "Sketch"], [167, "Triple Kick"], [168, "Thief"], [169, "Spider Web"], [170, "Mind Reader"], [171, "Nightmare"], [172, "Flame Wheel"], [173, "Snore"], [174, "Curse"], [175, "Flail"], [176, "Conversion 2"], [177, "Aeroblast"], [178, "Cotton Spore"], [179, "Reversal"], [180, "Spite"], [181, "Powder Snow"], [182, "Protect"], [183, "Mach Punch"], [184, "Scary Face"], [185, "Feint Attack"], [186, "Sweet Kiss"], [187, "Belly Drum"], [188, "Sludge Bomb"], [189, "Mud-Slap"], [190, "Octazooka"], [191, "Spikes"], [192, "Zap Cannon"], [193, "Foresight"], [194, "Destiny Bond"], [195, "Perish Song"], [196, "Icy Wind"], [197, "Detect"], [198, "Bone Rush"], [199, "Lock-On"], [200, "Outrage"], [201, "Sandstorm"], [202, "Giga Drain"], [203, "Endure"], [204, "Charm"], [205, "Rollout"], [206, "False Swipe"], [207, "Swagger"], [208, "Milk Drink"], [209, "Spark"], [210, "Fury Cutter"], [211, "Steel Wing"], [212, "Mean Look"], [213, "Attract"], [214, "Sleep Talk"], [215, "Heal Bell"], [216, "Return"], [217, "Present"], [218, "Frustration"], [219, "Safeguard"], [220, "Pain Split"], [221, "Sacred Fire"], [222, "Magnitude"], [223, "Dynamic Punch"], [224, "Megahorn"], [225, "Dragon Breath"], [226, "Baton Pass"], [227, "Encore"], [228, "Pursuit"], [229, "Rapid Spin"], [230, "Sweet Scent"], [231, "Iron Tail"], [232, "Metal Claw"], [233, "Vital Throw"], [234, "Morning Sun"], [235, "Synthesis"], [236, "Moonlight"], [237, "Hidden Power"], [238, "Cross Chop"], [239, "Twister"], [240, "Rain Dance"], [241, "Sunny Day"], [242, "Crunch"], [243, "Mirror Coat"], [244, "Psych Up"], [245, "Extreme Speed"], [246, "Ancient Power"], [247, "Shadow Ball"], [248, "Future Sight"], [249, "Rock Smash"], [250, "Whirlpool"], [251, "Beat Up"], [252, "Fake Out"], [253, "Uproar"], [254, "Stockpile"], [255, "Spit Up"], [256, "Swallow"], [257, "Heat Wave"], [258, "Hail"], [259, "Torment"], [260, "Flatter"], [261, "Will-O-Wisp"], [262, "Memento"], [263, "Facade"], [264, "Focus Punch"], [265, "Smelling Salts"], [266, "Follow Me"], [267, "Nature Power"], [268, "Charge"], [269, "Taunt"], [270, "Helping Hand"], [271, "Trick"], [272, "Role Play"], [273, "Wish"], [274, "Assist"], [275, "Ingrain"], [276, "Superpower"], [277, "Magic Coat"], [278, "Recycle"], [279, "Revenge"], [280, "Brick Break"], [281, "Yawn"], [282, "Knock Off"], [283, "Endeavor"], [284, "Eruption"], [285, "Skill Swap"], [286, "Imprison"], [287, "Refresh"], [288, "Grudge"], [289, "Snatch"], [290, "Secret Power"], [291, "Dive"], [292, "Arm Thrust"], [293, "Camouflage"], [294, "Tail Glow"], [295, "Luster Purge"], [296, "Mist Ball"], [297, "Feather Dance"], [298, "Teeter Dance"], [299, "Blaze Kick"], [300, "Mud Sport"], [301, "Ice Ball"], [302, "Needle Arm"], [303, "Slack Off"], [304, "Hyper Voice"], [305, "Poison Fang"], [306, "Crush Claw"], [307, "Blast Burn"], [308, "Hydro Cannon"], [309, "Meteor Mash"], [310, "Astonish"], [311, "Weather Ball"], [312, "Aromatherapy"], [313, "Fake Tears"], [314, "Air Cutter"], [315, "Overheat"], [316, "Odor Sleuth"], [317, "Rock Tomb"], [318, "Silver Wind"], [319, "Metal Sound"], [320, "Grass Whistle"], [321, "Tickle"], [322, "Cosmic Power"], [323, "Water Spout"], [324, "Signal Beam"], [325, "Shadow Punch"], [326, "Extrasensory"], [327, "Sky Uppercut"], [328, "Sand Tomb"], [329, "Sheer Cold"], [330, "Muddy Water"], [331, "Bullet Seed"], [332, "Aerial Ace"], [333, "Icicle Spear"], [334, "Iron Defense"], [335, "Block"], [336, "Howl"], [337, "Dragon Claw"], [338, "Frenzy Plant"], [339, "Bulk Up"], [340, "Bounce"], [341, "Mud Shot"], [342, "Poison Tail"], [343, "Covet"], [344, "Volt Tackle"], [345, "Magical Leaf"], [346, "Water Sport"], [347, "Calm Mind"], [348, "Leaf Blade"], [349, "Dragon Dance"], [350, "Rock Blast"], [351, "Shock Wave"], [352, "Water Pulse"], [353, "Doom Desire"], [354, "Psycho Boost"], [355, "Roost"], [356, "Gravity"], [357, "Miracle Eye"], [358, "Wake-Up Slap"], [359, "Hammer Arm"], [360, "Gyro Ball"], [361, "Healing Wish"], [362, "Brine"], [363, "Natural Gift"], [364, "Feint"], [365, "Pluck"], [366, "Tailwind"], [367, "Acupressure"], [368, "Metal Burst"], [369, "U-turn"], [370, "Close Combat"], [371, "Payback"], [372, "Assurance"], [373, "Embargo"], [374, "Fling"], [375, "Psycho Shift"], [376, "Trump Card"], [377, "Heal Block"], [378, "Wring Out"], [379, "Power Trick"], [380, "Gastro Acid"], [381, "Lucky Chant"], [382, "Me First"], [383, "Copycat"], [384, "Power Swap"], [385, "Guard Swap"], [386, "Punishment"], [387, "Last Resort"], [388, "Worry Seed"], [389, "Sucker Punch"], [390, "Toxic Spikes"], [391, "Heart Swap"], [392, "Aqua Ring"], [393, "Magnet Rise"], [394, "Flare Blitz"], [395, "Force Palm"], [396, "Aura Sphere"], [397, "Rock Polish"], [398, "Poison Jab"], [399, "Dark Pulse"], [400, "Night Slash"], [401, "Aqua Tail"], [402, "Seed Bomb"], [403, "Air Slash"], [404, "X-Scissor"], [405, "Bug Buzz"], [406, "Dragon Pulse"], [407, "Dragon Rush"], [408, "Power Gem"], [409, "Drain Punch"], [410, "Vacuum Wave"], [411, "Focus Blast"], [412, "Energy Ball"], [413, "Brave Bird"], [414, "Earth Power"], [415, "Switcheroo"], [416, "Giga Impact"], [417, "Nasty Plot"], [418, "Bullet Punch"], [419, "Avalanche"], [420, "Ice Shard"], [421, "Shadow Claw"], [422, "Thunder Fang"], [423, "Ice Fang"], [424, "Fire Fang"], [425, "Shadow Sneak"], [426, "Mud Bomb"], [427, "Psycho Cut"], [428, "Zen Headbutt"], [429, "Mirror Shot"], [430, "Flash Cannon"], [431, "Rock Climb"], [432, "Defog"], [433, "Trick Room"], [434, "Draco Meteor"], [435, "Discharge"], [436, "Lava Plume"], [437, "Leaf Storm"], [438, "Power Whip"], [439, "Rock Wrecker"], [440, "Cross Poison"], [441, "Gunk Shot"], [442, "Iron Head"], [443, "Magnet Bomb"], [444, "Stone Edge"], [445, "Captivate"], [446, "Stealth Rock"], [447, "Grass Knot"], [448, "Chatter"], [449, "Judgment"], [450, "Bug Bite"], [451, "Charge Beam"], [452, "Wood Hammer"], [453, "Aqua Jet"], [454, "Attack Order"], [455, "Defend Order"], [456, "Heal Order"], [457, "Head Smash"], [458, "Double Hit"], [459, "Roar of Time"], [460, "Spacial Rend"], [461, "Lunar Dance"], [462, "Crush Grip"], [463, "Magma Storm"], [464, "Dark Void"], [465, "Seed Flare"], [466, "Ominous Wind"], [467, "Shadow Force"], [468, "Hone Claws"], [469, "Wide Guard"], [470, "Guard Split"], [471, "Power Split"], [472, "Wonder Room"], [473, "Psyshock"], [474, "Venoshock"], [475, "Autotomize"], [476, "Rage Powder"], [477, "Telekinesis"], [478, "Magic Room"], [479, "Smack Down"], [480, "Storm Throw"], [481, "Flame Burst"], [482, "Sludge Wave"], [483, "Quiver Dance"], [484, "Heavy Slam"], [485, "Synchronoise"], [486, "Electro Ball"], [487, "Soak"], [488, "Flame Charge"], [489, "Coil"], [490, "Low Sweep"], [491, "Acid Spray"], [492, "Foul Play"], [493, "Simple Beam"], [494, "Entrainment"], [495, "After You"], [496, "Round"], [497, "Echoed Voice"], [498, "Chip Away"], [499, "Clear Smog"], [500, "Stored Power"], [501, "Quick Guard"], [502, "Ally Switch"], [503, "Scald"], [504, "Shell Smash"], [505, "Heal Pulse"], [506, "Hex"], [507, "Sky Drop"], [508, "Shift Gear"], [509, "Circle Throw"], [510, "Incinerate"], [511, "Quash"], [512, "Acrobatics"], [513, "Reflect Type"], [514, "Retaliate"], [515, "Final Gambit"], [516, "Bestow"], [517, "Inferno"], [518, "Water Pledge"], [519, "Fire Pledge"], [520, "Grass Pledge"], [521, "Volt Switch"], [522, "Struggle Bug"], [523, "Bulldoze"], [524, "Frost Breath"], [525, "Dragon Tail"], [526, "Work Up"], [527, "Electroweb"], [528, "Wild Charge"], [529, "Drill Run"], [530, "Dual Chop"], [531, "Heart Stamp"], [532, "Horn Leech"], [533, "Sacred Sword"], [534, "Razor Shell"], [535, "Heat Crash"], [536, "Leaf Tornado"], [537, "Steamroller"], [538, "Cotton Guard"], [539, "Night Daze"], [540, "Psystrike"], [541, "Tail Slap"], [542, "Hurricane"], [543, "Head Charge"], [544, "Gear Grind"], [545, "Searing Shot"], [546, "Techno Blast"], [547, "Relic Song"], [548, "Secret Sword"], [549, "Glaciate"], [550, "Bolt Strike"], [551, "Blue Flare"], [552, "Fiery Dance"], [553, "Freeze Shock"], [554, "Ice Burn"], [555, "Snarl"], [556, "Icicle Crash"], [557, "V-create"], [558, "Fusion Flare"], [559, "Fusion Bolt"], [560, "Flying Press"], [561, "Mat Block"], [562, "Belch"], [563, "Rototiller"], [564, "Sticky Web"], [565, "Fell Stinger"], [566, "Phantom Force"], [567, "Trick-or-Treat"], [568, "Noble Roar"], [569, "Ion Deluge"], [570, "Parabolic Charge"], [571, "Forest\'s Curse"], [572, "Petal Blizzard"], [573, "Freeze-Dry"], [574, "Disarming Voice"], [575, "Parting Shot"], [576, "Topsy-Turvy"], [577, "Draining Kiss"], [578, "Crafty Shield"], [579, "Flower Shield"], [580, "Grassy Terrain"], [581, "Misty Terrain"], [582, "Electrify"], [583, "Play Rough"], [584, "Fairy Wind"], [585, "Moonblast"], [586, "Boomburst"], [587, "Fairy Lock"], [588, "King\'s Shield"], [589, "Play Nice"], [590, "Confide"], [591, "Diamond Storm"], [592, "Steam Eruption"], [593, "Hyperspace Hole"], [594, "Water Shuriken"], [595, "Mystical Fire"], [596, "Spiky Shield"], [597, "Aromatic Mist"], [598, "Eerie Impulse"], [599, "Venom Drench"], [600, "Powder"], [601, "Geomancy"], [602, "Magnetic Flux"], [603, "Happy Hour"], [604, "Electric Terrain"], [605, "Dazzling Gleam"], [606, "Celebrate"], [0, ""], [608, "Baby-Doll Eyes"], [609, "Nuzzle"], [610, "Hold Back"], [611, "Infestation"], [612, "Power-Up Punch"], [613, "Oblivion Wing"], [614, "Thousand Arrows"], [615, "Thousand Waves"], [616, "Land\'s Wrath"], [617, "Light of Ruin"], [618, "Origin Pulse"], [619, "Precipice Blades"], [620, "Dragon Ascent"], [621, "Hyperspace Fury"], [622, "Breakneck Blitz"], [0, ""], [624, "All-Out Pummeling"], [0, ""], [626, "Supersonic Skystrike"], [0, ""], [628, "Acid Downpour"], [0, ""], [630, "Tectonic Rage"], [0, ""], [632, "Continental Crush"], [0, ""], [634, "Savage Spin-Out"], [0, ""], [636, "Never-Ending Nightmare"], [0, ""], [638, "Corkscrew Crash"], [0, ""], [640, "Inferno Overdrive"], [0, ""], [642, "Hydro Vortex"], [0, ""], [644, "Bloom Doom"], [0, ""], [646, "Gigavolt Havoc"], [0, ""], [648, "Shattered Psyche"], [0, ""], [650, "Subzero Slammer"], [0, ""], [652, "Devastating Drake"], [0, ""], [654, "Black Hole Eclipse"], [0, ""], [656, "Twinkle Tackle"], [0, ""], [658, "Catastropika"], [659, "Shore Up"], [660, "First Impression"], [661, "Baneful Bunker"], [662, "Spirit Shackle"], [663, "Darkest Lariat"], [664, "Sparkling Aria"], [665, "Ice Hammer"], [666, "Floral Healing"], [667, "High Horsepower"], [668, "Strength Sap"], [669, "Solar Blade"], [670, "Leafage"], [671, "Spotlight"], [672, "Toxic Thread"], [673, "Laser Focus"], [674, "Gear Up"], [675, "Throat Chop"], [676, "Pollen Puff"], [677, "Anchor Shot"], [678, "Psychic Terrain"], [679, "Lunge"], [680, "Fire Lash"], [681, "Power Trip"], [682, "Burn Up"], [683, "Speed Swap"], [684, "Smart Strike"], [685, "Purify"], [686, "Revelation Dance"], [687, "Core Enforcer"], [688, "Trop Kick"], [689, "Instruct"], [690, "Beak Blast"], [691, "Clanging Scales"], [692, "Dragon Hammer"], [693, "Brutal Swing"], [694, "Aurora Veil"], [695, "Sinister Arrow Raid"], [696, "Malicious Moonsault"], [697, "Oceanic Operetta"], [698, "Guardian of Alola"], [699, "Soul-Stealing 7-Star Strike"], [700, "Stoked Sparksurfer"], [701, "Pulverizing Pancake"], [702, "Extreme Evoboost"], [703, "Genesis Supernova"], [704, "Shell Trap"], [705, "Fleur Cannon"], [706, "Psychic Fangs"], [707, "Stomping Tantrum"], [708, "Shadow Bone"], [709, "Accelerock"], [710, "Liquidation"], [711, "Prismatic Laser"], [712, "Spectral Thief"], [713, "Sunsteel Strike"], [714, "Moongeist Beam"], [715, "Tearful Look"], [716, "Zing Zap"], [717, "Nature\'s Madness"], [718, "Multi-Attack"]];
var untradeableItems = ["Wizard Hat", "Yveltal Egg", "Giratina Egg", "Articuno Egg", "Zapdos Egg", "Moltres Egg", "Raikou Egg", "Entei Egg", "Suicune Egg", "Latias Egg", "Latios Egg", "Azelf Egg", "Mesprit Egg", "Uxie Egg", "Cresselia Egg", "Heatran Egg", "Regigigas Egg", "Mew Egg", "Darkrai Egg", "Shaymin Egg", "Power Ticket", "Tower Token", "Gold Cape", "Castle Key", "Lunar Ticket", "Elite Token", "Master Pickaxe", "Crown", "Eon Ticket", "Master Cape", "HM - Defog", "Ability Capsule (untradeable)", "IV Reset (untradeable)", "Mossy Key", "30 Day GM Ticket (untradeable)", "7 Day GM Ticket (untradeable)", "3 Day GM Ticket (untradeable)", "EV Reset (untradeable)", "Poke Ball (untradeable)", "Great Ball (untradeable)", "Ultra Ball (untradeable)", "1 Day GM Ticket (untradeable)", "Mewtwo Mask", "Mew Mask", "Backpack", "Master Shop Ticket", "PvP Token", "Master Rod", "Master Ball", "Appearance Reset (untradeable)", "Ancient Key", "Altering Cave Scroll", "Pokedex", "Map", "Choice Specs", "Choice Scarf", "Choice Band", "Ancient Key (Loop Half)", "Ancient Key (Tooth Half)", "Clan War Token", "Angel Wings", "Halo", "HM - Dive", "HM - Waterfall", "Squirtbottle", "Lift Key", "Silph Scope", "Secret Key", "SS Anne Ticket", "HM01 - Cut", "HM05 - Flash", "HM02 - Fly", "HM03 - Surf", "Poke Flute", "Christmas Present", "Christmas Present 2020", "Christmas Coin", "Scythe", "Tornadus Mount", "Landorus Mount", "Thundurus Mount", "Shiny Tornadus Mount", "Shiny Landorus Mount", "Shiny Thundurus Mount", "Candy Canes", "Beautiful Christmas Present", "Chikorita Leaf", "Rubber Duck Mount"];
var untradeablePokemon = ["Bulbasaur", "Ivysaur", "Venusaur", "Charmander", "Charmeleon", "Charizard", "Squirtle", "Wartortle", "Blastoise"];
var pokemonDB = [[1, "bulbasaur"], [2, "ivysaur"], [3, "venusaur"], [4, "charmander"], [5, "charmeleon"], [6, "charizard"], [7, "squirtle"], [8, "wartortle"], [9, "blastoise"], [10, "caterpie"], [11, "metapod"], [12, "butterfree"], [13, "weedle"], [14, "kakuna"], [15, "beedrill"], [16, "pidgey"], [17, "pidgeotto"], [18, "pidgeot"], [19, "rattata"], [20, "raticate"], [21, "spearow"], [22, "fearow"], [23, "ekans"], [24, "arbok"], [25, "pikachu"], [26, "raichu"], [27, "sandshrew"], [28, "sandslash"], [29, "nidoran-f"], [30, "nidorina"], [31, "nidoqueen"], [32, "nidoran-m"], [33, "nidorino"], [34, "nidoking"], [35, "clefairy"], [36, "clefable"], [37, "vulpix"], [38, "ninetales"], [39, "jigglypuff"], [40, "wigglytuff"], [41, "zubat"], [42, "golbat"], [43, "oddish"], [44, "gloom"], [45, "vileplume"], [46, "paras"], [47, "parasect"], [48, "venonat"], [49, "venomoth"], [50, "diglett"], [51, "dugtrio"], [52, "meowth"], [53, "persian"], [54, "psyduck"], [55, "golduck"], [56, "mankey"], [57, "primeape"], [58, "growlithe"], [59, "arcanine"], [60, "poliwag"], [61, "poliwhirl"], [62, "poliwrath"], [63, "abra"], [64, "kadabra"], [65, "alakazam"], [66, "machop"], [67, "machoke"], [68, "machamp"], [69, "bellsprout"], [70, "weepinbell"], [71, "victreebel"], [72, "tentacool"], [73, "tentacruel"], [74, "geodude"], [75, "graveler"], [76, "golem"], [77, "ponyta"], [78, "rapidash"], [79, "slowpoke"], [80, "slowbro"], [81, "magnemite"], [82, "magneton"], [83, "farfetchd"], [84, "doduo"], [85, "dodrio"], [86, "seel"], [87, "dewgong"], [88, "grimer"], [89, "muk"], [90, "shellder"], [91, "cloyster"], [92, "gastly"], [93, "haunter"], [94, "gengar"], [95, "onix"], [96, "drowzee"], [97, "hypno"], [98, "krabby"], [99, "kingler"], [100, "voltorb"], [101, "electrode"], [102, "exeggcute"], [103, "exeggutor"], [104, "cubone"], [105, "marowak"], [106, "hitmonlee"], [107, "hitmonchan"], [108, "lickitung"], [109, "koffing"], [110, "weezing"], [111, "rhyhorn"], [112, "rhydon"], [113, "chansey"], [114, "tangela"], [115, "kangaskhan"], [116, "horsea"], [117, "seadra"], [118, "goldeen"], [119, "seaking"], [120, "staryu"], [121, "starmie"], [122, "mr-mime"], [123, "scyther"], [124, "jynx"], [125, "electabuzz"], [126, "magmar"], [127, "pinsir"], [128, "tauros"], [129, "magikarp"], [130, "gyarados"], [131, "lapras"], [132, "ditto"], [133, "eevee"], [134, "vaporeon"], [135, "jolteon"], [136, "flareon"], [137, "porygon"], [138, "omanyte"], [139, "omastar"], [140, "kabuto"], [141, "kabutops"], [142, "aerodactyl"], [143, "snorlax"], [144, "articuno"], [145, "zapdos"], [146, "moltres"], [147, "dratini"], [148, "dragonair"], [149, "dragonite"], [150, "mewtwo"], [151, "mew"], [152, "chikorita"], [153, "bayleef"], [154, "meganium"], [155, "cyndaquil"], [156, "quilava"], [157, "typhlosion"], [158, "totodile"], [159, "croconaw"], [160, "feraligatr"], [161, "sentret"], [162, "furret"], [163, "hoothoot"], [164, "noctowl"], [165, "ledyba"], [166, "ledian"], [167, "spinarak"], [168, "ariados"], [169, "crobat"], [170, "chinchou"], [171, "lanturn"], [172, "pichu"], [173, "cleffa"], [174, "igglybuff"], [175, "togepi"], [176, "togetic"], [177, "natu"], [178, "xatu"], [179, "mareep"], [180, "flaaffy"], [181, "ampharos"], [182, "bellossom"], [183, "marill"], [184, "azumarill"], [185, "sudowoodo"], [186, "politoed"], [187, "hoppip"], [188, "skiploom"], [189, "jumpluff"], [190, "aipom"], [191, "sunkern"], [192, "sunflora"], [193, "yanma"], [194, "wooper"], [195, "quagsire"], [196, "espeon"], [197, "umbreon"], [198, "murkrow"], [199, "slowking"], [200, "misdreavus"], [201, "unown"], [202, "wobbuffet"], [203, "girafarig"], [204, "pineco"], [205, "forretress"], [206, "dunsparce"], [207, "gligar"], [208, "steelix"], [209, "snubbull"], [210, "granbull"], [211, "qwilfish"], [212, "scizor"], [213, "shuckle"], [214, "heracross"], [215, "sneasel"], [216, "teddiursa"], [217, "ursaring"], [218, "slugma"], [219, "magcargo"], [220, "swinub"], [221, "piloswine"], [222, "corsola"], [223, "remoraid"], [224, "octillery"], [225, "delibird"], [226, "mantine"], [227, "skarmory"], [228, "houndour"], [229, "houndoom"], [230, "kingdra"], [231, "phanpy"], [232, "donphan"], [233, "porygon2"], [234, "stantler"], [235, "smeargle"], [236, "tyrogue"], [237, "hitmontop"], [238, "smoochum"], [239, "elekid"], [240, "magby"], [241, "miltank"], [242, "blissey"], [243, "raikou"], [244, "entei"], [245, "suicune"], [246, "larvitar"], [247, "pupitar"], [248, "tyranitar"], [249, "lugia"], [250, "ho-oh"], [251, "celebi"], [252, "treecko"], [253, "grovyle"], [254, "sceptile"], [255, "torchic"], [256, "combusken"], [257, "blaziken"], [258, "mudkip"], [259, "marshtomp"], [260, "swampert"], [261, "poochyena"], [262, "mightyena"], [263, "zigzagoon"], [264, "linoone"], [265, "wurmple"], [266, "silcoon"], [267, "beautifly"], [268, "cascoon"], [269, "dustox"], [270, "lotad"], [271, "lombre"], [272, "ludicolo"], [273, "seedot"], [274, "nuzleaf"], [275, "shiftry"], [276, "taillow"], [277, "swellow"], [278, "wingull"], [279, "pelipper"], [280, "ralts"], [281, "kirlia"], [282, "gardevoir"], [283, "surskit"], [284, "masquerain"], [285, "shroomish"], [286, "breloom"], [287, "slakoth"], [288, "vigoroth"], [289, "slaking"], [290, "nincada"], [291, "ninjask"], [292, "shedinja"], [293, "whismur"], [294, "loudred"], [295, "exploud"], [296, "makuhita"], [297, "hariyama"], [298, "azurill"], [299, "nosepass"], [300, "skitty"], [301, "delcatty"], [302, "sableye"], [303, "mawile"], [304, "aron"], [305, "lairon"], [306, "aggron"], [307, "meditite"], [308, "medicham"], [309, "electrike"], [310, "manectric"], [311, "plusle"], [312, "minun"], [313, "volbeat"], [314, "illumise"], [315, "roselia"], [316, "gulpin"], [317, "swalot"], [318, "carvanha"], [319, "sharpedo"], [320, "wailmer"], [321, "wailord"], [322, "numel"], [323, "camerupt"], [324, "torkoal"], [325, "spoink"], [326, "grumpig"], [327, "spinda"], [328, "trapinch"], [329, "vibrava"], [330, "flygon"], [331, "cacnea"], [332, "cacturne"], [333, "swablu"], [334, "altaria"], [335, "zangoose"], [336, "seviper"], [337, "lunatone"], [338, "solrock"], [339, "barboach"], [340, "whiscash"], [341, "corphish"], [342, "crawdaunt"], [343, "baltoy"], [344, "claydol"], [345, "lileep"], [346, "cradily"], [347, "anorith"], [348, "armaldo"], [349, "feebas"], [350, "milotic"], [351, "castform"], [352, "kecleon"], [353, "shuppet"], [354, "banette"], [355, "duskull"], [356, "dusclops"], [357, "tropius"], [358, "chimecho"], [359, "absol"], [360, "wynaut"], [361, "snorunt"], [362, "glalie"], [363, "spheal"], [364, "sealeo"], [365, "walrein"], [366, "clamperl"], [367, "huntail"], [368, "gorebyss"], [369, "relicanth"], [370, "luvdisc"], [371, "bagon"], [372, "shelgon"], [373, "salamence"], [374, "beldum"], [375, "metang"], [376, "metagross"], [377, "regirock"], [378, "regice"], [379, "registeel"], [380, "latias"], [381, "latios"], [382, "kyogre"], [383, "groudon"], [384, "rayquaza"], [385, "jirachi"], [386, "deoxys"], [387, "turtwig"], [388, "grotle"], [389, "torterra"], [390, "chimchar"], [391, "monferno"], [392, "infernape"], [393, "piplup"], [394, "prinplup"], [395, "empoleon"], [396, "starly"], [397, "staravia"], [398, "staraptor"], [399, "bidoof"], [400, "bibarel"], [401, "kricketot"], [402, "kricketune"], [403, "shinx"], [404, "luxio"], [405, "luxray"], [406, "budew"], [407, "roserade"], [408, "cranidos"], [409, "rampardos"], [410, "shieldon"], [411, "bastiodon"], [412, "burmy"], [413, "wormadam-plant"], [414, "mothim"], [415, "combee"], [416, "vespiquen"], [417, "pachirisu"], [418, "buizel"], [419, "floatzel"], [420, "cherubi"], [421, "cherrim"], [422, "shellos"], [423, "gastrodon"], [424, "ambipom"], [425, "drifloon"], [426, "drifblim"], [427, "buneary"], [428, "lopunny"], [429, "mismagius"], [430, "honchkrow"], [431, "glameow"], [432, "purugly"], [433, "chingling"], [434, "stunky"], [435, "skuntank"], [436, "bronzor"], [437, "bronzong"], [438, "bonsly"], [439, "mime-jr"], [440, "happiny"], [441, "chatot"], [442, "spiritomb"], [443, "gible"], [444, "gabite"], [445, "garchomp"], [446, "munchlax"], [447, "riolu"], [448, "lucario"], [449, "hippopotas"], [450, "hippowdon"], [451, "skorupi"], [452, "drapion"], [453, "croagunk"], [454, "toxicroak"], [455, "carnivine"], [456, "finneon"], [457, "lumineon"], [458, "mantyke"], [459, "snover"], [460, "abomasnow"], [461, "weavile"], [462, "magnezone"], [463, "lickilicky"], [464, "rhyperior"], [465, "tangrowth"], [466, "electivire"], [467, "magmortar"], [468, "togekiss"], [469, "yanmega"], [470, "leafeon"], [471, "glaceon"], [472, "gliscor"], [473, "mamoswine"], [474, "porygon-z"], [475, "gallade"], [476, "probopass"], [477, "dusknoir"], [478, "froslass"], [479, "rotom"], [480, "uxie"], [481, "mesprit"], [482, "azelf"], [483, "dialga"], [484, "palkia"], [485, "heatran"], [486, "regigigas"], [487, "giratina"], [488, "cresselia"], [489, "phione"], [490, "manaphy"], [491, "darkrai"], [492, "shaymin"], [493, "arceus"], [494, "victini"], [495, "snivy"], [496, "servine"], [497, "serperior"], [498, "tepig"], [499, "pignite"], [500, "emboar"], [501, "oshawott"], [502, "dewott"], [503, "samurott"], [504, "patrat"], [505, "watchog"], [506, "lillipup"], [507, "herdier"], [508, "stoutland"], [509, "purrloin"], [510, "liepard"], [511, "pansage"], [512, "simisage"], [513, "pansear"], [514, "simisear"], [515, "panpour"], [516, "simipour"], [517, "munna"], [518, "musharna"], [519, "pidove"], [520, "tranquill"], [521, "unfezant"], [522, "blitzle"], [523, "zebstrika"], [524, "roggenrola"], [525, "boldore"], [526, "gigalith"], [527, "woobat"], [528, "swoobat"], [529, "drilbur"], [530, "excadrill"], [531, "audino"], [532, "timburr"], [533, "gurdurr"], [534, "conkeldurr"], [535, "tympole"], [536, "palpitoad"], [537, "seismitoad"], [538, "throh"], [539, "sawk"], [540, "sewaddle"], [541, "swadloon"], [542, "leavanny"], [543, "venipede"], [544, "whirlipede"], [545, "scolipede"], [546, "cottonee"], [547, "whimsicott"], [548, "petilil"], [549, "lilligant"], [550, "basculin"], [551, "sandile"], [552, "krokorok"], [553, "krookodile"], [554, "darumaka"], [555, "darmanitan"], [556, "maractus"], [557, "dwebble"], [558, "crustle"], [559, "scraggy"], [560, "scrafty"], [561, "sigilyph"], [562, "yamask"], [563, "cofagrigus"], [564, "tirtouga"], [565, "carracosta"], [566, "archen"], [567, "archeops"], [568, "trubbish"], [569, "garbodor"], [570, "zorua"], [571, "zoroark"], [572, "minccino"], [573, "cinccino"], [574, "gothita"], [575, "gothorita"], [576, "gothitelle"], [577, "solosis"], [578, "duosion"], [579, "reuniclus"], [580, "ducklett"], [581, "swanna"], [582, "vanillite"], [583, "vanillish"], [584, "vanilluxe"], [585, "deerling"], [586, "sawsbuck"], [587, "emolga"], [588, "karrablast"], [589, "escavalier"], [590, "foongus"], [591, "amoonguss"], [592, "frillish"], [593, "jellicent"], [594, "alomomola"], [595, "joltik"], [596, "galvantula"], [597, "ferroseed"], [598, "ferrothorn"], [599, "klink"], [600, "klang"], [601, "klinklang"], [602, "tynamo"], [603, "eelektrik"], [604, "eelektross"], [605, "elgyem"], [606, "beheeyem"], [607, "litwick"], [608, "lampent"], [609, "chandelure"], [610, "axew"], [611, "fraxure"], [612, "haxorus"], [613, "cubchoo"], [614, "beartic"], [615, "cryogonal"], [616, "shelmet"], [617, "accelgor"], [618, "stunfisk"], [619, "mienfoo"], [620, "mienshao"], [621, "druddigon"], [622, "golett"], [623, "golurk"], [624, "pawniard"], [625, "bisharp"], [626, "bouffalant"], [627, "rufflet"], [628, "braviary"], [629, "vullaby"], [630, "mandibuzz"], [631, "heatmor"], [632, "durant"], [633, "deino"], [634, "zweilous"], [635, "hydreigon"], [636, "larvesta"], [637, "volcarona"], [638, "cobalion"], [639, "terrakion"], [640, "virizion"], [641, "tornadus"], [642, "thundurus"], [643, "reshiram"], [644, "zekrom"], [645, "landorus"], [646, "kyurem"], [647, "keldeo"], [648, "meloetta"], [649, "genesect"], [650, "chespin"], [651, "quilladin"], [652, "chesnaught"], [653, "fennekin"], [654, "braixen"], [655, "delphox"], [656, "froakie"], [657, "frogadier"], [658, "greninja"], [659, "bunnelby"], [660, "diggersby"], [661, "fletchling"], [662, "fletchinder"], [663, "talonflame"], [664, "scatterbug"], [665, "spewpa"], [666, "vivillon"], [667, "litleo"], [668, "pyroar"], [669, "flabebe"], [670, "floette"], [671, "florges"], [672, "skiddo"], [673, "gogoat"], [674, "pancham"], [675, "pangoro"], [676, "furfrou"], [677, "espurr"], [678, "meowstic"], [679, "honedge"], [680, "doublade"], [681, "aegislash"], [682, "spritzee"], [683, "aromatisse"], [684, "swirlix"], [685, "slurpuff"], [686, "inkay"], [687, "malamar"], [688, "binacle"], [689, "barbaracle"], [690, "skrelp"], [691, "dragalge"], [692, "clauncher"], [693, "clawitzer"], [694, "helioptile"], [695, "heliolisk"], [696, "tyrunt"], [697, "tyrantrum"], [698, "amaura"], [699, "aurorus"], [700, "sylveon"], [701, "hawlucha"], [702, "dedenne"], [703, "carbink"], [704, "goomy"], [705, "sliggoo"], [706, "goodra"], [707, "klefki"], [708, "phantump"], [709, "trevenant"], [710, "pumpkaboo"], [711, "gourgeist"], [712, "bergmite"], [713, "avalugg"], [714, "noibat"], [715, "noivern"], [716, "xerneas"], [717, "yveltal"], [718, "zygarde"], [719, "diancie"], [720, "hoopa"], [721, "volcanion"]];
var generalInfoArray = [["bulbasaur", 1, 7, 69, "Seed"], ["ivysaur", 2, 10, 130, "Seed"], ["venusaur", 3, 20, 1000, "Seed"], ["charmander", 4, 6, 85, "Lizard"], ["charmeleon", 5, 11, 190, "Flame"], ["charizard", 6, 17, 905, "Flame"], ["squirtle", 7, 5, 90, "Tiny Turtle"], ["wartortle", 8, 10, 225, "Turtle"], ["blastoise", 9, 16, 855, "Shellfish"], ["caterpie", 10, 3, 29, "Worm"], ["metapod", 11, 7, 99, "Cocoon"], ["butterfree", 12, 11, 320, "Butterfly"], ["weedle", 13, 3, 32, "Hairy Bug"], ["kakuna", 14, 6, 100, "Cocoon"], ["beedrill", 15, 10, 295, "Poison Bee"], ["pidgey", 16, 3, 18, "Tiny Bird"], ["pidgeotto", 17, 11, 300, "Bird"], ["pidgeot", 18, 15, 395, "Bird"], ["rattata", 19, 3, 35, "Mouse"], ["raticate", 20, 7, 185, "Mouse"], ["spearow", 21, 3, 20, "Tiny Bird"], ["fearow", 22, 12, 380, "Beak"], ["ekans", 23, 20, 69, "Snake"], ["arbok", 24, 35, 650, "Cobra"], ["pikachu", 25, 4, 60, "Mouse"], ["raichu", 26, 8, 300, "Mouse"], ["sandshrew", 27, 6, 120, "Mouse"], ["sandslash", 28, 10, 295, "Mouse"], ["nidoran-f", 29, 4, 70, "Poison Pin"], ["nidorina", 30, 8, 200, "Poison Pin"], ["nidoqueen", 31, 13, 600, "Drill"], ["nidoran-m", 32, 5, 90, "Poison Pin"], ["nidorino", 33, 9, 195, "Poison Pin"], ["nidoking", 34, 14, 620, "Drill"], ["clefairy", 35, 6, 75, "Fairy"], ["clefable", 36, 13, 400, "Fairy"], ["vulpix", 37, 6, 99, "Fox"], ["ninetales", 38, 11, 199, "Fox"], ["jigglypuff", 39, 5, 55, "Balloon"], ["wigglytuff", 40, 10, 120, "Balloon"], ["zubat", 41, 8, 75, "Bat"], ["golbat", 42, 16, 550, "Bat"], ["oddish", 43, 5, 54, "Weed"], ["gloom", 44, 8, 86, "Weed"], ["vileplume", 45, 12, 186, "Flower"], ["paras", 46, 3, 54, "Mushroom"], ["parasect", 47, 10, 295, "Mushroom"], ["venonat", 48, 10, 300, "Insect"], ["venomoth", 49, 15, 125, "Poison Moth"], ["diglett", 50, 2, 8, "Mole"], ["dugtrio", 51, 7, 333, "Mole"], ["meowth", 52, 4, 42, "Scratch Cat"], ["persian", 53, 10, 320, "Classy Cat"], ["psyduck", 54, 8, 196, "Duck"], ["golduck", 55, 17, 766, "Duck"], ["mankey", 56, 5, 280, "Pig Monkey"], ["primeape", 57, 10, 320, "Pig Monkey"], ["growlithe", 58, 7, 190, "Puppy"], ["arcanine", 59, 19, 1550, "Legendary"], ["poliwag", 60, 6, 124, "Tadpole"], ["poliwhirl", 61, 10, 200, "Tadpole"], ["poliwrath", 62, 13, 540, "Tadpole"], ["abra", 63, 9, 195, "Psi"], ["kadabra", 64, 13, 565, "Psi"], ["alakazam", 65, 15, 480, "Psi"], ["machop", 66, 8, 195, "Superpower"], ["machoke", 67, 15, 705, "Superpower"], ["machamp", 68, 16, 1300, "Superpower"], ["bellsprout", 69, 7, 40, "Flower"], ["weepinbell", 70, 10, 64, "Flycatcher"], ["victreebel", 71, 17, 155, "Flycatcher"], ["tentacool", 72, 9, 455, "Jellyfish"], ["tentacruel", 73, 16, 550, "Jellyfish"], ["geodude", 74, 4, 200, "Rock"], ["graveler", 75, 10, 1050, "Rock"], ["golem", 76, 14, 3000, "Megaton"], ["ponyta", 77, 10, 300, "Fire Horse"], ["rapidash", 78, 17, 950, "Fire Horse"], ["slowpoke", 79, 12, 360, "Dopey"], ["slowbro", 80, 16, 785, "Hermit Crab"], ["magnemite", 81, 3, 60, "Magnet"], ["magneton", 82, 10, 600, "Magnet"], ["farfetchd", 83, 8, 150, "Wild Duck"], ["doduo", 84, 14, 392, "Twin Bird"], ["dodrio", 85, 18, 852, "Triple Bird"], ["seel", 86, 11, 900, "Sea Lion"], ["dewgong", 87, 17, 1200, "Sea Lion"], ["grimer", 88, 9, 300, "Sludge"], ["muk", 89, 12, 300, "Sludge"], ["shellder", 90, 3, 40, "Bivalve"], ["cloyster", 91, 15, 1325, "Bivalve"], ["gastly", 92, 13, 1, "Gas"], ["haunter", 93, 16, 1, "Gas"], ["gengar", 94, 15, 405, "Shadow"], ["onix", 95, 88, 2100, "Rock Snake"], ["drowzee", 96, 10, 324, "Hypnosis"], ["hypno", 97, 16, 756, "Hypnosis"], ["krabby", 98, 4, 65, "River Crab"], ["kingler", 99, 13, 600, "Pincer"], ["voltorb", 100, 5, 104, "Ball"], ["electrode", 101, 12, 666, "Ball"], ["exeggcute", 102, 4, 25, "Egg"], ["exeggutor", 103, 20, 1200, "Coconut"], ["cubone", 104, 4, 65, "Lonely"], ["marowak", 105, 10, 450, "Bone Keeper"], ["hitmonlee", 106, 15, 498, "Kicking"], ["hitmonchan", 107, 14, 502, "Punching"], ["lickitung", 108, 12, 655, "Licking"], ["koffing", 109, 6, 10, "Poison Gas"], ["weezing", 110, 12, 95, "Poison Gas"], ["rhyhorn", 111, 10, 1150, "Spikes"], ["rhydon", 112, 19, 1200, "Drill"], ["chansey", 113, 11, 346, "Egg"], ["tangela", 114, 10, 350, "Vine"], ["kangaskhan", 115, 22, 800, "Parent"], ["horsea", 116, 4, 80, "Dragon"], ["seadra", 117, 12, 250, "Dragon"], ["goldeen", 118, 6, 150, "Goldfish"], ["seaking", 119, 13, 390, "Goldfish"], ["staryu", 120, 8, 345, "Star Shape"], ["starmie", 121, 11, 800, "Mysterious"], ["mr-mime", 122, 13, 545, "Barrier"], ["scyther", 123, 15, 560, "Mantis"], ["jynx", 124, 14, 406, "Human Shape"], ["electabuzz", 125, 11, 300, "Electric"], ["magmar", 126, 13, 445, "Spitfire"], ["pinsir", 127, 15, 550, "Stag Beetle"], ["tauros", 128, 14, 884, "Wild Bull"], ["magikarp", 129, 9, 100, "Fish"], ["gyarados", 130, 65, 2350, "Atrocious"], ["lapras", 131, 25, 2200, "Transport"], ["ditto", 132, 3, 40, "Transform"], ["eevee", 133, 3, 65, "Evolution"], ["vaporeon", 134, 10, 290, "Bubble Jet"], ["jolteon", 135, 8, 245, "Lightning"], ["flareon", 136, 9, 250, "Flame"], ["porygon", 137, 8, 365, "Virtual"], ["omanyte", 138, 4, 75, "Spiral"], ["omastar", 139, 10, 350, "Spiral"], ["kabuto", 140, 5, 115, "Shellfish"], ["kabutops", 141, 13, 405, "Shellfish"], ["aerodactyl", 142, 18, 590, "Fossil"], ["snorlax", 143, 21, 4600, "Sleeping"], ["articuno", 144, 17, 554, "Freeze"], ["zapdos", 145, 16, 526, "Electric"], ["moltres", 146, 20, 600, "Flame"], ["dratini", 147, 18, 33, "Dragon"], ["dragonair", 148, 40, 165, "Dragon"], ["dragonite", 149, 22, 2100, "Dragon"], ["mewtwo", 150, 20, 1220, "Genetic"], ["mew", 151, 4, 40, "New Species"], ["chikorita", 152, 9, 64, "Leaf"], ["bayleef", 153, 12, 158, "Leaf"], ["meganium", 154, 18, 1005, "Herb"], ["cyndaquil", 155, 5, 79, "Fire Mouse"], ["quilava", 156, 9, 190, "Volcano"], ["typhlosion", 157, 17, 795, "Volcano"], ["totodile", 158, 6, 95, "Big Jaw"], ["croconaw", 159, 11, 250, "Big Jaw"], ["feraligatr", 160, 23, 888, "Big Jaw"], ["sentret", 161, 8, 60, "Scout"], ["furret", 162, 18, 325, "Long Body"], ["hoothoot", 163, 7, 212, "Owl"], ["noctowl", 164, 16, 408, "Owl"], ["ledyba", 165, 10, 108, "Five Star"], ["ledian", 166, 14, 356, "Five Star"], ["spinarak", 167, 5, 85, "String Spit"], ["ariados", 168, 11, 335, "Long Leg"], ["crobat", 169, 18, 750, "Bat"], ["chinchou", 170, 5, 120, "Angler"], ["lanturn", 171, 12, 225, "Light"], ["pichu", 172, 3, 20, "Tiny Mouse"], ["cleffa", 173, 3, 30, "Star Shape"], ["igglybuff", 174, 3, 10, "Balloon"], ["togepi", 175, 3, 15, "Spike Ball"], ["togetic", 176, 6, 32, "Happiness"], ["natu", 177, 2, 20, "Tiny Bird"], ["xatu", 178, 15, 150, "Mystic"], ["mareep", 179, 6, 78, "Wool"], ["flaaffy", 180, 8, 133, "Wool"], ["ampharos", 181, 14, 615, "Light"], ["bellossom", 182, 4, 58, "Flower"], ["marill", 183, 4, 85, "Aqua Mouse"], ["azumarill", 184, 8, 285, "Aqua Rabbit"], ["sudowoodo", 185, 12, 380, "Imitation"], ["politoed", 186, 11, 339, "Frog"], ["hoppip", 187, 4, 5, "Cottonweed"], ["skiploom", 188, 6, 10, "Cottonweed"], ["jumpluff", 189, 8, 30, "Cottonweed"], ["aipom", 190, 8, 115, "Long Tail"], ["sunkern", 191, 3, 18, "Seed"], ["sunflora", 192, 8, 85, "Sun"], ["yanma", 193, 12, 380, "Clear Wing"], ["wooper", 194, 4, 85, "Water Fish"], ["quagsire", 195, 14, 750, "Water Fish"], ["espeon", 196, 9, 265, "Sun"], ["umbreon", 197, 10, 270, "Moonlight"], ["murkrow", 198, 5, 21, "Darkness"], ["slowking", 199, 20, 795, "Royal"], ["misdreavus", 200, 7, 10, "Screech"], ["unown", 201, 5, 50, "Symbol"], ["wobbuffet", 202, 13, 285, "Patient"], ["girafarig", 203, 15, 415, "Long Neck"], ["pineco", 204, 6, 72, "Bagworm"], ["forretress", 205, 12, 1258, "Bagworm"], ["dunsparce", 206, 15, 140, "Land Snake"], ["gligar", 207, 11, 648, "FlyScorpion"], ["steelix", 208, 92, 4000, "Iron Snake"], ["snubbull", 209, 6, 78, "Fairy"], ["granbull", 210, 14, 487, "Fairy"], ["qwilfish", 211, 5, 39, "Balloon"], ["scizor", 212, 18, 1180, "Pincer"], ["shuckle", 213, 6, 205, "Mold"], ["heracross", 214, 15, 540, "Single Horn"], ["sneasel", 215, 9, 280, "Sharp Claw"], ["teddiursa", 216, 6, 88, "Little Bear"], ["ursaring", 217, 18, 1258, "Hibernator"], ["slugma", 218, 7, 350, "Lava"], ["magcargo", 219, 8, 550, "Lava"], ["swinub", 220, 4, 65, "Pig"], ["piloswine", 221, 11, 558, "Swine"], ["corsola", 222, 6, 50, "Coral"], ["remoraid", 223, 6, 120, "Jet"], ["octillery", 224, 9, 285, "Jet"], ["delibird", 225, 9, 160, "Delivery"], ["mantine", 226, 21, 2200, "Kite"], ["skarmory", 227, 17, 505, "Armor Bird"], ["houndour", 228, 6, 108, "Dark"], ["houndoom", 229, 14, 350, "Dark"], ["kingdra", 230, 18, 1520, "Dragon"], ["phanpy", 231, 5, 335, "Long Nose"], ["donphan", 232, 11, 1200, "Armor"], ["porygon2", 233, 6, 325, "Virtual"], ["stantler", 234, 14, 712, "Big Horn"], ["smeargle", 235, 12, 580, "Painter"], ["tyrogue", 236, 7, 210, "Scuffle"], ["hitmontop", 237, 14, 480, "Handstand"], ["smoochum", 238, 4, 60, "Kiss"], ["elekid", 239, 6, 235, "Electric"], ["magby", 240, 7, 214, "Live Coal"], ["miltank", 241, 12, 755, "Milk Cow"], ["blissey", 242, 15, 468, "Happiness"], ["raikou", 243, 19, 1780, "Thunder"], ["entei", 244, 21, 1980, "Volcano"], ["suicune", 245, 20, 1870, "Aurora"], ["larvitar", 246, 6, 720, "Rock Skin"], ["pupitar", 247, 12, 1520, "Hard Shell"], ["tyranitar", 248, 20, 2020, "Armor"], ["lugia", 249, 52, 2160, "Diving"], ["ho-oh", 250, 38, 1990, "Rainbow"], ["celebi", 251, 6, 50, "Time Travel"], ["treecko", 252, 5, 50, "Wood Gecko"], ["grovyle", 253, 9, 216, "Wood Gecko"], ["sceptile", 254, 17, 522, "Forest"], ["torchic", 255, 4, 25, "Chick"], ["combusken", 256, 9, 195, "Young Fowl"], ["blaziken", 257, 19, 520, "Blaze"], ["mudkip", 258, 4, 76, "Mud Fish"], ["marshtomp", 259, 7, 280, "Mud Fish"], ["swampert", 260, 15, 819, "Mud Fish"], ["poochyena", 261, 5, 136, "Bite"], ["mightyena", 262, 10, 370, "Bite"], ["zigzagoon", 263, 4, 175, "TinyRaccoon"], ["linoone", 264, 5, 325, "Rushing"], ["wurmple", 265, 3, 36, "Worm"], ["silcoon", 266, 6, 100, "Cocoon"], ["beautifly", 267, 10, 284, "Butterfly"], ["cascoon", 268, 7, 115, "Cocoon"], ["dustox", 269, 12, 316, "Poison Moth"], ["lotad", 270, 5, 26, "Water Weed"], ["lombre", 271, 12, 325, "Jolly"], ["ludicolo", 272, 15, 550, "Carefree"], ["seedot", 273, 5, 40, "Acorn"], ["nuzleaf", 274, 10, 280, "Wily"], ["shiftry", 275, 13, 596, "Wicked"], ["taillow", 276, 3, 23, "TinySwallow"], ["swellow", 277, 7, 198, "Swallow"], ["wingull", 278, 6, 95, "Seagull"], ["pelipper", 279, 12, 280, "Water Bird"], ["ralts", 280, 4, 66, "Feeling"], ["kirlia", 281, 8, 202, "Emotion"], ["gardevoir", 282, 16, 484, "Embrace"], ["surskit", 283, 5, 17, "Pond Skater"], ["masquerain", 284, 8, 36, "Eyeball"], ["shroomish", 285, 4, 45, "Mushroom"], ["breloom", 286, 12, 392, "Mushroom"], ["slakoth", 287, 8, 240, "Slacker"], ["vigoroth", 288, 14, 465, "Wild Monkey"], ["slaking", 289, 20, 1305, "Lazy"], ["nincada", 290, 5, 55, "Trainee"], ["ninjask", 291, 8, 120, "Ninja"], ["shedinja", 292, 8, 12, "Shed"], ["whismur", 293, 6, 163, "Whisper"], ["loudred", 294, 10, 405, "Big Voice"], ["exploud", 295, 15, 840, "Loud Noise"], ["makuhita", 296, 10, 864, "Guts"], ["hariyama", 297, 23, 2538, "Arm Thrust"], ["azurill", 298, 2, 20, "Polka Dot"], ["nosepass", 299, 10, 970, "Compass"], ["skitty", 300, 6, 110, "Kitten"], ["delcatty", 301, 11, 326, "Prim"], ["sableye", 302, 5, 110, "Darkness"], ["mawile", 303, 6, 115, "Deceiver"], ["aron", 304, 4, 600, "Iron Armor"], ["lairon", 305, 9, 1200, "Iron Armor"], ["aggron", 306, 21, 3600, "Iron Armor"], ["meditite", 307, 6, 112, "Meditate"], ["medicham", 308, 13, 315, "Meditate"], ["electrike", 309, 6, 152, "Lightning"], ["manectric", 310, 15, 402, "Discharge"], ["plusle", 311, 4, 42, "Cheering"], ["minun", 312, 4, 42, "Cheering"], ["volbeat", 313, 7, 177, "Firefly"], ["illumise", 314, 6, 177, "Firefly"], ["roselia", 315, 3, 20, "Thorn"], ["gulpin", 316, 4, 103, "Stomach"], ["swalot", 317, 17, 800, "Poison Bag"], ["carvanha", 318, 8, 208, "Savage"], ["sharpedo", 319, 18, 888, "Brutal"], ["wailmer", 320, 20, 1300, "Ball Whale"], ["wailord", 321, 145, 3980, "Float Whale"], ["numel", 322, 7, 240, "Numb"], ["camerupt", 323, 19, 2200, "Eruption"], ["torkoal", 324, 5, 804, "Coal"], ["spoink", 325, 7, 306, "Bounce"], ["grumpig", 326, 9, 715, "Manipulate"], ["spinda", 327, 11, 50, "Spot Panda"], ["trapinch", 328, 7, 150, "Ant Pit"], ["vibrava", 329, 11, 153, "Vibration"], ["flygon", 330, 20, 820, "Mystic"], ["cacnea", 331, 4, 513, "Cactus"], ["cacturne", 332, 13, 774, "Scarecrow"], ["swablu", 333, 4, 12, "Cotton Bird"], ["altaria", 334, 11, 206, "Humming"], ["zangoose", 335, 13, 403, "Cat Ferret"], ["seviper", 336, 27, 525, "Fang Snake"], ["lunatone", 337, 10, 1680, "Meteorite"], ["solrock", 338, 12, 1540, "Meteorite"], ["barboach", 339, 4, 19, "Whiskers"], ["whiscash", 340, 9, 236, "Whiskers"], ["corphish", 341, 6, 115, "Ruffian"], ["crawdaunt", 342, 11, 328, "Rogue"], ["baltoy", 343, 5, 215, "Clay Doll"], ["claydol", 344, 15, 1080, "Clay Doll"], ["lileep", 345, 10, 238, "Sea Lily"], ["cradily", 346, 15, 604, "Barnacle"], ["anorith", 347, 7, 125, "Old Shrimp"], ["armaldo", 348, 15, 682, "Plate"], ["feebas", 349, 6, 74, "Fish"], ["milotic", 350, 62, 1620, "Tender"], ["castform", 351, 3, 8, "Weather"], ["kecleon", 352, 10, 220, "Color Swap"], ["shuppet", 353, 6, 23, "Puppet"], ["banette", 354, 11, 125, "Marionette"], ["duskull", 355, 8, 150, "Requiem"], ["dusclops", 356, 16, 306, "Beckon"], ["tropius", 357, 20, 1000, "Fruit"], ["chimecho", 358, 6, 10, "Wind Chime"], ["absol", 359, 12, 470, "Disaster"], ["wynaut", 360, 6, 140, "Bright"], ["snorunt", 361, 7, 168, "Snow Hat"], ["glalie", 362, 15, 2565, "Face"], ["spheal", 363, 8, 395, "Clap"], ["sealeo", 364, 11, 876, "Ball Roll"], ["walrein", 365, 14, 1506, "Ice Break"], ["clamperl", 366, 4, 525, "Bivalve"], ["huntail", 367, 17, 270, "Deep Sea"], ["gorebyss", 368, 18, 226, "South Sea"], ["relicanth", 369, 10, 234, "Longevity"], ["luvdisc", 370, 6, 87, "Rendezvous"], ["bagon", 371, 6, 421, "Rock Head"], ["shelgon", 372, 11, 1105, "Endurance"], ["salamence", 373, 15, 1026, "Dragon"], ["beldum", 374, 6, 952, "Iron Ball"], ["metang", 375, 12, 2025, "Iron Claw"], ["metagross", 376, 16, 5500, "Iron Leg"], ["regirock", 377, 17, 2300, "Rock Peak"], ["regice", 378, 18, 1750, "Iceberg"], ["registeel", 379, 19, 2050, "Iron"], ["latias", 380, 14, 400, "Eon"], ["latios", 381, 20, 600, "Eon"], ["kyogre", 382, 45, 3520, "Sea Basin"], ["groudon", 383, 35, 9500, "Continent"], ["rayquaza", 384, 70, 2065, "Sky High"], ["jirachi", 385, 3, 11, "Wish"], ["deoxys-normal", 386, 17, 608, "DNA"], ["turtwig", 387, 4, 102, "Tiny Leaf"], ["grotle", 388, 11, 970, "Grove"], ["torterra", 389, 22, 3100, "Continent"], ["chimchar", 390, 5, 62, "Chimp"], ["monferno", 391, 9, 220, "Playful"], ["infernape", 392, 12, 550, "Flame"], ["piplup", 393, 4, 52, "Penguin"], ["prinplup", 394, 8, 230, "Penguin"], ["empoleon", 395, 17, 845, "Emperor"], ["starly", 396, 3, 20, "Starling"], ["staravia", 397, 6, 155, "Starling"], ["staraptor", 398, 12, 249, "Predator"], ["bidoof", 399, 5, 200, "Plump Mouse"], ["bibarel", 400, 10, 315, "Beaver"], ["kricketot", 401, 3, 22, "Cricket"], ["kricketune", 402, 10, 255, "Cricket"], ["shinx", 403, 5, 95, "Flash"], ["luxio", 404, 9, 305, "Spark"], ["luxray", 405, 14, 420, "Gleam Eyes"], ["budew", 406, 2, 12, "Bud"], ["roserade", 407, 9, 145, "Bouquet"], ["cranidos", 408, 9, 315, "Head Butt"], ["rampardos", 409, 16, 1025, "Head Butt"], ["shieldon", 410, 5, 570, "Shield"], ["bastiodon", 411, 13, 1495, "Shield"], ["burmy", 412, 2, 34, "Bagworm"], ["wormadam-plant", 413, 5, 65, "Bagworm"], ["mothim", 414, 9, 233, "Moth"], ["combee", 415, 3, 55, "Tiny Bee"], ["vespiquen", 416, 12, 385, "Beehive"], ["pachirisu", 417, 4, 39, "EleSquirrel"], ["buizel", 418, 7, 295, "Sea Weasel"], ["floatzel", 419, 11, 335, "Sea Weasel"], ["cherubi", 420, 4, 33, "Cherry"], ["cherrim", 421, 5, 93, "Blossom"], ["shellos", 422, 3, 63, "Sea Slug"], ["gastrodon", 423, 9, 299, "Sea Slug"], ["ambipom", 424, 12, 203, "Long Tail"], ["drifloon", 425, 4, 12, "Balloon"], ["drifblim", 426, 12, 150, "Blimp"], ["buneary", 427, 4, 55, "Rabbit"], ["lopunny", 428, 12, 333, "Rabbit"], ["mismagius", 429, 9, 44, "Magical"], ["honchkrow", 430, 9, 273, "Big Boss"], ["glameow", 431, 5, 39, "Catty"], ["purugly", 432, 10, 438, "Tiger Cat"], ["chingling", 433, 2, 6, "Bell"], ["stunky", 434, 4, 192, "Skunk"], ["skuntank", 435, 10, 380, "Skunk"], ["bronzor", 436, 5, 605, "Bronze"], ["bronzong", 437, 13, 1870, "Bronze Bell"], ["bonsly", 438, 5, 150, "Bonsai"], ["mime-jr", 439, 6, 130, "Mime"], ["happiny", 440, 6, 244, "Playhouse"], ["chatot", 441, 5, 19, "Music Note"], ["spiritomb", 442, 10, 1080, "Forbidden"], ["gible", 443, 7, 205, "Land Shark"], ["gabite", 444, 14, 560, "Cave"], ["garchomp", 445, 19, 950, "Mach"], ["munchlax", 446, 6, 1050, "Big Eater"], ["riolu", 447, 7, 202, "Emanation"], ["lucario", 448, 12, 540, "Aura"], ["hippopotas", 449, 8, 495, "Hippo"], ["hippowdon", 450, 20, 3000, "Heavyweight"], ["skorupi", 451, 8, 120, "Scorpion"], ["drapion", 452, 13, 615, "Ogre Scorp"], ["croagunk", 453, 7, 230, "Toxic Mouth"], ["toxicroak", 454, 13, 444, "Toxic Mouth"], ["carnivine", 455, 14, 270, "Bug Catcher"], ["finneon", 456, 4, 70, "Wing Fish"], ["lumineon", 457, 12, 240, "Neon"], ["mantyke", 458, 10, 650, "Kite"], ["snover", 459, 10, 505, "Frost Tree"], ["abomasnow", 460, 22, 1355, "Frost Tree"], ["weavile", 461, 11, 340, "Sharp Claw"], ["magnezone", 462, 12, 1800, "Magnet Area"], ["lickilicky", 463, 17, 1400, "Licking"], ["rhyperior", 464, 24, 2828, "Drill"], ["tangrowth", 465, 20, 1286, "Vine"], ["electivire", 466, 18, 1386, "Thunderbolt"], ["magmortar", 467, 16, 680, "Blast"], ["togekiss", 468, 15, 380, "Jubilee"], ["yanmega", 469, 19, 515, "Ogre Darner"], ["leafeon", 470, 10, 255, "Verdant"], ["glaceon", 471, 8, 259, "Fresh Snow"], ["gliscor", 472, 20, 425, "Fang Scorp"], ["mamoswine", 473, 25, 2910, "Twin Tusk"], ["porygon-z", 474, 9, 340, "Virtual"], ["gallade", 475, 16, 520, "Blade"], ["probopass", 476, 14, 3400, "Compass"], ["dusknoir", 477, 22, 1066, "Gripper"], ["froslass", 478, 13, 266, "Snow Land"], ["rotom", 479, 3, 3, "Plasma"], ["uxie", 480, 3, 3, "Knowledge"], ["mesprit", 481, 3, 3, "Emotion"], ["azelf", 482, 3, 3, "Willpower"], ["dialga", 483, 54, 6830, "Temporal"], ["palkia", 484, 42, 3360, "Spatial"], ["heatran", 485, 17, 4300, "Lava Dome"], ["regigigas", 486, 37, 4200, "Colossal"], ["giratina-altered", 487, 45, 7500, "Renegade"], ["cresselia", 488, 15, 856, "Lunar"], ["phione", 489, 4, 31, "Sea Drifter"], ["manaphy", 490, 3, 14, "Seafaring"], ["darkrai", 491, 15, 505, "Pitch-Black"], ["shaymin-land", 492, 2, 21, "Gratitude"], ["arceus", 493, 32, 3200, "Alpha"], ["victini", 494, 4, 40, "Victory"], ["snivy", 495, 6, 81, "Grass Snake"], ["servine", 496, 8, 160, "Grass Snake"], ["serperior", 497, 33, 630, "Regal"], ["tepig", 498, 5, 99, "Fire Pig"], ["pignite", 499, 10, 555, "Fire Pig"], ["emboar", 500, 16, 1500, "Mega Fire Pig"], ["oshawott", 501, 5, 59, "Sea Otter"], ["dewott", 502, 8, 245, "Discipline"], ["samurott", 503, 15, 946, "Formidable"], ["patrat", 504, 5, 116, "Scout"], ["watchog", 505, 11, 270, "Lookout"], ["lillipup", 506, 4, 41, "Puppy"], ["herdier", 507, 9, 147, "Loyal Dog"], ["stoutland", 508, 12, 610, "Big-Hearted"], ["purrloin", 509, 4, 101, "Devious"], ["liepard", 510, 11, 375, "Cruel"], ["pansage", 511, 6, 105, "Grass Monkey"], ["simisage", 512, 11, 305, "Thorn Monkey"], ["pansear", 513, 6, 110, "High Temp"], ["simisear", 514, 10, 280, "Ember"], ["panpour", 515, 6, 135, "Spray"], ["simipour", 516, 10, 290, "Geyser"], ["munna", 517, 6, 233, "Dream Eater"], ["musharna", 518, 11, 605, "Drowsing"], ["pidove", 519, 3, 21, "Tiny Pigeon"], ["tranquill", 520, 6, 150, "Wild Pigeon"], ["unfezant", 521, 12, 290, "Proud"], ["blitzle", 522, 8, 298, "Electrified"], ["zebstrika", 523, 16, 795, "Thunderbolt"], ["roggenrola", 524, 4, 180, "Mantle"], ["boldore", 525, 9, 1020, "Ore"], ["gigalith", 526, 17, 2600, "Compressed"], ["woobat", 527, 4, 21, "Bat"], ["swoobat", 528, 9, 105, "Courting"], ["drilbur", 529, 3, 85, "Mole"], ["excadrill", 530, 7, 404, "Subterrene"], ["audino", 531, 11, 310, "Hearing"], ["timburr", 532, 6, 125, "Muscular"], ["gurdurr", 533, 12, 400, "Muscular"], ["conkeldurr", 534, 14, 870, "Muscular"], ["tympole", 535, 5, 45, "Tadpole"], ["palpitoad", 536, 8, 170, "Vibration"], ["seismitoad", 537, 15, 620, "Vibration"], ["throh", 538, 13, 555, "Judo"], ["sawk", 539, 14, 510, "Karate"], ["sewaddle", 540, 3, 25, "Sewing"], ["swadloon", 541, 5, 73, "Leaf-Wrapped"], ["leavanny", 542, 12, 205, "Nurturing"], ["venipede", 543, 4, 53, "Centipede"], ["whirlipede", 544, 12, 585, "Curlipede"], ["scolipede", 545, 25, 2005, "Megapede"], ["cottonee", 546, 3, 6, "Cotton Puff"], ["whimsicott", 547, 7, 66, "Windveiled"], ["petilil", 548, 5, 66, "Bulb"], ["lilligant", 549, 11, 163, "Flowering"], ["basculin-red-striped", 550, 10, 180, "Hostile"], ["sandile", 551, 7, 152, "Desert Croc"], ["krokorok", 552, 10, 334, "Desert Croc"], ["krookodile", 553, 15, 963, "Intimidation"], ["darumaka", 554, 6, 375, "Zen Charm"], ["darmanitan-standard", 555, 13, 929, "Blazing"], ["maractus", 556, 10, 280, "Cactus"], ["dwebble", 557, 3, 145, "Rock Inn"], ["crustle", 558, 14, 2000, "Stone Home"], ["scraggy", 559, 6, 118, "Shedding"], ["scrafty", 560, 11, 300, "Hoodlum"], ["sigilyph", 561, 14, 140, "Avianoid"], ["yamask", 562, 5, 15, "Spirit"], ["cofagrigus", 563, 17, 765, "Coffin"], ["tirtouga", 564, 7, 165, "Prototurtle"], ["carracosta", 565, 12, 810, "Prototurtle"], ["archen", 566, 5, 95, "First Bird"], ["archeops", 567, 14, 320, "First Bird"], ["trubbish", 568, 6, 310, "Trash Bag"], ["garbodor", 569, 19, 1073, "Trash Heap"], ["zorua", 570, 7, 125, "Tricky Fox"], ["zoroark", 571, 16, 811, "Illusion Fox"], ["minccino", 572, 4, 58, "Chinchilla"], ["cinccino", 573, 5, 75, "Scarf"], ["gothita", 574, 4, 58, "Fixation"], ["gothorita", 575, 7, 180, "Manipulate"], ["gothitelle", 576, 15, 440, "Astral Body"], ["solosis", 577, 3, 10, "Cell"], ["duosion", 578, 6, 80, "Mitosis"], ["reuniclus", 579, 10, 201, "Multiplying"], ["ducklett", 580, 5, 55, "Water Bird"], ["swanna", 581, 13, 242, "White Bird"], ["vanillite", 582, 4, 57, "Fresh Snow"], ["vanillish", 583, 11, 410, "Icy Snow"], ["vanilluxe", 584, 13, 575, "Snowstorm"], ["deerling", 585, 6, 195, "Season"], ["sawsbuck", 586, 19, 925, "Season"], ["emolga", 587, 4, 50, "Sky Squirrel"], ["karrablast", 588, 5, 59, "Clamping"], ["escavalier", 589, 10, 330, "Cavalry"], ["foongus", 590, 2, 10, "Mushroom"], ["amoonguss", 591, 6, 105, "Mushroom"], ["frillish", 592, 12, 330, "Floating"], ["jellicent", 593, 22, 1350, "Floating"], ["alomomola", 594, 12, 316, "Caring"], ["joltik", 595, 1, 6, "Attaching"], ["galvantula", 596, 8, 143, "EleSpider"], ["ferroseed", 597, 6, 188, "Thorn Seed"], ["ferrothorn", 598, 10, 1100, "Thorn Pod"], ["klink", 599, 3, 210, "Gear"], ["klang", 600, 6, 510, "Gear"], ["klinklang", 601, 6, 810, "Gear"], ["tynamo", 602, 2, 3, "EleFish"], ["eelektrik", 603, 12, 220, "EleFish"], ["eelektross", 604, 21, 805, "EleFish"], ["elgyem", 605, 5, 90, "Cerebral"], ["beheeyem", 606, 10, 345, "Cerebral"], ["litwick", 607, 3, 31, "Candle"], ["lampent", 608, 6, 130, "Lamp"], ["chandelure", 609, 10, 343, "Luring"], ["axew", 610, 6, 180, "Tusk"], ["fraxure", 611, 10, 360, "Axe Jaw"], ["haxorus", 612, 18, 1055, "Axe Jaw"], ["cubchoo", 613, 5, 85, "Chill"], ["beartic", 614, 26, 2600, "Freezing"], ["cryogonal", 615, 11, 1480, "Crystallizing"], ["shelmet", 616, 4, 77, "Snail"], ["accelgor", 617, 8, 253, "Shell Out"], ["stunfisk", 618, 7, 110, "Trap"], ["mienfoo", 619, 9, 200, "Martial Arts"], ["mienshao", 620, 14, 355, "Martial Arts"], ["druddigon", 621, 16, 1390, "Cave"], ["golett", 622, 10, 920, "Automaton"], ["golurk", 623, 28, 3300, "Automaton"], ["pawniard", 624, 5, 102, "Sharp Blade"], ["bisharp", 625, 16, 700, "Sword Blade"], ["bouffalant", 626, 16, 946, "Bash Buffalo"], ["rufflet", 627, 5, 105, "Eaglet"], ["braviary", 628, 15, 410, "Valiant"], ["vullaby", 629, 5, 90, "Diapered"], ["mandibuzz", 630, 12, 395, "Bone Vulture"], ["heatmor", 631, 14, 580, "Anteater"], ["durant", 632, 3, 330, "Iron Ant"], ["deino", 633, 8, 173, "Irate"], ["zweilous", 634, 14, 500, "Hostile"], ["hydreigon", 635, 18, 1600, "Brutal"], ["larvesta", 636, 11, 288, "Torch"], ["volcarona", 637, 16, 460, "Sun"], ["cobalion", 638, 21, 2500, "Iron Will"], ["terrakion", 639, 19, 2600, "Cavern"], ["virizion", 640, 20, 2000, "Grassland"], ["tornadus-incarnate", 641, 15, 630, "Cyclone"], ["thundurus-incarnate", 642, 15, 610, "Bolt Strike"], ["reshiram", 643, 32, 3300, "Vast White"], ["zekrom", 644, 29, 3450, "Deep Black"], ["landorus-incarnate", 645, 15, 680, "Abundance"], ["kyurem", 646, 30, 3250, "Boundary"], ["keldeo-ordinary", 647, 14, 485, "Colt"], ["meloetta-aria", 648, 6, 65, "Melody"], ["genesect", 649, 15, 825, "Paleozoic"], ["chespin", 650, 4, 90, "Spiny Nut"], ["quilladin", 651, 7, 290, "Spiny Armor"], ["chesnaught", 652, 16, 900, "Spiny Armor"], ["fennekin", 653, 4, 94, "Fox"], ["braixen", 654, 10, 145, "Fox"], ["delphox", 655, 15, 390, "Fox"], ["froakie", 656, 3, 70, "Bubble Frog"], ["frogadier", 657, 6, 109, "Bubble Frog"], ["greninja", 658, 15, 400, "Ninja"], ["bunnelby", 659, 4, 50, "Digging"], ["diggersby", 660, 10, 424, "Digging"], ["fletchling", 661, 3, 17, "Tiny Robin"], ["fletchinder", 662, 7, 160, "Ember"], ["talonflame", 663, 12, 245, "Scorching"], ["scatterbug", 664, 3, 25, "Scatterdust"], ["spewpa", 665, 3, 84, "Scatterdust"], ["vivillon", 666, 12, 170, "Scale"], ["litleo", 667, 6, 135, "Lion Cub"], ["pyroar", 668, 15, 815, "Royal"], ["flabebe", 669, 1, 1, "Single Bloom"], ["floette", 670, 2, 9, "Single Bloom"], ["florges", 671, 11, 100, "Garden"], ["skiddo", 672, 9, 310, "Mount"], ["gogoat", 673, 17, 910, "Mount"], ["pancham", 674, 6, 80, "Playful"], ["pangoro", 675, 21, 1360, "Daunting"], ["furfrou", 676, 12, 280, "Poodle"], ["espurr", 677, 3, 35, "Restraint"], ["meowstic-male", 678, 6, 85, "Constraint"], ["honedge", 679, 8, 20, "Sword"], ["doublade", 680, 8, 45, "Sword"], ["aegislash-shield", 681, 17, 530, "Royal Sword"], ["spritzee", 682, 2, 5, "Perfume"], ["aromatisse", 683, 8, 155, "Fragrance"], ["swirlix", 684, 4, 35, "Cotton Candy"], ["slurpuff", 685, 8, 50, "Meringue"], ["inkay", 686, 4, 35, "Revolving"], ["malamar", 687, 15, 470, "Overturning"], ["binacle", 688, 5, 310, "Two-Handed"], ["barbaracle", 689, 13, 960, "Collective"], ["skrelp", 690, 5, 73, "Mock Kelp"], ["dragalge", 691, 18, 815, "Mock Kelp"], ["clauncher", 692, 5, 83, "Water Gun"], ["clawitzer", 693, 13, 353, "Howitzer"], ["helioptile", 694, 5, 60, "Generator"], ["heliolisk", 695, 10, 210, "Generator"], ["tyrunt", 696, 8, 260, "Royal Heir"], ["tyrantrum", 697, 25, 2700, "Despot"], ["amaura", 698, 13, 252, "Tundra"], ["aurorus", 699, 27, 2250, "Tundra"], ["sylveon", 700, 10, 235, "Intertwining"], ["hawlucha", 701, 8, 215, "Wrestling"], ["dedenne", 702, 2, 22, "Antenna"], ["carbink", 703, 3, 57, "Jewel"], ["goomy", 704, 3, 28, "Soft Tissue"], ["sliggoo", 705, 8, 175, "Soft Tissue"], ["goodra", 706, 20, 1505, "Dragon"], ["klefki", 707, 2, 30, "Key Ring"], ["phantump", 708, 4, 70, "Stump"], ["trevenant", 709, 15, 710, "Elder Tree"], ["pumpkaboo-average", 710, 4, 50, "Pumpkin"], ["gourgeist-average", 711, 9, 125, "Pumpkin"], ["bergmite", 712, 10, 995, "Ice Chunk"], ["avalugg", 713, 20, 5050, "Iceberg"], ["noibat", 714, 5, 80, "Sound Wave"], ["noivern", 715, 15, 850, "Sound Wave"], ["xerneas", 716, 30, 2150, "Life"], ["yveltal", 717, 58, 2030, "Destruction"], ["zygarde", 718, 50, 3050, "Order"], ["diancie", 719, 7, 88], ["hoopa", 720, 5, 90], ["volcanion", 721, 17, 1950]];
var abilitiesArray = [[65], [65], [65], [66], [66], [66], [67], [67], [67], [19], [61], [14], [19], [61], [68], [51, 77], [51, 77], [51, 77], [50, 62], [50, 62], [51], [51], [22, 61], [22, 61], [9], [9], [8], [8], [38, 79], [38, 79], [38, 79], [38, 79], [38, 79], [38, 79], [56, 98], [56, 98], [18], [18], [56, 172], [56, 172], [39], [39], [34], [34], [34], [27, 87], [27, 87], [14, 110], [19, 110], [8, 71], [8, 71], [53, 101], [7, 101], [6, 13], [6, 13], [72, 83], [72, 83], [22, 18], [22, 18], [11, 6], [11, 6], [11, 6], [28, 39], [28, 39], [28, 39], [62, 99], [62, 99], [62, 99], [34], [34], [34], [29, 64], [29, 64], [69, 5], [69, 5], [69, 5], [50, 18], [50, 18], [12, 20], [12, 20], [42, 5], [42, 5], [51, 39], [50, 48], [50, 48], [47, 93], [47, 93], [1, 60], [1, 60], [75, 92], [75, 92], [26], [26], [130], [69, 5], [15, 108], [15, 108], [52, 75], [52, 75], [43, 9], [43, 9], [34], [34], [69, 31], [69, 31], [7, 120], [51, 89], [20, 12], [26], [26], [31, 69], [31, 69], [30, 32], [34, 102], [48, 113], [33, 97], [38, 97], [33, 41], [33, 41], [35, 30], [35, 30], [43, 111], [68, 101], [12, 108], [9], [49], [52, 104], [22, 83], [33], [22], [11, 75], [7], [50, 91], [11, 11], [10, 10], [18, 18], [36, 88], [33, 75], [33, 75], [33, 4], [33, 4], [69, 46], [17, 47], [46], [46], [46], [61], [61], [39], [46], [28], [65], [65], [65], [66], [66], [66], [67], [67], [67], [50, 51], [50, 51], [15, 51], [15, 51], [68, 48], [68, 48], [68, 15], [68, 15], [39], [10, 35], [10, 35], [9], [56, 98], [56, 172], [55, 32], [55, 32], [28, 48], [28, 48], [9], [9], [9], [34], [47, 37], [47, 37], [5, 69], [11, 6], [34, 102], [34, 102], [34, 102], [50, 53], [34, 94], [34, 94], [3, 14], [6, 11], [6, 11], [28, 28], [28, 28], [15, 105], [12, 20], [26], [26], [23], [39, 48], [5], [5], [32, 50], [52, 8], [69, 5], [22, 50], [22, 95], [38, 33], [68, 101], [5, 82], [68, 62], [39, 51], [53, 95], [62, 95], [40, 49], [40, 49], [12, 81], [12, 81], [55, 30], [55, 97], [21, 97], [72, 55], [33, 11], [51, 5], [48, 18], [48, 18], [33, 97], [53], [5], [36, 88], [22, 119], [20, 101], [62, 80], [22, 101], [12, 108], [9], [49], [47, 113], [30, 32], [46], [46], [46], [62], [61], [45], [46], [46], [30], [65], [65], [65], [66], [66], [66], [67], [67], [67], [50, 95], [22, 95], [53, 82], [53, 82], [19], [61], [68], [61], [19], [33, 44], [33, 44], [33, 44], [34, 48], [34, 48], [34, 48], [62], [62], [93], [2], [28, 36], [28, 36], [28, 36], [33], [22], [27, 90], [27, 90], [54], [72], [54], [14], [3], [25], [43], [43], [43], [47, 62], [47, 62], [47, 37], [5, 42], [56, 96], [56, 96], [51, 100], [52, 22], [5, 69], [5, 69], [5, 69], [74], [74], [9, 31], [9, 31], [57], [58], [35, 68], [12, 110], [30, 38], [64, 60], [64, 60], [24], [24], [41, 12], [41, 12], [12, 86], [40, 116], [70], [47, 20], [47, 20], [20, 77], [52, 71], [26, 26], [26, 26], [8], [8], [30], [30], [17], [61], [26], [26], [12, 107], [12, 107], [52, 75], [52, 75], [26], [26], [21], [21], [4], [4], [33], [63], [59], [16], [15, 119], [15, 119], [26], [46], [34, 94], [26], [46, 105], [23], [39, 115], [39, 115], [47, 115], [47, 115], [47, 115], [75], [33], [33], [33, 69], [33], [69], [69], [22], [29], [29], [29], [29], [29], [29], [26], [26], [2], [70], [76], [32], [46], [65], [65], [65], [66], [66], [66], [67], [67], [67], [51], [22], [22], [86, 109], [86, 109], [61], [68], [79, 22], [79, 22], [79, 22], [30, 38], [30, 38], [104], [104], [5], [5], [61], [107], [68], [118], [46], [50, 53], [33], [33], [34], [122], [60, 114], [60, 114], [101, 53], [106, 84], [106, 84], [50, 103], [56, 103], [26], [15, 105], [7, 20], [47, 20], [26], [1, 106], [1, 106], [26, 85], [26, 85], [5, 69], [43, 111], [30, 32], [51, 77], [46], [8], [8], [8], [53, 47], [80, 39], [80, 39], [45], [45], [4, 97], [4, 97], [107, 87], [107, 87], [26], [33, 114], [33, 114], [33, 11], [117], [117], [46, 46], [42, 5], [20, 12], [31, 116], [34, 102], [78], [49], [55, 32], [3, 110], [102, 102], [81, 81], [52, 8], [12, 81], [91, 88], [80, 80], [5, 42], [46], [81, 81], [26], [26], [26], [26], [46], [46], [18], [112], [46], [26], [93], [93], [123], [30], [121], [162], [65, 65], [65, 65], [65, 65], [66, 66], [66, 66], [66, 66], [67, 67], [67, 67], [67, 67], [50, 51], [35, 51], [72, 53], [22, 146], [22, 146], [7, 84], [7, 84], [82], [82], [82], [82], [82], [82], [108, 28], [108, 28], [145, 105], [145, 105], [145, 105], [31, 78], [31, 78], [133], [133], [45], [109, 103], [109, 103], [146, 159], [146, 159], [131, 144], [62, 125], [62, 125], [62, 125], [33, 93], [33, 93], [33, 143], [62, 39], [5, 39], [68, 34], [102, 34], [68, 34], [38, 68], [38, 68], [38, 68], [158, 151], [158, 151], [34, 20], [34, 20], [120, 91], [22, 153], [22, 153], [22, 153], [55], [125], [11, 34], [5, 75], [5, 75], [61, 153], [61, 153], [147, 98], [152], [152], [116, 5], [116, 5], [129], [129], [1, 60], [1, 133], [149], [149], [56, 101], [56, 101], [119, 172], [119, 172], [119, 172], [142, 98], [142, 98], [142, 98], [51, 145], [51, 145], [81], [81], [117], [34, 157], [34, 157], [9], [68, 61], [68, 75], [27], [27], [11, 130], [11, 130], [131, 93], [14, 127], [14, 127], [160], [160], [57, 58], [57, 58], [57, 58], [26], [26], [26], [140, 28], [140, 28], [18, 49], [18, 49], [18, 49], [79, 104], [79, 104], [79, 104], [202], [202], [26], [93, 75], [93, 60], [9, 7], [39, 144], [39, 144], [24, 125], [89, 103], [89, 103], [128, 39], [128, 39], [120, 157], [51, 125], [51, 125], [145, 142], [145, 142], [82, 18], [68, 55], [55], [55], [26], [49], [49], [154], [154], [154], [158], [158], [163], [164], [159], [46], [154], [32], [88], [65], [65], [65], [66], [66], [66], [67], [67], [67], [167, 53], [167, 53], [145], [49], [49], [14, 19], [61, 61], [14, 19], [79, 127], [79, 127], [166], [166], [166], [157], [157], [89, 104], [89, 104], [169], [51, 151], [51, 151], [99], [99], [176], [131], [131], [175], [175], [21, 126], [21, 126], [97, 181], [97, 181], [38, 143], [38, 143], [178], [178], [8, 87], [8, 87], [173], [173], [174], [174], [56, 56], [7, 84], [167, 53], [29], [157, 93], [157, 93], [157, 93], [158], [30, 119], [30, 119], [53, 119], [53, 119], [115, 20], [115, 20], [151, 119], [151, 119], [187], [186], [188], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [53, 167], [53, 167], [], [], [], [], [26], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [184], [45], [91], [], [], [], [104], [], [104], [3], [185], [55], [55], [], [181], [181], [36], [104], [23], [117], [159]];
var typesArray = [[12, 4], [12, 4], [12, 4], [10], [10], [10, 3], [11], [11], [11], [7], [7], [7, 3], [7, 4], [7, 4], [7, 4], [1, 3], [1, 3], [1, 3], [1], [1], [1, 3], [1, 3], [4], [4], [13], [13], [5], [5], [4], [4], [4, 5], [4], [4], [4, 5], [18], [18], [10], [10], [1, 18], [1, 18], [4, 3], [4, 3], [12, 4], [12, 4], [12, 4], [7, 12], [7, 12], [7, 4], [7, 4], [5], [5], [1], [1], [11], [11], [2], [2], [10], [10], [11], [11], [11, 2], [14], [14], [14], [2], [2], [2], [12, 4], [12, 4], [12, 4], [11, 4], [11, 4], [6, 5], [6, 5], [6, 5], [10], [10], [11, 14], [11, 14], [13, 9], [13, 9], [1, 3], [1, 3], [1, 3], [11], [11, 15], [4], [4], [11], [11, 15], [8, 4], [8, 4], [8, 4], [6, 5], [14], [14], [11], [11], [13], [13], [12, 14], [12, 14], [5], [5], [2], [2], [1], [4], [4], [5, 6], [5, 6], [1], [12], [1], [11], [11], [11], [11], [11], [11, 14], [14, 18], [7, 3], [15, 14], [13], [10], [7], [1], [11], [11, 3], [11, 15], [1], [1], [11], [13], [10], [1], [6, 11], [6, 11], [6, 11], [6, 11], [6, 3], [1], [15, 3], [13, 3], [10, 3], [16], [16], [16, 3], [14], [14], [12], [12], [12], [10], [10], [10], [11], [11], [11], [1], [1], [1, 3], [1, 3], [7, 3], [7, 3], [7, 4], [7, 4], [4, 3], [11, 13], [11, 13], [13], [18], [1, 18], [18], [18, 3], [14, 3], [14, 3], [13], [13], [13], [12], [11, 18], [11, 18], [6], [11], [12, 3], [12, 3], [12, 3], [1], [12], [12], [7, 3], [11, 5], [11, 5], [14], [17], [17, 3], [11, 14], [8], [14], [14], [1, 14], [7], [7, 9], [1], [5, 3], [9, 5], [18], [18], [11, 4], [7, 9], [7, 6], [7, 2], [17, 15], [1], [1], [10], [10, 6], [15, 5], [15, 5], [11, 6], [11], [11], [15, 3], [11, 3], [9, 3], [17, 10], [17, 10], [11, 16], [5], [5], [1], [1], [1], [2], [2], [15, 14], [13], [10], [1], [1], [13], [10], [11], [6, 5], [6, 5], [6, 17], [14, 3], [10, 3], [14, 12], [12], [12], [12], [10], [10, 2], [10, 2], [11], [11, 5], [11, 5], [17], [17], [1], [1], [7], [7], [7, 3], [7], [7, 4], [11, 12], [11, 12], [11, 12], [12], [12, 17], [12, 17], [1, 3], [1, 3], [11, 3], [11, 3], [14, 18], [14, 18], [14, 18], [7, 11], [7, 3], [12], [12, 2], [1], [1], [1], [7, 5], [7, 3], [7, 8], [1], [1], [1], [2], [2], [1, 18], [6], [1], [1], [17, 8], [9, 18], [9, 6], [9, 6], [9, 6], [2, 14], [2, 14], [13], [13], [13], [13], [7], [7], [12, 4], [4], [4], [11, 17], [11, 17], [11], [11], [10, 5], [10, 5], [10], [14], [14], [1], [5], [5, 16], [5, 16], [12], [12, 17], [1, 3], [16, 3], [1], [4], [6, 14], [6, 14], [11, 5], [11, 5], [11], [11, 17], [5, 14], [5, 14], [6, 12], [6, 12], [6, 7], [6, 7], [11], [11], [1], [1], [8], [8], [8], [8], [12, 3], [14], [17], [14], [15], [15], [15, 11], [15, 11], [15, 11], [11], [11], [11], [11, 6], [11], [16], [16], [16, 3], [9, 14], [9, 14], [9, 14], [6], [15], [9], [16, 14], [16, 14], [11], [5], [16, 3], [9, 14], [14], [12], [12], [12, 5], [10], [10, 2], [10, 2], [11], [11], [11, 9], [1, 3], [1, 3], [1, 3], [1], [1, 11], [7], [7], [13], [13], [13], [12, 4], [12, 4], [6], [6], [6, 9], [6, 9], [7], [7, 12], [7, 3], [7, 3], [7, 3], [13], [11], [11], [12], [12], [11], [11, 5], [1], [8, 3], [8, 3], [1], [1], [8], [17, 3], [1], [1], [14], [4, 17], [4, 17], [9, 14], [9, 14], [6], [14, 18], [1], [1, 3], [8, 17], [16, 5], [16, 5], [16, 5], [1], [2], [2, 9], [5], [5], [4, 7], [4, 17], [4, 2], [4, 2], [12], [11], [11], [11, 3], [12, 15], [12, 15], [17, 15], [13, 9], [1], [5, 6], [12], [13], [10], [18, 3], [7, 3], [12], [15], [5, 3], [15, 5], [1], [14, 2], [6, 9], [8], [15, 8], [13, 8], [14], [14], [14], [9, 16], [11, 16], [10, 9], [1], [8, 16], [14], [11], [11], [17], [12], [1], [14, 10], [12], [12], [12], [10], [10, 2], [10, 2], [11], [11], [11], [1], [1], [1], [1], [1], [17], [17], [12], [12], [10], [10], [11], [11], [14], [14], [1, 3], [1, 3], [1, 3], [13], [13], [6], [6], [6], [14, 3], [14, 3], [5], [5, 9], [1], [2], [2], [2], [11], [11, 5], [11, 5], [2], [2], [7, 12], [7, 12], [7, 12], [7, 4], [7, 4], [7, 4], [12, 18], [12, 18], [12], [12], [11], [5, 17], [5, 17], [5, 17], [10], [10], [12], [7, 6], [7, 6], [17, 2], [17, 2], [14, 3], [8], [8], [11, 6], [11, 6], [6, 3], [6, 3], [4], [4], [17], [17], [1], [1], [14], [14], [14], [14], [14], [14], [11, 3], [11, 3], [15], [15], [15], [1, 12], [1, 12], [13, 3], [7], [7, 9], [12, 4], [12, 4], [11, 8], [11, 8], [11], [7, 13], [7, 13], [12, 9], [12, 9], [9], [9], [9], [13], [13], [13], [14], [14], [8, 10], [8, 10], [8, 10], [16], [16], [16], [15], [15], [15], [7], [7], [5, 13], [2], [2], [16], [5, 8], [5, 8], [17, 9], [17, 9], [1], [1, 3], [1, 3], [17, 3], [17, 3], [10], [7, 9], [17, 16], [17, 16], [17, 16], [7, 10], [7, 10], [9, 2], [6, 2], [12, 2], [3], [13, 3], [16, 10], [16, 13], [5, 3], [16, 15], [11, 2], [1, 14], [7, 9], [12], [12], [12, 2], [10], [10], [10, 14], [11], [11], [11, 17], [1], [1, 5], [1, 3], [10, 3], [10, 3], [7], [7], [7, 3], [10, 1], [10, 1], [18], [18], [18], [12], [12], [2], [2, 17], [1], [14], [14], [9, 8], [9, 8], [9, 8], [18], [18], [18], [18], [17, 14], [17, 14], [6, 11], [6, 11], [4, 11], [4, 16], [11], [11], [13, 1], [13, 1], [6, 16], [6, 16], [6, 15], [6, 15], [18], [2, 3], [13, 18], [6, 18], [16], [16], [16], [9, 18], [8, 12], [8, 12], [8, 12], [8, 12], [15], [15], [3, 16], [3, 16], [18], [17, 3], [16, 5]];
var eggGroupArray = [[1, 7], [1, 7], [1, 7], [1, 14], [1, 14], [1, 14], [1, 2], [1, 2], [1, 2], [3], [3], [3], [3], [3], [3], [4], [4], [4], [5], [5], [4], [4], [5, 14], [5, 14], [5, 6], [5, 6], [5], [5], [1, 5], [15], [15], [1, 5], [1, 5], [1, 5], [6], [6], [5], [5], [6], [6], [4], [4], [7], [7], [7], [3, 7], [3, 7], [3], [3], [5], [5], [5], [5], [2, 5], [2, 5], [5], [5], [5], [5], [2], [2], [2], [8], [8], [8], [8], [8], [8], [7], [7], [7], [9], [9], [10], [10], [10], [5], [5], [1, 2], [1, 2], [10], [10], [4, 5], [4], [4], [2, 5], [2, 5], [11], [11], [9], [9], [11], [11], [11], [10], [8], [8], [9], [9], [10], [10], [7], [7], [1], [1], [8], [8], [1], [11], [11], [1, 5], [1, 5], [6], [7], [1], [2, 14], [2, 14], [12], [12], [9], [9], [8], [3], [8], [8], [8], [3], [5], [12, 14], [12, 14], [1, 2], [13], [5], [5], [5], [5], [10], [2, 9], [2, 9], [2, 9], [2, 9], [4], [1], [15], [15], [15], [2, 14], [2, 14], [2, 14], [15], [15], [1, 7], [1, 7], [1, 7], [5], [5], [5], [1, 2], [1, 2], [1, 2], [5], [5], [4], [4], [3], [3], [3], [3], [4], [12], [12], [15], [15], [15], [15], [4, 6], [4], [4], [1, 5], [1, 5], [1, 5], [7], [2, 6], [2, 6], [10], [2], [6, 7], [6, 7], [6, 7], [5], [7], [7], [3], [2, 5], [2, 5], [5], [5], [4], [1, 2], [11], [15], [11], [5], [3], [3], [5], [3], [10], [5, 6], [5, 6], [12], [3], [3], [3], [5], [5], [5], [11], [11], [5], [5], [2, 9], [2, 12], [2, 12], [2, 5], [2], [4], [5], [5], [2, 14], [5], [5], [10], [5], [5], [15], [8], [15], [15], [15], [5], [6], [15], [15], [15], [1], [1], [1], [15], [15], [15], [1, 14], [1, 14], [1, 14], [5], [5], [5], [1, 2], [1, 2], [1, 2], [5], [5], [5], [5], [3], [3], [3], [3], [3], [2, 7], [2, 7], [2, 7], [5, 7], [5, 7], [5, 7], [4], [4], [2, 4], [2, 4], [11], [11], [11], [2, 3], [2, 3], [6, 7], [6, 7], [5], [5], [5], [3], [3], [10], [1, 5], [1, 5], [1, 5], [8], [8], [15], [10], [5, 6], [5, 6], [8], [5, 6], [1], [1], [1], [8], [8], [5], [5], [6], [6], [3, 8], [3, 8], [6, 7], [11], [11], [12], [12], [5, 12], [5, 12], [5], [5], [5], [5], [5], [5, 8], [3], [3], [3], [7, 8], [7, 8], [4, 14], [4, 14], [5], [5, 14], [10], [10], [12], [12], [2, 9], [2, 9], [10], [10], [9], [9], [9], [9], [2, 14], [2, 14], [6, 11], [5], [11], [11], [11], [11], [1, 7], [11], [5], [15], [6, 10], [6, 10], [2, 5], [2, 5], [2, 5], [2], [2], [2], [2, 12], [12], [14], [14], [14], [10], [10], [10], [15], [15], [15], [15], [15], [15], [15], [15], [15], [15], [1, 7], [1, 7], [1, 7], [5, 8], [5, 8], [5, 8], [2, 5], [2, 5], [2, 5], [4], [4], [4], [2, 5], [2, 5], [3], [3], [5], [5], [5], [15], [6, 7], [1], [1], [1], [1], [3], [3], [3], [3], [3], [5, 6], [2, 5], [2, 5], [6, 7], [6, 7], [2, 11], [2, 11], [5], [11], [11], [5, 8], [5, 8], [11], [4], [5], [5], [15], [5], [5], [10], [10], [15], [15], [15], [4], [11], [1, 14], [1, 14], [1, 14], [15], [15], [5, 8], [5], [5], [3, 9], [3, 9], [8], [8], [7], [12], [12], [15], [1, 7], [1, 7], [5], [10], [1], [1, 5], [7], [8], [8], [4, 6], [3], [5], [5], [3], [5], [10], [11], [10], [11], [6, 10], [11], [15], [15], [15], [15], [15], [15], [15], [15], [15], [2, 6], [2, 6], [15], [15], [15]];
var baseStatsArray = [[45, 0, 49, 0, 49, 0, 65, 1, 65, 0, 45, 0], [60, 0, 62, 0, 63, 0, 80, 1, 80, 1, 60, 0], [80, 0, 82, 0, 83, 0, 100, 2, 100, 1, 80, 0], [39, 0, 52, 0, 43, 0, 60, 0, 50, 0, 65, 1], [58, 0, 64, 0, 58, 0, 80, 1, 65, 0, 80, 1], [78, 0, 84, 0, 78, 0, 109, 3, 85, 0, 100, 0], [44, 0, 48, 0, 65, 1, 50, 0, 64, 0, 43, 0], [59, 0, 63, 0, 80, 1, 65, 0, 80, 1, 58, 0], [79, 0, 83, 0, 100, 0, 85, 0, 105, 3, 78, 0], [45, 1, 30, 0, 35, 0, 20, 0, 20, 0, 45, 0], [50, 0, 20, 0, 55, 2, 25, 0, 25, 0, 30, 0], [60, 0, 45, 0, 50, 0, 90, 2, 80, 1, 70, 0], [40, 0, 35, 0, 30, 0, 20, 0, 20, 0, 50, 1], [45, 0, 25, 0, 50, 2, 25, 0, 25, 0, 35, 0], [65, 0, 90, 2, 40, 0, 45, 0, 80, 1, 75, 0], [40, 0, 45, 0, 40, 0, 35, 0, 35, 0, 56, 1], [63, 0, 60, 0, 55, 0, 50, 0, 50, 0, 71, 2], [83, 0, 80, 0, 75, 0, 70, 0, 70, 0, 101, 3], [30, 0, 56, 0, 35, 0, 25, 0, 35, 0, 72, 1], [55, 0, 81, 0, 60, 0, 50, 0, 70, 0, 97, 2], [40, 0, 60, 0, 30, 0, 31, 0, 31, 0, 70, 1], [65, 0, 90, 0, 65, 0, 61, 0, 61, 0, 100, 2], [35, 0, 60, 1, 44, 0, 40, 0, 54, 0, 55, 0], [60, 0, 95, 2, 69, 0, 65, 0, 79, 0, 80, 0], [35, 0, 55, 0, 40, 0, 50, 0, 50, 0, 90, 2], [60, 0, 90, 0, 55, 0, 90, 0, 80, 0, 110, 3], [50, 0, 75, 0, 85, 1, 20, 0, 30, 0, 40, 0], [75, 0, 100, 0, 110, 2, 45, 0, 55, 0, 65, 0], [55, 1, 47, 0, 52, 0, 40, 0, 40, 0, 41, 0], [70, 2, 62, 0, 67, 0, 55, 0, 55, 0, 56, 0], [90, 3, 92, 0, 87, 0, 75, 0, 85, 0, 76, 0], [46, 0, 57, 1, 40, 0, 40, 0, 40, 0, 50, 0], [61, 0, 72, 2, 57, 0, 55, 0, 55, 0, 65, 0], [81, 0, 102, 3, 77, 0, 85, 0, 75, 0, 85, 0], [70, 2, 45, 0, 48, 0, 60, 0, 65, 0, 35, 0], [95, 3, 70, 0, 73, 0, 95, 0, 90, 0, 60, 0], [38, 0, 41, 0, 40, 0, 50, 0, 65, 0, 65, 1], [73, 0, 76, 0, 75, 0, 81, 0, 100, 1, 100, 1], [115, 2, 45, 0, 20, 0, 45, 0, 25, 0, 20, 0], [140, 3, 70, 0, 45, 0, 85, 0, 50, 0, 45, 0], [40, 0, 45, 0, 35, 0, 30, 0, 40, 0, 55, 1], [75, 0, 80, 0, 70, 0, 65, 0, 75, 0, 90, 2], [45, 0, 50, 0, 55, 0, 75, 1, 65, 0, 30, 0], [60, 0, 65, 0, 70, 0, 85, 2, 75, 0, 40, 0], [75, 0, 80, 0, 85, 0, 110, 3, 90, 0, 50, 0], [35, 0, 70, 1, 55, 0, 45, 0, 55, 0, 25, 0], [60, 0, 95, 2, 80, 1, 60, 0, 80, 0, 30, 0], [60, 0, 55, 0, 50, 0, 40, 0, 55, 1, 45, 0], [70, 0, 65, 0, 60, 0, 90, 1, 75, 0, 90, 1], [10, 0, 55, 0, 25, 0, 35, 0, 45, 0, 95, 1], [35, 0, 100, 0, 50, 0, 50, 0, 70, 0, 120, 2], [40, 0, 45, 0, 35, 0, 40, 0, 40, 0, 90, 1], [65, 0, 70, 0, 60, 0, 65, 0, 65, 0, 115, 2], [50, 0, 52, 0, 48, 0, 65, 1, 50, 0, 55, 0], [80, 0, 82, 0, 78, 0, 95, 2, 80, 0, 85, 0], [40, 0, 80, 1, 35, 0, 35, 0, 45, 0, 70, 0], [65, 0, 105, 2, 60, 0, 60, 0, 70, 0, 95, 0], [55, 0, 70, 1, 45, 0, 70, 0, 50, 0, 60, 0], [90, 0, 110, 2, 80, 0, 100, 0, 80, 0, 95, 0], [40, 0, 50, 0, 40, 0, 40, 0, 40, 0, 90, 1], [65, 0, 65, 0, 65, 0, 50, 0, 50, 0, 90, 2], [90, 0, 95, 0, 95, 3, 70, 0, 90, 0, 70, 0], [25, 0, 20, 0, 15, 0, 105, 1, 55, 0, 90, 0], [40, 0, 35, 0, 30, 0, 120, 2, 70, 0, 105, 0], [55, 0, 50, 0, 45, 0, 135, 3, 95, 0, 120, 0], [70, 0, 80, 1, 50, 0, 35, 0, 35, 0, 35, 0], [80, 0, 100, 2, 70, 0, 50, 0, 60, 0, 45, 0], [90, 0, 130, 3, 80, 0, 65, 0, 85, 0, 55, 0], [50, 0, 75, 1, 35, 0, 70, 0, 30, 0, 40, 0], [65, 0, 90, 2, 50, 0, 85, 0, 45, 0, 55, 0], [80, 0, 105, 3, 65, 0, 100, 0, 70, 0, 70, 0], [40, 0, 40, 0, 35, 0, 50, 0, 100, 1, 70, 0], [80, 0, 70, 0, 65, 0, 80, 0, 120, 2, 100, 0], [40, 0, 80, 0, 100, 1, 30, 0, 30, 0, 20, 0], [55, 0, 95, 0, 115, 2, 45, 0, 45, 0, 35, 0], [80, 0, 120, 0, 130, 3, 55, 0, 65, 0, 45, 0], [50, 0, 85, 0, 55, 0, 65, 0, 65, 0, 90, 1], [65, 0, 100, 0, 70, 0, 80, 0, 80, 0, 105, 2], [90, 1, 65, 0, 65, 0, 40, 0, 40, 0, 15, 0], [95, 0, 75, 0, 110, 2, 100, 0, 80, 0, 30, 0], [25, 0, 35, 0, 70, 0, 95, 1, 55, 0, 45, 0], [50, 0, 60, 0, 95, 0, 120, 2, 70, 0, 70, 0], [52, 0, 90, 1, 55, 0, 58, 0, 62, 0, 60, 0], [35, 0, 85, 1, 45, 0, 35, 0, 35, 0, 75, 0], [60, 0, 110, 2, 70, 0, 60, 0, 60, 0, 110, 0], [65, 0, 45, 0, 55, 0, 45, 0, 70, 1, 45, 0], [90, 0, 70, 0, 80, 0, 70, 0, 95, 2, 70, 0], [80, 1, 80, 0, 50, 0, 40, 0, 50, 0, 25, 0], [105, 1, 105, 1, 75, 0, 65, 0, 100, 0, 50, 0], [30, 0, 65, 0, 100, 1, 45, 0, 25, 0, 40, 0], [50, 0, 95, 0, 180, 2, 85, 0, 45, 0, 70, 0], [30, 0, 35, 0, 30, 0, 100, 1, 35, 0, 80, 0], [45, 0, 50, 0, 45, 0, 115, 2, 55, 0, 95, 0], [60, 0, 65, 0, 60, 0, 130, 3, 75, 0, 110, 0], [35, 0, 45, 0, 160, 1, 30, 0, 45, 0, 70, 0], [60, 0, 48, 0, 45, 0, 43, 0, 90, 1, 42, 0], [85, 0, 73, 0, 70, 0, 73, 0, 115, 2, 67, 0], [30, 0, 105, 1, 90, 0, 25, 0, 25, 0, 50, 0], [55, 0, 130, 2, 115, 0, 50, 0, 50, 0, 75, 0], [40, 0, 30, 0, 50, 0, 55, 0, 55, 0, 100, 1], [60, 0, 50, 0, 70, 0, 80, 0, 80, 0, 150, 2], [60, 0, 40, 0, 80, 1, 60, 0, 45, 0, 40, 0], [95, 0, 95, 0, 85, 0, 125, 2, 75, 0, 55, 0], [50, 0, 50, 0, 95, 1, 40, 0, 50, 0, 35, 0], [60, 0, 80, 0, 110, 2, 50, 0, 80, 0, 45, 0], [50, 0, 120, 2, 53, 0, 35, 0, 110, 0, 87, 0], [50, 0, 105, 0, 79, 0, 35, 0, 110, 2, 76, 0], [90, 2, 55, 0, 75, 0, 60, 0, 75, 0, 30, 0], [40, 0, 65, 0, 95, 1, 60, 0, 45, 0, 35, 0], [65, 0, 90, 0, 120, 2, 85, 0, 70, 0, 60, 0], [80, 0, 85, 0, 95, 1, 30, 0, 30, 0, 25, 0], [105, 0, 130, 2, 120, 0, 45, 0, 45, 0, 40, 0], [250, 2, 5, 0, 5, 0, 35, 0, 105, 0, 50, 0], [65, 0, 55, 0, 115, 1, 100, 0, 40, 0, 60, 0], [105, 2, 95, 0, 80, 0, 40, 0, 80, 0, 90, 0], [30, 0, 40, 0, 70, 0, 70, 1, 25, 0, 60, 0], [55, 0, 65, 0, 95, 1, 95, 1, 45, 0, 85, 0], [45, 0, 67, 1, 60, 0, 35, 0, 50, 0, 63, 0], [80, 0, 92, 2, 65, 0, 65, 0, 80, 0, 68, 0], [30, 0, 45, 0, 55, 0, 70, 0, 55, 0, 85, 1], [60, 0, 75, 0, 85, 0, 100, 0, 85, 0, 115, 2], [40, 0, 45, 0, 65, 0, 100, 0, 120, 2, 90, 0], [70, 0, 110, 1, 80, 0, 55, 0, 80, 0, 105, 0], [65, 0, 50, 0, 35, 0, 115, 2, 95, 0, 95, 0], [65, 0, 83, 0, 57, 0, 95, 0, 85, 0, 105, 2], [65, 0, 95, 0, 57, 0, 100, 2, 85, 0, 93, 0], [65, 0, 125, 2, 100, 0, 55, 0, 70, 0, 85, 0], [75, 0, 100, 1, 95, 0, 40, 0, 70, 0, 110, 1], [20, 0, 10, 0, 55, 0, 15, 0, 20, 0, 80, 1], [95, 0, 125, 2, 79, 0, 60, 0, 100, 0, 81, 0], [130, 2, 85, 0, 80, 0, 85, 0, 95, 0, 60, 0], [48, 1, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0], [55, 0, 55, 0, 50, 0, 45, 0, 65, 1, 55, 0], [130, 2, 65, 0, 60, 0, 110, 0, 95, 0, 65, 0], [65, 0, 65, 0, 60, 0, 110, 0, 95, 0, 130, 2], [65, 0, 130, 2, 60, 0, 95, 0, 110, 0, 65, 0], [65, 0, 60, 0, 70, 0, 85, 1, 75, 0, 40, 0], [35, 0, 40, 0, 100, 1, 90, 0, 55, 0, 35, 0], [70, 0, 60, 0, 125, 2, 115, 0, 70, 0, 55, 0], [30, 0, 80, 0, 90, 1, 55, 0, 45, 0, 55, 0], [60, 0, 115, 2, 105, 0, 65, 0, 70, 0, 80, 0], [80, 0, 105, 0, 65, 0, 60, 0, 75, 0, 130, 2], [160, 2, 110, 0, 65, 0, 65, 0, 110, 0, 30, 0], [90, 0, 85, 0, 100, 0, 95, 0, 125, 3, 85, 0], [90, 0, 90, 0, 85, 0, 125, 3, 90, 0, 100, 0], [90, 0, 100, 0, 90, 0, 125, 3, 85, 0, 90, 0], [41, 0, 64, 1, 45, 0, 50, 0, 50, 0, 50, 0], [61, 0, 84, 2, 65, 0, 70, 0, 70, 0, 70, 0], [91, 0, 134, 3, 95, 0, 100, 0, 100, 0, 80, 0], [106, 0, 110, 0, 90, 0, 154, 3, 90, 0, 130, 0], [100, 3, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0], [45, 0, 49, 0, 65, 0, 49, 0, 65, 1, 45, 0], [60, 0, 62, 0, 80, 1, 63, 0, 80, 1, 60, 0], [80, 0, 82, 0, 100, 1, 83, 0, 100, 2, 80, 0], [39, 0, 52, 0, 43, 0, 60, 0, 50, 0, 65, 1], [58, 0, 64, 0, 58, 0, 80, 1, 65, 0, 80, 1], [78, 0, 84, 0, 78, 0, 109, 3, 85, 0, 100, 0], [50, 0, 65, 1, 64, 0, 44, 0, 48, 0, 43, 0], [65, 0, 80, 1, 80, 1, 59, 0, 63, 0, 58, 0], [85, 0, 105, 2, 100, 1, 79, 0, 83, 0, 78, 0], [35, 0, 46, 1, 34, 0, 35, 0, 45, 0, 20, 0], [85, 0, 76, 0, 64, 0, 45, 0, 55, 0, 90, 2], [60, 1, 30, 0, 30, 0, 36, 0, 56, 0, 50, 0], [100, 2, 50, 0, 50, 0, 86, 0, 96, 0, 70, 0], [40, 0, 20, 0, 30, 0, 40, 0, 80, 1, 55, 0], [55, 0, 35, 0, 50, 0, 55, 0, 110, 2, 85, 0], [40, 0, 60, 1, 40, 0, 40, 0, 40, 0, 30, 0], [70, 0, 90, 2, 70, 0, 60, 0, 70, 0, 40, 0], [85, 0, 90, 0, 80, 0, 70, 0, 80, 0, 130, 3], [75, 1, 38, 0, 38, 0, 56, 0, 56, 0, 67, 0], [125, 2, 58, 0, 58, 0, 76, 0, 76, 0, 67, 0], [20, 0, 40, 0, 15, 0, 35, 0, 35, 0, 60, 1], [50, 0, 25, 0, 28, 0, 45, 0, 55, 1, 15, 0], [90, 1, 30, 0, 15, 0, 40, 0, 20, 0, 15, 0], [35, 0, 20, 0, 65, 0, 40, 0, 65, 1, 20, 0], [55, 0, 40, 0, 85, 0, 80, 0, 105, 2, 40, 0], [40, 0, 50, 0, 45, 0, 70, 1, 45, 0, 70, 0], [65, 0, 75, 0, 70, 0, 95, 1, 70, 0, 95, 1], [55, 0, 40, 0, 40, 0, 65, 1, 45, 0, 35, 0], [70, 0, 55, 0, 55, 0, 80, 2, 60, 0, 45, 0], [90, 0, 75, 0, 85, 0, 115, 3, 90, 0, 55, 0], [75, 0, 80, 0, 95, 0, 90, 0, 100, 3, 50, 0], [70, 2, 20, 0, 50, 0, 20, 0, 50, 0, 40, 0], [100, 3, 50, 0, 80, 0, 60, 0, 80, 0, 50, 0], [70, 0, 100, 0, 115, 2, 30, 0, 65, 0, 30, 0], [90, 0, 75, 0, 75, 0, 90, 0, 100, 3, 70, 0], [35, 0, 35, 0, 40, 0, 35, 0, 55, 1, 50, 0], [55, 0, 45, 0, 50, 0, 45, 0, 65, 0, 80, 2], [75, 0, 55, 0, 70, 0, 55, 0, 95, 0, 110, 3], [55, 0, 70, 0, 55, 0, 40, 0, 55, 0, 85, 1], [30, 0, 30, 0, 30, 0, 30, 1, 30, 0, 30, 0], [75, 0, 75, 0, 55, 0, 105, 2, 85, 0, 30, 0], [65, 0, 65, 0, 45, 0, 75, 0, 45, 0, 95, 1], [55, 1, 45, 0, 45, 0, 25, 0, 25, 0, 15, 0], [95, 2, 85, 0, 85, 0, 65, 0, 65, 0, 35, 0], [65, 0, 65, 0, 60, 0, 130, 2, 95, 0, 110, 0], [95, 0, 65, 0, 110, 0, 60, 0, 130, 2, 65, 0], [60, 0, 85, 0, 42, 0, 85, 0, 42, 0, 91, 1], [95, 0, 75, 0, 80, 0, 100, 0, 110, 3, 30, 0], [60, 0, 60, 0, 60, 0, 85, 0, 85, 1, 85, 0], [48, 0, 72, 1, 48, 0, 72, 1, 48, 0, 48, 0], [190, 2, 33, 0, 58, 0, 33, 0, 58, 0, 33, 0], [70, 0, 80, 0, 65, 0, 90, 2, 65, 0, 85, 0], [50, 0, 65, 0, 90, 1, 35, 0, 35, 0, 15, 0], [75, 0, 90, 0, 140, 2, 60, 0, 60, 0, 40, 0], [100, 1, 70, 0, 70, 0, 65, 0, 65, 0, 45, 0], [65, 0, 75, 0, 105, 1, 35, 0, 65, 0, 85, 0], [75, 0, 85, 0, 200, 2, 55, 0, 65, 0, 30, 0], [60, 0, 80, 1, 50, 0, 40, 0, 40, 0, 30, 0], [90, 0, 120, 2, 75, 0, 60, 0, 60, 0, 45, 0], [65, 0, 95, 1, 85, 0, 55, 0, 55, 0, 85, 0], [70, 0, 130, 2, 100, 0, 55, 0, 80, 0, 65, 0], [20, 0, 10, 0, 230, 1, 10, 0, 230, 1, 5, 0], [80, 0, 125, 2, 75, 0, 40, 0, 95, 0, 85, 0], [55, 0, 95, 0, 55, 0, 35, 0, 75, 0, 115, 1], [60, 0, 80, 1, 50, 0, 50, 0, 50, 0, 40, 0], [90, 0, 130, 2, 75, 0, 75, 0, 75, 0, 55, 0], [40, 0, 40, 0, 40, 0, 70, 1, 40, 0, 20, 0], [60, 0, 50, 0, 120, 2, 90, 0, 80, 0, 30, 0], [50, 0, 50, 1, 40, 0, 30, 0, 30, 0, 50, 0], [100, 1, 100, 1, 80, 0, 60, 0, 60, 0, 50, 0], [65, 0, 55, 0, 95, 1, 65, 0, 95, 1, 35, 0], [35, 0, 65, 0, 35, 0, 65, 1, 35, 0, 65, 0], [75, 0, 105, 1, 75, 0, 105, 1, 75, 0, 45, 0], [45, 0, 55, 0, 45, 0, 65, 0, 45, 0, 75, 1], [85, 0, 40, 0, 70, 0, 80, 0, 140, 2, 70, 0], [65, 0, 80, 0, 140, 2, 40, 0, 70, 0, 70, 0], [45, 0, 60, 0, 30, 0, 80, 1, 50, 0, 65, 0], [75, 0, 90, 0, 50, 0, 110, 2, 80, 0, 95, 0], [75, 0, 95, 1, 95, 0, 95, 1, 95, 1, 85, 0], [90, 1, 60, 0, 60, 0, 40, 0, 40, 0, 40, 0], [90, 0, 120, 1, 120, 1, 60, 0, 60, 0, 50, 0], [85, 0, 80, 0, 90, 0, 105, 2, 95, 0, 60, 0], [73, 0, 95, 1, 62, 0, 85, 0, 65, 0, 85, 0], [55, 0, 20, 0, 35, 0, 20, 0, 45, 0, 75, 1], [35, 0, 35, 1, 35, 0, 35, 0, 35, 0, 35, 0], [50, 0, 95, 0, 95, 0, 35, 0, 110, 2, 70, 0], [45, 0, 30, 0, 15, 0, 85, 1, 65, 0, 65, 0], [45, 0, 63, 0, 37, 0, 65, 0, 55, 0, 95, 1], [45, 0, 75, 0, 37, 0, 70, 0, 55, 0, 83, 1], [95, 0, 80, 0, 105, 2, 40, 0, 70, 0, 100, 0], [255, 3, 10, 0, 10, 0, 75, 0, 135, 0, 55, 0], [90, 0, 85, 0, 75, 0, 115, 1, 100, 0, 115, 2], [115, 1, 115, 2, 85, 0, 90, 0, 75, 0, 100, 0], [100, 0, 75, 0, 115, 1, 90, 0, 115, 2, 85, 0], [50, 0, 64, 1, 50, 0, 45, 0, 50, 0, 41, 0], [70, 0, 84, 2, 70, 0, 65, 0, 70, 0, 51, 0], [100, 0, 134, 3, 110, 0, 95, 0, 100, 0, 61, 0], [106, 0, 90, 0, 130, 0, 90, 0, 154, 3, 110, 0], [106, 0, 130, 0, 90, 0, 110, 0, 154, 3, 90, 0], [100, 3, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0], [40, 0, 45, 0, 35, 0, 65, 0, 55, 0, 70, 1], [50, 0, 65, 0, 45, 0, 85, 0, 65, 0, 95, 2], [70, 0, 85, 0, 65, 0, 105, 0, 85, 0, 120, 3], [45, 0, 60, 0, 40, 0, 70, 1, 50, 0, 45, 0], [60, 0, 85, 1, 60, 0, 85, 1, 60, 0, 55, 0], [80, 0, 120, 3, 70, 0, 110, 0, 70, 0, 80, 0], [50, 0, 70, 1, 50, 0, 50, 0, 50, 0, 40, 0], [70, 0, 85, 2, 70, 0, 60, 0, 70, 0, 50, 0], [100, 0, 110, 3, 90, 0, 85, 0, 90, 0, 60, 0], [35, 0, 55, 1, 35, 0, 30, 0, 30, 0, 35, 0], [70, 0, 90, 2, 70, 0, 60, 0, 60, 0, 70, 0], [38, 0, 30, 0, 41, 0, 30, 0, 41, 0, 60, 1], [78, 0, 70, 0, 61, 0, 50, 0, 61, 0, 100, 2], [45, 1, 45, 0, 35, 0, 20, 0, 30, 0, 20, 0], [50, 0, 35, 0, 55, 2, 25, 0, 25, 0, 15, 0], [60, 0, 70, 0, 50, 0, 100, 3, 50, 0, 65, 0], [50, 0, 35, 0, 55, 2, 25, 0, 25, 0, 15, 0], [60, 0, 50, 0, 70, 0, 50, 0, 90, 3, 65, 0], [40, 0, 30, 0, 30, 0, 40, 0, 50, 1, 30, 0], [60, 0, 50, 0, 50, 0, 60, 0, 70, 2, 50, 0], [80, 0, 70, 0, 70, 0, 90, 0, 100, 3, 70, 0], [40, 0, 40, 0, 50, 1, 30, 0, 30, 0, 30, 0], [70, 0, 70, 2, 40, 0, 60, 0, 40, 0, 60, 0], [90, 0, 100, 3, 60, 0, 90, 0, 60, 0, 80, 0], [40, 0, 55, 0, 30, 0, 30, 0, 30, 0, 85, 1], [60, 0, 85, 0, 60, 0, 75, 0, 50, 0, 125, 2], [40, 0, 30, 0, 30, 0, 55, 0, 30, 0, 85, 1], [60, 0, 50, 0, 100, 2, 95, 0, 70, 0, 65, 0], [28, 0, 25, 0, 25, 0, 45, 1, 35, 0, 40, 0], [38, 0, 35, 0, 35, 0, 65, 2, 55, 0, 50, 0], [68, 0, 65, 0, 65, 0, 125, 3, 115, 0, 80, 0], [40, 0, 30, 0, 32, 0, 50, 0, 52, 0, 65, 1], [70, 0, 60, 0, 62, 0, 100, 1, 82, 1, 80, 0], [60, 1, 40, 0, 60, 0, 40, 0, 60, 0, 35, 0], [60, 0, 130, 2, 80, 0, 60, 0, 60, 0, 70, 0], [60, 1, 60, 0, 60, 0, 35, 0, 35, 0, 30, 0], [80, 0, 80, 0, 80, 0, 55, 0, 55, 0, 90, 2], [150, 3, 160, 0, 100, 0, 95, 0, 65, 0, 100, 0], [31, 0, 45, 0, 90, 1, 30, 0, 30, 0, 40, 0], [61, 0, 90, 0, 45, 0, 50, 0, 50, 0, 160, 2], [1, 2, 90, 0, 45, 0, 30, 0, 30, 0, 40, 0], [64, 1, 51, 0, 23, 0, 51, 0, 23, 0, 28, 0], [84, 2, 71, 0, 43, 0, 71, 0, 43, 0, 48, 0], [104, 3, 91, 0, 63, 0, 91, 0, 73, 0, 68, 0], [72, 1, 60, 0, 30, 0, 20, 0, 30, 0, 25, 0], [144, 2, 120, 0, 60, 0, 40, 0, 60, 0, 50, 0], [50, 1, 20, 0, 40, 0, 20, 0, 40, 0, 20, 0], [30, 0, 45, 0, 135, 1, 45, 0, 90, 0, 30, 0], [50, 0, 45, 0, 45, 0, 35, 0, 35, 0, 50, 1], [70, 1, 65, 0, 65, 0, 55, 0, 55, 0, 90, 1], [50, 0, 75, 1, 75, 1, 65, 0, 65, 0, 50, 0], [50, 0, 85, 1, 85, 1, 55, 0, 55, 0, 50, 0], [50, 0, 70, 0, 100, 1, 40, 0, 40, 0, 30, 0], [60, 0, 90, 0, 140, 2, 50, 0, 50, 0, 40, 0], [70, 0, 110, 0, 180, 3, 60, 0, 60, 0, 50, 0], [30, 0, 40, 0, 55, 0, 40, 0, 55, 0, 60, 1], [60, 0, 60, 0, 75, 0, 60, 0, 75, 0, 80, 2], [40, 0, 45, 0, 40, 0, 65, 0, 40, 0, 65, 1], [70, 0, 75, 0, 60, 0, 105, 0, 60, 0, 105, 2], [60, 0, 50, 0, 40, 0, 85, 0, 75, 0, 95, 1], [60, 0, 40, 0, 50, 0, 75, 0, 85, 0, 95, 1], [65, 0, 73, 0, 75, 0, 47, 0, 85, 0, 85, 1], [65, 0, 47, 0, 75, 0, 73, 0, 85, 0, 85, 1], [50, 0, 60, 0, 45, 0, 100, 2, 80, 0, 65, 0], [70, 1, 43, 0, 53, 0, 43, 0, 53, 0, 40, 0], [100, 2, 73, 0, 83, 0, 73, 0, 83, 0, 55, 0], [45, 0, 90, 1, 20, 0, 65, 0, 20, 0, 65, 0], [70, 0, 120, 2, 40, 0, 95, 0, 40, 0, 95, 0], [130, 1, 70, 0, 35, 0, 70, 0, 35, 0, 60, 0], [170, 2, 90, 0, 45, 0, 90, 0, 45, 0, 60, 0], [60, 0, 60, 0, 40, 0, 65, 1, 45, 0, 35, 0], [70, 0, 100, 1, 70, 0, 105, 1, 75, 0, 40, 0], [70, 0, 85, 0, 140, 2, 85, 0, 70, 0, 20, 0], [60, 0, 25, 0, 35, 0, 70, 0, 80, 1, 60, 0], [80, 0, 45, 0, 65, 0, 90, 0, 110, 2, 80, 0], [60, 0, 60, 0, 60, 0, 60, 1, 60, 0, 60, 0], [45, 0, 100, 1, 45, 0, 45, 0, 45, 0, 10, 0], [50, 0, 70, 1, 50, 0, 50, 0, 50, 0, 70, 1], [80, 0, 100, 1, 80, 0, 80, 0, 80, 0, 100, 2], [50, 0, 85, 0, 40, 0, 85, 1, 40, 0, 35, 0], [70, 0, 115, 1, 60, 0, 115, 1, 60, 0, 55, 0], [45, 0, 40, 0, 60, 0, 40, 0, 75, 1, 50, 0], [75, 0, 70, 0, 90, 0, 70, 0, 105, 2, 80, 0], [73, 0, 115, 2, 60, 0, 60, 0, 60, 0, 90, 0], [73, 0, 100, 1, 60, 0, 100, 1, 60, 0, 65, 0], [90, 0, 55, 0, 65, 0, 95, 2, 85, 0, 70, 0], [90, 0, 95, 2, 85, 0, 55, 0, 65, 0, 70, 0], [50, 1, 48, 0, 43, 0, 46, 0, 41, 0, 60, 0], [110, 2, 78, 0, 73, 0, 76, 0, 71, 0, 60, 0], [43, 0, 80, 1, 65, 0, 50, 0, 35, 0, 35, 0], [63, 0, 120, 2, 85, 0, 90, 0, 55, 0, 55, 0], [40, 0, 40, 0, 55, 0, 40, 0, 70, 1, 55, 0], [60, 0, 70, 0, 105, 0, 70, 0, 120, 2, 75, 0], [66, 0, 41, 0, 77, 0, 61, 0, 87, 1, 23, 0], [86, 0, 81, 0, 97, 0, 81, 0, 107, 2, 43, 0], [45, 0, 95, 1, 50, 0, 40, 0, 50, 0, 75, 0], [75, 0, 125, 2, 100, 0, 70, 0, 80, 0, 45, 0], [20, 0, 15, 0, 20, 0, 10, 0, 55, 0, 80, 1], [95, 0, 60, 0, 79, 0, 100, 0, 125, 2, 81, 0], [70, 1, 70, 0, 70, 0, 70, 0, 70, 0, 70, 0], [60, 0, 90, 0, 70, 0, 60, 0, 120, 1, 40, 0], [44, 0, 75, 1, 35, 0, 63, 0, 33, 0, 45, 0], [64, 0, 115, 2, 65, 0, 83, 0, 63, 0, 65, 0], [20, 0, 40, 0, 90, 0, 30, 0, 90, 1, 25, 0], [40, 0, 70, 0, 130, 1, 60, 0, 130, 1, 25, 0], [99, 2, 68, 0, 83, 0, 72, 0, 87, 0, 51, 0], [75, 0, 50, 0, 80, 0, 95, 1, 90, 1, 65, 0], [65, 0, 130, 2, 60, 0, 75, 0, 60, 0, 75, 0], [95, 1, 23, 0, 48, 0, 23, 0, 48, 0, 23, 0], [50, 1, 50, 0, 50, 0, 50, 0, 50, 0, 50, 0], [80, 2, 80, 0, 80, 0, 80, 0, 80, 0, 80, 0], [70, 1, 40, 0, 50, 0, 55, 0, 50, 0, 25, 0], [90, 2, 60, 0, 70, 0, 75, 0, 70, 0, 45, 0], [110, 3, 80, 0, 90, 0, 95, 0, 90, 0, 65, 0], [35, 0, 64, 0, 85, 1, 74, 0, 55, 0, 32, 0], [55, 0, 104, 1, 105, 1, 94, 0, 75, 0, 52, 0], [55, 0, 84, 0, 105, 0, 114, 2, 75, 0, 52, 0], [100, 1, 90, 0, 130, 1, 45, 0, 65, 0, 55, 0], [43, 0, 30, 0, 55, 0, 40, 0, 65, 0, 97, 1], [45, 0, 75, 1, 60, 0, 40, 0, 30, 0, 50, 0], [65, 0, 95, 0, 100, 2, 60, 0, 50, 0, 50, 0], [95, 0, 135, 3, 80, 0, 110, 0, 80, 0, 100, 0], [40, 0, 55, 0, 80, 1, 35, 0, 60, 0, 30, 0], [60, 0, 75, 0, 100, 2, 55, 0, 80, 0, 50, 0], [80, 0, 135, 0, 130, 3, 95, 0, 90, 0, 70, 0], [80, 0, 100, 0, 200, 3, 50, 0, 100, 0, 50, 0], [80, 0, 50, 0, 100, 0, 100, 0, 200, 3, 50, 0], [80, 0, 75, 0, 150, 2, 75, 0, 150, 1, 50, 0], [80, 0, 80, 0, 90, 0, 110, 0, 130, 3, 110, 0], [80, 0, 90, 0, 80, 0, 130, 3, 110, 0, 110, 0], [100, 0, 100, 0, 90, 0, 150, 3, 140, 0, 90, 0], [100, 0, 150, 3, 140, 0, 100, 0, 90, 0, 90, 0], [105, 0, 150, 2, 90, 0, 150, 1, 90, 0, 95, 0], [100, 3, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0], [50, 0, 150, 1, 50, 0, 150, 1, 50, 0, 150, 1], [55, 0, 68, 1, 64, 0, 45, 0, 55, 0, 31, 0], [75, 0, 89, 1, 85, 1, 55, 0, 65, 0, 36, 0], [95, 0, 109, 2, 105, 1, 75, 0, 85, 0, 56, 0], [44, 0, 58, 0, 44, 0, 58, 0, 44, 0, 61, 1], [64, 0, 78, 0, 52, 0, 78, 1, 52, 0, 81, 1], [76, 0, 104, 1, 71, 0, 104, 1, 71, 0, 108, 1], [53, 0, 51, 0, 53, 0, 61, 1, 56, 0, 40, 0], [64, 0, 66, 0, 68, 0, 81, 2, 76, 0, 50, 0], [84, 0, 86, 0, 88, 0, 111, 3, 101, 0, 60, 0], [40, 0, 55, 0, 30, 0, 30, 0, 30, 0, 60, 1], [55, 0, 75, 0, 50, 0, 40, 0, 40, 0, 80, 2], [85, 0, 120, 3, 70, 0, 50, 0, 60, 0, 100, 0], [59, 1, 45, 0, 40, 0, 35, 0, 40, 0, 31, 0], [79, 0, 85, 2, 60, 0, 55, 0, 60, 0, 71, 0], [37, 0, 25, 0, 41, 1, 25, 0, 41, 0, 25, 0], [77, 0, 85, 2, 51, 0, 55, 0, 51, 0, 65, 0], [45, 0, 65, 1, 34, 0, 40, 0, 34, 0, 45, 0], [60, 0, 85, 2, 49, 0, 60, 0, 49, 0, 60, 0], [80, 0, 120, 3, 79, 0, 95, 0, 79, 0, 70, 0], [40, 0, 30, 0, 35, 0, 50, 1, 70, 0, 55, 0], [60, 0, 70, 0, 65, 0, 125, 3, 105, 0, 90, 0], [67, 0, 125, 1, 40, 0, 30, 0, 30, 0, 58, 0], [97, 0, 165, 2, 60, 0, 65, 0, 50, 0, 58, 0], [30, 0, 42, 0, 118, 1, 42, 0, 88, 0, 30, 0], [60, 0, 52, 0, 168, 2, 47, 0, 138, 0, 30, 0], [40, 0, 29, 0, 45, 0, 29, 0, 45, 1, 36, 0], [60, 0, 59, 0, 85, 0, 79, 0, 105, 2, 36, 0], [70, 0, 94, 1, 50, 0, 94, 1, 50, 0, 66, 0], [30, 0, 30, 0, 42, 0, 30, 0, 42, 0, 70, 1], [70, 0, 80, 0, 102, 1, 80, 0, 102, 1, 40, 0], [60, 0, 45, 0, 70, 0, 45, 0, 90, 0, 95, 1], [55, 0, 65, 0, 35, 0, 60, 0, 30, 0, 85, 1], [85, 0, 105, 0, 55, 0, 85, 0, 50, 0, 115, 2], [45, 0, 35, 0, 45, 0, 62, 1, 53, 0, 35, 0], [70, 0, 60, 0, 70, 0, 87, 2, 78, 0, 85, 0], [76, 1, 48, 0, 48, 0, 57, 0, 62, 0, 34, 0], [111, 2, 83, 0, 68, 0, 92, 0, 82, 0, 39, 0], [75, 0, 100, 0, 66, 0, 60, 0, 66, 0, 115, 2], [90, 1, 50, 0, 34, 0, 60, 0, 44, 0, 70, 0], [150, 2, 80, 0, 44, 0, 90, 0, 54, 0, 80, 0], [55, 0, 66, 0, 44, 0, 44, 0, 56, 0, 85, 1], [65, 0, 76, 0, 84, 0, 54, 0, 96, 0, 105, 2], [60, 0, 60, 0, 60, 0, 105, 1, 105, 1, 105, 0], [100, 0, 125, 2, 52, 0, 105, 0, 52, 0, 71, 0], [49, 0, 55, 0, 42, 0, 42, 0, 37, 0, 85, 1], [71, 0, 82, 0, 64, 0, 64, 0, 59, 0, 112, 2], [45, 0, 30, 0, 50, 0, 65, 1, 50, 0, 45, 0], [63, 0, 63, 0, 47, 0, 41, 0, 41, 0, 74, 1], [103, 2, 93, 0, 67, 0, 71, 0, 61, 0, 84, 0], [57, 0, 24, 0, 86, 1, 24, 0, 86, 0, 23, 0], [67, 0, 89, 0, 116, 1, 79, 0, 116, 1, 33, 0], [50, 0, 80, 0, 95, 1, 10, 0, 45, 0, 10, 0], [20, 0, 25, 0, 45, 0, 70, 0, 90, 1, 60, 0], [100, 1, 5, 0, 5, 0, 15, 0, 65, 0, 30, 0], [76, 0, 65, 1, 45, 0, 92, 0, 42, 0, 91, 0], [50, 0, 92, 0, 108, 1, 92, 0, 108, 1, 35, 0], [58, 0, 70, 1, 45, 0, 40, 0, 45, 0, 42, 0], [68, 0, 90, 2, 65, 0, 50, 0, 55, 0, 82, 0], [108, 0, 130, 3, 95, 0, 80, 0, 85, 0, 102, 0], [135, 1, 85, 0, 40, 0, 40, 0, 85, 0, 5, 0], [40, 0, 70, 1, 40, 0, 35, 0, 40, 0, 60, 0], [70, 0, 110, 1, 70, 0, 115, 1, 70, 0, 90, 0], [68, 0, 72, 0, 78, 1, 38, 0, 42, 0, 32, 0], [108, 0, 112, 0, 118, 2, 68, 0, 72, 0, 47, 0], [40, 0, 50, 0, 90, 1, 30, 0, 55, 0, 65, 0], [70, 0, 90, 0, 110, 2, 60, 0, 75, 0, 95, 0], [48, 0, 61, 1, 40, 0, 61, 0, 40, 0, 50, 0], [83, 0, 106, 2, 65, 0, 86, 0, 65, 0, 85, 0], [74, 0, 100, 2, 72, 0, 90, 0, 72, 0, 46, 0], [49, 0, 49, 0, 56, 0, 49, 0, 61, 0, 66, 1], [69, 0, 69, 0, 76, 0, 69, 0, 86, 0, 91, 2], [45, 0, 20, 0, 50, 0, 60, 0, 120, 1, 50, 0], [60, 0, 62, 1, 50, 0, 62, 0, 60, 0, 40, 0], [90, 0, 92, 1, 75, 0, 92, 1, 85, 0, 60, 0], [70, 0, 120, 1, 65, 0, 45, 0, 85, 0, 125, 1], [70, 0, 70, 0, 115, 0, 130, 3, 90, 0, 60, 0], [110, 3, 85, 0, 95, 0, 80, 0, 95, 0, 50, 0], [115, 0, 140, 3, 130, 0, 55, 0, 55, 0, 40, 0], [100, 0, 100, 0, 125, 2, 110, 0, 50, 0, 50, 0], [75, 0, 123, 3, 67, 0, 95, 0, 85, 0, 95, 0], [75, 0, 95, 0, 67, 0, 125, 3, 95, 0, 83, 0], [85, 0, 50, 0, 95, 0, 120, 2, 115, 1, 80, 0], [86, 0, 76, 2, 86, 0, 116, 0, 56, 0, 95, 0], [65, 0, 110, 0, 130, 2, 60, 0, 65, 0, 95, 0], [65, 0, 60, 0, 110, 0, 130, 2, 95, 0, 65, 0], [75, 0, 95, 0, 125, 2, 45, 0, 75, 0, 95, 0], [110, 0, 130, 3, 80, 0, 70, 0, 60, 0, 80, 0], [85, 0, 80, 0, 70, 0, 135, 3, 75, 0, 90, 0], [68, 0, 125, 3, 65, 0, 65, 0, 115, 0, 80, 0], [60, 0, 55, 0, 145, 1, 75, 0, 150, 2, 40, 0], [45, 0, 100, 0, 135, 1, 65, 0, 135, 2, 45, 0], [70, 0, 80, 0, 70, 0, 80, 0, 70, 0, 110, 2], [50, 0, 50, 0, 77, 0, 95, 1, 77, 0, 91, 1], [75, 0, 75, 0, 130, 2, 75, 0, 130, 1, 95, 0], [80, 0, 105, 1, 105, 0, 105, 1, 105, 1, 80, 0], [75, 0, 125, 2, 70, 0, 125, 1, 70, 0, 115, 0], [100, 0, 120, 0, 120, 0, 150, 3, 100, 0, 90, 0], [90, 0, 120, 0, 100, 0, 150, 3, 120, 0, 100, 0], [91, 0, 90, 0, 106, 0, 130, 3, 106, 0, 77, 0], [110, 0, 160, 3, 110, 0, 80, 0, 110, 0, 100, 0], [150, 3, 100, 0, 120, 0, 100, 0, 120, 0, 90, 0], [120, 0, 70, 0, 120, 0, 75, 0, 130, 3, 85, 0], [80, 1, 80, 0, 80, 0, 80, 0, 80, 0, 80, 0], [100, 3, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0], [70, 0, 90, 0, 90, 0, 135, 2, 90, 0, 125, 1], [100, 3, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0], [120, 3, 120, 0, 120, 0, 120, 0, 120, 0, 120, 0], [100, 3, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0], [45, 0, 45, 0, 55, 0, 45, 0, 55, 0, 63, 1], [60, 0, 60, 0, 75, 0, 60, 0, 75, 0, 83, 2], [75, 0, 75, 0, 95, 0, 75, 0, 95, 0, 113, 3], [65, 1, 63, 0, 45, 0, 45, 0, 45, 0, 45, 0], [90, 0, 93, 2, 55, 0, 70, 0, 55, 0, 55, 0], [110, 0, 123, 3, 65, 0, 100, 0, 65, 0, 65, 0], [55, 0, 55, 0, 45, 0, 63, 1, 45, 0, 45, 0], [75, 0, 75, 0, 60, 0, 83, 2, 60, 0, 60, 0], [95, 0, 100, 0, 85, 0, 108, 3, 70, 0, 70, 0], [45, 0, 55, 1, 39, 0, 35, 0, 39, 0, 42, 0], [60, 0, 85, 1, 69, 0, 60, 0, 69, 0, 77, 0], [45, 0, 60, 1, 45, 0, 25, 0, 45, 0, 55, 0], [65, 0, 80, 2, 65, 0, 35, 0, 65, 0, 60, 0], [85, 0, 110, 3, 90, 0, 45, 0, 90, 0, 80, 0], [41, 0, 50, 0, 37, 0, 50, 0, 37, 0, 66, 1], [64, 0, 88, 0, 50, 0, 88, 0, 50, 0, 106, 2], [50, 0, 53, 0, 48, 0, 53, 0, 48, 0, 64, 1], [75, 0, 98, 0, 63, 0, 98, 0, 63, 0, 101, 2], [50, 0, 53, 0, 48, 0, 53, 0, 48, 0, 64, 1], [75, 0, 98, 0, 63, 0, 98, 0, 63, 0, 101, 2], [50, 0, 53, 0, 48, 0, 53, 0, 48, 0, 64, 1], [75, 0, 98, 0, 63, 0, 98, 0, 63, 0, 101, 2], [76, 1, 25, 0, 45, 0, 67, 0, 55, 0, 24, 0], [116, 2, 55, 0, 85, 0, 107, 0, 95, 0, 29, 0], [50, 0, 55, 1, 50, 0, 36, 0, 30, 0, 43, 0], [62, 0, 77, 2, 62, 0, 50, 0, 42, 0, 65, 0], [80, 0, 115, 3, 80, 0, 65, 0, 55, 0, 93, 0], [45, 0, 60, 0, 32, 0, 50, 0, 32, 0, 76, 1], [75, 0, 100, 0, 63, 0, 80, 0, 63, 0, 116, 2], [55, 0, 75, 0, 85, 1, 25, 0, 25, 0, 15, 0], [70, 0, 105, 1, 105, 1, 50, 0, 40, 0, 20, 0], [85, 0, 135, 3, 130, 0, 60, 0, 80, 0, 25, 0], [65, 0, 45, 0, 43, 0, 55, 0, 43, 0, 72, 1], [67, 0, 57, 0, 55, 0, 77, 0, 55, 0, 114, 2], [60, 0, 85, 1, 40, 0, 30, 0, 45, 0, 68, 0], [110, 0, 135, 2, 60, 0, 50, 0, 65, 0, 88, 0], [103, 2, 60, 0, 86, 0, 60, 0, 86, 0, 50, 0], [75, 0, 80, 1, 55, 0, 25, 0, 35, 0, 35, 0], [85, 0, 105, 2, 85, 0, 40, 0, 50, 0, 40, 0], [105, 0, 140, 3, 95, 0, 55, 0, 65, 0, 45, 0], [50, 0, 50, 0, 40, 0, 50, 0, 40, 0, 64, 1], [75, 2, 65, 0, 55, 0, 65, 0, 55, 0, 69, 0], [105, 3, 95, 0, 75, 0, 85, 0, 75, 0, 74, 0], [120, 2, 100, 0, 85, 0, 30, 0, 85, 0, 45, 0], [75, 0, 125, 2, 75, 0, 30, 0, 75, 0, 85, 0], [45, 0, 53, 0, 70, 1, 40, 0, 60, 0, 42, 0], [55, 0, 63, 0, 90, 2, 50, 0, 80, 0, 42, 0], [75, 0, 103, 3, 80, 0, 70, 0, 80, 0, 92, 0], [30, 0, 45, 0, 59, 1, 30, 0, 39, 0, 57, 0], [40, 0, 55, 0, 99, 2, 40, 0, 79, 0, 47, 0], [60, 0, 100, 0, 89, 0, 55, 0, 69, 0, 112, 3], [40, 0, 27, 0, 60, 0, 37, 0, 50, 0, 66, 1], [60, 0, 67, 0, 85, 0, 77, 0, 75, 0, 116, 2], [45, 0, 35, 0, 50, 0, 70, 1, 50, 0, 30, 0], [70, 0, 60, 0, 75, 0, 110, 2, 75, 0, 90, 0], [70, 0, 92, 0, 65, 0, 80, 0, 55, 0, 98, 2], [50, 0, 72, 1, 35, 0, 35, 0, 35, 0, 65, 0], [60, 0, 82, 2, 45, 0, 45, 0, 45, 0, 74, 0], [95, 0, 117, 3, 80, 0, 65, 0, 70, 0, 92, 0], [70, 0, 90, 1, 45, 0, 15, 0, 45, 0, 50, 0], [105, 0, 140, 2, 55, 0, 30, 0, 55, 0, 95, 0], [75, 0, 86, 0, 67, 0, 106, 2, 67, 0, 60, 0], [50, 0, 65, 0, 85, 1, 35, 0, 35, 0, 55, 0], [70, 0, 105, 0, 125, 2, 65, 0, 75, 0, 45, 0], [50, 0, 75, 1, 70, 0, 35, 0, 70, 0, 48, 0], [65, 0, 90, 0, 115, 1, 45, 0, 115, 1, 58, 0], [72, 0, 58, 0, 80, 0, 103, 2, 80, 0, 97, 0], [38, 0, 30, 0, 85, 1, 55, 0, 65, 0, 30, 0], [58, 0, 50, 0, 145, 2, 95, 0, 105, 0, 30, 0], [54, 0, 78, 0, 103, 1, 53, 0, 45, 0, 22, 0], [74, 0, 108, 0, 133, 2, 83, 0, 65, 0, 32, 0], [55, 0, 112, 1, 45, 0, 74, 0, 45, 0, 70, 0], [75, 0, 140, 2, 65, 0, 112, 0, 65, 0, 110, 0], [50, 0, 50, 0, 62, 0, 40, 0, 62, 0, 65, 1], [80, 0, 95, 2, 82, 0, 60, 0, 82, 0, 75, 0], [40, 0, 65, 0, 40, 0, 80, 1, 40, 0, 65, 0], [60, 0, 105, 0, 60, 0, 120, 2, 60, 0, 105, 0], [55, 0, 50, 0, 40, 0, 40, 0, 40, 0, 75, 1], [75, 0, 95, 0, 60, 0, 65, 0, 60, 0, 115, 2], [45, 0, 30, 0, 50, 0, 55, 0, 65, 1, 45, 0], [60, 0, 45, 0, 70, 0, 75, 0, 85, 2, 55, 0], [70, 0, 55, 0, 95, 0, 95, 0, 110, 3, 65, 0], [45, 0, 30, 0, 40, 0, 105, 1, 50, 0, 20, 0], [65, 0, 40, 0, 50, 0, 125, 2, 60, 0, 30, 0], [110, 0, 65, 0, 75, 0, 125, 3, 85, 0, 30, 0], [62, 1, 44, 0, 50, 0, 44, 0, 50, 0, 55, 0], [75, 0, 87, 0, 63, 0, 87, 0, 63, 0, 98, 2], [36, 0, 50, 0, 50, 0, 65, 1, 60, 0, 44, 0], [51, 0, 65, 0, 65, 0, 80, 2, 75, 0, 59, 0], [71, 0, 95, 0, 85, 0, 110, 3, 95, 0, 79, 0], [60, 0, 60, 0, 50, 0, 40, 0, 50, 0, 75, 1], [80, 0, 100, 2, 70, 0, 60, 0, 70, 0, 95, 0], [55, 0, 75, 0, 60, 0, 75, 0, 60, 0, 103, 2], [50, 0, 75, 1, 45, 0, 40, 0, 45, 0, 60, 0], [70, 0, 135, 2, 105, 0, 60, 0, 105, 0, 20, 0], [69, 1, 55, 0, 45, 0, 55, 0, 55, 0, 15, 0], [114, 2, 85, 0, 70, 0, 85, 0, 80, 0, 30, 0], [55, 0, 40, 0, 50, 0, 65, 0, 85, 1, 40, 0], [100, 0, 60, 0, 70, 0, 85, 0, 105, 2, 60, 0], [165, 2, 75, 0, 80, 0, 40, 0, 45, 0, 65, 0], [50, 0, 47, 0, 50, 0, 57, 0, 50, 0, 65, 1], [70, 0, 77, 0, 60, 0, 97, 0, 60, 0, 108, 2], [44, 0, 50, 0, 91, 1, 24, 0, 86, 0, 10, 0], [74, 0, 94, 0, 131, 2, 54, 0, 116, 0, 20, 0], [40, 0, 55, 0, 70, 1, 45, 0, 60, 0, 30, 0], [60, 0, 80, 0, 95, 2, 70, 0, 85, 0, 50, 0], [60, 0, 100, 0, 115, 3, 70, 0, 85, 0, 90, 0], [35, 0, 55, 0, 40, 0, 45, 0, 40, 0, 60, 1], [65, 0, 85, 2, 70, 0, 75, 0, 70, 0, 40, 0], [85, 0, 115, 3, 80, 0, 105, 0, 80, 0, 50, 0], [55, 0, 55, 0, 55, 0, 85, 1, 55, 0, 30, 0], [75, 0, 75, 0, 75, 0, 125, 2, 95, 0, 40, 0], [50, 0, 30, 0, 55, 0, 65, 1, 55, 0, 20, 0], [60, 0, 40, 0, 60, 0, 95, 2, 60, 0, 55, 0], [60, 0, 55, 0, 90, 0, 145, 3, 90, 0, 80, 0], [46, 0, 87, 1, 60, 0, 30, 0, 40, 0, 57, 0], [66, 0, 117, 2, 70, 0, 40, 0, 50, 0, 67, 0], [76, 0, 147, 3, 90, 0, 60, 0, 70, 0, 97, 0], [55, 0, 70, 1, 40, 0, 60, 0, 40, 0, 40, 0], [95, 0, 130, 2, 80, 0, 70, 0, 80, 0, 50, 0], [80, 0, 50, 0, 50, 0, 95, 0, 135, 2, 105, 0], [50, 0, 40, 0, 85, 1, 40, 0, 65, 0, 25, 0], [80, 0, 70, 0, 40, 0, 100, 0, 60, 0, 145, 2], [109, 2, 66, 0, 84, 0, 81, 0, 99, 0, 32, 0], [45, 0, 85, 1, 50, 0, 55, 0, 50, 0, 65, 0], [65, 0, 125, 2, 60, 0, 95, 0, 60, 0, 105, 0], [77, 0, 120, 2, 90, 0, 60, 0, 90, 0, 48, 0], [59, 0, 74, 1, 50, 0, 35, 0, 50, 0, 35, 0], [89, 0, 124, 2, 80, 0, 55, 0, 80, 0, 55, 0], [45, 0, 85, 1, 70, 0, 40, 0, 40, 0, 60, 0], [65, 0, 125, 2, 100, 0, 60, 0, 70, 0, 70, 0], [95, 0, 110, 2, 95, 0, 40, 0, 95, 0, 55, 0], [70, 0, 83, 1, 50, 0, 37, 0, 50, 0, 60, 0], [100, 0, 123, 2, 75, 0, 57, 0, 75, 0, 80, 0], [70, 0, 55, 0, 75, 1, 45, 0, 65, 0, 60, 0], [110, 0, 65, 0, 105, 0, 55, 2, 95, 0, 80, 0], [85, 0, 97, 0, 66, 0, 105, 2, 66, 0, 65, 0], [58, 0, 109, 0, 112, 2, 48, 0, 48, 0, 109, 0], [52, 0, 65, 1, 50, 0, 45, 0, 50, 0, 38, 0], [72, 0, 85, 2, 70, 0, 65, 0, 70, 0, 58, 0], [92, 0, 105, 0, 90, 0, 125, 3, 90, 0, 98, 0], [55, 0, 85, 1, 55, 0, 50, 0, 55, 0, 60, 0], [85, 0, 60, 0, 65, 0, 135, 3, 105, 0, 100, 0], [91, 0, 90, 0, 129, 3, 90, 0, 72, 0, 108, 0], [91, 0, 129, 3, 90, 0, 72, 0, 90, 0, 108, 0], [91, 0, 90, 0, 72, 0, 90, 0, 129, 3, 108, 0], [79, 0, 115, 3, 70, 0, 125, 0, 80, 0, 111, 0], [79, 0, 115, 3, 70, 0, 125, 0, 80, 0, 111, 0], [100, 0, 120, 0, 100, 0, 150, 3, 120, 0, 90, 0], [100, 0, 150, 3, 120, 0, 120, 0, 100, 0, 90, 0], [89, 0, 125, 0, 90, 0, 115, 3, 80, 0, 101, 0], [125, 1, 130, 1, 90, 0, 130, 1, 90, 0, 95, 0], [91, 0, 72, 0, 90, 0, 129, 3, 90, 0, 108, 0], [100, 0, 77, 0, 77, 0, 128, 1, 128, 1, 90, 1], [71, 0, 120, 1, 95, 0, 120, 1, 95, 0, 99, 1], [56, 0, 61, 0, 65, 0, 48, 0, 45, 0, 38, 0], [61, 0, 78, 0, 95, 0, 56, 0, 58, 0, 57, 0], [88, 0, 107, 0, 122, 0, 74, 0, 75, 0, 64, 0], [40, 0, 45, 0, 40, 0, 62, 0, 60, 0, 60, 0], [59, 0, 59, 0, 58, 0, 90, 0, 70, 0, 73, 0], [75, 0, 69, 0, 72, 0, 114, 0, 100, 0, 104, 0], [41, 0, 56, 0, 40, 0, 62, 0, 44, 0, 71, 0], [54, 0, 63, 0, 52, 0, 83, 0, 56, 0, 97, 0], [72, 0, 95, 0, 67, 0, 103, 0, 71, 0, 122, 0], [38, 0, 36, 0, 38, 0, 32, 0, 36, 0, 57, 0], [85, 0, 56, 0, 77, 0, 50, 0, 77, 0, 78, 0], [45, 0, 50, 0, 43, 0, 40, 0, 38, 0, 62, 0], [62, 0, 73, 0, 55, 0, 56, 0, 52, 0, 84, 0], [78, 0, 81, 0, 71, 0, 74, 0, 69, 0, 126, 0], [38, 0, 35, 0, 40, 0, 27, 0, 25, 0, 35, 0], [45, 0, 22, 0, 60, 0, 27, 0, 30, 0, 29, 0], [80, 0, 52, 0, 50, 0, 90, 0, 50, 0, 89, 0], [62, 0, 50, 0, 58, 0, 73, 0, 54, 0, 72, 0], [86, 0, 68, 0, 72, 0, 109, 0, 66, 0, 106, 0], [44, 0, 38, 0, 39, 0, 61, 0, 79, 0, 42, 0], [54, 0, 45, 0, 47, 0, 75, 0, 98, 0, 52, 0], [78, 0, 65, 0, 68, 0, 112, 0, 154, 0, 75, 0], [66, 0, 65, 0, 48, 0, 62, 0, 57, 0, 52, 0], [123, 0, 100, 0, 62, 0, 97, 0, 81, 0, 68, 0], [67, 0, 82, 0, 62, 0, 46, 0, 48, 0, 43, 0], [95, 0, 124, 0, 78, 0, 69, 0, 71, 0, 58, 0], [75, 0, 80, 0, 60, 0, 65, 0, 90, 0, 102, 0], [62, 0, 48, 0, 54, 0, 63, 0, 60, 0, 68, 0], [74, 0, 48, 0, 76, 0, 83, 0, 81, 0, 104, 0], [45, 0, 80, 0, 100, 0, 35, 0, 37, 0, 28, 0], [59, 0, 110, 0, 150, 0, 45, 0, 49, 0, 35, 0], [60, 0, 50, 0, 150, 0, 50, 0, 150, 0, 60, 0], [78, 0, 52, 0, 60, 0, 63, 0, 65, 0, 23, 0], [101, 0, 72, 0, 72, 0, 99, 0, 89, 0, 29, 0], [62, 0, 48, 0, 66, 0, 59, 0, 57, 0, 49, 0], [82, 0, 80, 0, 86, 0, 85, 0, 75, 0, 72, 0], [53, 0, 54, 0, 53, 0, 37, 0, 46, 0, 45, 0], [86, 0, 92, 0, 88, 0, 68, 0, 75, 0, 73, 0], [42, 0, 52, 0, 67, 0, 39, 0, 56, 0, 50, 0], [72, 0, 105, 0, 115, 0, 54, 0, 86, 0, 68, 0], [50, 0, 60, 0, 60, 0, 60, 0, 60, 0, 30, 0], [65, 0, 75, 0, 90, 0, 97, 0, 123, 0, 44, 0], [50, 0, 53, 0, 62, 0, 58, 0, 63, 0, 44, 0], [71, 0, 73, 0, 88, 0, 120, 0, 89, 0, 59, 0], [44, 0, 38, 0, 33, 0, 61, 0, 43, 0, 70, 0], [62, 0, 55, 0, 52, 0, 109, 0, 94, 0, 109, 0], [58, 0, 89, 0, 77, 0, 45, 0, 45, 0, 48, 0], [82, 0, 121, 0, 119, 0, 69, 0, 59, 0, 71, 0], [77, 0, 59, 0, 50, 0, 67, 0, 63, 0, 46, 0], [123, 0, 77, 0, 72, 0, 99, 0, 92, 0, 58, 0], [95, 0, 65, 0, 65, 0, 110, 0, 130, 0, 60, 0], [78, 0, 92, 0, 75, 0, 74, 0, 63, 0, 118, 0], [67, 0, 58, 0, 57, 0, 81, 0, 67, 0, 101, 0], [50, 0, 50, 0, 150, 0, 50, 0, 150, 0, 50, 0], [45, 0, 50, 0, 35, 0, 55, 0, 75, 0, 40, 0], [68, 0, 75, 0, 53, 0, 83, 0, 113, 0, 60, 0], [90, 0, 100, 0, 70, 0, 110, 0, 150, 0, 80, 0], [57, 0, 80, 0, 91, 0, 80, 0, 87, 0, 75, 0], [43, 0, 70, 0, 48, 0, 50, 0, 60, 0, 38, 0], [85, 0, 110, 0, 76, 0, 65, 0, 82, 0, 56, 0], [49, 0, 66, 0, 70, 0, 44, 0, 55, 0, 51, 0], [65, 0, 90, 0, 122, 0, 58, 0, 75, 0, 84, 0], [55, 0, 69, 0, 85, 0, 32, 0, 35, 0, 28, 0], [95, 0, 117, 0, 184, 0, 44, 0, 46, 0, 28, 0], [40, 0, 30, 0, 35, 0, 45, 0, 40, 0, 55, 0], [85, 0, 70, 0, 80, 0, 97, 0, 80, 0, 123, 0], [126, 0, 131, 0, 95, 0, 131, 0, 98, 0, 99, 0], [126, 0, 131, 0, 95, 0, 131, 0, 98, 0, 99, 0], [108, 0, 100, 0, 121, 0, 81, 0, 95, 0, 95, 0], [50, 0, 100, 0, 150, 0, 100, 0, 150, 0, 50, 0], [80, 0, 110, 0, 60, 0, 150, 0, 130, 0, 70, 0], [80, 0, 110, 0, 120, 0, 130, 0, 90, 0, 70, 0]];
var evolutionArray = [[2, 1, 16], [3, 1, 32], [0, 1, 0], [5, 1, 16], [6, 1, 36], [0, 1, 0], [8, 1, 16], [9, 1, 36], [0, 1, 0], [11, 1, 7], [12, 1, 10], [0, 1, 0], [14, 1, 7], [15, 1, 10], [0, 1, 0], [17, 1, 18], [18, 3, 36], [0, 1, 0], [20, 1, 20], [0, 3, 0], [22, 1, 20], [0, 3, 0], [24, 1, 22], [0, 3, 0], [26, "thunder Stone", 0], [0, 1, 0], [28, 3, 22], [0, 1, 0], [30, 1, 16], [31, "moon Stone", 0], [0, 1, 0], [33, 1, 16], [34, "moon Stone", 0], [0, 1, 0], [36, "moon Stone", 0], [0, 1, 28], [38, "fire Stone", 0], [0, 1, 0], [40, "moon Stone", 0], [0, 1, 0], [42, 2, 22], [0, 1, 0], [44, 2, 21], [45, "leaf Stone", 0], [0, 3, 0], [47, 1, 24], [0, 1, 0], [49, 2, 31], [0, 1, 0], [51, 1, 26], [0, 1, 0], [53, 1, 28], [0, 1, 0], [55, 1, 33], [0, 3, 0], [57, 1, 28], [0, 2, 0], [59, "fire Stone", 0], [0, 1, 0], [61, 1, 25], [62, "water Stone", 0], [0, 1, 0], [64, 1, 16], [65, "trade", 0], [0, 1, 0], [67, 1, 28], [68, "trade", 0], [0, 1, 0], [70, 1, 21], [71, "leaf Stone", 0], [0, 1, 0], [73, 1, 30], [0, 1, 0], [75, 1, 25], [76, "trade", 0], [0, 3, 0], [78, 3, 40], [0, 3, 0], [80, 1, 37], [0, 1, 0], [82, 1, 30], [0, 1, 0], [0, 1, 0], [85, 1, 31], [0, 1, 0], [87, 1, 34], [0, 1, 0], [89, 1, 38], [0, 1, 0], [91, "water Stone", 0], [0, 1, 0], [93, 1, 25], [94, "trade", 0], [0, 1, 0], [0, 1, 0], [97, 1, 26], [0, 1, 0], [99, 1, 28], [0, 1, 0], [101, 3, 30], [0, 1, 0], [103, "leaf Stone", 0], [0, 1, 0], [105, 2, 28], [0, 1, 0], [0, 1, 0], [0, 3, 0], [0, 1, 0], [110, 1, 35], [0, 1, 0], [112, 2, 42], [0, 1, 0], [0, 1, 0], [0, 2, 0], [0, 1, 0], [117, 2, 32], [0, 1, 0], [119, 1, 33], [0, 1, 0], [121, "water Stone", 0], [0, 1, 0], [0, 1, 0], [0, 2, 0], [0, 1, 0], [0, 2, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [130, 1, 20], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, "eevee", 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [139, 1, 40], [0, 1, 0], [141, 1, 40], [0, 1, 0], [0, 1, 0], [0, 3, 0], [0, 1, 0], [0, 3, 0], [0, 1, 0], [148, 1, 30], [149, 1, 55], [0, 1, 0], [0, 1, 0], [0, 1, 0], [153, 1, 16], [154, 1, 32], [0, 1, 0], [156, 1, 14], [157, 1, 36], [0, 1, 0], [159, 1, 18], [160, 1, 30], [0, 1, 0], [162, 1, 15], [0, 1, 0], [164, 1, 20], [0, 1, 0], [166, 1, 18], [0, 1, 0], [168, 1, 22], [0, 1, 0], [0, 1, 0], [171, 1, 27], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [468, 1, 0], [178, 1, 25], [0, 1, 0], [180, 1, 15], [181, 1, 30], [0, 1, 0], [0, 1, 0], [184, 1, 18], [0, 1, 0], [0, 1, 0], [0, 2, 0], [188, 2, 18], [189, 1, 27], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [195, 1, 20], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [205, 3, 31], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [210, 1, 23], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [217, 3, 30], [0, 3, 0], [219, 1, 38], [0, 1, 0], [221, 1, 33], [0, 1, 0], [0, 1, 0], [224, 1, 25], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [229, 1, 24], [0, 1, 0], [0, 1, 0], [232, 1, 25], [0, 2, 0], [0, 1, 0], [0, 2, 0], [0, 2, 0], [0, 3, 0], [0, 1, 0], [124, 1, 30], [125, 1, 30], [126, 1, 30], [0, 1, 0], [0, 2, 0], [0, 3, 0], [0, 1, 0], [0, 2, 0], [247, 3, 30], [248, 1, 55], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [253, 1, 16], [254, 1, 36], [0, 1, 0], [256, 1, 16], [257, 1, 36], [0, 3, 0], [259, 3, 16], [260, 3, 36], [0, 3, 0], [262, 1, 18], [0, 1, 0], [264, 1, 20], [0, 1, 0], [0, 2, 0], [267, 1, 10], [0, 1, 0], [269, 1, 10], [0, 2, 0], [271, 1, 14], [0, 1, 0], [0, 1, 0], [274, 1, 14], [0, 1, 0], [0, 1, 0], [277, 3, 22], [0, 3, 0], [279, 1, 25], [0, 1, 0], [281, 1, 20], [282, 1, 30], [0, 1, 0], [284, 1, 22], [0, 1, 0], [286, 1, 23], [0, 1, 0], [288, 1, 18], [289, 3, 36], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [294, 1, 20], [295, 1, 40], [0, 1, 0], [297, 1, 24], [0, 2, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [305, 1, 32], [306, 3, 42], [0, 1, 0], [308, 1, 37], [0, 3, 0], [310, 1, 26], [0, 1, 0], [0, 1, 0], [0, 2, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [317, 1, 26], [0, 1, 0], [319, 1, 30], [0, 1, 0], [321, 1, 40], [0, 2, 0], [323, 1, 33], [0, 1, 0], [0, 1, 0], [326, 1, 32], [0, 1, 0], [0, 2, 0], [329, 1, 35], [330, 2, 45], [0, 1, 0], [332, 1, 32], [0, 1, 0], [334, 1, 35], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [340, 1, 30], [0, 1, 0], [342, 1, 30], [0, 1, 0], [344, 1, 36], [0, 2, 0], [346, 1, 40], [0, 1, 0], [348, 3, 40], [0, 3, 0], [0, 1, 0], [0, 2, 0], [0, 1, 0], [0, 1, 0], [354, 1, 37], [0, 1, 0], [356, 3, 37], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0], [202, 1, 15], [362, 1, 42], [0, 1, 0], [364, 1, 32], [365, 1, 44], [0, 1, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [372, 0, 30], [373, 0, 50], [0, 0, 0], [375, 0, 20], [376, 0, 45], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [388, 0, 18], [389, 0, 32], [0, 0, 0], [391, 0, 14], [392, 0, 36], [0, 0, 0], [394, 0, 16], [395, 0, 36], [0, 0, 0], [397, 0, 14], [398, 0, 34], [0, 0, 0], [400, 0, 15], [0, 0, 0], [402, 0, 10], [0, 0, 0], [404, 0, 15], [405, 0, 30], [0, 0, 0], [0, 0, 0], [0, 0, 0], [409, 0, 30], [0, 0, 0], [411, 0, 30], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [416, 0, 21], [0, 0, 0], [0, 0, 0], [419, 0, 26], [0, 0, 0], [421, 0, 25], [0, 0, 0], [423, 0, 30], [0, 0, 0], [0, 0, 0], [426, 0, 28], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [432, 0, 38], [0, 0, 0], [0, 0, 0], [435, 0, 34], [0, 0, 0], [437, 0, 33], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [444, 0, 24], [445, 0, 48], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [450, 0, 34], [0, 0, 0], [452, 0, 40], [0, 0, 0], [454, 0, 37], [0, 0, 0], [0, 0, 0], [457, 0, 31], [0, 0, 0], [0, 0, 0], [460, 0, 40], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]];
var baseExpArray = [64, 142, 236, 62, 142, 240, 63, 142, 239, 39, 72, 173, 39, 72, 173, 50, 122, 211, 51, 145, 52, 155, 58, 153, 105, 214, 60, 158, 55, 128, 223, 55, 128, 223, 113, 213, 60, 177, 95, 191, 49, 159, 64, 138, 216, 57, 142, 61, 158, 53, 142, 58, 154, 64, 175, 61, 159, 70, 194, 60, 135, 225, 62, 140, 221, 61, 142, 227, 60, 137, 216, 67, 180, 60, 137, 218, 82, 175, 63, 172, 65, 163, 123, 62, 161, 65, 166, 65, 175, 61, 184, 62, 142, 225, 77, 66, 169, 65, 166, 66, 168, 65, 182, 64, 149, 159, 159, 77, 68, 172, 69, 170, 395, 87, 172, 59, 154, 64, 158, 68, 182, 161, 100, 159, 172, 173, 175, 172, 40, 189, 187, 101, 65, 184, 184, 184, 79, 71, 173, 71, 173, 180, 189, 261, 261, 261, 60, 147, 270, 306, 270, 64, 142, 236, 62, 142, 240, 63, 142, 239, 43, 145, 52, 155, 53, 137, 50, 137, 241, 66, 161, 41, 44, 42, 49, 142, 64, 165, 56, 128, 225, 216, 88, 185, 144, 225, 50, 119, 203, 72, 36, 149, 78, 42, 151, 184, 184, 81, 172, 87, 118, 142, 159, 58, 163, 145, 86, 179, 60, 158, 86, 175, 177, 175, 86, 66, 175, 50, 144, 50, 158, 133, 60, 168, 116, 163, 163, 66, 175, 243, 66, 175, 180, 163, 88, 42, 159, 61, 72, 73, 172, 608, 261, 261, 261, 60, 144, 270, 306, 306, 270, 62, 142, 239, 62, 142, 239, 62, 142, 241, 44, 147, 48, 147, 39, 72, 173, 41, 135, 44, 119, 216, 44, 119, 216, 54, 151, 54, 151, 40, 97, 233, 54, 145, 59, 161, 56, 154, 252, 53, 160, 83, 48, 126, 216, 47, 166, 38, 75, 52, 133, 133, 133, 66, 151, 239, 56, 144, 59, 166, 142, 142, 140, 140, 140, 60, 163, 61, 161, 80, 175, 61, 161, 165, 66, 165, 126, 58, 119, 234, 67, 166, 62, 172, 160, 160, 154, 154, 58, 164, 62, 164, 60, 175, 71, 173, 71, 173, 40, 189, 147, 154, 59, 159, 59, 159, 161, 149, 163, 52, 60, 168, 58, 144, 239, 69, 170, 170, 170, 116, 60, 147, 270, 60, 147, 270, 261, 261, 261, 270, 270, 302, 302, 306, 270, 270, 64, 142, 236, 62, 142, 240, 63, 142, 239, 49, 119, 214, 50, 144, 39, 134, 53, 127, 235, 56, 227, 70, 173, 70, 173, 45, 148, 148, 49, 166, 142, 66, 173, 55, 158, 65, 166, 169, 70, 174, 70, 168, 173, 177, 62, 158, 57, 66, 168, 60, 175, 58, 62, 110, 144, 170, 60, 144, 270, 78, 57, 184, 66, 184, 66, 175, 60, 172, 159, 66, 161, 69, 67, 173, 179, 241, 180, 241, 187, 243, 243, 245, 180, 184, 184, 179, 239, 241, 233, 184, 236, 168, 154, 261, 261, 261, 306, 306, 270, 302, 306, 270, 216, 270, 270, 270, 324, 270, 62, 145, 238, 62, 146, 238, 62, 145, 238, 51, 147, 55, 130, 221, 56, 156, 63, 174, 63, 174, 63, 174, 58, 170, 53, 125, 215, 59, 174, 56, 137, 227, 63, 149, 66, 178, 390, 61, 142, 227, 59, 134, 225, 163, 163, 62, 133, 221, 52, 126, 214, 56, 168, 56, 168, 161, 58, 123, 229, 63, 168, 161, 65, 166, 70, 171, 172, 61, 169, 71, 173, 71, 177, 66, 166, 66, 179, 60, 165, 58, 137, 221, 58, 130, 221, 61, 166, 61, 138, 241, 67, 166, 150, 63, 173, 59, 162, 67, 168, 165, 64, 165, 61, 171, 60, 154, 234, 55, 142, 232, 67, 170, 55, 130, 234, 64, 144, 243, 61, 170, 170, 61, 173, 165, 70, 179, 170, 61, 169, 68, 172, 172, 70, 179, 74, 179, 169, 169, 60, 147, 270, 72, 248, 261, 261, 261, 261, 261, 306, 306, 270, 297, 261, 270, 270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270, 270, 270, 148, 148, 270, 306, 182, 182, 182, 182, 182, 147, 147, 147, 161, 189, 270, 261, 261, 270, 315, 315, 261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var movesArray = [[637, 100, 552], [636, 100, 394], [643, 100, 551], [151, 100, 396], [492, 100, 465], [493, 100, 449], [150, 100, 540], [644, 100, 550], [486, 100, 416], [145, 99, 192], [144, 99, 329], [249, 99, 143], [488, 99, 585], [146, 99, 682], [250, 99, 143], [801, 97, 376], [494, 97, 315], [801, 97, 376], [485, 96, 463], [491, 93, 399], [717, 93, 143], [150, 93, 382], [716, 93, 200], [249, 93, 347], [488, 93, 94], [250, 93, 347], [646, 92, 304], [646, 92, 304], [145, 92, 602], [144, 92, 542], [644, 92, 304], [643, 92, 304], [146, 92, 542], [646, 92, 304], [251, 91, 195], [492, 91, 361], [235, 91, 166], [151, 90, 417], [637, 90, 542], [384, 90, 63], [383, 90, 284], [382, 90, 323], [493, 90, 195], [486, 90, 484], [636, 90, 37], [494, 89, 500], [801, 89, 391], [801, 89, 391], [717, 88, 63], [716, 88, 416], [485, 88, 444], [150, 86, 54], [646, 85, 200], [646, 85, 200], [721, 85, 592], [145, 85, 355], [646, 85, 200], [144, 85, 355], [243, 85, 87], [644, 85, 200], [648, 85, 195], [146, 85, 355], [773, 85, 575], [772, 85, 377], [250, 85, 363], [249, 85, 363], [720, 85, 593], [643, 85, 200], [245, 85, 59], [244, 85, 284], [488, 84, 461], [491, 84, 138], [251, 82, 437], [492, 82, 186], [157, 82, 284], [248, 82, 416], [801, 81, 396], [149, 81, 542], [235, 81, 166], [485, 81, 257], [142, 81, 416], [494, 81, 515], [801, 81, 396], [151, 80, 226], [773, 80, 38], [384, 80, 200], [636, 80, 133], [718, 80, 200], [717, 80, 389], [772, 80, 38], [493, 80, 63], [716, 80, 370], [383, 80, 359], [655, 80, 248], [637, 80, 476], [382, 80, 38], [635, 79, 200], [150, 79, 133], [250, 79, 248], [645, 79, 200], [641, 79, 37], [249, 79, 248], [642, 79, 37], [646, 78, 59], [245, 78, 347], [144, 78, 59], [652, 78, 416], [244, 78, 347], [646, 78, 59], [145, 78, 87], [146, 78, 143], [646, 78, 59], [648, 78, 370], [644, 78, 87], [643, 78, 126], [243, 78, 347], [658, 77, 400], [6, 77, 394], [649, 77, 120], [721, 76, 153], [490, 76, 391], [623, 76, 566], [480, 76, 262], [160, 76, 56], [481, 76, 361], [482, 76, 153], [139, 75, 56], [384, 75, 304], [486, 75, 462], [488, 75, 375], [491, 75, 417], [720, 75, 94], [148, 75, 63], [430, 75, 399], [383, 75, 126], [149, 75, 63], [772, 75, 161], [715, 75, 586], [156, 75, 284], [382, 75, 56], [773, 75, 161], [612, 74, 416], [603, 74, 37], [655, 74, 126], [157, 74, 682], [699, 74, 59], [798, 73, 12], [799, 73, 407], [386, 73, 63], [791, 73, 416], [492, 73, 412], [647, 73, 370], [801, 73, 485], [642, 73, 359], [794, 73, 264], [793, 73, 457], [792, 73, 63], [649, 73, 63], [796, 73, 192], [251, 73, 361], [485, 73, 414], [248, 73, 63], [800, 73, 711], [142, 73, 157], [641, 73, 359], [386, 73, 68], [797, 73, 38], [494, 73, 394], [645, 73, 359], [795, 73, 683], [801, 73, 485], [386, 73, 243], [386, 73, 245], [718, 72, 489], [141, 72, 400], [717, 72, 411], [716, 72, 267], [652, 72, 359], [601, 72, 63], [145, 71, 65], [646, 71, 283], [250, 71, 105], [625, 71, 12], [244, 71, 126], [634, 71, 200], [644, 71, 242], [249, 71, 105], [235, 71, 166], [648, 71, 272], [146, 71, 76], [243, 71, 240], [646, 71, 283], [245, 71, 56], [6, 71, 257], [160, 71, 276], [646, 71, 283], [643, 71, 242], [144, 71, 58], [628, 70, 37], [150, 70, 396], [637, 70, 405], [493, 70, 105], [630, 70, 119], [636, 70, 405], [772, 70, 13], [719, 70, 219], [715, 70, 406], [385, 70, 353], [151, 70, 382], [773, 70, 13], [711, 70, 153], [703, 70, 219], [658, 70, 114], [154, 70, 572], [675, 70, 359], [620, 70, 396], [182, 69, 437], [593, 69, 323], [603, 69, 192], [490, 69, 240], [157, 69, 38], [45, 69, 76], [53, 69, 399], [189, 69, 262], [489, 69, 240], [464, 69, 439], [608, 69, 315], [254, 69, 103], [623, 69, 264], [156, 68, 682], [80, 68, 505], [635, 68, 304], [606, 68, 472], [658, 68, 56], [697, 68, 416], [18, 68, 542], [392, 68, 394], [720, 68, 417], [655, 68, 478], [658, 68, 56], [684, 67, 219], [217, 67, 359], [584, 67, 329], [139, 67, 504], [149, 67, 200], [642, 67, 399], [796, 67, 569], [405, 67, 604], [800, 67, 378], [379, 67, 63], [792, 67, 469], [210, 67, 200], [598, 67, 153], [148, 67, 200], [474, 67, 63], [378, 67, 63], [645, 67, 444], [386, 67, 354], [784, 67, 200], [233, 67, 63], [794, 67, 276], [799, 67, 378], [793, 67, 472], [795, 67, 136], [377, 67, 63], [685, 67, 219], [791, 67, 469], [797, 67, 484], [247, 67, 63], [641, 67, 399], [647, 67, 56], [798, 67, 427], [521, 66, 143], [482, 66, 363], [428, 66, 136], [612, 66, 200], [601, 66, 192], [614, 66, 329], [107, 66, 370], [649, 66, 192], [631, 66, 517], [611, 66, 416], [154, 66, 76], [488, 66, 427], [491, 66, 464], [457, 66, 487], [481, 66, 363], [652, 66, 452], [480, 66, 363], [727, 66, 238], [47, 66, 404], [486, 65, 371], [560, 65, 457], [773, 65, 386], [142, 65, 63], [229, 65, 517], [382, 65, 329], [250, 65, 219], [448, 65, 245], [689, 65, 130], [772, 65, 386], [801, 65, 220], [384, 65, 19], [383, 65, 90], [198, 65, 511], [494, 65, 38], [53, 65, 364], [594, 65, 56], [87, 65, 258], [485, 65, 442], [426, 65, 566], [713, 65, 242], [698, 65, 59], [801, 65, 220], [105, 65, 198], [321, 65, 484], [181, 65, 406], [430, 65, 511], [466, 65, 604], [721, 65, 315], [385, 65, 387], [675, 65, 269], [105, 65, 198], [249, 65, 219], [545, 65, 224], [53, 65, 364], [295, 64, 63], [646, 64, 286], [245, 64, 326], [646, 64, 286], [477, 64, 248], [146, 64, 257], [155, 64, 284], [683, 64, 244], [244, 64, 326], [251, 64, 248], [243, 64, 326], [629, 64, 119], [646, 64, 286], [663, 64, 413], [205, 64, 484], [145, 64, 113], [479, 64, 435], [644, 64, 286], [189, 64, 340], [356, 64, 248], [634, 64, 304], [354, 64, 566], [627, 64, 37], [492, 64, 312], [603, 64, 380], [648, 64, 304], [144, 64, 366], [643, 64, 286], [156, 64, 38], [224, 64, 487], [150, 64, 112], [600, 64, 63], [571, 64, 539], [257, 63, 394], [49, 63, 483], [606, 63, 485], [711, 63, 567], [373, 63, 38], [630, 63, 413], [128, 63, 416], [718, 63, 406], [716, 63, 581], [306, 63, 368], [428, 63, 361], [462, 63, 192], [620, 63, 179], [82, 63, 192], [625, 63, 14], [508, 63, 583], [254, 63, 437], [141, 63, 378], [260, 63, 359], [253, 63, 103], [699, 63, 63], [99, 63, 175], [628, 63, 413], [248, 63, 444], [24, 63, 441], [168, 63, 672], [160, 63, 401], [503, 63, 56], [427, 63, 361], [405, 63, 528], [717, 63, 407], [181, 62, 87], [474, 62, 192], [530, 62, 90], [6, 62, 517], [319, 62, 400], [80, 62, 244], [467, 62, 63], [760, 62, 276], [466, 62, 416], [633, 62, 200], [137, 62, 192], [18, 62, 403], [715, 62, 542], [233, 62, 192], [655, 62, 241], [17, 62, 542], [621, 62, 200], [500, 62, 394], [454, 62, 260], [591, 62, 147], [649, 62, 493], [464, 62, 32], [752, 62, 494], [624, 62, 12], [282, 62, 585], [112, 62, 32], [497, 62, 437], [565, 61, 56], [106, 61, 179], [490, 61, 291], [608, 61, 220], [348, 61, 350], [362, 61, 329], [610, 61, 416], [53, 61, 400], [638, 61, 370], [622, 61, 264], [346, 61, 378], [642, 61, 87], [379, 61, 276], [478, 61, 194], [90, 61, 56], [386, 61, 192], [149, 61, 349], [157, 61, 205], [123, 61, 364], [647, 61, 526], [235, 61, 166], [598, 61, 430], [96, 61, 248], [619, 61, 396], [639, 61, 370], [791, 61, 394], [148, 61, 349], [594, 61, 469], [480, 61, 175], [93, 61, 171], [147, 61, 63], [631, 61, 394], [626, 61, 416], [386, 61, 105], [87, 61, 219], [593, 61, 378], [53, 61, 400], [641, 61, 542], [618, 61, 90], [377, 61, 276], [567, 61, 37], [357, 61, 437], [317, 61, 441], [212, 61, 364], [489, 61, 291], [198, 61, 259], [463, 61, 360], [645, 61, 90], [289, 61, 359], [482, 61, 387], [623, 61, 359], [640, 61, 370], [378, 61, 276], [607, 61, 315], [97, 61, 248], [381, 61, 262], [792, 61, 566], [481, 61, 383], [592, 61, 323], [107, 61, 68], [380, 61, 361], [94, 61, 171], [117, 60, 56], [553, 60, 200], [701, 60, 14], [237, 60, 283], [772, 60, 403], [211, 60, 565], [724, 60, 417], [159, 60, 56], [230, 60, 56], [802, 60, 283], [689, 60, 444], [663, 60, 211], [247, 60, 444], [493, 60, 248], [730, 60, 581], [713, 60, 130], [450, 60, 90], [636, 60, 172], [448, 60, 406], [611, 60, 200], [600, 60, 192], [637, 60, 257], [124, 60, 59], [326, 60, 340], [596, 60, 405], [9, 60, 56], [205, 60, 192], [773, 60, 403], [382, 60, 330], [154, 60, 312], [652, 60, 220], [76, 60, 484], [703, 60, 113], [660, 60, 359], [719, 60, 113], [750, 60, 276], [770, 60, 201], [383, 60, 76], [586, 60, 76], [589, 60, 565], [188, 60, 262], [601, 60, 199], [432, 60, 468], [151, 60, 133], [310, 60, 604], [229, 60, 417], [376, 60, 63], [365, 60, 329], [426, 60, 153], [727, 60, 200], [76, 60, 484], [385, 60, 322], [521, 60, 366], [384, 60, 349], [792, 59, 138], [784, 59, 349], [44, 59, 80], [629, 59, 413], [793, 59, 446], [82, 59, 360], [627, 59, 413], [716, 59, 244], [579, 59, 472], [603, 59, 528], [47, 59, 476], [189, 59, 202], [796, 59, 438], [45, 59, 80], [334, 59, 143], [49, 59, 405], [105, 59, 514], [799, 59, 484], [795, 59, 382], [781, 59, 438], [462, 59, 360], [798, 59, 403], [717, 59, 94], [182, 59, 80], [791, 59, 568], [576, 59, 478], [569, 59, 153], [584, 59, 59], [571, 59, 286], [395, 59, 56], [457, 59, 318], [323, 59, 90], [718, 59, 293], [537, 59, 304], [332, 59, 194], [800, 59, 334], [691, 59, 525], [614, 59, 37], [105, 59, 514], [654, 59, 126], [508, 59, 416], [794, 59, 223], [797, 59, 334], [210, 59, 242], [520, 59, 143], [673, 58, 208], [748, 58, 710], [560, 58, 264], [344, 58, 153], [256, 58, 394], [510, 58, 583], [35, 58, 495], [34, 58, 224], [787, 58, 130], [697, 58, 457], [786, 58, 585], [788, 58, 56], [25, 58, 87], [295, 58, 586], [31, 58, 276], [79, 58, 505], [155, 58, 682], [670, 58, 76], [612, 58, 12], [392, 58, 347], [282, 58, 500], [25, 58, 87], [411, 58, 484], [219, 58, 414], [70, 58, 378], [437, 58, 484], [33, 58, 32], [460, 58, 329], [171, 58, 268], [409, 58, 457], [25, 58, 87], [25, 58, 87], [321, 58, 56], [473, 58, 184], [503, 58, 14], [721, 58, 394], [354, 58, 271], [714, 58, 542], [685, 58, 113], [25, 58, 87], [217, 58, 37], [30, 58, 305], [199, 58, 505], [221, 58, 133], [168, 58, 564], [25, 58, 87], [606, 58, 471], [523, 58, 569], [160, 58, 37], [454, 58, 562], [684, 58, 113], [583, 58, 329], [475, 58, 500], [25, 58, 87], [633, 58, 304], [400, 58, 174], [101, 58, 243], [224, 58, 63], [253, 58, 437], [783, 58, 200], [785, 58, 486], [752, 57, 710], [613, 57, 329], [615, 57, 329], [150, 57, 94], [488, 57, 236], [563, 57, 194], [123, 57, 14], [655, 57, 94], [419, 57, 56], [306, 57, 484], [244, 57, 436], [624, 57, 14], [156, 57, 205], [68, 57, 223], [619, 57, 179], [212, 57, 14], [106, 57, 370], [257, 57, 327], [178, 57, 382], [452, 57, 440], [145, 57, 240], [469, 57, 405], [144, 57, 258], [683, 57, 115], [556, 57, 495], [17, 57, 403], [108, 57, 378], [441, 57, 304], [249, 57, 246], [181, 57, 113], [57, 57, 515], [277, 57, 179], [142, 57, 442], [630, 57, 18], [494, 57, 517], [89, 57, 262], [625, 57, 442], [356, 57, 371], [477, 57, 371], [110, 57, 262], [89, 57, 262], [389, 57, 437], [254, 57, 501], [485, 57, 83], [216, 57, 374], [463, 57, 378], [359, 57, 195], [646, 57, 406], [570, 57, 539], [211, 57, 56], [693, 57, 330], [97, 57, 473], [143, 57, 667], [243, 57, 435], [67, 57, 223], [648, 57, 94], [646, 57, 406], [599, 57, 63], [193, 57, 405], [668, 57, 315], [711, 57, 566], [491, 57, 114], [646, 57, 406], [250, 57, 246], [245, 57, 366], [446, 57, 387], [698, 57, 63], [801, 57, 334], [146, 57, 241], [479, 57, 268], [398, 57, 515], [594, 57, 361], [675, 57, 490], [801, 57, 334], [534, 57, 276], [533, 57, 276], [159, 57, 276], [358, 57, 361], [660, 57, 89], [628, 57, 18], [531, 57, 387], [416, 57, 565], [96, 57, 473], [589, 56, 416], [631, 56, 255], [497, 56, 380], [319, 56, 269], [99, 56, 152], [802, 56, 389], [180, 56, 87], [380, 56, 406], [53, 56, 445], [137, 56, 277], [162, 56, 304], [610, 56, 200], [626, 56, 14], [699, 56, 58], [616, 56, 515], [760, 56, 38], [391, 56, 394], [6, 56, 83], [260, 56, 283], [606, 56, 470], [658, 56, 104], [565, 56, 240], [229, 56, 242], [658, 56, 104], [90, 56, 504], [465, 56, 335], [620, 56, 136], [73, 56, 378], [372, 56, 38], [617, 56, 515], [713, 56, 38], [427, 56, 340], [657, 56, 56], [632, 56, 319], [651, 56, 452], [631, 56, 256], [228, 56, 517], [631, 56, 254], [139, 56, 350], [188, 56, 340], [758, 56, 406], [567, 56, 337], [605, 56, 472], [588, 56, 38], [18, 56, 119], [428, 56, 340], [474, 56, 277], [24, 56, 489], [233, 56, 277], [381, 56, 406], [107, 56, 264], [357, 56, 76], [369, 56, 457], [405, 56, 435], [205, 56, 393], [157, 56, 517], [262, 56, 583], [53, 56, 445], [85, 56, 37], [600, 56, 199], [654, 56, 478], [305, 55, 368], [52, 55, 399], [386, 55, 334], [718, 55, 89], [724, 55, 413], [386, 55, 322], [198, 55, 389], [581, 55, 542], [164, 55, 138], [662, 55, 211], [472, 55, 12], [237, 55, 370], [621, 55, 276], [251, 55, 377], [94, 55, 506], [726, 55, 200], [666, 55, 600], [184, 55, 56], [378, 55, 192], [545, 55, 38], [723, 55, 417], [200, 55, 408], [138, 55, 56], [635, 55, 184], [379, 55, 199], [773, 55, 458], [87, 55, 58], [720, 55, 247], [155, 55, 38], [716, 55, 532], [466, 55, 87], [126, 55, 126], [492, 55, 388], [347, 55, 350], [717, 55, 566], [80, 55, 240], [607, 55, 220], [735, 55, 156], [378, 55, 199], [634, 55, 184], [706, 55, 200], [526, 55, 153], [649, 55, 405], [467, 55, 126], [750, 55, 25], [629, 55, 18], [377, 55, 192], [112, 55, 224], [445, 55, 407], [234, 55, 382], [379, 55, 192], [386, 55, 133], [279, 55, 542], [640, 55, 348], [530, 55, 529], [639, 55, 444], [618, 55, 175], [35, 55, 361], [430, 55, 400], [168, 55, 440], [689, 55, 238], [327, 55, 37], [525, 55, 153], [754, 55, 241], [377, 55, 199], [663, 55, 366], [464, 55, 224], [730, 55, 56], [592, 55, 378], [597, 55, 153], [772, 55, 458], [647, 55, 501], [556, 55, 538], [521, 55, 263], [558, 55, 439], [701, 55, 507], [49, 55, 94], [448, 55, 370], [729, 55, 581], [500, 55, 46], [124, 55, 195], [673, 55, 348], [727, 55, 394], [627, 55, 18], [83, 55, 413], [386, 55, 97], [93, 55, 506], [622, 55, 359], [641, 55, 240], [638, 55, 368], [642, 55, 417], [385, 55, 248], [645, 55, 201], [246, 55, 63], [125, 55, 87], [147, 55, 200], [510, 55, 389], [207, 55, 12], [248, 54, 89], [353, 54, 566], [520, 54, 366], [9, 54, 240], [242, 54, 38], [185, 54, 457], [130, 54, 63], [781, 54, 566], [591, 54, 476], [76, 54, 444], [101, 54, 360], [332, 54, 201], [489, 54, 392], [75, 54, 444], [119, 54, 224], [624, 54, 442], [660, 54, 263], [310, 54, 87], [456, 54, 487], [579, 54, 377], [454, 54, 188], [611, 54, 12], [297, 54, 484], [362, 54, 258], [5, 54, 517], [571, 54, 417], [342, 54, 12], [601, 54, 508], [603, 54, 489], [70, 54, 21], [746, 54, 56], [569, 54, 441], [189, 54, 388], [490, 54, 392], [76, 54, 444], [153, 54, 76], [113, 54, 38], [708, 54, 532], [317, 54, 378], [193, 54, 403], [599, 54, 192], [553, 54, 89], [46, 54, 404], [709, 54, 532], [331, 54, 194], [576, 54, 204], [770, 54, 659], [171, 54, 569], [652, 54, 34], [555, 54, 315], [154, 54, 219], [769, 54, 201], [167, 54, 672], [644, 54, 337], [623, 54, 89], [141, 54, 246], [219, 54, 53], [596, 54, 435], [423, 54, 105], [247, 54, 89], [478, 54, 258], [643, 54, 406], [469, 54, 403], [199, 54, 244], [44, 54, 580], [79, 54, 244], [355, 54, 248], [75, 54, 444], [452, 53, 565], [787, 53, 224], [211, 53, 194], [282, 53, 138], [799, 53, 380], [780, 53, 200], [308, 53, 68], [575, 53, 478], [25, 53, 113], [594, 53, 270], [428, 53, 494], [457, 53, 340], [800, 53, 446], [537, 53, 56], [614, 53, 258], [583, 53, 59], [502, 53, 56], [253, 53, 501], [359, 53, 248], [697, 53, 32], [608, 53, 247], [178, 53, 384], [786, 53, 260], [683, 53, 574], [120, 53, 56], [3, 53, 76], [289, 53, 386], [62, 53, 509], [25, 53, 113], [178, 53, 385], [175, 53, 495], [463, 53, 438], [570, 53, 286], [783, 53, 349], [793, 53, 599], [156, 53, 517], [105, 53, 38], [320, 53, 484], [400, 53, 276], [523, 53, 37], [691, 53, 406], [756, 53, 671], [797, 53, 130], [798, 53, 197], [111, 53, 32], [295, 53, 485], [416, 53, 194], [462, 53, 393], [598, 53, 371], [475, 53, 370], [25, 53, 113], [227, 53, 400], [148, 53, 219], [213, 53, 564], [605, 53, 485], [794, 53, 679], [582, 53, 329], [715, 53, 403], [176, 53, 495], [68, 53, 184], [25, 53, 113], [348, 53, 182], [86, 53, 258], [105, 53, 394], [16, 53, 542], [531, 53, 304], [149, 53, 219], [613, 53, 37], [51, 53, 90], [796, 53, 604], [785, 53, 97], [777, 53, 565], [678, 53, 500], [782, 53, 200], [795, 53, 405], [195, 53, 330], [96, 53, 417], [534, 53, 264], [82, 53, 393], [465, 53, 438], [25, 53, 113], [593, 53, 56], [61, 53, 426], [67, 53, 184], [678, 53, 501], [57, 53, 200], [106, 53, 25], [108, 53, 438], [256, 53, 327], [788, 53, 392], [97, 53, 417], [25, 53, 113], [615, 53, 400], [28, 53, 89], [578, 53, 472], [776, 53, 153], [25, 53, 113], [51, 53, 90], [533, 53, 264], [404, 53, 528], [17, 52, 119], [356, 52, 212], [89, 52, 562], [259, 52, 283], [334, 52, 585], [228, 52, 417], [588, 52, 14], [376, 52, 334], [392, 52, 512], [346, 52, 254], [188, 52, 202], [345, 52, 378], [284, 52, 483], [388, 52, 437], [346, 52, 255], [432, 52, 213], [426, 52, 226], [354, 52, 288], [473, 52, 59], [499, 52, 394], [208, 52, 201], [346, 52, 256], [395, 52, 65], [85, 52, 283], [496, 52, 437], [116, 52, 56], [617, 52, 384], [675, 52, 327], [230, 52, 349], [364, 52, 329], [437, 52, 377], [358, 52, 485], [654, 52, 241], [262, 52, 389], [326, 52, 94], [600, 52, 508], [597, 52, 430], [224, 52, 56], [586, 52, 38], [589, 52, 14], [95, 52, 201], [323, 52, 284], [340, 52, 90], [344, 52, 286], [90, 52, 58], [180, 52, 113], [117, 52, 349], [73, 52, 56], [221, 52, 59], [507, 52, 583], [651, 52, 220], [89, 52, 562], [477, 52, 212], [552, 52, 37], [86, 51, 219], [536, 51, 304], [649, 51, 404], [670, 51, 80], [181, 51, 324], [277, 51, 413], [389, 51, 202], [47, 51, 312], [235, 51, 166], [567, 51, 157], [503, 51, 514], [43, 51, 80], [735, 51, 37], [758, 51, 599], [748, 51, 42], [784, 51, 568], [381, 51, 94], [159, 51, 401], [713, 51, 105], [448, 51, 505], [560, 51, 431], [147, 51, 349], [632, 51, 12], [563, 51, 212], [508, 51, 387], [419, 51, 97], [585, 51, 76], [305, 51, 484], [717, 51, 492], [42, 51, 501], [409, 51, 103], [662, 51, 366], [411, 51, 442], [110, 51, 562], [716, 51, 400], [55, 51, 472], [321, 51, 340], [130, 51, 240], [260, 51, 89], [281, 51, 500], [723, 51, 413], [319, 51, 130], [565, 51, 157], [104, 51, 198], [99, 51, 362], [718, 51, 242], [726, 51, 394], [24, 51, 114], [306, 51, 475], [668, 51, 510], [380, 51, 94], [680, 51, 533], [655, 51, 261], [254, 51, 206], [164, 51, 485], [729, 51, 56], [171, 51, 56], [169, 51, 501], [210, 51, 371], [185, 50, 359], [566, 50, 37], [626, 50, 37], [294, 50, 485], [439, 50, 219], [30, 50, 445], [678, 50, 248], [37, 50, 329], [549, 50, 572], [773, 50, 242], [766, 50, 416], [772, 50, 442], [765, 50, 433], [383, 50, 339], [113, 50, 361], [455, 50, 438], [547, 50, 585], [192, 50, 572], [733, 50, 304], [781, 50, 484], [667, 50, 315], [25, 50, 528], [447, 50, 515], [200, 50, 288], [720, 50, 433], [646, 50, 549], [243, 50, 422], [167, 50, 564], [644, 50, 559], [25, 50, 528], [368, 50, 56], [633, 50, 184], [122, 50, 219], [131, 50, 329], [578, 50, 377], [622, 50, 89], [233, 50, 161], [91, 50, 556], [500, 50, 457], [544, 50, 38], [510, 50, 417], [150, 50, 105], [242, 50, 361], [628, 50, 507], [327, 50, 175], [25, 50, 528], [223, 50, 487], [107, 50, 197], [707, 50, 377], [605, 50, 470], [699, 50, 113], [170, 50, 268], [643, 50, 558], [721, 50, 56], [561, 50, 143], [279, 50, 56], [678, 50, 581], [76, 50, 38], [505, 50, 21], [94, 50, 194], [207, 50, 14], [778, 50, 220], [481, 50, 326], [702, 50, 435], [367, 50, 56], [558, 50, 175], [741, 50, 542], [361, 50, 258], [559, 50, 457], [483, 50, 430], [606, 50, 105], [413, 50, 405], [610, 50, 12], [666, 50, 542], [33, 50, 445], [151, 50, 246], [250, 50, 386], [497, 50, 378], [636, 50, 38], [324, 50, 517], [3, 50, 572], [353, 50, 271], [421, 50, 572], [382, 50, 347], [612, 50, 14], [631, 50, 53], [246, 50, 444], [177, 50, 382], [140, 50, 378], [357, 50, 235], [232, 50, 416], [25, 50, 528], [719, 50, 585], [37, 50, 517], [646, 50, 553], [619, 50, 136], [427, 50, 494], [502, 50, 14], [127, 50, 12], [241, 50, 358], [123, 50, 403], [556, 50, 76], [198, 50, 366], [102, 50, 516], [75, 50, 38], [627, 50, 507], [114, 50, 438], [682, 50, 574], [137, 50, 161], [414, 50, 405], [234, 50, 445], [472, 50, 14], [657, 50, 104], [637, 50, 318], [646, 50, 554], [431, 50, 583], [205, 50, 38], [453, 50, 260], [480, 50, 326], [25, 50, 528], [752, 50, 243], [369, 50, 38], [618, 50, 279], [352, 50, 485], [648, 50, 358], [69, 50, 378], [672, 50, 208], [52, 50, 364], [599, 50, 199], [629, 50, 373], [212, 50, 442], [313, 50, 611], [5, 50, 83], [703, 50, 585], [227, 50, 475], [25, 50, 528], [56, 50, 515], [384, 50, 406], [615, 50, 76], [229, 50, 53], [168, 50, 398], [769, 50, 659], [25, 50, 528], [144, 50, 115], [519, 50, 143], [222, 50, 175], [759, 50, 276], [218, 50, 414], [314, 50, 611], [698, 50, 58], [720, 50, 472], [465, 50, 580], [545, 50, 431], [286, 50, 223], [375, 50, 63], [542, 50, 437], [575, 50, 204], [719, 50, 591], [366, 50, 504], [35, 50, 309], [802, 50, 370], [774, 50, 153], [482, 50, 326], [257, 50, 413], [706, 50, 438], [115, 50, 179], [75, 50, 38], [402, 50, 195], [493, 50, 287], [249, 50, 386], [203, 50, 94], [143, 50, 484], [160, 50, 103], [315, 50, 80], [335, 50, 370], [331, 50, 201], [616, 50, 385], [605, 50, 471], [128, 50, 37], [449, 50, 90], [146, 50, 403], [446, 50, 289], [138, 50, 504], [52, 50, 364], [564, 50, 56], [587, 50, 435], [520, 50, 263], [297, 50, 179], [487, 50, 506], [484, 50, 56], [385, 50, 361], [394, 50, 56], [425, 50, 153], [325, 50, 340], [216, 50, 37], [245, 50, 423], [162, 50, 382], [590, 50, 147], [413, 50, 405], [584, 50, 243], [479, 50, 506], [153, 50, 312], [630, 50, 373], [486, 50, 428], [93, 50, 194], [474, 50, 161], [441, 50, 297], [244, 50, 424], [84, 50, 37], [413, 50, 405], [237, 50, 197], [450, 50, 38], [145, 50, 435], [76, 50, 38], [158, 50, 56], [18, 50, 366], [209, 49, 242], [338, 49, 472], [303, 49, 583], [208, 49, 38], [571, 49, 386], [465, 49, 378], [359, 49, 13], [467, 49, 53], [466, 49, 85], [688, 49, 238], [654, 49, 94], [441, 49, 485], [693, 49, 453], [72, 49, 378], [532, 49, 276], [23, 49, 441], [44, 49, 572], [399, 49, 174], [228, 49, 242], [640, 49, 526], [46, 49, 476], [739, 49, 370], [712, 49, 38], [105, 49, 283], [378, 49, 359], [199, 49, 376], [696, 49, 32], [777, 49, 596], [45, 49, 572], [485, 49, 436], [530, 49, 201], [494, 49, 428], [709, 49, 452], [570, 49, 417], [638, 49, 526], [659, 49, 89], [771, 49, 262], [52, 49, 400], [337, 49, 478], [475, 49, 182], [53, 49, 372], [801, 49, 705], [282, 49, 95], [442, 49, 399], [569, 49, 562], [95, 49, 38], [462, 49, 199], [52, 49, 400], [588, 49, 175], [521, 49, 207], [126, 49, 53], [747, 49, 710], [594, 49, 250], [87, 49, 401], [727, 49, 184], [509, 49, 583], [320, 49, 56], [213, 49, 444], [80, 49, 94], [142, 49, 507], [645, 49, 89], [77, 49, 394], [592, 49, 56], [372, 49, 53], [234, 49, 286], [377, 49, 359], [120, 49, 322], [176, 49, 387], [746, 49, 283], [316, 49, 441], [175, 49, 387], [456, 49, 318], [642, 49, 268], [416, 49, 207], [79, 49, 240], [730, 49, 445], [607, 49, 247], [124, 49, 378], [347, 49, 182], [211, 49, 398], [115, 49, 389], [740, 49, 370], [155, 49, 205], [763, 49, 136], [537, 49, 497], [391, 49, 303], [647, 49, 14], [615, 49, 573], [624, 49, 400], [658, 49, 326], [531, 49, 38], [639, 49, 526], [386, 49, 428], [685, 49, 583], [620, 49, 340], [83, 49, 403], [463, 49, 103], [743, 49, 483], [625, 49, 400], [405, 49, 184], [312, 49, 494], [398, 49, 413], [641, 49, 366], [97, 49, 94], [226, 49, 56], [125, 49, 85], [35, 49, 356], [111, 49, 224], [738, 49, 97], [764, 49, 583], [193, 49, 369], [96, 49, 94], [436, 49, 484], [178, 49, 248], [458, 49, 56], [663, 49, 382], [212, 49, 458], [105, 49, 283], [454, 49, 398], [81, 49, 192], [379, 49, 359], [776, 49, 315], [603, 49, 491], [78, 49, 394], [311, 49, 494], [217, 49, 173], [589, 49, 179], [613, 49, 258], [756, 49, 138], [451, 49, 440], [182, 49, 572], [684, 49, 583], [708, 49, 452], [373, 49, 53], [143, 49, 242], [304, 49, 368], [719, 49, 444], [619, 49, 340], [469, 49, 369], [370, 49, 219], [417, 49, 158], [317, 49, 562], [123, 49, 458], [760, 49, 220], [82, 49, 199], [309, 49, 87], [617, 49, 105], [444, 49, 407], [252, 49, 103], [782, 49, 349], [187, 49, 262], [658, 49, 326], [572, 49, 495], [694, 49, 85], [452, 49, 242], [737, 49, 334], [446, 49, 363], [724, 49, 297], [8, 49, 56], [332, 49, 178], [371, 49, 38], [108, 49, 103], [106, 49, 203], [616, 49, 105], [534, 49, 444], [53, 49, 372], [533, 49, 444], [90, 49, 334], [690, 49, 406], [582, 49, 59], [703, 49, 444], [16, 49, 403], [591, 49, 76], [801, 49, 705], [780, 49, 304], [355, 49, 371], [621, 49, 431], [365, 49, 59], [562, 49, 194], [189, 49, 369], [714, 48, 403], [660, 48, 162], [574, 48, 478], [678, 48, 389], [633, 48, 34], [745, 48, 444], [678, 48, 389], [650, 48, 452], [362, 48, 59], [128, 48, 207], [186, 48, 304], [710, 48, 402], [238, 48, 59], [787, 48, 428], [28, 48, 201], [195, 48, 54], [259, 48, 89], [114, 48, 580], [601, 48, 319], [689, 48, 534], [669, 48, 76], [24, 48, 562], [668, 48, 304], [112, 48, 89], [674, 48, 327], [611, 48, 14], [61, 48, 56], [241, 48, 215], [220, 48, 133], [57, 48, 707], [88, 48, 262], [195, 48, 114], [478, 48, 59], [100, 48, 243], [397, 48, 515], [159, 48, 37], [675, 48, 575], [786, 48, 326], [88, 48, 262], [561, 48, 322], [284, 48, 18], [559, 48, 264], [566, 48, 337], [783, 48, 568], [552, 48, 89], [600, 48, 319], [457, 48, 369], [788, 48, 330], [634, 48, 34], [431, 48, 468], [400, 48, 133], [661, 48, 211], [651, 48, 34], [599, 48, 508], [656, 48, 56], [157, 48, 53], [564, 48, 240], [745, 48, 444], [130, 48, 542], [676, 48, 538], [206, 48, 175], [42, 48, 403], [553, 48, 201], [751, 48, 494], [404, 48, 435], [692, 48, 330], [342, 48, 152], [701, 48, 143], [253, 48, 206], [577, 48, 472], [158, 48, 276], [757, 48, 406], [264, 48, 374], [744, 48, 444], [653, 48, 126], [556, 48, 572], [73, 48, 482], [526, 48, 444], [218, 48, 53], [595, 48, 405], [635, 48, 34], [682, 48, 94], [785, 48, 435], [421, 48, 381], [683, 48, 94], [310, 48, 268], [687, 48, 276], [188, 48, 388], [525, 48, 444], [139, 48, 321], [768, 48, 710], [711, 48, 402], [341, 48, 12], [464, 48, 89], [262, 48, 36], [169, 48, 403], [652, 48, 339], [686, 48, 276], [496, 48, 380], [166, 47, 38], [127, 47, 276], [555, 47, 276], [85, 47, 65], [322, 47, 38], [177, 47, 384], [735, 47, 281], [800, 47, 475], [770, 47, 414], [51, 47, 89], [70, 47, 398], [313, 47, 38], [527, 47, 283], [215, 47, 420], [167, 47, 440], [545, 47, 599], [183, 47, 56], [37, 47, 445], [330, 47, 407], [659, 47, 263], [581, 47, 413], [460, 47, 59], [795, 47, 679], [507, 47, 416], [698, 47, 113], [375, 47, 334], [291, 47, 404], [92, 47, 171], [510, 47, 289], [488, 47, 163], [68, 47, 238], [217, 47, 156], [194, 47, 330], [149, 47, 407], [792, 47, 585], [48, 47, 94], [414, 47, 679], [420, 47, 572], [697, 47, 89], [170, 47, 569], [451, 47, 565], [102, 47, 326], [388, 47, 202], [37, 47, 445], [171, 47, 392], [104, 47, 514], [222, 47, 414], [623, 47, 174], [453, 47, 562], [455, 47, 378], [81, 47, 360], [308, 47, 105], [797, 47, 402], [289, 47, 374], [350, 47, 240], [148, 47, 407], [517, 47, 500], [799, 47, 37], [413, 47, 442], [358, 47, 505], [631, 47, 133], [793, 47, 491], [131, 47, 56], [706, 47, 406], [103, 47, 437], [791, 47, 76], [461, 47, 399], [305, 47, 475], [705, 47, 406], [673, 47, 532], [6, 47, 53], [49, 47, 305], [583, 47, 243], [164, 47, 585], [754, 47, 669], [491, 47, 104], [67, 47, 238], [499, 47, 46], [597, 47, 371], [712, 47, 105], [798, 47, 404], [329, 47, 586], [256, 47, 119], [17, 47, 366], [12, 47, 483], [679, 47, 533], [324, 47, 504], [51, 47, 89], [180, 47, 324], [536, 47, 56], [43, 47, 580], [328, 47, 90], [281, 47, 138], [248, 47, 242], [413, 47, 90], [529, 47, 90], [56, 47, 200], [448, 47, 347], [219, 47, 105], [86, 47, 58], [523, 47, 528], [84, 47, 283], [177, 47, 385], [69, 47, 21], [796, 47, 435], [247, 47, 242], [335, 47, 14], [161, 47, 304], [794, 47, 359], [390, 47, 53], [103, 47, 437], [101, 47, 153], [314, 47, 343], [185, 47, 444], [528, 47, 283], [9, 47, 334], [568, 47, 153], [413, 47, 437], [295, 47, 304], [750, 47, 89], [447, 47, 417], [184, 46, 276], [653, 46, 478], [140, 46, 246], [577, 46, 377], [107, 46, 5], [469, 46, 103], [459, 46, 329], [721, 46, 34], [626, 46, 179], [422, 46, 105], [427, 46, 204], [544, 46, 431], [542, 46, 14], [357, 46, 516], [163, 46, 138], [391, 46, 512], [205, 46, 360], [492, 46, 363], [483, 46, 459], [181, 46, 538], [115, 46, 200], [489, 46, 352], [746, 46, 487], [465, 46, 321], [4, 46, 517], [237, 46, 469], [315, 46, 235], [546, 46, 76], [255, 46, 53], [778, 46, 583], [333, 46, 585], [473, 46, 89], [154, 46, 34], [627, 46, 306], [162, 46, 226], [503, 46, 401], [203, 46, 417], [410, 46, 484], [88, 46, 562], [206, 46, 203], [574, 46, 204], [662, 46, 382], [344, 46, 201], [610, 46, 14], [110, 46, 194], [439, 46, 226], [261, 46, 583], [426, 46, 133], [114, 46, 378], [200, 46, 195], [381, 46, 471], [775, 46, 37], [223, 46, 63], [587, 46, 97], [720, 46, 428], [703, 46, 408], [187, 46, 340], [331, 46, 178], [487, 46, 467], [505, 46, 226], [326, 46, 371], [605, 46, 105], [551, 46, 37], [408, 46, 457], [214, 46, 179], [345, 46, 256], [300, 46, 583], [764, 46, 580], [354, 46, 289], [345, 46, 254], [193, 46, 103], [246, 46, 89], [168, 46, 94], [686, 46, 400], [759, 46, 38], [667, 46, 510], [122, 46, 226], [120, 46, 113], [327, 46, 38], [343, 46, 153], [348, 46, 404], [437, 46, 371], [753, 46, 241], [728, 46, 581], [632, 46, 334], [352, 46, 389], [334, 46, 195], [226, 46, 340], [311, 46, 417], [302, 46, 212], [580, 46, 542], [242, 46, 113], [458, 46, 340], [64, 46, 271], [27, 46, 89], [585, 46, 38], [490, 46, 352], [548, 46, 437], [113, 46, 113], [138, 46, 350], [699, 46, 227], [722, 46, 417], [719, 46, 433], [237, 46, 501], [35, 46, 585], [628, 46, 306], [380, 46, 470], [27, 46, 59], [304, 46, 484], [119, 46, 487], [596, 46, 389], [179, 46, 87], [89, 46, 151], [52, 46, 445], [725, 46, 200], [363, 46, 329], [569, 46, 133], [353, 46, 288], [312, 46, 417], [713, 46, 59], [729, 46, 445], [345, 46, 255], [369, 46, 56], [89, 46, 151], [221, 46, 89], [65, 46, 271], [370, 46, 56], [251, 46, 363], [481, 46, 204], [532, 46, 264], [116, 46, 349], [336, 46, 378], [156, 46, 53], [428, 46, 204], [766, 46, 179], [296, 46, 484], [687, 46, 400], [153, 46, 219], [550, 46, 457], [402, 46, 405], [72, 46, 56], [52, 46, 445], [395, 46, 54], [670, 46, 585], [100, 46, 360], [224, 46, 331], [297, 46, 370], [765, 46, 248], [630, 46, 399], [394, 46, 65], [519, 46, 366], [549, 46, 80], [734, 46, 156], [723, 46, 297], [624, 46, 334], [361, 46, 59], [55, 46, 56], [88, 46, 562], [95, 46, 444], [726, 46, 184], [755, 46, 671], [625, 46, 334], [323, 46, 89], [208, 46, 444], [480, 46, 133], [482, 46, 417], [355, 46, 212], [598, 46, 442], [155, 46, 517], [629, 46, 399], [547, 46, 542], [484, 46, 460], [509, 46, 389], [419, 46, 401], [741, 46, 97], [782, 45, 568], [474, 45, 199], [213, 45, 471], [8, 45, 240], [254, 45, 404], [618, 45, 85], [685, 45, 273], [87, 45, 291], [674, 45, 575], [678, 45, 286], [130, 45, 349], [39, 45, 38], [780, 45, 19], [560, 45, 263], [25, 45, 97], [383, 45, 619], [539, 45, 179], [593, 45, 506], [769, 45, 414], [477, 45, 247], [568, 45, 441], [535, 45, 304], [152, 45, 76], [96, 45, 207], [207, 45, 327], [320, 45, 340], [204, 45, 38], [432, 45, 34], [470, 45, 348], [661, 45, 366], [531, 45, 493], [745, 45, 431], [650, 45, 220], [781, 45, 21], [520, 45, 207], [694, 45, 582], [175, 45, 38], [732, 45, 304], [599, 45, 319], [572, 45, 387], [147, 45, 219], [702, 45, 87], [134, 45, 56], [292, 45, 566], [136, 45, 394], [615, 45, 105], [324, 45, 257], [25, 45, 97], [306, 45, 38], [25, 45, 97], [3, 45, 235], [141, 45, 319], [22, 45, 529], [802, 45, 712], [654, 45, 261], [566, 45, 157], [29, 45, 305], [451, 45, 242], [403, 45, 528], [773, 45, 319], [666, 45, 483], [680, 45, 442], [471, 45, 59], [579, 45, 285], [430, 45, 492], [745, 45, 431], [276, 45, 179], [751, 45, 710], [709, 45, 566], [238, 45, 195], [176, 45, 38], [534, 45, 359], [614, 45, 59], [338, 45, 153], [772, 45, 319], [749, 45, 276], [294, 45, 304], [570, 45, 386], [367, 45, 489], [160, 45, 163], [774, 45, 504], [230, 45, 406], [590, 45, 476], [655, 45, 53], [559, 45, 431], [109, 45, 262], [456, 45, 340], [368, 45, 489], [606, 45, 347], [384, 45, 245], [565, 45, 401], [762, 45, 437], [622, 45, 174], [222, 45, 243], [684, 45, 273], [212, 45, 400], [385, 45, 356], [227, 45, 403], [382, 45, 618], [16, 45, 119], [562, 45, 212], [657, 45, 340], [106, 45, 299], [25, 45, 97], [25, 45, 97], [233, 45, 199], [79, 45, 94], [58, 45, 394], [417, 45, 387], [502, 45, 514], [199, 45, 94], [66, 45, 223], [453, 45, 188], [356, 45, 247], [133, 45, 376], [564, 45, 157], [389, 45, 242], [675, 45, 494], [78, 45, 340], [672, 45, 348], [351, 45, 542], [567, 45, 369], [506, 45, 583], [619, 45, 501], [472, 45, 327], [740, 45, 223], [763, 45, 437], [98, 45, 175], [399, 45, 276], [252, 45, 283], [533, 45, 359], [595, 45, 435], [463, 45, 287], [678, 45, 324], [319, 45, 97], [576, 45, 477], [118, 45, 224], [97, 45, 207], [435, 45, 153], [771, 45, 92], [25, 45, 97], [337, 45, 153], [739, 45, 223], [752, 45, 679], [688, 45, 534], [416, 45, 454], [229, 45, 492], [434, 45, 153], [211, 45, 401], [25, 45, 97], [111, 45, 89], [708, 45, 566], [608, 45, 174], [594, 45, 219], [108, 45, 287], [198, 45, 492], [563, 45, 288], [620, 45, 469], [196, 45, 384], [757, 45, 599], [669, 45, 80], [364, 45, 59], [744, 45, 431], [777, 45, 42], [613, 45, 59], [436, 45, 377], [303, 45, 442], [556, 45, 241], [197, 45, 385], [32, 45, 32], [340, 45, 248], [277, 45, 283], [441, 45, 253], [418, 45, 56], [747, 45, 42], [621, 45, 525], [359, 45, 389], [123, 45, 400], [387, 45, 437], [77, 45, 340], [83, 45, 206], [700, 45, 244], [135, 45, 87], [538, 45, 179], [137, 45, 199], [776, 45, 704], [170, 45, 56], [213, 45, 470], [117, 45, 406], [37, 44, 288], [37, 44, 288], [228, 44, 53], [689, 44, 400], [257, 44, 163], [730, 44, 585], [546, 44, 283], [571, 44, 373], [271, 44, 56], [215, 44, 386], [376, 44, 309], [53, 44, 417], [617, 44, 405], [600, 44, 435], [279, 44, 366], [282, 44, 445], [286, 44, 402], [124, 44, 34], [718, 44, 114], [76, 44, 153], [220, 44, 59], [561, 44, 94], [75, 44, 153], [24, 44, 380], [499, 44, 457], [698, 44, 227], [262, 44, 281], [332, 44, 412], [47, 44, 202], [90, 44, 362], [371, 44, 53], [475, 44, 206], [496, 44, 378], [449, 44, 38], [616, 44, 405], [779, 44, 485], [258, 44, 283], [143, 44, 187], [260, 44, 36], [601, 44, 435], [188, 44, 369], [696, 44, 89], [748, 44, 599], [586, 44, 267], [727, 44, 53], [57, 44, 103], [663, 44, 512], [425, 44, 226], [413, 44, 94], [758, 44, 53], [76, 44, 153], [99, 44, 21], [44, 44, 363], [682, 44, 285], [716, 44, 224], [537, 44, 409], [402, 44, 564], [94, 44, 399], [548, 44, 495], [321, 44, 291], [446, 44, 187], [350, 44, 56], [20, 44, 283], [582, 44, 243], [413, 44, 94], [631, 44, 680], [733, 44, 297], [375, 44, 309], [53, 44, 417], [521, 44, 297], [20, 44, 283], [23, 44, 489], [325, 44, 94], [302, 44, 511], [2, 44, 76], [589, 44, 404], [93, 44, 399], [336, 44, 489], [649, 44, 161], [177, 44, 248], [651, 44, 339], [588, 44, 404], [497, 44, 202], [75, 44, 153], [347, 44, 404], [683, 44, 285], [339, 44, 90], [73, 44, 506], [756, 44, 585], [346, 44, 412], [307, 44, 68], [70, 44, 75], [281, 44, 95], [545, 44, 92], [724, 44, 348], [701, 44, 136], [717, 44, 399], [18, 44, 355], [552, 44, 201], [431, 44, 213], [414, 44, 94], [461, 44, 386], [275, 44, 437], [114, 44, 321], [309, 44, 268], [189, 44, 178], [71, 44, 348], [707, 44, 478], [15, 44, 565], [603, 44, 85], [413, 44, 94], [316, 44, 378], [605, 43, 347], [58, 43, 200], [641, 43, 242], [513, 43, 242], [678, 43, 272], [187, 43, 202], [469, 43, 163], [318, 43, 36], [501, 43, 56], [4, 43, 83], [210, 43, 583], [150, 43, 385], [714, 43, 162], [80, 43, 133], [35, 43, 236], [249, 43, 177], [734, 43, 37], [428, 43, 495], [299, 43, 199], [411, 43, 368], [642, 43, 242], [28, 43, 14], [452, 43, 184], [164, 43, 355], [104, 43, 38], [591, 43, 499], [146, 43, 219], [158, 43, 401], [590, 43, 76], [435, 43, 562], [686, 43, 163], [670, 43, 581], [378, 43, 58], [131, 43, 219], [315, 43, 312], [105, 43, 707], [64, 43, 248], [644, 43, 428], [288, 43, 179], [122, 43, 272], [646, 43, 558], [397, 43, 413], [438, 43, 38], [50, 43, 90], [304, 43, 475], [261, 43, 389], [62, 43, 170], [558, 43, 504], [505, 43, 212], [169, 43, 474], [796, 43, 95], [50, 43, 90], [216, 43, 173], [795, 43, 167], [522, 43, 37], [643, 43, 326], [150, 43, 384], [735, 43, 158], [465, 43, 21], [476, 43, 192], [792, 43, 277], [498, 43, 394], [243, 43, 242], [707, 43, 583], [462, 43, 435], [793, 43, 243], [510, 43, 400], [667, 43, 304], [760, 43, 37], [41, 43, 501], [529, 43, 529], [193, 43, 17], [46, 43, 312], [787, 43, 717], [557, 43, 439], [61, 43, 358], [540, 43, 175], [645, 43, 157], [42, 43, 474], [81, 43, 393], [511, 43, 242], [178, 43, 375], [30, 43, 242], [648, 43, 369], [515, 43, 242], [102, 43, 76], [311, 43, 87], [34, 43, 414], [799, 43, 359], [646, 43, 184], [699, 43, 267], [783, 43, 337], [322, 43, 53], [791, 43, 368], [741, 43, 119], [798, 43, 348], [453, 43, 398], [82, 43, 435], [68, 43, 339], [476, 43, 199], [712, 43, 59], [299, 43, 192], [728, 43, 56], [660, 43, 340], [190, 43, 387], [329, 43, 63], [72, 43, 482], [167, 43, 398], [551, 43, 89], [157, 43, 436], [479, 43, 486], [543, 43, 38], [578, 43, 285], [439, 43, 272], [234, 43, 26], [145, 43, 97], [692, 43, 453], [264, 43, 187], [725, 43, 394], [33, 43, 398], [95, 43, 91], [208, 43, 91], [386, 43, 375], [206, 43, 407], [794, 43, 68], [66, 43, 184], [43, 43, 585], [424, 43, 387], [29, 43, 445], [86, 43, 401], [653, 43, 241], [67, 43, 339], [240, 43, 126], [328, 43, 63], [647, 43, 533], [232, 43, 89], [314, 43, 583], [519, 43, 263], [32, 43, 445], [209, 43, 371], [800, 43, 408], [656, 43, 104], [144, 43, 573], [192, 43, 437], [572, 43, 304], [764, 43, 312], [218, 43, 105], [305, 43, 38], [54, 43, 472], [765, 43, 94], [330, 43, 63], [379, 43, 430], [379, 43, 442], [517, 43, 477], [434, 43, 562], [755, 43, 138], [597, 43, 442], [788, 43, 717], [92, 43, 506], [646, 43, 559], [65, 43, 248], [342, 43, 242], [88, 43, 151], [239, 43, 87], [377, 43, 444], [253, 43, 404], [56, 43, 707], [293, 43, 485], [171, 43, 36], [12, 43, 403], [313, 43, 583], [296, 43, 179], [194, 43, 114], [194, 43, 54], [592, 43, 506], [774, 43, 38], [393, 43, 56], [495, 43, 437], [737, 43, 435], [766, 43, 370], [219, 43, 34], [409, 43, 428], [400, 43, 14], [5, 43, 53], [300, 43, 445], [115, 43, 203], [216, 43, 156], [185, 43, 38], [31, 43, 414], [575, 43, 477], [214, 43, 370], [278, 43, 542], [138, 43, 321], [715, 43, 162], [786, 43, 717], [542, 43, 494], [500, 43, 53], [442, 43, 262], [84, 43, 65], [785, 43, 717], [244, 43, 207], [784, 43, 337], [797, 43, 475], [163, 43, 485], [687, 43, 163], [88, 43, 151], [85, 43, 26], [180, 43, 538], [678, 43, 272], [127, 43, 37], [427, 43, 495], [335, 43, 269], [532, 43, 444], [544, 43, 599], [105, 43, 707], [607, 43, 174], [191, 43, 402], [722, 43, 413], [749, 43, 25], [404, 43, 184], [343, 43, 286], [250, 43, 221], [421, 43, 76], [179, 43, 113], [83, 43, 364], [312, 43, 87], [341, 43, 152], [245, 43, 243], [184, 42, 38], [658, 42, 164], [530, 42, 14], [331, 42, 412], [634, 42, 407], [674, 42, 494], [658, 42, 164], [723, 42, 348], [507, 42, 387], [25, 42, 85], [676, 42, 389], [509, 42, 417], [467, 42, 241], [231, 42, 38], [166, 42, 403], [640, 42, 501], [526, 42, 201], [159, 42, 103], [650, 42, 34], [25, 42, 85], [568, 42, 562], [535, 42, 56], [109, 42, 562], [410, 42, 442], [27, 42, 258], [74, 42, 444], [693, 42, 479], [448, 42, 526], [284, 42, 405], [659, 42, 162], [750, 42, 68], [113, 42, 121], [308, 42, 179], [326, 42, 473], [611, 42, 406], [205, 42, 334], [204, 42, 360], [612, 42, 406], [633, 42, 407], [599, 42, 435], [333, 42, 195], [223, 42, 56], [125, 42, 103], [508, 42, 179], [295, 42, 214], [726, 42, 53], [635, 42, 407], [388, 42, 242], [675, 42, 242], [25, 42, 85], [554, 42, 315], [525, 42, 201], [466, 42, 103], [437, 42, 326], [672, 42, 532], [638, 42, 501], [402, 42, 400], [639, 42, 501], [352, 42, 164], [25, 42, 85], [353, 42, 289], [682, 42, 581], [259, 42, 36], [683, 42, 581], [130, 42, 56], [170, 42, 392], [502, 42, 401], [120, 42, 94], [478, 42, 247], [358, 42, 38], [256, 42, 163], [27, 42, 201], [691, 42, 56], [126, 42, 241], [553, 42, 492], [25, 42, 85], [713, 42, 419], [405, 42, 242], [372, 42, 184], [743, 42, 312], [408, 42, 103], [702, 42, 583], [392, 42, 83], [213, 42, 450], [679, 42, 442], [310, 42, 528], [483, 42, 231], [297, 42, 203], [729, 42, 585], [25, 42, 85], [739, 42, 334], [559, 42, 263], [324, 42, 175], [710, 42, 220], [227, 42, 319], [583, 42, 258], [74, 42, 444], [242, 42, 121], [487, 42, 421], [690, 42, 56], [523, 42, 97], [156, 42, 436], [550, 42, 37], [25, 42, 85], [456, 42, 369], [587, 42, 521], [161, 42, 382], [17, 42, 355], [556, 42, 389], [370, 42, 487], [668, 42, 242], [711, 42, 220], [152, 42, 312], [662, 42, 512], [697, 42, 37], [394, 42, 54], [280, 42, 500], [317, 42, 380], [237, 42, 360], [740, 42, 334], [162, 42, 133], [457, 42, 250], [536, 42, 497], [37, 42, 126], [704, 42, 406], [373, 42, 184], [484, 42, 401], [584, 42, 258], [37, 42, 59], [771, 41, 487], [431, 41, 389], [653, 41, 94], [478, 41, 445], [51, 41, 163], [585, 41, 267], [770, 41, 247], [246, 41, 242], [414, 41, 403], [114, 41, 21], [39, 41, 304], [263, 41, 374], [238, 41, 383], [104, 41, 283], [168, 41, 42], [399, 41, 133], [51, 41, 442], [294, 41, 214], [248, 41, 371], [222, 41, 408], [291, 41, 14], [235, 41, 166], [769, 41, 247], [387, 41, 202], [463, 41, 382], [58, 41, 257], [614, 41, 156], [77, 41, 126], [494, 41, 481], [504, 41, 21], [746, 41, 38], [561, 41, 403], [626, 41, 224], [135, 41, 387], [276, 41, 413], [781, 41, 412], [337, 41, 248], [403, 41, 435], [738, 41, 192], [669, 41, 585], [64, 41, 272], [778, 41, 468], [195, 41, 240], [176, 41, 226], [557, 41, 175], [380, 41, 428], [211, 41, 36], [111, 41, 444], [221, 41, 37], [777, 41, 528], [454, 41, 417], [610, 41, 406], [302, 41, 492], [779, 41, 706], [108, 41, 382], [133, 41, 387], [666, 41, 219], [684, 41, 538], [258, 41, 56], [775, 41, 452], [566, 41, 369], [520, 41, 297], [413, 41, 213], [52, 41, 372], [143, 41, 335], [200, 41, 247], [316, 41, 562], [485, 41, 184], [381, 41, 428], [564, 41, 401], [12, 41, 366], [631, 41, 163], [376, 41, 97], [680, 41, 379], [107, 41, 327], [338, 41, 76], [451, 41, 184], [158, 41, 37], [802, 41, 244], [763, 41, 312], [446, 41, 374], [15, 41, 283], [531, 41, 495], [570, 41, 373], [345, 41, 412], [147, 41, 407], [661, 41, 382], [459, 41, 59], [628, 41, 403], [142, 41, 36], [79, 41, 133], [134, 41, 387], [629, 41, 403], [685, 41, 538], [652, 41, 341], [753, 41, 76], [203, 41, 226], [16, 41, 366], [255, 41, 119], [241, 41, 360], [106, 41, 469], [78, 41, 126], [688, 41, 400], [128, 41, 36], [464, 41, 444], [52, 41, 372], [562, 41, 288], [6, 41, 163], [517, 41, 138], [363, 41, 59], [613, 41, 156], [782, 41, 337], [55, 41, 133], [369, 41, 156], [527, 41, 94], [620, 41, 369], [175, 41, 226], [206, 41, 403], [196, 41, 387], [212, 41, 404], [801, 41, 430], [140, 41, 319], [455, 41, 242], [86, 41, 291], [101, 41, 435], [336, 41, 562], [229, 41, 373], [218, 41, 34], [303, 41, 256], [418, 41, 97], [198, 41, 212], [436, 41, 371], [355, 41, 247], [97, 41, 428], [413, 41, 213], [632, 41, 404], [303, 41, 255], [100, 41, 153], [747, 41, 599], [357, 41, 34], [252, 41, 501], [48, 41, 305], [247, 41, 371], [41, 41, 403], [361, 41, 242], [136, 41, 387], [742, 41, 483], [419, 41, 13], [65, 41, 347], [199, 41, 207], [780, 41, 406], [96, 41, 428], [116, 41, 406], [759, 41, 220], [49, 41, 428], [350, 41, 489], [762, 41, 312], [8, 41, 334], [123, 41, 404], [416, 41, 445], [417, 41, 435], [327, 41, 244], [112, 41, 444], [471, 41, 387], [470, 41, 387], [654, 41, 53], [624, 41, 373], [539, 41, 370], [390, 41, 303], [580, 41, 413], [776, 41, 406], [69, 41, 398], [375, 41, 97], [396, 41, 515], [60, 41, 426], [23, 41, 114], [544, 41, 92], [615, 41, 109], [292, 41, 377], [423, 41, 330], [630, 41, 403], [528, 41, 94], [533, 41, 184], [413, 41, 213], [303, 41, 254], [197, 41, 387], [81, 41, 199], [698, 41, 267], [625, 41, 373], [473, 41, 37], [441, 41, 355], [359, 41, 382], [700, 41, 387], [768, 41, 42], [398, 41, 97], [307, 41, 105], [22, 41, 65], [801, 41, 430], [362, 41, 242], [98, 41, 152], [320, 41, 291], [619, 41, 369], [501, 41, 14], [594, 41, 362], [627, 41, 403], [538, 41, 276], [534, 41, 184], [7, 40, 56], [74, 40, 38], [744, 40, 242], [715, 40, 18], [551, 40, 201], [239, 40, 85], [601, 40, 103], [420, 40, 381], [240, 40, 53], [475, 40, 364], [137, 40, 435], [35, 40, 34], [524, 40, 153], [314, 40, 405], [678, 40, 94], [181, 40, 435], [493, 40, 245], [438, 40, 389], [167, 40, 94], [600, 40, 103], [756, 40, 147], [88, 40, 441], [76, 40, 89], [304, 40, 38], [474, 40, 435], [622, 40, 101], [95, 40, 231], [751, 40, 243], [285, 40, 147], [707, 40, 278], [228, 40, 492], [278, 40, 403], [267, 40, 483], [163, 40, 585], [426, 40, 247], [356, 40, 506], [461, 40, 289], [733, 40, 331], [657, 40, 164], [477, 40, 506], [312, 40, 376], [354, 40, 389], [734, 40, 281], [9, 40, 130], [450, 40, 89], [220, 40, 175], [187, 40, 388], [92, 40, 194], [543, 40, 431], [745, 40, 242], [772, 40, 36], [165, 40, 38], [121, 40, 109], [623, 40, 101], [233, 40, 435], [325, 40, 371], [574, 40, 477], [370, 40, 392], [192, 40, 241], [262, 40, 242], [281, 40, 204], [577, 40, 285], [89, 40, 441], [616, 40, 34], [732, 40, 297], [343, 40, 201], [385, 40, 38], [532, 40, 359], [282, 40, 248], [127, 40, 14], [300, 40, 38], [75, 40, 89], [596, 40, 97], [76, 40, 435], [299, 40, 444], [269, 40, 483], [741, 40, 686], [155, 40, 53], [183, 40, 276], [120, 40, 109], [719, 40, 408], [151, 40, 112], [710, 40, 567], [617, 40, 369], [261, 40, 36], [773, 40, 36], [271, 40, 428], [506, 40, 416], [588, 40, 184], [618, 40, 330], [264, 40, 156], [595, 40, 389], [495, 40, 380], [185, 40, 389], [754, 40, 230], [496, 40, 202], [215, 40, 289], [636, 40, 450], [296, 40, 370], [567, 40, 283], [119, 40, 32], [486, 40, 469], [328, 40, 276], [311, 40, 387], [322, 40, 89], [465, 40, 246], [319, 40, 242], [89, 40, 441], [673, 40, 38], [56, 40, 103], [169, 40, 114], [764, 40, 80], [472, 40, 404], [589, 40, 334], [191, 40, 241], [721, 40, 311], [330, 40, 253], [529, 40, 201], [324, 40, 133], [515, 40, 363], [701, 40, 297], [154, 40, 113], [342, 40, 14], [88, 40, 441], [621, 40, 400], [208, 40, 231], [335, 40, 404], [565, 40, 504], [568, 40, 133], [425, 40, 133], [511, 40, 363], [73, 40, 103], [581, 40, 366], [315, 40, 92], [582, 40, 258], [444, 40, 91], [109, 40, 194], [513, 40, 363], [72, 40, 506], [84, 40, 26], [745, 40, 242], [548, 40, 241], [546, 40, 241], [118, 40, 487], [711, 40, 567], [678, 40, 94], [74, 40, 38], [153, 40, 34], [188, 40, 178], [313, 40, 405], [75, 40, 435], [696, 40, 37], [207, 40, 404], [90, 40, 250], [694, 40, 521], [649, 40, 324], [334, 40, 406], [344, 40, 414], [329, 40, 253], [637, 40, 18], [714, 40, 18], [552, 40, 492], [42, 40, 114], [757, 40, 53], [224, 40, 58], [445, 40, 91], [703, 40, 285], [54, 40, 56], [110, 40, 153], [476, 40, 444], [674, 39, 242], [708, 39, 194], [462, 39, 103], [309, 39, 528], [149, 39, 401], [458, 39, 392], [651, 39, 341], [571, 39, 97], [82, 39, 103], [499, 39, 53], [323, 39, 281], [226, 39, 392], [522, 39, 528], [347, 39, 306], [656, 39, 340], [537, 39, 175], [2, 39, 235], [436, 39, 326], [569, 39, 92], [159, 39, 163], [204, 39, 334], [87, 39, 36], [367, 39, 401], [37, 39, 286], [164, 39, 253], [579, 39, 94], [189, 39, 476], [98, 39, 362], [489, 39, 250], [50, 39, 89], [503, 39, 227], [5, 39, 163], [542, 39, 404], [57, 39, 370], [575, 39, 94], [735, 39, 242], [661, 39, 512], [70, 39, 380], [393, 39, 65], [576, 39, 94], [122, 39, 94], [509, 39, 289], [306, 39, 334], [130, 39, 242], [599, 39, 103], [318, 39, 97], [94, 39, 138], [280, 39, 138], [554, 39, 276], [340, 39, 330], [368, 39, 401], [728, 39, 445], [578, 39, 94], [348, 39, 306], [170, 39, 36], [289, 39, 175], [702, 39, 494], [190, 39, 417], [279, 39, 355], [650, 39, 339], [305, 39, 334], [606, 39, 94], [20, 39, 38], [505, 39, 417], [391, 39, 83], [254, 39, 197], [692, 39, 479], [725, 39, 184], [66, 39, 238], [336, 39, 242], [37, 39, 286], [563, 39, 247], [307, 39, 179], [395, 39, 250], [302, 39, 247], [43, 39, 363], [679, 39, 379], [758, 39, 474], [44, 39, 92], [722, 39, 297], [519, 39, 207], [24, 39, 426], [389, 39, 235], [161, 39, 226], [555, 39, 269], [286, 39, 327], [182, 39, 483], [339, 39, 248], [434, 39, 389], [766, 39, 374], [498, 39, 46], [424, 39, 417], [605, 39, 94], [50, 39, 89], [341, 39, 242], [178, 39, 357], [435, 39, 389], [179, 39, 324], [545, 39, 537], [663, 39, 488], [293, 39, 304], [124, 39, 419], [712, 39, 419], [390, 39, 512], [590, 39, 499], [765, 39, 347], [277, 39, 403], [227, 39, 163], [687, 39, 427], [371, 39, 184], [709, 39, 194], [152, 39, 219], [490, 39, 250], [69, 39, 75], [439, 39, 94], [3, 39, 388], [58, 39, 242], [260, 39, 330], [572, 39, 445], [667, 39, 242], [20, 39, 38], [93, 39, 138], [755, 39, 585], [148, 39, 401], [177, 39, 375], [686, 39, 427], [670, 38, 312], [653, 38, 261], [332, 38, 42], [85, 38, 14], [730, 38, 304], [787, 38, 563], [634, 38, 526], [353, 38, 389], [550, 38, 515], [397, 38, 97], [598, 38, 120], [752, 38, 242], [52, 38, 417], [166, 38, 405], [39, 38, 102], [283, 38, 564], [560, 38, 242], [234, 38, 428], [727, 38, 37], [504, 38, 226], [27, 38, 14], [453, 38, 417], [64, 38, 94], [521, 38, 13], [27, 38, 14], [331, 38, 42], [682, 38, 175], [113, 38, 505], [668, 38, 53], [213, 38, 157], [28, 38, 360], [558, 38, 404], [706, 38, 330], [659, 38, 340], [452, 38, 400], [705, 38, 330], [564, 38, 504], [785, 38, 119], [238, 38, 94], [510, 38, 269], [46, 38, 202], [418, 38, 401], [364, 38, 258], [561, 38, 356], [724, 38, 389], [608, 38, 517], [33, 38, 260], [655, 38, 473], [117, 38, 97], [749, 38, 89], [206, 38, 283], [193, 38, 95], [400, 38, 162], [566, 38, 283], [788, 38, 432], [30, 38, 260], [413, 38, 175], [402, 38, 269], [52, 38, 417], [746, 38, 401], [676, 38, 204], [259, 38, 330], [15, 38, 97], [222, 38, 392], [672, 38, 38], [451, 38, 400], [559, 38, 242], [784, 38, 334], [691, 38, 188], [23, 38, 562], [625, 38, 319], [535, 38, 497], [783, 38, 334], [507, 38, 179], [223, 38, 331], [683, 38, 175], [287, 38, 583], [633, 38, 526], [376, 38, 94], [355, 38, 506], [413, 38, 175], [786, 38, 321], [491, 38, 171], [662, 38, 488], [365, 38, 258], [404, 38, 242], [352, 38, 103], [774, 38, 408], [230, 38, 97], [497, 38, 489], [414, 38, 318], [65, 38, 94], [60, 38, 56], [704, 38, 330], [242, 38, 505], [324, 38, 334], [690, 38, 188], [114, 38, 246], [624, 38, 319], [217, 38, 184], [284, 38, 403], [333, 38, 406], [413, 38, 175], [587, 38, 227], [253, 38, 197], [180, 38, 435], [500, 38, 372], [456, 38, 250], [18, 38, 17], [325, 38, 473], [488, 38, 248], [556, 38, 80], [698, 38, 258], [607, 38, 517], [543, 38, 474], [297, 38, 358], [635, 38, 526], [375, 38, 94], [469, 38, 364], [699, 38, 258], [597, 38, 120], [771, 37, 105], [574, 37, 94], [431, 37, 163], [562, 37, 247], [403, 37, 184], [359, 37, 427], [478, 37, 358], [211, 37, 42], [782, 37, 334], [102, 37, 363], [361, 37, 524], [25, 37, 21], [546, 37, 538], [41, 37, 474], [432, 37, 163], [231, 37, 387], [422, 37, 330], [300, 37, 215], [399, 37, 14], [29, 37, 242], [416, 37, 403], [640, 37, 14], [267, 37, 99], [539, 37, 501], [642, 37, 435], [799, 37, 242], [729, 37, 304], [327, 37, 253], [492, 37, 230], [72, 37, 103], [434, 37, 599], [100, 37, 435], [463, 37, 498], [513, 37, 278], [641, 37, 403], [337, 37, 444], [250, 37, 126], [483, 37, 396], [738, 37, 91], [7, 37, 240], [89, 37, 103], [660, 37, 91], [417, 37, 162], [214, 37, 224], [95, 37, 328], [639, 37, 14], [88, 37, 103], [276, 37, 283], [228, 37, 373], [410, 37, 368], [630, 37, 366], [777, 37, 604], [442, 37, 417], [96, 37, 485], [25, 37, 21], [533, 37, 223], [288, 37, 264], [669, 37, 581], [531, 37, 505], [448, 37, 382], [588, 37, 36], [280, 37, 95], [595, 37, 97], [249, 37, 56], [136, 37, 436], [25, 37, 21], [338, 37, 444], [762, 37, 445], [105, 37, 374], [108, 37, 498], [317, 37, 188], [795, 37, 97], [557, 37, 504], [592, 37, 240], [49, 37, 141], [589, 37, 442], [759, 37, 37], [498, 37, 457], [16, 37, 355], [176, 37, 219], [615, 37, 163], [388, 37, 235], [744, 37, 184], [200, 37, 371], [106, 37, 193], [303, 37, 389], [183, 37, 38], [133, 37, 38], [689, 37, 210], [645, 37, 414], [763, 37, 445], [192, 37, 38], [321, 37, 133], [370, 37, 445], [617, 37, 202], [203, 37, 242], [209, 37, 583], [77, 37, 97], [570, 37, 97], [32, 37, 398], [131, 37, 362], [455, 37, 254], [628, 37, 366], [387, 37, 242], [343, 37, 414], [261, 37, 281], [53, 37, 163], [455, 37, 256], [155, 37, 436], [515, 37, 278], [420, 37, 76], [251, 37, 226], [551, 37, 492], [791, 37, 242], [798, 37, 14], [246, 37, 371], [187, 37, 369], [237, 37, 97], [794, 37, 5], [186, 37, 340], [517, 37, 94], [638, 37, 14], [299, 37, 414], [269, 37, 182], [120, 37, 408], [511, 37, 278], [726, 37, 37], [734, 37, 158], [629, 37, 366], [747, 37, 398], [290, 37, 91], [593, 37, 240], [536, 37, 175], [455, 37, 255], [191, 37, 38], [134, 37, 330], [160, 37, 498], [257, 37, 116], [435, 37, 599], [740, 37, 665], [103, 37, 452], [580, 37, 366], [572, 37, 21], [502, 37, 227], [311, 37, 97], [320, 37, 133], [138, 37, 246], [476, 37, 414], [620, 37, 26], [732, 37, 331], [66, 37, 339], [304, 37, 334], [212, 37, 334], [255, 37, 163], [315, 37, 572], [594, 37, 273], [220, 37, 89], [67, 37, 66], [105, 37, 374], [737, 37, 91], [68, 37, 66], [86, 37, 36], [379, 37, 133], [751, 37, 679], [408, 37, 428], [232, 37, 184], [495, 37, 378], [745, 37, 184], [350, 37, 219], [89, 37, 103], [109, 37, 153], [619, 37, 26], [47, 37, 74], [532, 37, 184], [252, 37, 412], [745, 37, 184], [103, 37, 452], [379, 37, 334], [53, 37, 163], [25, 37, 21], [739, 37, 152], [312, 37, 97], [281, 37, 248], [544, 37, 537], [449, 37, 89], [296, 37, 203], [780, 37, 326], [88, 37, 103], [54, 37, 133], [396, 37, 413], [764, 37, 666], [377, 37, 334], [12, 37, 445], [386, 37, 129], [194, 37, 240], [25, 37, 21], [487, 37, 396], [577, 37, 94], [501, 37, 514], [386, 37, 276], [8, 37, 130], [123, 37, 104], [25, 37, 21], [112, 37, 36], [471, 37, 258], [341, 37, 14], [115, 37, 242], [700, 37, 585], [723, 37, 389], [647, 37, 401], [470, 37, 241], [208, 37, 242], [168, 37, 97], [118, 37, 32], [800, 37, 427], [83, 37, 512], [731, 37, 304], [196, 37, 94], [548, 37, 494], [292, 37, 288], [17, 37, 17], [61, 37, 187], [776, 37, 504], [163, 37, 355], [99, 37, 12], [4, 37, 53], [627, 37, 366], [386, 37, 289], [697, 37, 337], [796, 37, 85], [139, 37, 246], [797, 37, 430], [1, 37, 402], [111, 37, 36], [688, 37, 210], [616, 37, 202], [778, 37, 421], [263, 37, 187], [97, 37, 485], [197, 37, 212], [104, 37, 707], [394, 37, 250], [696, 37, 337], [35, 37, 381], [473, 37, 54], [793, 37, 408], [90, 37, 62], [78, 37, 97], [358, 37, 219], [443, 37, 407], [792, 37, 539], [378, 37, 133], [748, 37, 398], [221, 37, 54], [48, 37, 428], [464, 37, 36], [362, 37, 524], [534, 37, 223], [441, 37, 497], [509, 37, 400], [81, 37, 435], [757, 37, 474], [175, 37, 219], [171, 37, 435], [484, 37, 396], [135, 37, 435], [25, 37, 21], [538, 37, 469], [753, 37, 230], [56, 36, 370], [768, 36, 334], [585, 36, 204], [328, 36, 201], [37, 36, 58], [244, 36, 53], [22, 36, 355], [294, 36, 156], [107, 36, 8], [439, 36, 271], [107, 36, 7], [467, 36, 436], [613, 36, 175], [525, 36, 446], [127, 36, 480], [524, 36, 444], [177, 36, 357], [2, 36, 388], [381, 36, 477], [520, 36, 13], [728, 36, 585], [606, 36, 244], [496, 36, 489], [158, 36, 103], [428, 36, 146], [711, 36, 247], [458, 36, 403], [586, 36, 204], [522, 36, 97], [465, 36, 202], [23, 36, 380], [599, 36, 429], [504, 36, 212], [508, 36, 514], [79, 36, 303], [357, 36, 403], [329, 36, 201], [380, 36, 513], [153, 36, 113], [568, 36, 92], [143, 36, 205], [530, 36, 89], [438, 36, 68], [116, 36, 97], [295, 36, 156], [446, 36, 205], [243, 36, 115], [459, 36, 452], [779, 36, 103], [219, 36, 133], [122, 36, 271], [239, 36, 103], [205, 36, 153], [506, 36, 387], [505, 36, 158], [411, 36, 203], [165, 36, 403], [631, 36, 450], [427, 36, 146], [770, 36, 202], [685, 36, 412], [526, 36, 446], [314, 36, 270], [479, 36, 164], [600, 36, 429], [274, 36, 326], [632, 36, 494], [425, 36, 247], [646, 36, 163], [749, 36, 68], [527, 36, 248], [648, 36, 497], [216, 36, 204], [345, 36, 133], [80, 36, 303], [74, 36, 153], [240, 36, 241], [322, 36, 281], [391, 36, 370], [330, 36, 201], [769, 36, 202], [150, 36, 427], [310, 36, 46], [226, 36, 403], [125, 36, 435], [21, 36, 65], [64, 36, 502], [584, 36, 58], [167, 36, 42], [646, 36, 163], [684, 36, 412], [680, 36, 400], [466, 36, 435], [710, 36, 247], [271, 36, 282], [667, 36, 53], [363, 36, 258], [610, 36, 269], [643, 36, 163], [424, 36, 374], [453, 36, 474], [775, 36, 244], [402, 36, 565], [130, 36, 82], [437, 36, 360], [725, 36, 53], [336, 36, 14], [454, 36, 474], [107, 36, 9], [145, 36, 268], [146, 36, 53], [644, 36, 163], [126, 36, 436], [140, 36, 72], [499, 36, 372], [258, 36, 36], [302, 36, 408], [37, 36, 53], [101, 36, 393], [614, 36, 175], [760, 36, 359], [218, 36, 133], [553, 36, 184], [519, 36, 297], [722, 36, 348], [195, 36, 89], [144, 36, 97], [540, 36, 405], [742, 36, 312], [611, 36, 269], [185, 36, 68], [92, 36, 399], [542, 36, 348], [308, 36, 379], [529, 36, 14], [646, 36, 163], [65, 36, 502], [199, 36, 417], [318, 36, 242], [701, 36, 283], [583, 36, 58], [342, 36, 269], [409, 36, 246], [245, 36, 54], [393, 36, 54], [114, 36, 202], [523, 36, 435], [766, 36, 38], [605, 36, 244], [206, 36, 38], [278, 36, 97], [335, 36, 197], [755, 36, 147], [262, 36, 269], [293, 36, 214], [482, 36, 248], [55, 36, 244], [141, 36, 72], [84, 36, 14], [188, 36, 476], [285, 36, 402], [552, 36, 184], [270, 36, 412], [654, 36, 473], [307, 36, 379], [190, 36, 374], [528, 36, 248], [765, 36, 492], [161, 36, 133], [346, 36, 133], [741, 36, 403], [316, 36, 380], [313, 36, 270], [601, 36, 429], [179, 36, 538], [774, 36, 322], [481, 36, 248], [162, 36, 389], [626, 36, 116], [707, 36, 286], [480, 36, 248], [781, 36, 247], [543, 36, 92], [612, 36, 269], [74, 36, 153], [256, 36, 116], [460, 36, 452], [73, 36, 362], [564, 35, 174], [666, 35, 405], [653, 35, 53], [181, 35, 408], [773, 35, 404], [651, 35, 402], [430, 35, 417], [618, 35, 340], [263, 35, 156], [475, 35, 270], [675, 35, 34], [802, 35, 26], [598, 35, 275], [267, 35, 405], [283, 35, 226], [678, 35, 326], [756, 35, 668], [164, 35, 403], [656, 35, 164], [708, 35, 571], [220, 35, 54], [686, 35, 365], [169, 35, 141], [652, 35, 402], [326, 35, 173], [326, 35, 156], [291, 35, 226], [713, 35, 229], [210, 35, 99], [421, 35, 36], [694, 35, 523], [98, 35, 21], [383, 35, 89], [143, 35, 416], [382, 35, 58], [557, 35, 404], [33, 35, 390], [241, 35, 445], [676, 35, 36], [718, 35, 201], [419, 35, 250], [51, 35, 91], [735, 35, 184], [147, 35, 401], [714, 35, 366], [418, 35, 13], [15, 35, 398], [184, 35, 240], [48, 35, 141], [384, 35, 156], [120, 35, 513], [269, 35, 405], [282, 35, 286], [385, 35, 428], [650, 35, 341], [30, 35, 390], [554, 35, 269], [34, 35, 37], [50, 35, 163], [566, 35, 242], [719, 35, 285], [517, 35, 347], [712, 35, 229], [622, 35, 223], [716, 35, 585], [57, 35, 37], [332, 35, 389], [128, 35, 428], [306, 35, 231], [305, 35, 231], [264, 35, 38], [457, 35, 392], [39, 35, 360], [405, 35, 422], [691, 35, 401], [682, 35, 204], [369, 35, 281], [582, 35, 58], [215, 35, 163], [567, 35, 242], [41, 35, 114], [229, 35, 185], [679, 35, 400], [683, 35, 204], [687, 35, 365], [436, 35, 360], [373, 35, 428], [413, 35, 445], [413, 35, 445], [472, 35, 103], [157, 35, 488], [546, 35, 412], [414, 35, 293], [772, 35, 404], [461, 35, 400], [339, 35, 330], [60, 35, 358], [12, 35, 476], [351, 35, 56], [678, 35, 115], [621, 35, 279], [81, 35, 103], [690, 35, 401], [720, 35, 566], [623, 35, 223], [156, 35, 488], [501, 35, 401], [565, 35, 174], [376, 35, 184], [238, 35, 419], [222, 35, 203], [198, 35, 185], [31, 35, 34], [715, 35, 366], [375, 35, 184], [548, 35, 412], [590, 35, 235], [413, 35, 445], [50, 35, 442], [717, 35, 50], [709, 35, 571], [743, 35, 605], [351, 35, 126], [351, 35, 59], [69, 35, 380], [372, 35, 428], [51, 35, 91], [591, 35, 235], [42, 35, 141], [43, 35, 92], [178, 35, 94], [703, 35, 175], [597, 35, 275], [207, 35, 103], [7, 34, 334], [474, 34, 373], [110, 34, 188], [309, 34, 46], [426, 34, 256], [426, 34, 255], [571, 34, 259], [510, 34, 163], [25, 34, 435], [213, 34, 504], [578, 34, 220], [35, 34, 322], [75, 34, 350], [353, 34, 373], [334, 34, 538], [248, 34, 399], [299, 34, 201], [25, 34, 435], [575, 34, 377], [27, 34, 360], [158, 34, 163], [100, 34, 393], [72, 34, 362], [596, 34, 324], [569, 34, 499], [535, 34, 175], [214, 34, 36], [138, 34, 182], [170, 34, 435], [204, 34, 153], [75, 34, 350], [661, 34, 488], [452, 34, 390], [336, 34, 114], [673, 34, 339], [191, 34, 76], [54, 34, 244], [25, 34, 435], [503, 34, 453], [697, 34, 242], [109, 34, 188], [733, 34, 65], [242, 34, 374], [20, 34, 162], [300, 34, 343], [350, 34, 213], [745, 34, 157], [37, 34, 219], [698, 34, 419], [280, 34, 204], [192, 34, 76], [693, 34, 352], [76, 34, 350], [370, 34, 36], [702, 34, 451], [595, 34, 324], [19, 34, 283], [311, 34, 226], [515, 34, 362], [347, 34, 163], [113, 34, 374], [511, 34, 447], [579, 34, 220], [734, 34, 242], [551, 34, 184], [333, 34, 538], [561, 34, 119], [261, 34, 242], [59, 34, 245], [368, 34, 94], [354, 34, 373], [74, 34, 435], [476, 34, 201], [19, 34, 283], [341, 34, 269], [744, 34, 157], [367, 34, 242], [580, 34, 240], [25, 34, 435], [180, 34, 408], [233, 34, 278], [699, 34, 419], [187, 34, 178], [402, 34, 103], [692, 34, 352], [20, 34, 162], [58, 34, 53], [672, 34, 339], [304, 34, 231], [559, 34, 184], [315, 34, 275], [343, 34, 471], [302, 34, 428], [296, 34, 358], [495, 34, 202], [95, 34, 157], [218, 34, 436], [139, 34, 182], [764, 34, 447], [152, 34, 34], [37, 34, 219], [532, 34, 223], [247, 34, 399], [319, 34, 305], [312, 34, 226], [223, 34, 58], [25, 34, 435], [576, 34, 377], [324, 34, 53], [154, 34, 230], [502, 34, 453], [44, 34, 202], [74, 34, 89], [208, 34, 157], [581, 34, 240], [25, 34, 435], [331, 34, 389], [224, 34, 324], [219, 34, 436], [348, 34, 163], [115, 34, 146], [587, 34, 113], [750, 34, 484], [513, 34, 126], [451, 34, 390], [4, 34, 163], [745, 34, 157], [76, 34, 350], [163, 34, 253], [371, 34, 428], [227, 34, 211], [340, 34, 89], [696, 34, 242], [85, 34, 367], [27, 34, 360], [707, 34, 429], [550, 34, 175], [189, 34, 512], [344, 34, 471], [344, 34, 470], [297, 34, 69], [343, 34, 470], [560, 34, 184], [25, 34, 435], [137, 34, 278], [568, 34, 499], [276, 33, 403], [771, 33, 220], [562, 33, 471], [562, 33, 470], [211, 33, 362], [658, 33, 185], [102, 33, 388], [239, 33, 435], [212, 33, 13], [403, 33, 242], [193, 33, 246], [761, 33, 597], [104, 33, 374], [133, 33, 226], [613, 33, 163], [52, 33, 163], [524, 33, 201], [399, 33, 162], [545, 33, 97], [577, 33, 220], [159, 33, 498], [52, 33, 163], [28, 33, 91], [398, 33, 36], [66, 33, 66], [279, 33, 256], [408, 33, 246], [428, 33, 97], [279, 33, 255], [82, 33, 430], [328, 33, 89], [746, 33, 251], [352, 33, 421], [465, 33, 363], [273, 33, 153], [463, 33, 205], [752, 33, 141], [504, 33, 417], [106, 33, 170], [105, 33, 37], [329, 33, 89], [32, 33, 260], [288, 33, 68], [669, 33, 312], [124, 33, 358], [143, 33, 214], [438, 33, 157], [253, 33, 21], [142, 33, 242], [674, 33, 34], [404, 33, 422], [397, 33, 36], [574, 33, 377], [289, 33, 68], [105, 33, 37], [615, 33, 115], [389, 33, 73], [782, 33, 103], [555, 33, 394], [165, 33, 405], [531, 33, 36], [462, 33, 430], [506, 33, 179], [594, 33, 487], [237, 33, 167], [483, 33, 414], [537, 33, 240], [325, 33, 173], [46, 33, 74], [308, 33, 367], [536, 33, 240], [314, 33, 428], [763, 33, 597], [723, 33, 31], [435, 33, 262], [166, 33, 97], [534, 33, 157], [563, 33, 471], [77, 33, 517], [64, 33, 477], [321, 33, 323], [608, 33, 262], [783, 33, 103], [448, 33, 501], [668, 33, 497], [387, 33, 235], [485, 33, 242], [464, 33, 529], [784, 33, 103], [779, 33, 401], [9, 33, 401], [290, 33, 206], [167, 33, 97], [240, 33, 436], [730, 33, 3], [92, 33, 138], [563, 33, 470], [29, 33, 260], [570, 33, 259], [726, 33, 154], [762, 33, 597], [747, 33, 105], [657, 33, 479], [469, 33, 246], [676, 33, 514], [446, 33, 256], [231, 33, 204], [307, 33, 367], [727, 33, 154], [16, 33, 17], [279, 33, 254], [410, 33, 203], [667, 33, 497], [234, 33, 272], [254, 33, 21], [477, 33, 174], [130, 33, 184], [320, 33, 323], [521, 33, 403], [185, 33, 157], [356, 33, 174], [303, 33, 334], [206, 33, 137], [498, 33, 53], [801, 33, 170], [287, 33, 175], [196, 33, 234], [86, 33, 362], [614, 33, 163], [67, 33, 530], [670, 33, 572], [777, 33, 716], [258, 33, 250], [416, 33, 92], [780, 33, 219], [68, 33, 530], [740, 33, 179], [286, 33, 170], [659, 33, 91], [355, 33, 174], [619, 33, 409], [252, 33, 197], [56, 33, 37], [507, 33, 514], [330, 33, 89], [801, 33, 170], [729, 33, 3], [136, 33, 123], [529, 33, 89], [739, 33, 179], [65, 33, 477], [96, 33, 244], [281, 33, 286], [625, 33, 372], [396, 33, 97], [434, 33, 262], [194, 33, 89], [337, 33, 377], [390, 33, 83], [487, 33, 414], [134, 33, 114], [114, 33, 363], [539, 33, 203], [123, 33, 13], [338, 33, 377], [176, 33, 246], [112, 33, 529], [471, 33, 243], [456, 33, 392], [400, 33, 36], [470, 33, 235], [395, 33, 362], [444, 33, 337], [278, 33, 355], [335, 33, 373], [8, 33, 401], [23, 33, 426], [83, 33, 400], [731, 33, 297], [724, 33, 31], [417, 33, 86], [84, 33, 367], [292, 33, 247], [658, 33, 185], [620, 33, 409], [776, 33, 34], [316, 33, 188], [394, 33, 362], [87, 33, 362], [270, 33, 428], [108, 33, 205], [1, 33, 235], [554, 33, 394], [556, 33, 275], [624, 33, 372], [533, 33, 157], [97, 33, 244], [277, 33, 97], [197, 33, 236], [313, 33, 428], [127, 33, 66], [427, 33, 97], [473, 33, 458], [78, 33, 517], [177, 33, 94], [700, 33, 113], [607, 33, 262], [359, 33, 197], [741, 33, 445], [649, 33, 319], [94, 33, 247], [149, 33, 525], [748, 33, 105], [543, 33, 537], [441, 33, 102], [285, 33, 92], [445, 33, 337], [171, 33, 175], [175, 33, 246], [572, 33, 497], [494, 33, 179], [135, 33, 86], [484, 33, 414], [111, 33, 529], [93, 33, 247], [509, 33, 445], [538, 33, 203], [148, 33, 525], [431, 32, 445], [522, 32, 435], [787, 32, 532], [88, 32, 242], [680, 32, 334], [294, 32, 46], [758, 32, 417], [275, 32, 542], [592, 32, 362], [634, 32, 406], [80, 32, 428], [381, 32, 105], [168, 32, 169], [53, 32, 408], [520, 32, 403], [425, 32, 256], [496, 32, 348], [458, 32, 97], [586, 32, 412], [705, 32, 34], [169, 32, 212], [89, 32, 482], [439, 32, 278], [318, 32, 305], [228, 32, 185], [610, 32, 349], [122, 32, 278], [630, 32, 432], [119, 32, 127], [769, 32, 334], [267, 32, 202], [432, 32, 445], [588, 32, 163], [424, 32, 458], [612, 32, 349], [413, 32, 60], [280, 32, 248], [226, 32, 97], [295, 32, 46], [5, 32, 481], [70, 32, 230], [200, 32, 220], [778, 32, 163], [15, 32, 42], [505, 32, 244], [58, 32, 514], [759, 32, 359], [689, 32, 468], [433, 32, 253], [770, 32, 334], [617, 32, 97], [284, 32, 318], [425, 32, 255], [732, 32, 65], [62, 32, 223], [650, 32, 402], [380, 32, 105], [131, 32, 58], [706, 32, 34], [728, 32, 304], [704, 32, 34], [606, 32, 428], [6, 32, 481], [629, 32, 432], [203, 32, 428], [589, 32, 163], [388, 32, 73], [246, 32, 399], [79, 32, 428], [269, 32, 92], [255, 32, 116], [190, 32, 458], [160, 32, 242], [688, 32, 468], [616, 32, 151], [21, 32, 355], [527, 32, 403], [757, 32, 417], [788, 32, 362], [271, 32, 253], [781, 32, 677], [259, 32, 182], [593, 32, 362], [264, 32, 163], [725, 32, 37], [39, 32, 34], [691, 32, 92], [215, 32, 103], [519, 32, 13], [722, 32, 389], [754, 32, 163], [751, 32, 242], [89, 32, 242], [633, 32, 406], [274, 32, 207], [413, 32, 60], [24, 32, 491], [611, 32, 349], [361, 32, 182], [414, 32, 60], [627, 32, 432], [497, 32, 348], [88, 32, 482], [199, 32, 428], [701, 32, 340], [679, 32, 334], [342, 32, 534], [478, 32, 109], [339, 32, 89], [690, 32, 92], [393, 32, 250], [461, 32, 103], [766, 32, 339], [260, 32, 182], [376, 32, 428], [22, 32, 116], [327, 32, 298], [262, 32, 373], [153, 32, 230], [605, 32, 428], [721, 32, 503], [179, 32, 435], [118, 32, 127], [786, 32, 473], [755, 32, 668], [553, 32, 91], [375, 32, 428], [785, 32, 528], [293, 32, 156], [590, 32, 92], [17, 32, 97], [765, 32, 689], [18, 32, 97], [552, 32, 91], [99, 32, 182], [188, 32, 512], [660, 32, 175], [61, 32, 341], [413, 32, 60], [528, 32, 403], [53, 32, 408], [628, 32, 432], [162, 32, 156], [358, 32, 253], [90, 32, 534], [544, 32, 97], [707, 32, 259], [205, 32, 371], [635, 32, 406], [71, 32, 437], [362, 32, 182], [591, 32, 92], [42, 32, 212], [73, 32, 398], [542, 32, 270], [753, 32, 163], [585, 32, 412], [631, 31, 481], [666, 31, 312], [184, 31, 392], [418, 31, 250], [719, 31, 175], [678, 31, 247], [37, 31, 326], [551, 31, 91], [546, 31, 270], [510, 31, 372], [107, 31, 501], [475, 31, 427], [263, 31, 36], [323, 31, 36], [192, 31, 363], [370, 31, 186], [577, 31, 248], [678, 31, 357], [575, 31, 248], [377, 31, 246], [799, 31, 707], [756, 31, 202], [72, 31, 398], [443, 31, 91], [535, 31, 240], [738, 31, 405], [800, 31, 356], [7, 31, 130], [95, 31, 103], [513, 31, 512], [170, 31, 175], [708, 31, 261], [204, 31, 371], [117, 31, 362], [336, 31, 398], [449, 31, 242], [774, 31, 475], [213, 31, 379], [694, 31, 86], [191, 31, 363], [54, 31, 487], [557, 31, 163], [322, 31, 36], [459, 31, 275], [365, 31, 173], [365, 31, 156], [242, 31, 47], [504, 31, 158], [795, 31, 26], [435, 31, 400], [238, 31, 381], [735, 31, 36], [187, 31, 476], [566, 31, 225], [714, 31, 13], [50, 31, 91], [19, 31, 38], [147, 31, 525], [641, 31, 97], [796, 31, 324], [120, 31, 107], [104, 31, 37], [601, 31, 475], [640, 31, 533], [306, 31, 319], [19, 31, 38], [632, 31, 91], [64, 31, 105], [561, 31, 485], [282, 31, 94], [599, 31, 475], [655, 31, 113], [32, 31, 390], [113, 31, 47], [579, 31, 248], [442, 31, 389], [648, 31, 60], [734, 31, 184], [476, 31, 435], [600, 31, 475], [311, 31, 435], [261, 31, 269], [515, 31, 512], [454, 31, 389], [584, 31, 151], [300, 31, 274], [209, 31, 99], [453, 31, 389], [792, 31, 236], [81, 31, 430], [798, 31, 400], [663, 31, 363], [645, 31, 14], [638, 31, 533], [642, 31, 97], [517, 31, 248], [685, 31, 577], [29, 31, 390], [511, 31, 512], [702, 31, 173], [498, 31, 372], [183, 31, 240], [155, 31, 129], [455, 31, 536], [684, 31, 577], [686, 31, 113], [363, 31, 173], [299, 31, 435], [307, 31, 244], [639, 31, 533], [35, 31, 118], [420, 31, 36], [682, 31, 585], [775, 31, 389], [222, 31, 350], [305, 31, 319], [257, 31, 339], [794, 31, 269], [437, 31, 319], [653, 31, 473], [564, 31, 479], [164, 31, 115], [386, 31, 94], [98, 31, 12], [578, 31, 248], [66, 31, 530], [140, 31, 453], [450, 31, 242], [574, 31, 248], [206, 31, 91], [558, 31, 163], [490, 31, 151], [559, 31, 136], [436, 31, 319], [86, 31, 453], [195, 31, 281], [230, 31, 362], [499, 31, 535], [302, 31, 109], [304, 31, 319], [308, 31, 244], [495, 31, 489], [737, 31, 404], [654, 31, 113], [364, 31, 173], [364, 31, 156], [548, 31, 270], [647, 31, 514], [683, 31, 585], [764, 31, 230], [37, 31, 326], [532, 31, 157], [116, 31, 362], [742, 31, 605], [379, 31, 246], [344, 31, 326], [41, 31, 141], [572, 31, 358], [2, 31, 38], [662, 31, 363], [576, 31, 248], [345, 31, 380], [65, 31, 105], [369, 31, 36], [583, 31, 151], [60, 31, 187], [55, 31, 487], [434, 31, 400], [208, 31, 103], [12, 31, 405], [350, 31, 401], [565, 31, 479], [214, 31, 42], [156, 31, 129], [523, 31, 23], [501, 31, 227], [489, 31, 151], [390, 31, 263], [341, 31, 534], [115, 31, 498], [296, 31, 69], [315, 31, 230], [582, 31, 151], [198, 31, 269], [83, 31, 97], [731, 31, 331], [482, 31, 253], [157, 31, 129], [141, 31, 453], [500, 31, 535], [235, 31, 166], [87, 31, 453], [163, 31, 403], [50, 31, 91], [797, 31, 202], [687, 31, 113], [1, 31, 388], [709, 31, 261], [227, 31, 97], [161, 31, 389], [346, 31, 380], [791, 31, 234], [363, 31, 156], [768, 31, 389], [793, 31, 219], [540, 31, 564], [481, 31, 381], [626, 31, 543], [152, 31, 113], [378, 31, 246], [749, 31, 484], [312, 31, 435], [480, 31, 281], [343, 31, 326], [3, 31, 38], [560, 31, 136], [567, 31, 225], [715, 31, 13], [43, 31, 202], [256, 31, 339], [621, 31, 498], [703, 31, 246], [460, 31, 275], [58, 30, 97], [773, 30, 184], [618, 30, 203], [332, 30, 191], [353, 30, 247], [524, 30, 446], [598, 30, 429], [493, 30, 304], [267, 30, 18], [52, 30, 6], [223, 30, 324], [129, 30, 175], [75, 30, 446], [421, 30, 388], [382, 30, 392], [733, 30, 103], [310, 30, 435], [580, 30, 355], [354, 30, 247], [317, 30, 254], [452, 30, 468], [710, 30, 425], [159, 30, 242], [741, 30, 355], [281, 30, 94], [693, 30, 152], [622, 30, 222], [384, 30, 403], [352, 30, 293], [385, 30, 156], [637, 30, 83], [333, 30, 119], [349, 30, 175], [623, 30, 222], [74, 30, 350], [555, 30, 187], [193, 30, 228], [802, 30, 272], [269, 30, 18], [76, 30, 446], [465, 30, 78], [713, 30, 301], [746, 30, 291], [331, 30, 191], [151, 30, 94], [57, 30, 386], [525, 30, 157], [52, 30, 6], [526, 30, 157], [702, 30, 156], [672, 30, 402], [477, 30, 109], [402, 30, 404], [130, 30, 401], [692, 30, 152], [356, 30, 109], [357, 30, 363], [39, 30, 156], [27, 30, 91], [229, 30, 424], [287, 30, 68], [355, 30, 109], [625, 30, 163], [673, 30, 402], [232, 30, 222], [636, 30, 488], [383, 30, 156], [760, 30, 36], [472, 30, 369], [27, 30, 442], [597, 30, 429], [324, 30, 182], [509, 30, 163], [772, 30, 184], [699, 30, 496], [74, 30, 350], [51, 30, 414], [581, 30, 355], [550, 30, 184], [114, 30, 78], [451, 30, 468], [712, 30, 301], [76, 30, 446], [270, 30, 202], [697, 30, 525], [554, 30, 187], [587, 30, 512], [624, 30, 163], [317, 30, 256], [207, 30, 369], [696, 30, 525], [698, 30, 496], [75, 30, 446], [51, 30, 414], [317, 30, 255], [297, 30, 265], [469, 30, 228], [711, 30, 425], [334, 30, 349], [283, 30, 453], [474, 29, 324], [431, 29, 274], [771, 29, 380], [56, 29, 386], [562, 29, 174], [795, 29, 340], [211, 29, 279], [88, 29, 282], [309, 29, 435], [571, 29, 492], [758, 29, 92], [403, 29, 422], [178, 29, 273], [82, 29, 486], [150, 29, 357], [761, 29, 175], [323, 29, 174], [218, 29, 157], [399, 29, 36], [245, 29, 62], [181, 29, 109], [522, 29, 23], [393, 29, 362], [291, 29, 170], [25, 29, 609], [728, 29, 3], [656, 29, 479], [69, 29, 230], [596, 29, 486], [569, 29, 188], [146, 29, 246], [100, 29, 113], [463, 29, 21], [447, 29, 179], [233, 29, 324], [89, 29, 188], [321, 29, 156], [8, 29, 352], [285, 29, 74], [243, 29, 209], [439, 29, 164], [652, 29, 36], [106, 29, 136], [661, 29, 363], [326, 29, 408], [508, 29, 46], [367, 29, 226], [329, 29, 405], [21, 29, 116], [432, 29, 274], [774, 29, 36], [646, 29, 225], [531, 29, 494], [413, 29, 319], [438, 29, 335], [392, 29, 386], [280, 29, 286], [424, 29, 97], [557, 29, 157], [777, 29, 435], [133, 29, 204], [241, 29, 428], [325, 29, 408], [503, 29, 279], [109, 29, 360], [348, 29, 362], [9, 29, 352], [539, 29, 514], [25, 29, 609], [20, 29, 389], [643, 29, 225], [347, 29, 362], [534, 29, 339], [659, 29, 175], [249, 29, 240], [81, 29, 486], [595, 29, 486], [745, 29, 446], [505, 29, 116], [276, 29, 97], [85, 29, 253], [110, 29, 360], [782, 29, 526], [462, 29, 486], [651, 29, 36], [680, 29, 163], [391, 29, 259], [594, 29, 358], [373, 29, 337], [239, 29, 9], [263, 29, 175], [314, 29, 260], [25, 29, 609], [744, 29, 446], [158, 29, 498], [250, 29, 241], [77, 29, 36], [328, 29, 364], [318, 29, 184], [563, 29, 174], [570, 29, 492], [783, 29, 526], [119, 29, 97], [530, 29, 157], [644, 29, 225], [387, 29, 73], [216, 29, 163], [415, 29, 405], [448, 29, 198], [784, 29, 526], [558, 29, 157], [454, 29, 426], [368, 29, 226], [240, 29, 7], [467, 29, 7], [798, 29, 673], [222, 29, 334], [166, 29, 226], [417, 29, 186], [799, 29, 231], [527, 29, 347], [763, 29, 23], [303, 29, 242], [762, 29, 23], [322, 29, 174], [747, 29, 131], [167, 29, 169], [423, 29, 34], [466, 29, 9], [319, 29, 184], [453, 29, 426], [128, 29, 526], [165, 29, 97], [98, 29, 182], [517, 29, 171], [479, 29, 466], [720, 29, 471], [720, 29, 470], [646, 29, 225], [422, 29, 34], [15, 29, 390], [794, 29, 141], [16, 29, 97], [437, 29, 248], [336, 29, 380], [725, 29, 154], [320, 29, 156], [527, 29, 133], [502, 29, 279], [606, 29, 493], [740, 29, 419], [185, 29, 335], [613, 29, 204], [145, 29, 246], [751, 29, 141], [302, 29, 421], [212, 29, 163], [44, 29, 236], [126, 29, 7], [144, 29, 246], [196, 29, 244], [416, 29, 456], [244, 29, 23], [507, 29, 46], [25, 29, 609], [101, 29, 113], [501, 29, 453], [338, 29, 94], [683, 29, 213], [519, 29, 403], [89, 29, 282], [436, 29, 248], [179, 29, 408], [413, 29, 74], [722, 29, 31], [619, 29, 395], [47, 29, 163], [765, 29, 428], [491, 29, 185], [122, 29, 164], [556, 29, 367], [413, 29, 106], [488, 29, 62], [252, 29, 21], [330, 29, 525], [649, 29, 163], [739, 29, 371], [48, 29, 79], [41, 29, 212], [96, 29, 29], [136, 29, 184], [414, 29, 77], [529, 29, 157], [419, 29, 458], [92, 29, 247], [97, 29, 29], [646, 29, 225], [780, 29, 225], [88, 29, 188], [528, 29, 133], [376, 29, 357], [441, 29, 496], [528, 29, 347], [396, 29, 36], [12, 29, 18], [49, 29, 79], [194, 29, 281], [25, 29, 609], [125, 29, 9], [679, 29, 163], [134, 29, 151], [325, 29, 156], [766, 29, 37], [123, 29, 163], [25, 29, 609], [533, 29, 339], [112, 29, 350], [219, 29, 157], [217, 29, 163], [176, 29, 273], [471, 29, 112], [180, 29, 109], [456, 29, 219], [605, 29, 493], [470, 29, 14], [278, 29, 332], [118, 29, 97], [755, 29, 202], [335, 29, 206], [732, 29, 103], [375, 29, 357], [750, 29, 334], [457, 29, 219], [292, 29, 109], [84, 29, 253], [293, 29, 46], [620, 29, 395], [776, 29, 53], [745, 29, 446], [796, 29, 598], [797, 29, 442], [111, 29, 350], [190, 29, 97], [20, 29, 389], [506, 29, 514], [197, 29, 103], [127, 29, 404], [25, 29, 609], [313, 29, 182], [793, 29, 390], [78, 29, 36], [189, 29, 72], [540, 29, 203], [372, 29, 337], [700, 29, 581], [359, 29, 400], [568, 29, 188], [108, 29, 21], [615, 29, 113], [748, 29, 131], [543, 29, 97], [464, 29, 350], [749, 29, 334], [603, 29, 435], [290, 29, 117], [70, 29, 282], [614, 29, 207], [175, 29, 273], [757, 29, 92], [171, 29, 324], [542, 29, 565], [337, 29, 94], [135, 29, 97], [538, 29, 509], [371, 29, 337], [137, 29, 324], [682, 29, 213], [7, 28, 401], [478, 28, 261], [678, 28, 451], [551, 28, 242], [730, 28, 47], [546, 28, 204], [4, 28, 481], [634, 28, 21], [411, 28, 246], [80, 28, 352], [120, 28, 362], [578, 28, 283], [35, 28, 500], [536, 28, 330], [231, 28, 36], [547, 28, 366], [2, 28, 74], [577, 28, 283], [611, 28, 337], [678, 28, 204], [28, 28, 163], [575, 28, 260], [408, 28, 498], [286, 28, 395], [279, 28, 374], [72, 28, 112], [492, 28, 235], [586, 28, 312], [608, 28, 506], [513, 28, 374], [95, 28, 21], [214, 28, 280], [170, 28, 324], [228, 28, 424], [727, 28, 207], [204, 28, 191], [655, 28, 381], [79, 28, 352], [504, 28, 526], [380, 28, 375], [630, 28, 386], [669, 28, 572], [191, 28, 235], [708, 28, 174], [588, 28, 405], [143, 28, 156], [612, 28, 337], [253, 28, 97], [33, 28, 270], [515, 28, 374], [311, 28, 268], [220, 28, 36], [5, 28, 424], [779, 28, 242], [397, 28, 332], [706, 28, 175], [496, 28, 21], [705, 28, 175], [238, 28, 313], [74, 28, 446], [6, 28, 424], [566, 28, 512], [316, 28, 256], [316, 28, 254], [778, 28, 204], [58, 28, 481], [200, 28, 60], [19, 28, 162], [381, 28, 375], [537, 28, 330], [168, 28, 389], [723, 28, 235], [617, 28, 382], [274, 28, 348], [3, 28, 74], [704, 28, 175], [64, 28, 427], [561, 28, 115], [610, 28, 337], [658, 28, 191], [628, 28, 163], [574, 28, 260], [94, 28, 371], [668, 28, 283], [261, 28, 373], [567, 28, 512], [203, 28, 458], [404, 28, 207], [300, 28, 358], [251, 28, 246], [589, 28, 405], [50, 28, 414], [657, 28, 374], [476, 28, 350], [237, 28, 68], [37, 28, 62], [246, 28, 37], [255, 28, 481], [192, 28, 80], [299, 28, 350], [19, 28, 162], [616, 28, 182], [30, 28, 270], [564, 28, 362], [579, 28, 283], [155, 28, 488], [629, 28, 386], [689, 28, 246], [759, 28, 36], [271, 28, 267], [187, 28, 512], [306, 28, 36], [483, 28, 337], [511, 28, 374], [307, 28, 136], [445, 28, 163], [420, 28, 388], [734, 28, 36], [183, 28, 392], [667, 28, 283], [259, 28, 157], [305, 28, 36], [446, 28, 254], [254, 28, 97], [410, 28, 246], [691, 28, 104], [736, 28, 91], [206, 28, 489], [499, 28, 36], [304, 28, 36], [754, 28, 235], [495, 28, 348], [138, 28, 362], [764, 28, 235], [405, 28, 207], [215, 28, 251], [258, 28, 182], [308, 28, 136], [247, 28, 37], [633, 28, 21], [565, 28, 362], [262, 28, 184], [91, 28, 191], [654, 28, 381], [688, 28, 246], [90, 28, 420], [532, 28, 339], [361, 28, 29], [312, 28, 268], [73, 28, 112], [576, 28, 260], [729, 28, 47], [721, 28, 23], [461, 28, 374], [65, 28, 427], [701, 28, 560], [199, 28, 352], [54, 28, 401], [339, 28, 401], [409, 28, 498], [60, 28, 341], [55, 28, 401], [74, 28, 446], [549, 28, 483], [296, 28, 265], [208, 28, 21], [260, 28, 157], [224, 28, 378], [487, 28, 337], [690, 28, 104], [327, 28, 389], [400, 28, 242], [395, 28, 31], [315, 28, 390], [444, 28, 163], [316, 28, 255], [545, 28, 474], [23, 28, 491], [724, 28, 235], [143, 28, 173], [124, 28, 313], [37, 28, 481], [590, 28, 202], [500, 28, 36], [548, 28, 312], [394, 28, 31], [552, 28, 242], [50, 28, 414], [139, 28, 362], [163, 28, 115], [188, 28, 72], [227, 28, 191], [709, 28, 174], [743, 28, 405], [161, 28, 156], [553, 28, 242], [152, 28, 230], [340, 28, 401], [248, 28, 37], [473, 28, 36], [544, 28, 474], [607, 28, 506], [162, 28, 21], [398, 28, 332], [221, 28, 36], [344, 28, 120], [205, 28, 191], [635, 28, 21], [343, 28, 120], [362, 28, 29], [726, 28, 207], [591, 28, 202], [484, 28, 337], [509, 28, 372], [93, 28, 371], [177, 28, 273], [658, 28, 191], [497, 28, 21], [627, 28, 163], [753, 28, 235], [585, 28, 312], [418, 27, 458], [653, 27, 113], [719, 27, 246], [426, 27, 506], [294, 27, 253], [674, 27, 233], [592, 27, 466], [524, 27, 157], [218, 27, 481], [498, 27, 535], [267, 27, 213], [520, 27, 269], [158, 27, 242], [69, 27, 282], [458, 27, 36], [660, 27, 316], [535, 27, 330], [169, 27, 305], [686, 27, 371], [670, 27, 580], [465, 27, 282], [105, 27, 708], [781, 27, 250], [213, 27, 380], [288, 27, 498], [210, 27, 46], [226, 27, 36], [580, 27, 403], [68, 27, 358], [769, 27, 95], [242, 27, 36], [295, 27, 253], [735, 27, 162], [714, 27, 355], [555, 27, 37], [435, 27, 92], [770, 27, 95], [104, 27, 206], [425, 27, 506], [102, 27, 93], [113, 27, 36], [273, 27, 241], [650, 27, 36], [131, 27, 195], [280, 27, 94], [452, 27, 474], [388, 27, 72], [663, 27, 13], [193, 27, 253], [289, 27, 498], [269, 27, 113], [358, 27, 215], [222, 27, 362], [676, 27, 316], [455, 27, 185], [46, 27, 163], [593, 27, 466], [130, 27, 423], [103, 27, 121], [264, 27, 516], [234, 27, 347], [521, 27, 269], [39, 27, 358], [559, 27, 498], [66, 27, 358], [67, 27, 358], [164, 27, 36], [687, 27, 371], [24, 27, 255], [24, 27, 254], [103, 27, 121], [86, 27, 62], [105, 27, 206], [581, 27, 403], [114, 27, 282], [277, 27, 501], [24, 27, 256], [472, 27, 400], [389, 27, 72], [469, 27, 253], [572, 27, 204], [324, 27, 34], [434, 27, 92], [186, 27, 207], [350, 27, 105], [61, 27, 61], [22, 27, 97], [219, 27, 481], [703, 27, 470], [715, 27, 355], [731, 27, 65], [451, 27, 474], [17, 27, 297], [18, 27, 297], [87, 27, 62], [270, 27, 240], [554, 27, 37], [1, 27, 38], [207, 27, 163], [675, 27, 233], [662, 27, 13], [707, 27, 492], [443, 27, 337], [42, 27, 305], [43, 27, 236], [560, 27, 498], [621, 27, 337], [56, 26, 372], [165, 26, 226], [85, 26, 97], [88, 26, 374], [787, 26, 73], [284, 26, 78], [546, 26, 202], [392, 26, 364], [428, 26, 226], [598, 26, 334], [756, 26, 109], [116, 26, 116], [596, 26, 163], [89, 26, 374], [285, 26, 202], [752, 26, 392], [504, 26, 116], [326, 26, 428], [329, 26, 414], [336, 26, 400], [25, 26, 209], [153, 26, 363], [506, 26, 46], [438, 26, 317], [354, 26, 174], [475, 26, 14], [322, 26, 414], [459, 26, 420], [230, 26, 116], [325, 26, 428], [25, 26, 209], [15, 26, 372], [368, 26, 291], [710, 26, 331], [595, 26, 163], [745, 26, 46], [631, 26, 289], [110, 26, 114], [37, 26, 506], [680, 26, 514], [239, 26, 113], [107, 26, 410], [510, 26, 468], [323, 26, 414], [314, 26, 227], [363, 26, 34], [370, 26, 175], [25, 26, 209], [600, 26, 451], [632, 26, 442], [64, 26, 115], [328, 26, 414], [599, 26, 451], [282, 26, 347], [117, 26, 116], [648, 26, 512], [530, 26, 163], [685, 26, 312], [584, 26, 429], [240, 26, 109], [741, 26, 298], [391, 26, 364], [466, 26, 113], [802, 26, 325], [744, 26, 46], [713, 26, 423], [367, 26, 291], [333, 26, 287], [331, 26, 371], [413, 26, 429], [57, 26, 372], [167, 26, 389], [684, 26, 312], [788, 26, 287], [467, 26, 109], [716, 26, 601], [775, 26, 175], [702, 26, 521], [402, 26, 163], [672, 26, 523], [353, 26, 174], [502, 26, 352], [206, 26, 36], [100, 26, 120], [27, 26, 163], [140, 26, 203], [185, 26, 317], [101, 26, 120], [126, 26, 109], [229, 26, 251], [742, 26, 405], [223, 26, 352], [302, 26, 282], [529, 26, 163], [673, 26, 523], [376, 26, 418], [679, 26, 514], [89, 26, 374], [332, 26, 371], [786, 26, 285], [413, 26, 75], [413, 26, 350], [556, 26, 202], [330, 26, 414], [27, 26, 163], [414, 26, 16], [25, 26, 209], [369, 26, 291], [109, 26, 114], [597, 26, 334], [718, 26, 616], [92, 26, 371], [345, 26, 202], [699, 26, 246], [281, 26, 347], [342, 26, 400], [583, 26, 429], [65, 26, 115], [88, 26, 374], [154, 26, 363], [357, 26, 536], [25, 26, 209], [125, 26, 113], [550, 26, 38], [25, 26, 209], [456, 26, 445], [341, 26, 400], [587, 26, 486], [582, 26, 429], [278, 26, 228], [335, 26, 306], [375, 26, 418], [141, 26, 203], [785, 26, 268], [364, 26, 34], [712, 26, 423], [457, 26, 445], [84, 26, 97], [548, 26, 202], [745, 26, 46], [37, 26, 506], [711, 26, 331], [697, 26, 246], [717, 26, 613], [346, 26, 202], [768, 26, 534], [696, 26, 246], [313, 26, 324], [127, 26, 280], [427, 26, 226], [698, 26, 246], [626, 26, 279], [543, 26, 474], [297, 26, 187], [25, 26, 209], [460, 26, 420], [334, 26, 287], [283, 25, 54], [283, 25, 114], [7, 25, 352], [276, 25, 501], [666, 25, 577], [184, 25, 583], [431, 25, 204], [653, 25, 381], [562, 25, 466], [678, 25, 473], [211, 25, 255], [211, 25, 254], [462, 25, 319], [773, 25, 306], [551, 25, 207], [618, 25, 435], [594, 25, 352], [53, 25, 269], [4, 25, 424], [571, 25, 269], [674, 25, 509], [403, 25, 207], [82, 25, 319], [634, 25, 242], [426, 25, 254], [761, 25, 298], [35, 25, 107], [578, 25, 473], [52, 25, 269], [601, 25, 451], [522, 25, 209], [399, 25, 242], [678, 25, 473], [577, 25, 473], [640, 25, 202], [181, 25, 486], [267, 25, 318], [575, 25, 473], [53, 25, 269], [494, 25, 488], [728, 25, 47], [606, 25, 286], [656, 25, 374], [72, 25, 61], [463, 25, 50], [417, 25, 486], [569, 25, 34], [705, 25, 240], [209, 25, 46], [214, 25, 31], [670, 25, 345], [95, 25, 225], [738, 25, 12], [439, 25, 60], [228, 25, 251], [661, 25, 13], [106, 25, 364], [783, 25, 29], [449, 25, 328], [51, 25, 426], [432, 25, 204], [694, 25, 570], [191, 25, 283], [531, 25, 290], [98, 25, 23], [307, 25, 170], [588, 25, 206], [682, 25, 312], [54, 25, 428], [424, 25, 103], [143, 25, 34], [142, 25, 246], [122, 25, 60], [318, 25, 423], [133, 25, 36], [503, 25, 352], [704, 25, 240], [477, 25, 261], [68, 25, 233], [365, 25, 34], [348, 25, 163], [677, 25, 473], [317, 25, 92], [108, 25, 50], [539, 25, 339], [347, 25, 450], [238, 25, 212], [574, 25, 473], [566, 25, 501], [316, 25, 92], [390, 25, 259], [615, 25, 58], [564, 25, 469], [505, 25, 495], [373, 25, 242], [782, 25, 29], [663, 25, 355], [641, 25, 326], [430, 25, 207], [263, 25, 516], [613, 25, 203], [638, 25, 442], [617, 25, 129], [498, 25, 36], [52, 25, 269], [642, 25, 377], [693, 25, 14], [352, 25, 163], [77, 25, 83], [425, 25, 254], [622, 25, 5], [763, 25, 298], [435, 25, 163], [616, 25, 281], [442, 25, 466], [387, 25, 72], [216, 25, 589], [515, 25, 269], [706, 25, 240], [784, 25, 29], [311, 25, 204], [261, 25, 184], [485, 25, 319], [476, 25, 408], [779, 25, 149], [567, 25, 501], [659, 25, 316], [9, 25, 182], [623, 25, 5], [300, 25, 204], [319, 25, 423], [589, 25, 206], [81, 25, 319], [147, 25, 97], [50, 25, 426], [555, 25, 526], [19, 25, 389], [645, 25, 326], [192, 25, 331], [19, 25, 389], [269, 25, 318], [563, 25, 466], [29, 25, 270], [321, 25, 362], [385, 25, 287], [305, 25, 157], [570, 25, 269], [21, 25, 97], [32, 25, 270], [527, 25, 213], [579, 25, 473], [777, 25, 393], [762, 25, 298], [746, 25, 36], [747, 25, 474], [662, 25, 355], [517, 25, 485], [299, 25, 408], [187, 25, 72], [306, 25, 157], [511, 25, 259], [720, 25, 285], [111, 25, 498], [639, 25, 157], [734, 25, 162], [16, 25, 297], [257, 25, 98], [446, 25, 34], [437, 25, 219], [692, 25, 14], [320, 25, 362], [725, 25, 207], [736, 25, 404], [39, 25, 256], [66, 25, 233], [386, 25, 228], [386, 25, 191], [39, 25, 255], [39, 25, 254], [138, 25, 341], [225, 25, 65], [450, 25, 328], [356, 25, 261], [691, 25, 352], [196, 25, 248], [212, 25, 210], [801, 25, 429], [355, 25, 261], [722, 25, 235], [619, 25, 347], [625, 25, 232], [67, 25, 233], [764, 25, 572], [486, 25, 279], [379, 25, 174], [304, 25, 157], [801, 25, 429], [258, 25, 88], [41, 25, 305], [215, 25, 468], [633, 25, 242], [780, 25, 363], [60, 25, 61], [51, 25, 426], [495, 25, 21], [565, 25, 469], [287, 25, 498], [501, 25, 279], [683, 25, 312], [740, 25, 146], [179, 25, 109], [519, 25, 269], [436, 25, 219], [292, 25, 170], [765, 25, 417], [99, 25, 23], [700, 25, 285], [252, 25, 97], [149, 25, 97], [344, 25, 379], [572, 25, 541], [256, 25, 98], [739, 25, 146], [136, 25, 83], [576, 25, 473], [308, 25, 170], [324, 25, 436], [772, 25, 306], [96, 25, 60], [461, 25, 468], [339, 25, 173], [339, 25, 156], [55, 25, 428], [208, 25, 225], [434, 25, 163], [441, 25, 269], [396, 25, 332], [377, 25, 174], [12, 25, 219], [49, 25, 324], [393, 25, 31], [416, 25, 408], [690, 25, 352], [134, 25, 392], [523, 25, 209], [737, 25, 242], [766, 25, 516], [123, 25, 210], [176, 25, 516], [112, 25, 498], [338, 25, 322], [296, 25, 187], [471, 25, 420], [217, 25, 589], [605, 25, 286], [115, 25, 5], [470, 25, 202], [647, 25, 270], [315, 25, 202], [198, 25, 372], [337, 25, 322], [755, 25, 109], [8, 25, 182], [553, 25, 207], [513, 25, 133], [23, 25, 256], [23, 25, 255], [23, 25, 254], [180, 25, 486], [83, 25, 14], [731, 25, 103], [124, 25, 212], [293, 25, 253], [620, 25, 347], [163, 25, 36], [776, 25, 334], [552, 25, 207], [50, 25, 426], [139, 25, 341], [1, 25, 74], [554, 25, 526], [190, 25, 103], [303, 25, 226], [624, 25, 232], [97, 25, 60], [161, 25, 21], [351, 25, 311], [197, 25, 372], [340, 25, 173], [340, 25, 156], [528, 25, 213], [90, 25, 128], [675, 25, 509], [78, 25, 83], [372, 25, 242], [359, 25, 14], [443, 25, 163], [378, 25, 174], [748, 25, 474], [464, 25, 498], [48, 25, 324], [343, 25, 379], [290, 25, 170], [614, 25, 203], [175, 25, 516], [73, 25, 61], [135, 25, 42], [621, 25, 242], [312, 25, 313], [148, 25, 97], [635, 25, 242], [371, 25, 242], [538, 25, 339], [568, 25, 36], [771, 25, 174], [418, 24, 453], [309, 24, 44], [730, 24, 61], [758, 24, 481], [411, 24, 207], [120, 24, 360], [231, 24, 21], [578, 24, 105], [577, 24, 105], [381, 24, 295], [575, 24, 185], [28, 24, 328], [408, 24, 372], [274, 24, 185], [447, 24, 103], [586, 24, 26], [169, 24, 129], [159, 24, 175], [75, 24, 120], [727, 24, 44], [508, 24, 242], [336, 24, 599], [410, 24, 207], [774, 24, 446], [189, 24, 73], [669, 24, 580], [612, 24, 206], [280, 24, 347], [733, 24, 31], [557, 24, 446], [310, 24, 44], [220, 24, 420], [419, 24, 453], [20, 24, 242], [534, 24, 498], [574, 24, 185], [70, 24, 51], [723, 24, 365], [76, 24, 120], [496, 24, 72], [561, 24, 113], [608, 24, 286], [610, 24, 206], [380, 24, 296], [119, 24, 31], [448, 24, 319], [558, 24, 446], [454, 24, 207], [580, 24, 392], [74, 24, 120], [237, 24, 364], [166, 24, 4], [579, 24, 105], [473, 24, 423], [453, 24, 207], [689, 24, 397], [128, 24, 371], [160, 24, 175], [483, 24, 368], [241, 24, 34], [271, 24, 61], [130, 24, 239], [44, 24, 381], [264, 24, 343], [490, 24, 61], [232, 24, 21], [507, 24, 242], [195, 24, 133], [751, 24, 392], [302, 24, 386], [757, 24, 481], [350, 24, 525], [489, 24, 61], [262, 24, 372], [590, 24, 230], [532, 24, 498], [75, 24, 120], [611, 24, 206], [729, 24, 61], [509, 24, 468], [497, 24, 72], [576, 24, 185], [701, 24, 374], [409, 24, 372], [74, 24, 120], [581, 24, 392], [487, 24, 194], [156, 24, 111], [533, 24, 498], [118, 24, 31], [750, 24, 667], [724, 24, 365], [395, 24, 207], [157, 24, 111], [732, 24, 31], [394, 24, 117], [76, 24, 120], [270, 24, 267], [188, 24, 73], [688, 24, 397], [20, 24, 242], [607, 24, 286], [221, 24, 423], [749, 24, 667], [726, 24, 44], [591, 24, 230], [42, 24, 129], [484, 24, 401], [585, 24, 26], [769, 23, 523], [478, 23, 577], [658, 23, 425], [102, 23, 79], [294, 23, 23], [110, 23, 120], [178, 23, 109], [82, 23, 429], [475, 23, 469], [80, 23, 29], [203, 23, 97], [524, 23, 479], [2, 23, 230], [248, 23, 184], [226, 23, 469], [25, 23, 104], [25, 23, 104], [291, 23, 163], [428, 23, 26], [520, 23, 197], [164, 23, 326], [596, 23, 380], [250, 23, 326], [569, 23, 254], [569, 23, 256], [535, 23, 253], [686, 23, 415], [234, 23, 109], [465, 23, 72], [170, 23, 209], [204, 23, 363], [504, 23, 495], [105, 23, 261], [708, 23, 73], [781, 23, 202], [630, 23, 185], [213, 23, 88], [288, 23, 163], [253, 23, 348], [668, 23, 424], [295, 23, 23], [557, 23, 450], [25, 23, 104], [404, 23, 46], [795, 23, 318], [368, 23, 445], [710, 23, 567], [200, 23, 506], [735, 23, 189], [105, 23, 99], [595, 23, 380], [390, 23, 417], [778, 23, 185], [249, 23, 326], [714, 23, 314], [15, 23, 474], [745, 23, 317], [629, 23, 185], [58, 23, 36], [458, 23, 469], [798, 23, 332], [462, 23, 429], [770, 23, 523], [537, 23, 253], [263, 23, 343], [104, 23, 99], [536, 23, 253], [168, 23, 154], [799, 23, 525], [298, 23, 340], [64, 23, 357], [800, 23, 400], [113, 23, 107], [282, 23, 577], [628, 23, 332], [558, 23, 450], [34, 23, 498], [397, 23, 18], [452, 23, 305], [792, 23, 247], [79, 23, 29], [741, 23, 3], [37, 23, 185], [759, 23, 371], [246, 23, 184], [744, 23, 317], [183, 23, 583], [333, 23, 36], [413, 23, 93], [307, 23, 347], [33, 23, 30], [657, 23, 496], [233, 23, 393], [222, 23, 381], [525, 23, 479], [517, 23, 428], [255, 23, 98], [367, 23, 389], [526, 23, 479], [667, 23, 424], [702, 23, 86], [794, 23, 203], [254, 23, 348], [27, 23, 328], [206, 23, 355], [691, 23, 342], [521, 23, 197], [86, 23, 392], [69, 23, 51], [499, 23, 205], [559, 23, 280], [754, 23, 348], [687, 23, 415], [30, 23, 44], [405, 23, 46], [41, 23, 129], [789, 23, 100], [281, 23, 577], [376, 23, 228], [760, 23, 371], [413, 23, 93], [413, 23, 93], [711, 23, 567], [709, 23, 73], [247, 23, 184], [48, 23, 78], [361, 23, 423], [414, 23, 93], [25, 23, 104], [627, 23, 332], [308, 23, 347], [199, 23, 29], [342, 23, 282], [65, 23, 357], [289, 23, 343], [12, 23, 48], [242, 23, 107], [194, 23, 133], [109, 23, 120], [49, 23, 78], [25, 23, 104], [690, 23, 342], [114, 23, 72], [501, 23, 352], [550, 23, 487], [25, 23, 104], [327, 23, 146], [22, 23, 372], [400, 23, 281], [341, 23, 282], [31, 23, 498], [715, 23, 314], [375, 23, 228], [545, 23, 450], [451, 23, 305], [500, 23, 205], [745, 23, 317], [81, 23, 429], [87, 23, 392], [227, 23, 129], [796, 23, 9], [797, 23, 319], [791, 23, 430], [152, 23, 363], [427, 23, 26], [793, 23, 474], [568, 23, 254], [544, 23, 450], [37, 23, 185], [398, 23, 18], [707, 23, 578], [27, 23, 334], [205, 23, 363], [177, 23, 109], [568, 23, 256], [362, 23, 423], [3, 23, 230], [171, 23, 209], [43, 23, 381], [560, 23, 280], [658, 23, 425], [25, 23, 104], [137, 23, 393], [753, 23, 348], [334, 23, 36], [474, 23, 393], [283, 22, 97], [7, 22, 182], [56, 22, 238], [319, 22, 207], [678, 22, 574], [551, 22, 373], [546, 22, 77], [510, 22, 252], [592, 22, 352], [332, 22, 275], [35, 22, 358], [52, 22, 185], [353, 22, 506], [218, 22, 246], [245, 22, 16], [678, 22, 574], [522, 22, 228], [267, 22, 72], [53, 22, 185], [279, 22, 362], [728, 22, 61], [756, 22, 275], [606, 22, 237], [158, 22, 175], [286, 22, 68], [100, 22, 486], [72, 22, 491], [746, 22, 715], [95, 22, 479], [285, 22, 388], [439, 22, 113], [243, 22, 98], [439, 22, 115], [75, 22, 523], [329, 22, 103], [673, 22, 36], [153, 22, 345], [421, 22, 241], [694, 22, 13], [669, 22, 345], [646, 22, 58], [424, 22, 129], [191, 22, 202], [438, 22, 715], [515, 22, 503], [477, 22, 228], [122, 22, 115], [643, 22, 53], [506, 22, 242], [677, 22, 574], [145, 22, 365], [50, 22, 389], [505, 22, 162], [85, 22, 458], [680, 22, 332], [53, 22, 185], [239, 22, 486], [323, 22, 436], [120, 22, 293], [314, 22, 273], [370, 22, 531], [122, 22, 113], [52, 22, 185], [328, 22, 242], [321, 22, 54], [655, 22, 83], [713, 22, 174], [21, 22, 372], [476, 22, 157], [131, 22, 240], [94, 22, 389], [331, 22, 275], [644, 22, 85], [530, 22, 468], [216, 22, 230], [155, 22, 111], [354, 22, 506], [280, 22, 577], [261, 22, 372], [318, 22, 207], [311, 22, 383], [454, 22, 279], [300, 22, 185], [74, 22, 9], [240, 22, 481], [322, 22, 436], [19, 22, 242], [388, 22, 44], [555, 22, 7], [150, 22, 244], [193, 22, 48], [269, 22, 60], [192, 22, 202], [76, 22, 9], [19, 22, 242], [479, 22, 351], [511, 22, 402], [646, 22, 58], [584, 22, 269], [422, 22, 240], [57, 22, 238], [167, 22, 154], [423, 22, 240], [734, 22, 189], [466, 22, 486], [165, 22, 4], [467, 22, 481], [299, 22, 157], [676, 22, 44], [306, 22, 442], [187, 22, 73], [420, 22, 241], [453, 22, 279], [259, 22, 426], [305, 22, 442], [46, 22, 147], [593, 22, 352], [402, 22, 116], [725, 22, 44], [672, 22, 36], [356, 22, 228], [320, 22, 54], [740, 22, 612], [736, 22, 242], [39, 22, 496], [126, 22, 481], [185, 22, 715], [625, 22, 184], [304, 22, 442], [284, 22, 314], [287, 22, 343], [679, 22, 332], [519, 22, 197], [47, 22, 147], [764, 22, 363], [215, 22, 232], [284, 22, 184], [244, 22, 83], [92, 22, 389], [529, 22, 468], [296, 22, 233], [101, 22, 486], [74, 22, 523], [495, 22, 72], [461, 22, 232], [355, 22, 228], [722, 22, 365], [553, 22, 373], [739, 22, 612], [548, 22, 78], [765, 22, 185], [144, 22, 170], [472, 22, 512], [389, 22, 44], [330, 22, 103], [223, 22, 116], [324, 22, 174], [646, 22, 58], [774, 22, 120], [54, 22, 103], [154, 22, 345], [583, 22, 269], [208, 22, 479], [55, 22, 103], [51, 22, 389], [224, 22, 116], [393, 22, 117], [125, 22, 486], [523, 22, 228], [766, 22, 36], [219, 22, 246], [456, 22, 352], [605, 22, 237], [217, 22, 230], [115, 22, 99], [179, 22, 486], [582, 22, 269], [315, 22, 320], [278, 22, 314], [654, 22, 83], [755, 22, 275], [750, 22, 117], [587, 22, 351], [335, 22, 279], [513, 22, 481], [293, 22, 23], [457, 22, 352], [712, 22, 174], [17, 22, 239], [84, 22, 458], [163, 22, 326], [552, 22, 373], [18, 22, 239], [50, 22, 389], [76, 22, 523], [554, 22, 7], [190, 22, 129], [556, 22, 302], [624, 22, 184], [313, 22, 294], [207, 22, 512], [127, 22, 458], [75, 22, 9], [540, 22, 522], [358, 22, 326], [260, 22, 426], [359, 22, 163], [649, 22, 443], [51, 22, 389], [543, 22, 450], [297, 22, 233], [344, 22, 322], [749, 22, 117], [343, 22, 322], [469, 22, 48], [146, 22, 203], [542, 22, 522], [93, 22, 389], [73, 22, 491], [312, 22, 383], [666, 21, 48], [685, 21, 283], [771, 21, 685], [184, 21, 401], [562, 21, 261], [719, 21, 470], [211, 21, 390], [102, 21, 77], [623, 21, 707], [571, 21, 184], [618, 21, 426], [758, 21, 3], [403, 21, 46], [761, 21, 345], [399, 21, 281], [598, 21, 360], [25, 21, 364], [88, 21, 107], [656, 21, 496], [463, 21, 23], [539, 21, 280], [89, 21, 107], [234, 21, 36], [686, 21, 60], [8, 21, 229], [159, 21, 423], [752, 21, 44], [661, 21, 355], [326, 21, 277], [105, 21, 155], [106, 21, 116], [504, 21, 162], [336, 21, 305], [119, 21, 392], [98, 21, 232], [682, 21, 577], [387, 21, 44], [733, 21, 355], [459, 21, 54], [5, 21, 184], [68, 21, 282], [419, 21, 129], [348, 21, 246], [325, 21, 277], [108, 21, 23], [25, 21, 364], [347, 21, 246], [220, 21, 196], [238, 21, 531], [566, 21, 97], [105, 21, 155], [615, 21, 246], [564, 21, 242], [58, 21, 424], [276, 21, 332], [418, 21, 129], [631, 21, 154], [594, 21, 182], [107, 21, 364], [373, 21, 116], [613, 21, 362], [104, 21, 155], [435, 21, 44], [601, 21, 20], [25, 21, 364], [600, 21, 20], [632, 21, 242], [660, 21, 24], [77, 21, 488], [561, 21, 314], [64, 21, 60], [763, 21, 345], [498, 21, 205], [732, 21, 355], [273, 21, 235], [117, 21, 61], [599, 21, 20], [783, 21, 184], [648, 21, 298], [784, 21, 184], [455, 21, 275], [230, 21, 61], [567, 21, 97], [9, 21, 229], [684, 21, 283], [782, 21, 184], [6, 21, 184], [147, 21, 21], [503, 21, 210], [363, 21, 62], [563, 21, 261], [417, 21, 129], [29, 21, 44], [352, 21, 246], [622, 21, 707], [527, 21, 314], [32, 21, 30], [531, 21, 213], [762, 21, 345], [777, 21, 609], [747, 21, 92], [580, 21, 297], [570, 21, 184], [775, 21, 21], [160, 21, 423], [16, 21, 239], [130, 21, 43], [437, 21, 185], [502, 21, 210], [66, 21, 282], [140, 21, 28], [67, 21, 282], [302, 21, 252], [212, 21, 232], [89, 21, 107], [687, 21, 60], [619, 21, 129], [86, 21, 156], [751, 21, 44], [357, 21, 18], [780, 21, 82], [565, 21, 242], [206, 21, 529], [683, 21, 577], [338, 21, 157], [436, 21, 185], [292, 21, 425], [99, 21, 232], [252, 21, 202], [481, 21, 129], [742, 21, 230], [116, 21, 61], [614, 21, 362], [721, 21, 352], [25, 21, 364], [509, 21, 252], [345, 21, 362], [65, 21, 60], [96, 21, 96], [88, 21, 107], [60, 21, 34], [434, 21, 44], [441, 21, 448], [396, 21, 18], [350, 21, 445], [581, 21, 297], [25, 21, 364], [123, 21, 17], [25, 21, 364], [112, 21, 523], [176, 21, 266], [198, 21, 101], [118, 21, 392], [83, 21, 314], [731, 21, 31], [124, 21, 531], [482, 21, 129], [364, 21, 62], [620, 21, 129], [141, 21, 28], [277, 21, 332], [776, 21, 203], [235, 21, 166], [270, 21, 61], [87, 21, 156], [1, 21, 230], [111, 21, 523], [743, 21, 230], [528, 21, 314], [346, 21, 362], [97, 21, 96], [303, 21, 185], [61, 21, 34], [768, 21, 163], [480, 21, 129], [78, 21, 488], [372, 21, 116], [473, 21, 258], [626, 21, 184], [162, 21, 266], [149, 21, 21], [748, 21, 92], [221, 21, 196], [369, 21, 246], [464, 21, 523], [290, 21, 232], [175, 21, 266], [148, 21, 21], [757, 21, 3], [572, 21, 47], [621, 21, 163], [337, 21, 157], [703, 21, 446], [460, 21, 54], [538, 21, 34], [371, 21, 116], [25, 21, 364], [597, 21, 360], [431, 20, 154], [653, 20, 83], [787, 20, 184], [773, 20, 332], [412, 20, 237], [275, 20, 536], [674, 20, 163], [426, 20, 466], [634, 20, 46], [177, 20, 466], [178, 20, 466], [524, 20, 334], [218, 20, 499], [2, 20, 75], [381, 20, 225], [181, 20, 36], [493, 20, 414], [267, 20, 314], [28, 20, 154], [274, 20, 13], [100, 20, 129], [228, 20, 316], [535, 20, 392], [586, 20, 36], [95, 20, 360], [465, 20, 74], [170, 20, 61], [204, 20, 117], [508, 20, 526], [380, 20, 225], [673, 20, 235], [189, 20, 331], [432, 20, 154], [213, 20, 156], [133, 20, 287], [669, 20, 273], [588, 20, 29], [612, 20, 163], [143, 20, 281], [382, 20, 34], [384, 20, 242], [151, 20, 118], [242, 20, 516], [317, 20, 227], [534, 20, 358], [710, 20, 73], [316, 20, 227], [15, 20, 116], [37, 20, 54], [680, 20, 425], [693, 20, 61], [537, 20, 392], [536, 20, 392], [617, 20, 72], [370, 20, 213], [298, 20, 21], [158, 20, 423], [496, 20, 73], [425, 20, 466], [113, 20, 516], [608, 20, 481], [610, 20, 163], [668, 20, 36], [659, 20, 24], [779, 20, 50], [589, 20, 29], [452, 20, 450], [741, 20, 297], [689, 20, 128], [269, 20, 474], [802, 20, 383], [166, 20, 318], [616, 20, 72], [385, 20, 94], [713, 20, 159], [333, 20, 363], [30, 20, 154], [413, 20, 237], [33, 20, 31], [526, 20, 334], [788, 20, 487], [525, 20, 334], [222, 20, 131], [307, 20, 237], [183, 20, 401], [271, 20, 346], [667, 20, 36], [702, 20, 609], [672, 20, 235], [257, 20, 488], [446, 20, 103], [692, 20, 61], [39, 20, 205], [27, 20, 154], [215, 20, 97], [196, 20, 60], [559, 20, 371], [679, 20, 425], [413, 20, 237], [491, 20, 95], [24, 20, 51], [383, 20, 436], [532, 20, 358], [670, 20, 273], [499, 20, 123], [414, 20, 237], [507, 20, 526], [258, 20, 300], [229, 20, 316], [101, 20, 129], [633, 20, 46], [461, 20, 417], [786, 20, 230], [37, 20, 261], [785, 20, 103], [590, 20, 185], [688, 20, 128], [227, 20, 364], [488, 20, 54], [90, 20, 43], [611, 20, 163], [256, 20, 488], [135, 20, 422], [497, 20, 73], [136, 20, 424], [308, 20, 237], [772, 20, 332], [699, 20, 62], [701, 20, 227], [342, 20, 458], [339, 20, 222], [208, 20, 360], [636, 20, 36], [156, 20, 172], [134, 20, 62], [114, 20, 74], [550, 20, 401], [533, 20, 358], [219, 20, 499], [471, 20, 423], [341, 20, 458], [262, 20, 207], [470, 20, 345], [23, 20, 51], [451, 20, 450], [712, 20, 159], [500, 20, 123], [157, 20, 172], [413, 20, 237], [188, 20, 331], [711, 20, 73], [697, 20, 204], [180, 20, 36], [351, 20, 240], [351, 20, 241], [351, 20, 258], [197, 20, 185], [340, 20, 222], [698, 20, 62], [696, 20, 204], [675, 20, 163], [152, 20, 345], [607, 20, 481], [700, 20, 577], [205, 20, 117], [637, 20, 16], [27, 20, 154], [635, 20, 46], [3, 20, 75], [591, 20, 185], [171, 20, 61], [560, 20, 371], [334, 20, 363], [585, 20, 36], [7, 19, 229], [58, 19, 179], [56, 19, 207], [478, 19, 310], [678, 19, 252], [309, 19, 422], [730, 19, 227], [102, 19, 78], [658, 19, 108], [551, 19, 189], [546, 19, 75], [4, 19, 184], [82, 19, 209], [475, 19, 505], [411, 19, 334], [80, 19, 50], [35, 19, 516], [203, 19, 60], [231, 19, 203], [314, 19, 236], [353, 19, 185], [578, 19, 204], [248, 19, 157], [577, 19, 204], [678, 19, 252], [332, 19, 185], [575, 19, 373], [279, 19, 371], [408, 19, 184], [286, 19, 364], [492, 19, 73], [72, 19, 35], [458, 19, 352], [738, 19, 512], [169, 19, 314], [209, 19, 29], [214, 19, 68], [433, 19, 494], [95, 19, 397], [285, 19, 77], [652, 19, 42], [79, 19, 50], [367, 19, 362], [708, 19, 185], [727, 19, 46], [329, 19, 48], [336, 19, 137], [410, 19, 334], [449, 19, 91], [630, 19, 260], [421, 19, 345], [210, 19, 29], [191, 19, 388], [98, 19, 341], [54, 19, 50], [438, 19, 185], [226, 19, 352], [392, 19, 172], [557, 19, 397], [200, 19, 212], [515, 19, 44], [310, 19, 422], [322, 19, 133], [241, 19, 205], [365, 19, 362], [365, 19, 62], [68, 19, 279], [795, 19, 364], [20, 19, 372], [506, 19, 526], [368, 19, 392], [735, 19, 44], [574, 19, 373], [778, 19, 102], [641, 19, 314], [85, 19, 365], [462, 19, 209], [651, 19, 42], [498, 19, 123], [239, 19, 86], [510, 19, 259], [435, 19, 491], [323, 19, 133], [168, 19, 425], [677, 19, 252], [723, 19, 193], [640, 19, 514], [19, 19, 372], [799, 19, 537], [447, 19, 383], [476, 19, 209], [800, 19, 350], [282, 19, 505], [94, 19, 109], [32, 19, 31], [579, 19, 204], [628, 19, 184], [442, 19, 138], [448, 19, 14], [530, 19, 91], [280, 19, 505], [261, 19, 207], [558, 19, 397], [311, 19, 486], [354, 19, 185], [300, 19, 383], [420, 19, 345], [251, 19, 345], [81, 19, 209], [792, 19, 403], [240, 19, 499], [798, 19, 235], [555, 19, 263], [759, 19, 175], [165, 19, 318], [645, 19, 88], [19, 19, 372], [391, 19, 172], [246, 19, 157], [237, 19, 229], [263, 19, 42], [192, 19, 388], [638, 19, 514], [642, 19, 351], [417, 19, 609], [29, 19, 154], [328, 19, 91], [321, 19, 352], [527, 19, 286], [331, 19, 185], [580, 19, 61], [584, 19, 419], [155, 19, 172], [167, 19, 425], [255, 19, 83], [734, 19, 44], [57, 19, 207], [466, 19, 86], [629, 19, 260], [187, 19, 331], [657, 19, 108], [517, 19, 95], [299, 19, 209], [483, 19, 408], [511, 19, 44], [306, 19, 46], [720, 19, 60], [639, 19, 514], [467, 19, 499], [128, 19, 156], [794, 19, 233], [305, 19, 46], [437, 19, 334], [264, 19, 154], [386, 19, 269], [320, 19, 352], [736, 19, 512], [66, 19, 279], [386, 19, 282], [185, 19, 185], [754, 19, 275], [450, 19, 91], [691, 19, 293], [164, 19, 375], [302, 19, 185], [232, 19, 282], [304, 19, 46], [138, 19, 43], [126, 19, 499], [436, 19, 334], [195, 19, 426], [450, 19, 36], [764, 19, 186], [472, 19, 185], [67, 19, 279], [44, 19, 72], [41, 19, 314], [495, 19, 73], [737, 19, 512], [760, 19, 175], [296, 19, 282], [83, 19, 163], [553, 19, 189], [548, 19, 345], [99, 19, 341], [330, 19, 48], [344, 19, 246], [361, 19, 44], [379, 19, 523], [297, 19, 282], [603, 19, 51], [247, 19, 157], [449, 19, 36], [73, 19, 35], [92, 19, 109], [753, 19, 275], [729, 19, 227], [312, 19, 486], [509, 19, 259], [576, 19, 373], [281, 19, 505], [529, 19, 91], [199, 19, 50], [583, 19, 419], [409, 19, 184], [55, 19, 50], [208, 19, 475], [434, 19, 491], [487, 19, 425], [581, 19, 61], [12, 19, 318], [377, 19, 523], [194, 19, 426], [125, 19, 86], [690, 19, 293], [501, 19, 210], [327, 19, 95], [115, 19, 458], [582, 19, 419], [587, 19, 104], [315, 19, 345], [444, 19, 328], [395, 19, 61], [647, 19, 36], [335, 19, 163], [278, 19, 98], [545, 19, 342], [513, 19, 44], [731, 19, 355], [724, 19, 193], [84, 19, 365], [394, 19, 61], [552, 19, 189], [163, 19, 375], [139, 19, 43], [796, 19, 275], [797, 19, 73], [554, 19, 263], [1, 19, 75], [20, 19, 372], [709, 19, 185], [161, 19, 266], [791, 19, 428], [313, 19, 236], [528, 19, 286], [207, 19, 185], [793, 19, 29], [358, 19, 36], [544, 19, 342], [359, 19, 104], [443, 19, 328], [378, 19, 523], [543, 19, 342], [343, 19, 246], [362, 19, 44], [726, 19, 46], [42, 19, 314], [445, 19, 328], [43, 19, 72], [572, 19, 129], [484, 19, 408], [93, 19, 109], [627, 19, 184], [658, 19, 108], [474, 18, 105], [719, 18, 446], [88, 18, 305], [522, 18, 488], [294, 18, 48], [598, 18, 42], [25, 18, 86], [520, 18, 355], [728, 18, 227], [606, 18, 29], [756, 18, 79], [504, 18, 95], [656, 18, 108], [596, 18, 450], [660, 18, 341], [569, 18, 124], [89, 18, 426], [705, 18, 225], [686, 18, 95], [439, 18, 227], [75, 18, 479], [326, 18, 109], [153, 18, 115], [781, 18, 319], [253, 18, 228], [424, 18, 154], [706, 18, 225], [295, 18, 48], [503, 18, 534], [704, 18, 225], [325, 18, 109], [718, 18, 20], [109, 18, 124], [419, 18, 228], [25, 18, 86], [220, 18, 426], [122, 18, 227], [238, 18, 47], [716, 18, 356], [566, 18, 246], [595, 18, 450], [714, 18, 97], [50, 18, 523], [745, 18, 316], [564, 18, 246], [505, 18, 95], [418, 18, 228], [110, 18, 124], [680, 18, 475], [770, 18, 72], [769, 18, 72], [120, 18, 61], [25, 18, 86], [64, 18, 50], [561, 18, 60], [21, 18, 119], [655, 18, 60], [131, 18, 34], [567, 18, 246], [404, 18, 44], [397, 18, 283], [74, 18, 479], [659, 18, 341], [37, 18, 371], [744, 18, 316], [76, 18, 479], [650, 18, 42], [352, 18, 60], [318, 18, 103], [319, 18, 103], [689, 18, 189], [233, 18, 105], [259, 18, 117], [402, 18, 47], [254, 18, 228], [502, 18, 534], [725, 18, 46], [521, 18, 355], [172, 18, 86], [679, 18, 475], [687, 18, 95], [405, 18, 44], [223, 18, 61], [25, 18, 86], [89, 18, 305], [74, 18, 479], [51, 18, 523], [565, 18, 246], [519, 18, 355], [654, 18, 60], [715, 18, 97], [590, 18, 275], [765, 18, 244], [722, 18, 193], [75, 18, 479], [37, 18, 371], [260, 18, 117], [597, 18, 42], [206, 18, 34], [324, 18, 172], [699, 18, 54], [154, 18, 115], [65, 18, 50], [224, 18, 61], [88, 18, 426], [60, 18, 240], [61, 18, 240], [393, 18, 61], [25, 18, 86], [22, 18, 119], [766, 18, 184], [523, 18, 488], [25, 18, 86], [400, 18, 158], [605, 18, 29], [179, 18, 36], [755, 18, 79], [124, 18, 8], [293, 18, 48], [745, 18, 316], [76, 18, 479], [270, 18, 72], [50, 18, 523], [688, 18, 189], [190, 18, 154], [717, 18, 555], [556, 18, 178], [127, 18, 233], [698, 18, 54], [473, 18, 426], [398, 18, 283], [51, 18, 523], [649, 18, 488], [707, 18, 577], [568, 18, 124], [221, 18, 426], [591, 18, 275], [621, 18, 82], [25, 18, 86], [703, 18, 115], [137, 18, 105], [771, 17, 68], [666, 17, 60], [685, 17, 178], [562, 17, 506], [431, 17, 185], [653, 17, 60], [211, 17, 205], [678, 17, 60], [102, 17, 331], [618, 17, 293], [546, 17, 178], [571, 17, 185], [178, 17, 500], [403, 17, 44], [82, 17, 49], [475, 17, 332], [761, 17, 230], [634, 17, 225], [592, 17, 105], [52, 17, 103], [524, 17, 189], [399, 17, 158], [678, 17, 60], [28, 17, 129], [267, 17, 234], [291, 17, 97], [53, 17, 103], [116, 17, 239], [69, 17, 78], [53, 17, 103], [494, 17, 29], [463, 17, 35], [169, 17, 109], [746, 17, 392], [465, 17, 20], [8, 17, 44], [170, 17, 109], [204, 17, 229], [105, 17, 506], [774, 17, 246], [288, 17, 203], [694, 17, 98], [133, 17, 129], [531, 17, 3], [682, 17, 347], [143, 17, 498], [280, 17, 345], [142, 17, 97], [557, 17, 479], [459, 17, 207], [477, 17, 425], [5, 17, 82], [348, 17, 232], [317, 17, 491], [108, 17, 35], [539, 17, 2], [347, 17, 232], [677, 17, 60], [105, 17, 116], [739, 17, 61], [316, 17, 491], [390, 17, 172], [615, 17, 151], [70, 17, 78], [15, 17, 228], [58, 17, 172], [276, 17, 104], [133, 17, 44], [782, 17, 525], [462, 17, 49], [594, 17, 505], [373, 17, 29], [193, 17, 197], [613, 17, 154], [370, 17, 352], [104, 17, 116], [52, 17, 103], [77, 17, 23], [763, 17, 230], [117, 17, 239], [282, 17, 345], [783, 17, 525], [432, 17, 185], [333, 17, 496], [387, 17, 174], [784, 17, 525], [558, 17, 479], [485, 17, 424], [454, 17, 185], [779, 17, 453], [230, 17, 239], [9, 17, 44], [623, 17, 334], [684, 17, 178], [6, 17, 82], [81, 17, 49], [388, 17, 174], [555, 17, 207], [269, 17, 236], [263, 17, 300], [106, 17, 280], [563, 17, 506], [417, 17, 203], [622, 17, 334], [762, 17, 230], [777, 17, 209], [455, 17, 230], [747, 17, 469], [222, 17, 246], [525, 17, 189], [363, 17, 362], [517, 17, 236], [570, 17, 185], [307, 17, 395], [453, 17, 185], [526, 17, 189], [702, 17, 570], [16, 17, 18], [46, 17, 210], [446, 17, 498], [593, 17, 105], [103, 17, 473], [740, 17, 61], [264, 17, 300], [39, 17, 3], [27, 17, 129], [212, 17, 97], [801, 17, 62], [356, 17, 425], [86, 17, 420], [287, 17, 133], [355, 17, 425], [625, 17, 185], [619, 17, 3], [47, 17, 210], [196, 17, 129], [103, 17, 473], [801, 17, 62], [41, 17, 109], [258, 17, 117], [633, 17, 225], [780, 17, 113], [350, 17, 392], [114, 17, 20], [683, 17, 347], [501, 17, 534], [112, 17, 23], [456, 17, 16], [364, 17, 362], [548, 17, 235], [620, 17, 3], [252, 17, 228], [24, 17, 103], [346, 17, 246], [152, 17, 115], [389, 17, 174], [700, 17, 129], [748, 17, 469], [635, 17, 225], [48, 17, 60], [469, 17, 197], [614, 17, 154], [135, 17, 24], [136, 17, 44], [308, 17, 395], [345, 17, 246], [342, 17, 182], [96, 17, 139], [339, 17, 352], [281, 17, 345], [441, 17, 31], [416, 17, 455], [396, 17, 283], [12, 17, 60], [49, 17, 60], [134, 17, 352], [550, 17, 242], [123, 17, 97], [338, 17, 373], [471, 17, 44], [176, 17, 227], [341, 17, 182], [470, 17, 320], [289, 17, 133], [750, 17, 23], [23, 17, 103], [457, 17, 16], [292, 17, 180], [17, 17, 18], [776, 17, 175], [277, 17, 104], [18, 17, 18], [87, 17, 420], [227, 17, 31], [697, 17, 44], [554, 17, 253], [111, 17, 23], [624, 17, 185], [97, 17, 139], [303, 17, 11], [197, 17, 109], [340, 17, 352], [27, 17, 129], [162, 17, 270], [78, 17, 23], [696, 17, 44], [372, 17, 29], [464, 17, 23], [205, 17, 229], [749, 17, 23], [290, 17, 189], [42, 17, 109], [171, 17, 109], [175, 17, 227], [177, 17, 500], [337, 17, 373], [460, 17, 207], [538, 17, 480], [371, 17, 29], [334, 17, 496], [284, 17, 16], [283, 17, 61], [7, 16, 44], [184, 16, 270], [309, 16, 316], [551, 16, 372], [332, 16, 302], [758, 16, 123], [4, 16, 82], [426, 16, 371], [35, 16, 266], [578, 16, 113], [353, 16, 261], [577, 16, 113], [381, 16, 505], [181, 16, 268], [428, 16, 98], [575, 16, 60], [164, 16, 428], [100, 16, 451], [433, 16, 387], [72, 16, 352], [458, 16, 29], [738, 16, 209], [535, 16, 341], [586, 16, 185], [234, 16, 28], [95, 16, 446], [214, 16, 498], [228, 16, 44], [75, 16, 88], [752, 16, 61], [504, 16, 242], [661, 16, 175], [367, 16, 423], [336, 16, 474], [673, 16, 388], [189, 16, 79], [213, 16, 219], [191, 16, 75], [588, 16, 31], [54, 16, 352], [612, 16, 184], [226, 16, 29], [392, 16, 154], [733, 16, 365], [515, 16, 346], [310, 16, 316], [242, 16, 135], [20, 16, 158], [534, 16, 88], [368, 16, 133], [710, 16, 75], [735, 16, 117], [574, 16, 60], [589, 16, 31], [173, 16, 345], [714, 16, 17], [505, 16, 242], [631, 16, 83], [107, 16, 183], [107, 16, 418], [693, 16, 175], [537, 16, 341], [120, 16, 129], [536, 16, 341], [617, 16, 522], [601, 16, 544], [406, 16, 388], [496, 16, 536], [600, 16, 544], [298, 16, 270], [274, 16, 267], [632, 16, 450], [425, 16, 371], [64, 16, 93], [321, 16, 310], [608, 16, 261], [732, 16, 365], [599, 16, 544], [610, 16, 184], [113, 16, 135], [380, 16, 505], [119, 16, 352], [648, 16, 47], [354, 16, 261], [311, 16, 129], [261, 16, 46], [74, 16, 88], [300, 16, 3], [452, 16, 228], [741, 16, 226], [476, 16, 156], [663, 16, 175], [19, 16, 158], [391, 16, 154], [76, 16, 88], [192, 16, 75], [19, 16, 158], [616, 16, 522], [352, 16, 185], [331, 16, 302], [579, 16, 113], [584, 16, 54], [423, 16, 237], [662, 16, 175], [299, 16, 156], [187, 16, 79], [511, 16, 73], [306, 16, 182], [183, 16, 270], [422, 16, 237], [734, 16, 117], [775, 16, 281], [271, 16, 252], [672, 16, 388], [305, 16, 182], [692, 16, 175], [320, 16, 310], [736, 16, 209], [559, 16, 67], [140, 16, 341], [490, 16, 48], [206, 16, 246], [229, 16, 44], [751, 16, 61], [215, 16, 154], [302, 16, 425], [138, 16, 205], [764, 16, 35], [532, 16, 88], [472, 16, 210], [304, 16, 182], [101, 16, 451], [74, 16, 88], [401, 16, 450], [495, 16, 536], [296, 16, 18], [461, 16, 154], [553, 16, 372], [139, 16, 205], [75, 16, 88], [90, 16, 182], [742, 16, 577], [481, 16, 182], [611, 16, 184], [344, 16, 60], [73, 16, 352], [497, 16, 536], [576, 16, 60], [65, 16, 93], [583, 16, 54], [701, 16, 332], [55, 16, 352], [208, 16, 446], [737, 16, 209], [533, 16, 88], [489, 16, 48], [357, 16, 345], [582, 16, 54], [262, 16, 46], [315, 16, 73], [587, 16, 228], [118, 16, 352], [715, 16, 17], [513, 16, 281], [451, 16, 228], [482, 16, 197], [180, 16, 268], [141, 16, 341], [76, 16, 88], [552, 16, 372], [711, 16, 75], [163, 16, 428], [188, 16, 79], [20, 16, 158], [743, 16, 577], [161, 16, 270], [207, 16, 210], [768, 16, 14], [427, 16, 98], [358, 16, 149], [480, 16, 203], [607, 16, 261], [359, 16, 44], [626, 16, 30], [297, 16, 18], [312, 16, 129], [343, 16, 60], [560, 16, 67], [757, 16, 123], [585, 16, 185], [148, 15, 82], [56, 15, 69], [88, 15, 491], [773, 15, 44], [730, 15, 453], [294, 15, 103], [412, 15, 450], [674, 15, 4], [411, 15, 36], [231, 15, 363], [218, 15, 510], [2, 15, 36], [245, 15, 240], [522, 15, 86], [267, 15, 78], [520, 15, 314], [728, 15, 453], [756, 15, 72], [279, 15, 352], [606, 15, 60], [408, 15, 36], [286, 15, 29], [596, 15, 527], [146, 15, 97], [129, 15, 33], [69, 15, 77], [89, 15, 124], [686, 15, 576], [670, 15, 75], [285, 15, 29], [439, 15, 102], [243, 15, 46], [652, 15, 73], [326, 15, 244], [508, 15, 36], [727, 15, 424], [329, 15, 157], [410, 15, 36], [774, 15, 129], [122, 15, 149], [669, 15, 75], [646, 15, 246], [98, 15, 61], [424, 15, 321], [383, 15, 414], [438, 15, 102], [382, 15, 401], [295, 15, 103], [384, 15, 246], [322, 15, 481], [241, 15, 117], [325, 15, 244], [122, 15, 102], [454, 15, 228], [68, 15, 69], [419, 15, 55], [109, 15, 499], [498, 15, 488], [643, 15, 246], [506, 15, 36], [238, 15, 93], [566, 15, 365], [265, 15, 450], [390, 15, 154], [249, 15, 407], [70, 15, 77], [595, 15, 527], [564, 15, 453], [745, 15, 88], [145, 15, 197], [418, 15, 55], [85, 15, 228], [110, 15, 499], [651, 15, 73], [360, 15, 243], [360, 15, 194], [360, 15, 219], [360, 15, 68], [239, 15, 351], [510, 15, 228], [323, 15, 481], [613, 15, 589], [435, 15, 364], [314, 15, 522], [723, 15, 75], [168, 15, 101], [158, 15, 184], [660, 15, 36], [250, 15, 413], [447, 15, 395], [273, 15, 267], [159, 15, 184], [644, 15, 246], [94, 15, 101], [530, 15, 232], [448, 15, 612], [216, 15, 185], [668, 15, 568], [349, 15, 33], [567, 15, 365], [659, 15, 36], [240, 15, 83], [147, 15, 82], [744, 15, 88], [37, 15, 196], [237, 15, 98], [150, 15, 248], [802, 15, 27], [269, 15, 77], [166, 15, 183], [328, 15, 157], [664, 15, 450], [650, 15, 73], [385, 15, 270], [713, 15, 36], [21, 15, 332], [527, 15, 531], [413, 15, 450], [318, 15, 372], [580, 15, 332], [167, 15, 101], [57, 15, 69], [319, 15, 372], [466, 15, 351], [165, 15, 183], [676, 15, 39], [479, 15, 104], [483, 15, 163], [720, 15, 113], [307, 15, 364], [646, 15, 246], [467, 15, 83], [453, 15, 228], [128, 15, 228], [667, 15, 568], [160, 15, 184], [437, 15, 149], [725, 15, 424], [521, 15, 314], [66, 15, 69], [185, 15, 102], [691, 15, 51], [126, 15, 83], [67, 15, 69], [232, 15, 372], [89, 15, 491], [722, 15, 75], [413, 15, 450], [144, 15, 420], [195, 15, 21], [330, 15, 157], [499, 15, 488], [244, 15, 46], [44, 15, 79], [721, 15, 488], [414, 15, 450], [729, 15, 453], [92, 15, 101], [308, 15, 364], [581, 15, 332], [519, 15, 314], [436, 15, 149], [687, 15, 576], [179, 15, 268], [590, 15, 72], [413, 15, 450], [37, 15, 83], [696, 15, 446], [540, 15, 75], [675, 15, 4], [507, 15, 36], [614, 15, 589], [572, 15, 227], [529, 15, 232], [324, 15, 108], [646, 15, 246], [772, 15, 286], [699, 15, 36], [369, 15, 317], [409, 15, 36], [60, 15, 3], [88, 15, 124], [339, 15, 133], [434, 15, 364], [487, 15, 163], [393, 15, 64], [565, 15, 453], [194, 15, 21], [125, 15, 351], [690, 15, 51], [523, 15, 86], [766, 15, 251], [22, 15, 332], [219, 15, 510], [217, 15, 185], [605, 15, 60], [198, 15, 17], [444, 15, 36], [278, 15, 352], [335, 15, 468], [750, 15, 24], [755, 15, 72], [587, 15, 609], [545, 15, 182], [731, 15, 365], [724, 15, 75], [124, 15, 3], [293, 15, 103], [712, 15, 36], [395, 15, 64], [500, 15, 488], [84, 15, 228], [745, 15, 88], [765, 15, 500], [394, 15, 64], [99, 15, 61], [270, 15, 54], [1, 15, 36], [61, 15, 3], [697, 15, 446], [190, 15, 321], [556, 15, 235], [528, 15, 531], [351, 15, 29], [340, 15, 133], [313, 15, 522], [127, 15, 279], [698, 15, 36], [149, 15, 82], [544, 15, 182], [707, 15, 191], [443, 15, 36], [3, 15, 36], [543, 15, 182], [749, 15, 24], [726, 15, 424], [591, 15, 72], [445, 15, 36], [509, 15, 228], [43, 15, 79], [484, 15, 163], [542, 15, 75], [93, 15, 101], [283, 14, 346], [653, 14, 488], [478, 14, 196], [658, 14, 352], [787, 14, 202], [475, 14, 210], [203, 14, 23], [80, 14, 93], [578, 14, 237], [52, 14, 154], [524, 14, 350], [598, 14, 232], [248, 14, 498], [577, 14, 237], [28, 14, 222], [575, 14, 3], [53, 14, 154], [656, 14, 352], [458, 14, 17], [569, 14, 3], [746, 14, 362], [769, 14, 328], [465, 14, 77], [325, 14, 60], [326, 14, 60], [79, 14, 93], [367, 14, 352], [336, 14, 103], [630, 14, 417], [781, 14, 360], [189, 14, 78], [288, 14, 154], [226, 14, 17], [200, 14, 109], [477, 14, 193], [220, 14, 203], [368, 14, 352], [574, 14, 3], [778, 14, 425], [15, 14, 99], [289, 14, 185], [770, 14, 328], [52, 14, 154], [53, 14, 154], [561, 14, 18], [282, 14, 273], [655, 14, 488], [131, 14, 352], [628, 14, 468], [280, 14, 381], [50, 14, 222], [555, 14, 29], [246, 14, 498], [193, 14, 49], [284, 14, 346], [333, 14, 54], [579, 14, 237], [629, 14, 417], [657, 14, 352], [759, 14, 693], [525, 14, 350], [187, 14, 78], [788, 14, 250], [526, 14, 350], [702, 14, 204], [257, 14, 64], [255, 14, 64], [402, 14, 71], [39, 14, 50], [27, 14, 222], [356, 14, 193], [754, 14, 74], [625, 14, 259], [215, 14, 196], [287, 14, 185], [355, 14, 193], [44, 14, 78], [223, 14, 62], [302, 14, 197], [199, 14, 93], [350, 14, 239], [461, 14, 196], [760, 14, 693], [785, 14, 351], [786, 14, 60], [27, 14, 232], [361, 14, 196], [469, 14, 49], [247, 14, 498], [256, 14, 64], [627, 14, 468], [597, 14, 232], [753, 14, 74], [576, 14, 3], [281, 14, 381], [342, 14, 61], [51, 14, 222], [114, 14, 77], [550, 14, 36], [224, 14, 62], [327, 14, 60], [176, 14, 584], [341, 14, 61], [654, 14, 488], [50, 14, 222], [188, 14, 78], [554, 14, 29], [624, 14, 259], [473, 14, 203], [51, 14, 222], [221, 14, 203], [362, 14, 196], [568, 14, 3], [43, 14, 78], [658, 14, 352], [334, 14, 54], [7, 13, 145], [685, 13, 496], [184, 13, 61], [431, 13, 95], [562, 13, 101], [678, 13, 113], [211, 13, 145], [309, 13, 209], [551, 13, 328], [332, 13, 28], [618, 13, 341], [546, 13, 72], [758, 13, 82], [403, 13, 209], [571, 13, 154], [82, 13, 113], [426, 13, 116], [592, 13, 61], [761, 13, 75], [35, 13, 111], [353, 13, 425], [218, 13, 106], [399, 13, 29], [2, 13, 79], [2, 13, 77], [678, 13, 113], [381, 13, 287], [428, 13, 608], [708, 13, 275], [25, 13, 486], [291, 13, 154], [164, 13, 497], [116, 13, 55], [72, 13, 390], [69, 13, 79], [100, 13, 103], [463, 13, 282], [738, 13, 450], [586, 13, 73], [705, 13, 117], [209, 13, 122], [433, 13, 281], [686, 13, 149], [234, 13, 23], [95, 13, 99], [169, 13, 17], [8, 13, 145], [228, 13, 46], [752, 13, 450], [661, 13, 97], [106, 13, 26], [504, 13, 28], [105, 13, 43], [673, 13, 75], [449, 13, 281], [210, 13, 122], [421, 13, 270], [694, 13, 189], [531, 13, 574], [133, 13, 98], [682, 13, 497], [191, 13, 73], [588, 13, 210], [54, 13, 154], [612, 13, 530], [253, 13, 72], [557, 13, 185], [503, 13, 116], [733, 13, 48], [310, 13, 209], [704, 13, 117], [515, 13, 154], [459, 13, 320], [365, 13, 301], [68, 13, 490], [348, 13, 479], [108, 13, 282], [795, 13, 23], [20, 13, 228], [25, 13, 486], [539, 13, 68], [677, 13, 113], [347, 13, 479], [735, 13, 316], [105, 13, 43], [739, 13, 228], [173, 13, 383], [615, 13, 62], [70, 13, 79], [714, 13, 44], [505, 13, 28], [276, 13, 17], [641, 13, 279], [782, 13, 182], [373, 13, 225], [462, 13, 113], [680, 13, 228], [594, 13, 3], [613, 13, 196], [120, 13, 149], [104, 13, 43], [370, 13, 381], [617, 13, 98], [640, 13, 270], [406, 13, 72], [25, 13, 486], [496, 13, 74], [298, 13, 61], [799, 13, 693], [158, 13, 44], [435, 13, 108], [660, 13, 189], [660, 13, 3], [77, 13, 172], [425, 13, 116], [763, 13, 75], [608, 13, 101], [732, 13, 48], [800, 13, 500], [159, 13, 44], [476, 13, 86], [610, 13, 530], [117, 13, 55], [380, 13, 287], [783, 13, 182], [432, 13, 95], [119, 13, 175], [442, 13, 95], [30, 13, 40], [387, 13, 75], [354, 13, 425], [706, 13, 117], [784, 13, 182], [311, 13, 516], [261, 13, 316], [558, 13, 185], [9, 13, 145], [230, 13, 55], [404, 13, 209], [659, 13, 189], [623, 13, 325], [397, 13, 104], [300, 13, 574], [452, 13, 367], [589, 13, 41], [792, 13, 109], [81, 13, 113], [741, 13, 314], [388, 13, 75], [798, 13, 75], [663, 13, 97], [19, 13, 228], [645, 13, 523], [263, 13, 316], [638, 13, 270], [192, 13, 73], [19, 13, 228], [417, 13, 209], [642, 13, 279], [563, 13, 101], [29, 13, 40], [622, 13, 325], [616, 13, 174], [321, 13, 250], [32, 13, 40], [331, 13, 28], [352, 13, 154], [415, 13, 450], [762, 13, 75], [777, 13, 268], [33, 13, 40], [155, 13, 98], [584, 13, 196], [580, 13, 352], [747, 13, 390], [684, 13, 496], [222, 13, 287], [689, 13, 163], [517, 13, 286], [363, 13, 301], [299, 13, 86], [511, 13, 154], [570, 13, 154], [306, 13, 317], [183, 13, 61], [639, 13, 270], [734, 13, 316], [420, 13, 270], [160, 13, 44], [16, 13, 98], [305, 13, 317], [593, 13, 61], [794, 13, 339], [672, 13, 75], [254, 13, 72], [264, 13, 316], [502, 13, 116], [386, 13, 104], [662, 13, 97], [320, 13, 250], [66, 13, 490], [386, 13, 100], [172, 13, 417], [736, 13, 450], [405, 13, 209], [86, 13, 227], [740, 13, 228], [751, 13, 450], [206, 13, 281], [101, 13, 103], [495, 13, 74], [229, 13, 46], [679, 13, 228], [687, 13, 149], [619, 13, 252], [450, 13, 281], [196, 13, 98], [67, 13, 490], [212, 13, 206], [389, 13, 75], [742, 13, 318], [499, 13, 111], [41, 13, 17], [25, 13, 486], [304, 13, 317], [780, 13, 137], [498, 13, 111], [581, 13, 352], [501, 13, 116], [683, 13, 497], [338, 13, 149], [44, 13, 77], [456, 13, 240], [91, 13, 131], [715, 13, 44], [553, 13, 328], [364, 13, 301], [548, 13, 72], [292, 13, 154], [277, 13, 17], [416, 13, 154], [764, 13, 74], [688, 13, 163], [556, 13, 72], [472, 13, 98], [252, 13, 72], [90, 13, 333], [611, 13, 530], [379, 13, 451], [748, 13, 390], [344, 13, 317], [614, 13, 196], [48, 13, 77], [572, 13, 3], [73, 13, 390], [312, 13, 415], [497, 13, 74], [136, 13, 98], [345, 13, 109], [324, 13, 83], [699, 13, 196], [583, 13, 196], [96, 13, 29], [339, 13, 426], [55, 13, 154], [208, 13, 99], [441, 13, 47], [396, 13, 104], [12, 13, 77], [12, 13, 79], [12, 13, 78], [377, 13, 451], [49, 13, 77], [434, 13, 108], [25, 13, 486], [296, 13, 395], [134, 13, 98], [156, 13, 98], [737, 13, 450], [123, 13, 206], [25, 13, 486], [112, 13, 479], [219, 13, 106], [471, 13, 98], [176, 13, 281], [400, 13, 29], [587, 13, 209], [647, 13, 61], [115, 13, 44], [582, 13, 196], [470, 13, 98], [315, 13, 72], [444, 13, 201], [262, 13, 316], [118, 13, 175], [83, 13, 282], [513, 13, 154], [731, 13, 48], [451, 13, 367], [457, 13, 240], [500, 13, 111], [17, 13, 98], [157, 13, 98], [620, 13, 252], [776, 13, 510], [552, 13, 328], [18, 13, 98], [87, 13, 227], [1, 13, 77], [796, 13, 351], [797, 13, 72], [163, 13, 497], [1, 13, 79], [111, 13, 479], [20, 13, 228], [743, 13, 318], [346, 13, 109], [709, 13, 275], [97, 13, 29], [161, 13, 154], [197, 13, 98], [303, 13, 230], [791, 13, 319], [768, 13, 180], [340, 13, 426], [207, 13, 98], [698, 13, 196], [427, 13, 608], [793, 13, 149], [78, 13, 172], [358, 13, 281], [700, 13, 98], [372, 13, 225], [607, 13, 101], [359, 13, 269], [162, 13, 154], [398, 13, 104], [443, 13, 201], [3, 13, 77], [378, 13, 451], [464, 13, 479], [3, 13, 79], [297, 13, 395], [343, 13, 317], [445, 13, 201], [290, 13, 154], [42, 13, 17], [175, 13, 281], [757, 13, 82], [43, 13, 77], [135, 13, 98], [621, 13, 184], [337, 13, 149], [460, 13, 320], [25, 13, 486], [538, 13, 279], [371, 13, 225], [771, 13, 219], [585, 13, 73], [666, 12, 113], [56, 12, 228], [719, 12, 115], [88, 12, 50], [674, 12, 2], [178, 12, 381], [634, 12, 29], [267, 12, 71], [279, 12, 54], [286, 12, 72], [596, 12, 210], [569, 12, 491], [535, 12, 61], [89, 12, 50], [686, 12, 207], [285, 12, 72], [170, 12, 55], [204, 12, 36], [75, 12, 222], [508, 12, 270], [329, 12, 328], [673, 12, 73], [153, 12, 235], [189, 12, 77], [213, 12, 522], [143, 12, 122], [438, 12, 88], [322, 12, 222], [109, 12, 372], [242, 12, 3], [317, 12, 133], [506, 12, 270], [534, 12, 67], [440, 12, 186], [316, 12, 133], [595, 12, 210], [745, 12, 336], [58, 12, 270], [110, 12, 372], [85, 12, 31], [239, 12, 129], [323, 12, 222], [537, 12, 61], [510, 12, 154], [536, 12, 61], [168, 12, 184], [314, 12, 98], [693, 12, 145], [274, 12, 252], [94, 12, 174], [113, 12, 3], [530, 12, 154], [779, 12, 44], [74, 12, 209], [240, 12, 185], [744, 12, 336], [37, 12, 109], [263, 12, 608], [76, 12, 209], [269, 12, 93], [166, 12, 115], [166, 12, 113], [166, 12, 219], [328, 12, 328], [527, 12, 372], [167, 12, 184], [57, 12, 228], [466, 12, 129], [165, 12, 115], [165, 12, 113], [165, 12, 219], [233, 12, 97], [676, 12, 29], [307, 12, 203], [467, 12, 185], [187, 12, 77], [271, 12, 154], [259, 12, 193], [446, 12, 122], [185, 12, 88], [692, 12, 145], [672, 12, 73], [691, 12, 145], [559, 12, 207], [126, 12, 185], [258, 12, 193], [507, 12, 270], [89, 12, 50], [532, 12, 67], [330, 12, 328], [308, 12, 203], [633, 12, 29], [529, 12, 154], [74, 12, 222], [687, 12, 207], [37, 12, 109], [590, 12, 117], [227, 12, 314], [24, 12, 137], [75, 12, 209], [696, 12, 117], [635, 12, 29], [92, 12, 174], [509, 12, 154], [154, 12, 235], [701, 12, 355], [260, 12, 193], [88, 12, 50], [125, 12, 129], [690, 12, 145], [533, 12, 67], [278, 12, 54], [335, 12, 228], [545, 12, 228], [23, 12, 137], [84, 12, 31], [745, 12, 336], [76, 12, 222], [270, 12, 363], [697, 12, 117], [528, 12, 372], [152, 12, 235], [313, 12, 98], [188, 12, 77], [675, 12, 2], [544, 12, 228], [707, 12, 319], [543, 12, 228], [205, 12, 36], [591, 12, 117], [568, 12, 491], [93, 12, 174], [171, 12, 55], [703, 12, 479], [560, 12, 207], [137, 12, 97], [177, 12, 381], [474, 12, 97], [653, 11, 336], [102, 11, 73], [730, 11, 608], [294, 11, 336], [403, 11, 608], [82, 11, 86], [475, 11, 501], [522, 11, 351], [181, 11, 178], [28, 11, 210], [520, 11, 98], [728, 11, 608], [756, 11, 236], [606, 11, 357], [69, 11, 35], [458, 11, 109], [100, 11, 205], [727, 11, 43], [169, 11, 44], [439, 11, 3], [652, 11, 44], [504, 11, 197], [367, 11, 185], [105, 11, 172], [336, 11, 364], [694, 11, 268], [98, 11, 106], [424, 11, 226], [226, 11, 109], [295, 11, 336], [557, 11, 28], [503, 11, 346], [241, 11, 208], [419, 11, 98], [122, 11, 3], [220, 11, 189], [238, 11, 181], [566, 11, 184], [368, 11, 577], [710, 11, 388], [105, 11, 29], [70, 11, 35], [15, 11, 31], [714, 11, 16], [505, 11, 197], [564, 11, 182], [631, 11, 20], [418, 11, 98], [462, 11, 86], [651, 11, 44], [107, 11, 228], [601, 11, 84], [104, 11, 29], [723, 11, 310], [600, 11, 84], [632, 11, 232], [447, 11, 364], [561, 11, 366], [599, 11, 84], [282, 11, 574], [655, 11, 336], [648, 11, 93], [448, 11, 364], [668, 11, 29], [280, 11, 574], [558, 11, 28], [567, 11, 184], [81, 11, 86], [147, 11, 239], [555, 11, 424], [193, 11, 104], [263, 11, 29], [802, 11, 364], [318, 11, 453], [650, 11, 44], [174, 11, 383], [21, 11, 31], [333, 11, 574], [423, 11, 426], [319, 11, 453], [517, 11, 60], [455, 11, 22], [422, 11, 426], [128, 11, 184], [667, 11, 29], [775, 11, 229], [702, 11, 268], [46, 11, 71], [437, 11, 109], [264, 11, 29], [725, 11, 43], [502, 11, 346], [39, 11, 574], [521, 11, 98], [27, 11, 210], [140, 11, 43], [206, 11, 103], [302, 11, 154], [436, 11, 109], [519, 11, 98], [722, 11, 310], [86, 11, 196], [47, 11, 71], [491, 11, 98], [41, 11, 44], [721, 11, 114], [729, 11, 608], [60, 11, 145], [101, 11, 205], [350, 11, 574], [393, 11, 346], [565, 11, 182], [501, 11, 346], [654, 11, 336], [715, 11, 16], [293, 11, 336], [765, 11, 511], [711, 11, 388], [99, 11, 106], [488, 11, 219], [27, 11, 210], [149, 11, 239], [649, 11, 199], [48, 11, 93], [469, 11, 104], [281, 11, 574], [12, 11, 93], [49, 11, 93], [766, 11, 116], [523, 11, 351], [550, 11, 498], [61, 11, 145], [22, 11, 31], [605, 11, 357], [198, 11, 114], [179, 11, 178], [755, 11, 236], [395, 11, 14], [724, 11, 310], [124, 11, 181], [141, 11, 43], [394, 11, 346], [235, 11, 166], [87, 11, 196], [180, 11, 178], [554, 11, 424], [190, 11, 226], [127, 11, 106], [473, 11, 189], [626, 11, 31], [221, 11, 189], [726, 11, 43], [42, 11, 44], [148, 11, 239], [334, 11, 574], [7, 10, 110], [184, 10, 111], [685, 10, 313], [184, 10, 205], [478, 10, 420], [658, 10, 122], [309, 10, 98], [773, 10, 228], [332, 10, 73], [551, 10, 259], [546, 10, 78], [4, 10, 108], [412, 10, 33], [674, 10, 526], [411, 10, 319], [203, 10, 372], [35, 10, 3], [547, 10, 16], [231, 10, 205], [353, 10, 180], [578, 10, 289], [524, 10, 29], [248, 10, 103], [577, 10, 289], [381, 10, 500], [493, 10, 356], [25, 10, 98], [575, 10, 313], [164, 10, 93], [408, 10, 228], [656, 10, 122], [72, 10, 51], [492, 10, 345], [433, 10, 93], [738, 10, 44], [586, 10, 24], [234, 10, 95], [670, 10, 381], [465, 10, 71], [8, 10, 110], [95, 10, 317], [214, 10, 332], [75, 10, 205], [661, 10, 64], [326, 10, 316], [410, 10, 319], [630, 10, 365], [774, 10, 109], [189, 10, 584], [421, 10, 73], [669, 10, 381], [191, 10, 72], [54, 10, 93], [612, 10, 82], [200, 10, 310], [515, 10, 55], [310, 10, 98], [151, 10, 5], [5, 10, 108], [718, 10, 91], [348, 10, 210], [317, 10, 124], [25, 10, 98], [20, 10, 44], [506, 10, 608], [347, 10, 210], [325, 10, 316], [716, 10, 62], [735, 10, 28], [574, 10, 313], [173, 10, 186], [778, 10, 608], [58, 10, 316], [373, 10, 44], [510, 10, 28], [120, 10, 105], [406, 10, 78], [25, 10, 98], [496, 10, 35], [298, 10, 204], [608, 10, 109], [610, 10, 82], [380, 10, 500], [131, 10, 420], [628, 10, 17], [354, 10, 180], [261, 10, 44], [311, 10, 227], [454, 10, 269], [659, 10, 3], [9, 10, 110], [476, 10, 443], [300, 10, 213], [74, 10, 205], [6, 10, 108], [251, 10, 219], [50, 10, 189], [741, 10, 270], [663, 10, 64], [37, 10, 420], [237, 10, 228], [246, 10, 103], [19, 10, 44], [192, 10, 72], [76, 10, 537], [19, 10, 44], [385, 10, 129], [352, 10, 364], [713, 10, 196], [321, 10, 205], [331, 10, 73], [579, 10, 289], [413, 10, 182], [584, 10, 253], [155, 10, 52], [684, 10, 313], [662, 10, 64], [629, 10, 365], [657, 10, 122], [255, 10, 28], [187, 10, 584], [759, 10, 608], [689, 10, 154], [525, 10, 29], [299, 10, 88], [483, 10, 246], [222, 10, 61], [511, 10, 22], [183, 10, 111], [720, 10, 277], [306, 10, 232], [734, 10, 28], [183, 10, 205], [357, 10, 23], [420, 10, 73], [453, 10, 269], [526, 10, 29], [305, 10, 232], [257, 10, 28], [320, 10, 205], [736, 10, 44], [172, 10, 186], [754, 10, 75], [138, 10, 55], [215, 10, 185], [304, 10, 232], [232, 10, 205], [413, 10, 182], [472, 10, 282], [361, 10, 420], [223, 10, 60], [247, 10, 103], [25, 10, 98], [414, 10, 182], [636, 10, 71], [74, 10, 205], [51, 10, 189], [495, 10, 35], [461, 10, 185], [114, 10, 71], [760, 10, 608], [456, 10, 213], [262, 10, 44], [717, 10, 403], [139, 10, 55], [688, 10, 154], [764, 10, 345], [37, 10, 98], [413, 10, 182], [556, 10, 42], [696, 10, 23], [742, 10, 522], [611, 10, 82], [344, 10, 377], [297, 10, 252], [256, 10, 28], [73, 10, 51], [627, 10, 17], [753, 10, 75], [509, 10, 28], [369, 10, 55], [312, 10, 227], [576, 10, 313], [324, 10, 229], [699, 10, 88], [772, 10, 228], [583, 10, 253], [342, 10, 43], [409, 10, 228], [55, 10, 93], [549, 10, 298], [208, 10, 317], [487, 10, 246], [25, 10, 98], [156, 10, 52], [737, 10, 44], [224, 10, 60], [25, 10, 98], [327, 10, 185], [296, 10, 252], [341, 10, 43], [582, 10, 253], [115, 10, 39], [316, 10, 124], [315, 10, 78], [587, 10, 268], [750, 10, 523], [553, 10, 259], [513, 10, 510], [712, 10, 196], [457, 10, 213], [157, 10, 52], [548, 10, 79], [163, 10, 93], [552, 10, 259], [188, 10, 584], [76, 10, 537], [50, 10, 189], [697, 10, 23], [20, 10, 44], [743, 10, 522], [351, 10, 52], [351, 10, 55], [351, 10, 181], [768, 10, 450], [207, 10, 282], [698, 10, 88], [75, 10, 205], [358, 10, 93], [675, 10, 526], [607, 10, 109], [372, 10, 44], [359, 10, 228], [51, 10, 189], [637, 10, 71], [749, 10, 523], [343, 10, 377], [362, 10, 420], [484, 10, 246], [658, 10, 122], [497, 10, 35], [25, 10, 98], [371, 10, 44], [585, 10, 24], [562, 9, 114], [211, 9, 106], [211, 9, 107], [678, 9, 93], [730, 9, 574], [10, 9, 450], [618, 9, 84], [294, 9, 310], [571, 9, 468], [403, 9, 268], [177, 9, 100], [475, 9, 100], [634, 9, 44], [761, 9, 229], [592, 9, 101], [178, 9, 100], [80, 9, 55], [52, 9, 252], [2, 9, 22], [399, 9, 205], [678, 9, 93], [598, 9, 174], [291, 9, 28], [28, 9, 229], [53, 9, 252], [100, 9, 209], [116, 9, 43], [463, 9, 111], [535, 9, 496], [705, 9, 182], [746, 9, 185], [170, 9, 486], [204, 9, 450], [53, 9, 252], [106, 9, 27], [79, 9, 55], [367, 9, 184], [336, 9, 342], [673, 9, 39], [781, 9, 35], [153, 9, 77], [213, 9, 35], [288, 9, 253], [531, 9, 287], [98, 9, 43], [133, 9, 608], [143, 9, 133], [253, 9, 98], [392, 9, 269], [142, 9, 46], [295, 9, 310], [733, 9, 249], [704, 9, 182], [459, 9, 196], [477, 9, 310], [68, 9, 193], [539, 9, 490], [242, 9, 287], [108, 9, 111], [677, 9, 93], [368, 9, 97], [440, 9, 287], [739, 9, 43], [390, 9, 269], [615, 9, 54], [615, 9, 114], [249, 9, 16], [498, 9, 316], [276, 9, 98], [782, 9, 117], [289, 9, 303], [594, 9, 453], [770, 9, 28], [537, 9, 496], [13, 9, 450], [693, 9, 11], [613, 9, 117], [536, 9, 496], [314, 9, 204], [370, 9, 577], [52, 9, 252], [274, 9, 259], [250, 9, 16], [77, 9, 52], [435, 9, 154], [763, 9, 229], [113, 9, 287], [273, 9, 74], [732, 9, 249], [282, 9, 100], [117, 9, 43], [783, 9, 117], [769, 9, 28], [387, 9, 71], [280, 9, 100], [706, 9, 182], [784, 9, 117], [485, 9, 43], [779, 9, 93], [230, 9, 43], [404, 9, 268], [623, 9, 205], [397, 9, 17], [452, 9, 42], [388, 9, 71], [555, 9, 99], [37, 9, 608], [391, 9, 269], [563, 9, 114], [29, 9, 24], [417, 9, 204], [622, 9, 205], [174, 9, 186], [32, 9, 24], [30, 9, 24], [333, 9, 219], [777, 9, 205], [33, 9, 24], [762, 9, 229], [580, 9, 17], [747, 9, 44], [363, 9, 227], [676, 9, 608], [570, 9, 313], [307, 9, 197], [271, 9, 145], [259, 9, 189], [16, 9, 16], [446, 9, 133], [593, 9, 101], [437, 9, 286], [254, 9, 98], [692, 9, 11], [672, 9, 39], [39, 9, 589], [66, 9, 193], [27, 9, 229], [691, 9, 39], [490, 9, 204], [212, 9, 228], [559, 9, 185], [740, 9, 43], [625, 9, 210], [356, 9, 310], [405, 9, 268], [196, 9, 608], [499, 9, 316], [258, 9, 189], [302, 9, 310], [101, 9, 209], [801, 9, 381], [633, 9, 44], [287, 9, 303], [436, 9, 286], [619, 9, 197], [67, 9, 193], [389, 9, 71], [416, 9, 228], [308, 9, 197], [199, 9, 55], [780, 9, 182], [281, 9, 100], [581, 9, 17], [112, 9, 184], [489, 9, 204], [338, 9, 397], [44, 9, 51], [355, 9, 310], [277, 9, 98], [24, 9, 44], [227, 9, 232], [195, 9, 341], [37, 9, 608], [252, 9, 98], [152, 9, 77], [700, 9, 608], [27, 9, 229], [748, 9, 44], [801, 9, 381], [635, 9, 44], [603, 9, 20], [572, 9, 321], [337, 9, 397], [597, 9, 174], [136, 9, 608], [345, 9, 275], [96, 9, 93], [339, 9, 55], [154, 9, 77], [441, 9, 119], [396, 9, 17], [434, 9, 154], [260, 9, 189], [194, 9, 341], [134, 9, 608], [690, 9, 39], [550, 9, 453], [123, 9, 228], [176, 9, 186], [471, 9, 608], [400, 9, 205], [470, 9, 608], [83, 9, 332], [23, 9, 44], [731, 9, 249], [364, 9, 227], [451, 9, 42], [17, 9, 16], [500, 9, 316], [620, 9, 197], [292, 9, 28], [776, 9, 182], [18, 9, 16], [99, 9, 43], [270, 9, 145], [1, 9, 22], [494, 9, 203], [554, 9, 99], [111, 9, 184], [303, 9, 44], [624, 9, 210], [346, 9, 275], [97, 9, 93], [197, 9, 608], [340, 9, 55], [78, 9, 52], [398, 9, 17], [3, 9, 22], [464, 9, 184], [205, 9, 450], [290, 9, 28], [614, 9, 117], [175, 9, 186], [171, 9, 486], [43, 9, 51], [135, 9, 608], [621, 9, 44], [560, 9, 185], [460, 9, 196], [538, 9, 233], [771, 9, 269], [284, 9, 230], [334, 9, 219], [283, 9, 230], [685, 8, 589], [431, 8, 45], [426, 8, 16], [719, 8, 479], [56, 8, 2], [658, 8, 98], [787, 8, 30], [758, 8, 230], [546, 8, 73], [218, 8, 88], [245, 8, 61], [522, 8, 268], [181, 8, 84], [520, 8, 43], [728, 8, 574], [756, 8, 148], [606, 8, 377], [279, 8, 17], [286, 8, 73], [656, 8, 98], [146, 8, 83], [708, 8, 74], [686, 8, 492], [727, 8, 122], [285, 8, 73], [243, 8, 84], [439, 8, 96], [228, 8, 123], [652, 8, 205], [752, 8, 169], [508, 8, 44], [504, 8, 117], [329, 8, 523], [774, 8, 205], [189, 8, 33], [646, 8, 286], [122, 8, 96], [682, 8, 316], [588, 8, 203], [438, 8, 67], [424, 8, 310], [322, 8, 116], [241, 8, 23], [317, 8, 139], [643, 8, 286], [506, 8, 44], [220, 8, 181], [238, 8, 186], [534, 8, 117], [566, 8, 104], [574, 8, 589], [316, 8, 139], [145, 8, 86], [505, 8, 117], [58, 8, 43], [564, 8, 44], [85, 8, 99], [651, 8, 205], [680, 8, 319], [239, 8, 67], [323, 8, 116], [323, 8, 52], [168, 8, 611], [723, 8, 64], [617, 8, 104], [425, 8, 16], [158, 8, 99], [561, 8, 149], [159, 8, 99], [432, 8, 45], [119, 8, 30], [644, 8, 286], [94, 8, 212], [530, 8, 189], [216, 8, 154], [668, 8, 526], [454, 8, 40], [567, 8, 104], [589, 8, 501], [240, 8, 108], [150, 8, 129], [166, 8, 129], [328, 8, 523], [616, 8, 117], [650, 8, 205], [527, 8, 16], [21, 8, 228], [222, 8, 105], [318, 8, 116], [167, 8, 611], [57, 8, 2], [684, 8, 589], [466, 8, 67], [657, 8, 98], [319, 8, 116], [165, 8, 129], [788, 8, 352], [479, 8, 253], [187, 8, 33], [646, 8, 286], [467, 8, 108], [453, 8, 40], [128, 8, 30], [667, 8, 526], [160, 8, 99], [725, 8, 122], [185, 8, 67], [521, 8, 43], [206, 8, 228], [126, 8, 108], [215, 8, 98], [751, 8, 169], [683, 8, 316], [229, 8, 123], [687, 8, 492], [519, 8, 43], [722, 8, 64], [532, 8, 117], [507, 8, 44], [330, 8, 523], [244, 8, 52], [721, 8, 54], [729, 8, 574], [92, 8, 212], [60, 8, 95], [461, 8, 98], [565, 8, 44], [393, 8, 145], [679, 8, 319], [179, 8, 84], [786, 8, 149], [785, 8, 209], [293, 8, 310], [590, 8, 310], [548, 8, 73], [765, 8, 269], [144, 8, 54], [709, 8, 74], [90, 8, 48], [540, 8, 450], [529, 8, 189], [646, 8, 286], [701, 8, 17], [125, 8, 67], [523, 8, 268], [766, 8, 249], [533, 8, 117], [22, 8, 228], [219, 8, 88], [605, 8, 377], [217, 8, 154], [180, 8, 84], [395, 8, 145], [278, 8, 17], [118, 8, 30], [755, 8, 148], [750, 8, 563], [335, 8, 210], [61, 8, 95], [545, 8, 103], [724, 8, 64], [124, 8, 142], [84, 8, 99], [394, 8, 145], [190, 8, 310], [528, 8, 16], [188, 8, 33], [313, 8, 109], [127, 8, 69], [544, 8, 103], [473, 8, 181], [707, 8, 310], [221, 8, 181], [543, 8, 103], [749, 8, 563], [726, 8, 122], [591, 8, 310], [757, 8, 230], [542, 8, 450], [93, 8, 212], [703, 8, 159], [7, 7, 55], [474, 7, 60], [184, 7, 145], [88, 7, 44], [309, 7, 336], [102, 7, 115], [551, 7, 28], [4, 7, 52], [674, 7, 292], [82, 7, 443], [332, 7, 74], [35, 7, 47], [353, 7, 101], [578, 7, 205], [524, 7, 28], [2, 7, 73], [577, 7, 205], [25, 7, 589], [28, 7, 205], [575, 7, 321], [381, 7, 349], [164, 7, 64], [596, 7, 103], [69, 7, 74], [72, 7, 132], [458, 7, 61], [569, 7, 390], [433, 7, 310], [738, 7, 189], [586, 7, 28], [209, 7, 44], [169, 7, 310], [89, 7, 189], [234, 7, 310], [95, 7, 88], [465, 7, 22], [214, 7, 364], [8, 7, 55], [326, 7, 149], [105, 7, 125], [673, 7, 22], [449, 7, 44], [210, 7, 44], [421, 7, 74], [191, 7, 320], [54, 7, 55], [612, 7, 372], [392, 7, 52], [226, 7, 61], [557, 7, 110], [733, 7, 497], [310, 7, 336], [515, 7, 122], [503, 7, 55], [5, 7, 52], [365, 7, 227], [68, 7, 2], [365, 7, 205], [325, 7, 149], [419, 7, 346], [348, 7, 55], [109, 7, 108], [795, 7, 129], [20, 7, 116], [25, 7, 589], [498, 7, 52], [347, 7, 55], [735, 7, 228], [574, 7, 321], [105, 7, 125], [390, 7, 52], [173, 7, 47], [70, 7, 74], [595, 7, 103], [745, 7, 44], [418, 7, 346], [641, 7, 44], [110, 7, 108], [462, 7, 443], [435, 7, 103], [373, 7, 43], [104, 7, 125], [120, 7, 229], [693, 7, 346], [370, 7, 97], [640, 7, 36], [496, 7, 22], [406, 7, 346], [25, 7, 589], [799, 7, 23], [298, 7, 145], [660, 7, 98], [608, 7, 83], [732, 7, 497], [800, 7, 163], [610, 7, 372], [380, 7, 204], [131, 7, 109], [442, 7, 185], [261, 7, 28], [558, 7, 110], [659, 7, 98], [311, 7, 209], [354, 7, 101], [9, 7, 55], [300, 7, 47], [6, 7, 52], [81, 7, 443], [792, 7, 101], [50, 7, 310], [798, 7, 206], [19, 7, 116], [645, 7, 386], [37, 7, 46], [391, 7, 52], [263, 7, 28], [476, 7, 335], [638, 7, 36], [192, 7, 320], [744, 7, 44], [19, 7, 116], [352, 7, 425], [642, 7, 44], [29, 7, 39], [321, 7, 55], [32, 7, 116], [331, 7, 74], [333, 7, 31], [30, 7, 39], [579, 7, 205], [33, 7, 116], [584, 7, 310], [423, 7, 352], [689, 7, 110], [525, 7, 28], [517, 7, 281], [233, 7, 60], [299, 7, 335], [511, 7, 122], [306, 7, 29], [307, 7, 93], [734, 7, 228], [639, 7, 36], [183, 7, 145], [422, 7, 352], [455, 7, 44], [420, 7, 74], [526, 7, 28], [672, 7, 22], [702, 7, 84], [794, 7, 4], [305, 7, 29], [264, 7, 28], [692, 7, 346], [502, 7, 55], [386, 7, 101], [320, 7, 55], [736, 7, 189], [66, 7, 2], [27, 7, 205], [138, 7, 44], [67, 7, 2], [86, 7, 346], [499, 7, 52], [304, 7, 29], [495, 7, 22], [764, 7, 577], [450, 7, 44], [472, 7, 106], [742, 7, 78], [379, 7, 232], [41, 7, 310], [25, 7, 589], [308, 7, 93], [51, 7, 310], [350, 7, 287], [296, 7, 292], [114, 7, 22], [737, 7, 189], [501, 7, 55], [83, 7, 31], [89, 7, 44], [139, 7, 44], [688, 7, 110], [675, 7, 292], [27, 7, 301], [611, 7, 372], [649, 7, 210], [297, 7, 292], [73, 7, 132], [497, 7, 22], [312, 7, 209], [576, 7, 321], [324, 7, 110], [583, 7, 310], [342, 7, 11], [88, 7, 189], [55, 7, 55], [208, 7, 88], [377, 7, 88], [434, 7, 103], [25, 7, 589], [550, 7, 44], [25, 7, 589], [341, 7, 11], [262, 7, 28], [115, 7, 252], [647, 7, 24], [582, 7, 310], [315, 7, 40], [444, 7, 82], [553, 7, 28], [587, 7, 39], [513, 7, 122], [731, 7, 497], [500, 7, 52], [745, 7, 44], [552, 7, 28], [87, 7, 324], [50, 7, 310], [796, 7, 86], [163, 7, 64], [797, 7, 479], [1, 7, 22], [20, 7, 116], [743, 7, 78], [161, 7, 98], [791, 7, 442], [207, 7, 106], [768, 7, 249], [793, 7, 499], [358, 7, 310], [162, 7, 98], [372, 7, 43], [607, 7, 83], [359, 7, 98], [37, 7, 46], [51, 7, 310], [443, 7, 82], [378, 7, 196], [3, 7, 73], [344, 7, 189], [568, 7, 390], [343, 7, 189], [42, 7, 310], [445, 7, 82], [572, 7, 270], [25, 7, 589], [371, 7, 43], [137, 7, 60], [334, 7, 31], [585, 7, 28], [283, 6, 98], [177, 6, 101], [411, 6, 269], [475, 6, 104], [178, 6, 101], [231, 6, 175], [428, 6, 203], [52, 6, 44], [218, 6, 52], [598, 6, 205], [53, 6, 44], [408, 6, 116], [100, 6, 598], [746, 6, 270], [670, 6, 584], [170, 6, 86], [204, 6, 120], [75, 6, 397], [661, 6, 98], [504, 6, 44], [336, 6, 122], [410, 6, 269], [153, 6, 75], [189, 6, 39], [694, 6, 84], [669, 6, 584], [288, 6, 227], [682, 6, 186], [477, 6, 50], [710, 6, 567], [505, 6, 44], [58, 6, 52], [289, 6, 227], [631, 6, 316], [510, 6, 274], [107, 6, 97], [601, 6, 268], [52, 6, 44], [600, 6, 268], [274, 6, 74], [632, 6, 97], [158, 6, 55], [447, 6, 68], [159, 6, 55], [599, 6, 268], [282, 6, 104], [648, 6, 98], [448, 6, 68], [280, 6, 104], [74, 6, 397], [741, 6, 64], [555, 6, 510], [663, 6, 98], [237, 6, 116], [193, 6, 98], [76, 6, 397], [664, 6, 78], [580, 6, 432], [155, 6, 108], [483, 6, 232], [187, 6, 39], [720, 6, 310], [53, 6, 44], [775, 6, 254], [775, 6, 256], [271, 6, 71], [775, 6, 255], [160, 6, 55], [46, 6, 77], [46, 6, 78], [206, 6, 180], [356, 6, 50], [662, 6, 98], [232, 6, 229], [101, 6, 598], [401, 6, 522], [683, 6, 186], [287, 6, 227], [625, 6, 43], [355, 6, 50], [47, 6, 77], [47, 6, 78], [140, 6, 71], [223, 6, 199], [302, 6, 101], [281, 6, 104], [74, 6, 397], [581, 6, 432], [590, 6, 74], [711, 6, 567], [227, 6, 28], [556, 6, 74], [152, 6, 75], [75, 6, 397], [696, 6, 46], [369, 6, 300], [481, 6, 286], [509, 6, 274], [597, 6, 205], [154, 6, 75], [224, 6, 132], [339, 6, 300], [339, 6, 346], [409, 6, 116], [487, 6, 466], [156, 6, 108], [219, 6, 52], [456, 6, 55], [357, 6, 230], [482, 6, 286], [457, 6, 55], [141, 6, 71], [157, 6, 108], [76, 6, 397], [270, 6, 71], [697, 6, 46], [554, 6, 510], [188, 6, 39], [624, 6, 43], [340, 6, 300], [340, 6, 346], [427, 6, 203], [626, 6, 99], [205, 6, 120], [480, 6, 286], [591, 6, 74], [469, 6, 98], [171, 6, 86], [484, 6, 352], [284, 6, 98], [771, 5, 270], [184, 5, 346], [685, 5, 584], [431, 5, 10], [653, 5, 52], [562, 5, 50], [56, 5, 154], [478, 5, 104], [719, 5, 159], [678, 5, 343], [773, 5, 99], [658, 5, 145], [618, 5, 117], [571, 5, 228], [758, 5, 52], [82, 5, 84], [403, 5, 43], [761, 5, 589], [592, 5, 71], [80, 5, 45], [203, 5, 316], [399, 5, 111], [678, 5, 343], [248, 5, 201], [28, 5, 40], [25, 5, 45], [291, 5, 71], [279, 5, 48], [656, 5, 145], [286, 5, 78], [116, 5, 108], [463, 5, 48], [535, 5, 48], [705, 5, 71], [708, 5, 310], [169, 5, 48], [285, 5, 78], [652, 5, 22], [752, 5, 611], [508, 5, 316], [79, 5, 45], [367, 5, 103], [106, 5, 96], [329, 5, 189], [630, 5, 31], [781, 5, 72], [213, 5, 227], [531, 5, 608], [98, 5, 11], [383, 5, 184], [438, 5, 175], [133, 5, 28], [253, 5, 71], [382, 5, 184], [200, 5, 180], [557, 5, 350], [384, 5, 184], [704, 5, 71], [322, 5, 52], [241, 5, 111], [503, 5, 39], [459, 5, 75], [539, 5, 24], [718, 5, 219], [242, 5, 39], [108, 5, 48], [317, 5, 281], [25, 5, 45], [220, 5, 300], [506, 5, 316], [677, 5, 343], [238, 5, 122], [566, 5, 88], [368, 5, 346], [716, 5, 113], [265, 5, 40], [739, 5, 249], [769, 5, 310], [440, 5, 383], [316, 5, 281], [615, 5, 196], [778, 5, 104], [714, 5, 71], [276, 5, 116], [564, 5, 205], [782, 5, 43], [85, 5, 98], [462, 5, 84], [651, 5, 22], [680, 5, 210], [770, 5, 310], [594, 5, 392], [239, 5, 84], [537, 5, 48], [613, 5, 181], [536, 5, 48], [168, 5, 71], [314, 5, 230], [25, 5, 45], [298, 5, 346], [763, 5, 207], [608, 5, 123], [655, 5, 52], [783, 5, 43], [117, 5, 108], [94, 5, 180], [119, 5, 48], [432, 5, 10], [628, 5, 31], [113, 5, 39], [387, 5, 110], [530, 5, 229], [668, 5, 52], [706, 5, 71], [784, 5, 43], [558, 5, 350], [567, 5, 88], [404, 5, 43], [623, 5, 189], [230, 5, 108], [397, 5, 98], [240, 5, 52], [452, 5, 282], [81, 5, 84], [147, 5, 86], [388, 5, 110], [246, 5, 201], [263, 5, 39], [802, 5, 395], [166, 5, 48], [563, 5, 50], [417, 5, 98], [328, 5, 189], [622, 5, 189], [650, 5, 22], [174, 5, 1], [713, 5, 181], [385, 5, 156], [333, 5, 47], [762, 5, 589], [777, 5, 111], [255, 5, 52], [747, 5, 64], [167, 5, 71], [684, 5, 584], [57, 5, 154], [466, 5, 84], [629, 5, 31], [657, 5, 145], [165, 5, 48], [759, 5, 117], [517, 5, 381], [363, 5, 205], [676, 5, 28], [183, 5, 346], [570, 5, 228], [467, 5, 52], [128, 5, 99], [667, 5, 52], [16, 5, 28], [257, 5, 52], [593, 5, 71], [437, 5, 95], [254, 5, 71], [185, 5, 175], [264, 5, 39], [502, 5, 39], [44, 5, 230], [39, 5, 1], [27, 5, 40], [172, 5, 39], [212, 5, 116], [559, 5, 28], [754, 5, 670], [126, 5, 52], [405, 5, 43], [691, 5, 185], [751, 5, 611], [196, 5, 28], [679, 5, 210], [436, 5, 95], [619, 5, 96], [507, 5, 316], [389, 5, 110], [330, 5, 189], [252, 5, 71], [740, 5, 249], [361, 5, 104], [41, 5, 48], [25, 5, 45], [92, 5, 180], [247, 5, 201], [529, 5, 229], [780, 5, 239], [199, 5, 45], [60, 5, 55], [565, 5, 205], [112, 5, 31], [338, 5, 83], [416, 5, 210], [715, 5, 71], [364, 5, 205], [292, 5, 71], [620, 5, 96], [277, 5, 116], [99, 5, 11], [717, 5, 104], [709, 5, 310], [346, 5, 51], [195, 5, 300], [149, 5, 86], [27, 5, 181], [256, 5, 52], [614, 5, 181], [135, 5, 28], [337, 5, 95], [627, 5, 31], [753, 5, 670], [136, 5, 28], [345, 5, 51], [772, 5, 99], [699, 5, 86], [342, 5, 106], [96, 5, 50], [441, 5, 45], [396, 5, 98], [49, 5, 48], [194, 5, 300], [25, 5, 45], [125, 5, 84], [134, 5, 28], [690, 5, 185], [501, 5, 39], [550, 5, 29], [25, 5, 45], [123, 5, 116], [327, 5, 383], [176, 5, 118], [760, 5, 117], [471, 5, 28], [400, 5, 111], [341, 5, 106], [61, 5, 55], [470, 5, 28], [198, 5, 228], [654, 5, 52], [278, 5, 48], [118, 5, 48], [335, 5, 98], [545, 5, 40], [124, 5, 122], [451, 5, 282], [712, 5, 181], [17, 5, 28], [84, 5, 98], [776, 5, 123], [18, 5, 28], [111, 5, 31], [303, 5, 313], [97, 5, 50], [197, 5, 28], [313, 5, 104], [698, 5, 86], [473, 5, 300], [544, 5, 40], [607, 5, 123], [707, 5, 584], [700, 5, 28], [398, 5, 98], [748, 5, 64], [464, 5, 31], [221, 5, 300], [543, 5, 40], [48, 5, 48], [362, 5, 104], [290, 5, 71], [148, 5, 86], [42, 5, 48], [43, 5, 230], [175, 5, 118], [757, 5, 52], [560, 5, 28], [93, 5, 180], [621, 5, 468], [703, 5, 88], [25, 5, 45], [460, 5, 75], [538, 5, 69], [334, 5, 47], [7, 4, 39], [88, 4, 106], [309, 4, 43], [730, 4, 45], [551, 4, 44], [294, 4, 497], [426, 4, 310], [546, 4, 74], [634, 4, 116], [475, 4, 93], [353, 4, 103], [524, 4, 106], [181, 4, 86], [522, 4, 39], [332, 4, 71], [520, 4, 45], [381, 4, 182], [728, 4, 45], [606, 4, 45], [756, 4, 310], [164, 4, 95], [596, 4, 86], [72, 4, 48], [738, 4, 81], [100, 4, 49], [586, 4, 45], [727, 4, 45], [89, 4, 106], [686, 4, 115], [465, 4, 79], [95, 4, 174], [433, 4, 45], [8, 4, 39], [439, 4, 383], [228, 4, 336], [75, 4, 300], [336, 4, 44], [189, 4, 235], [191, 4, 275], [588, 4, 43], [143, 4, 111], [54, 4, 39], [424, 4, 28], [612, 4, 43], [295, 4, 497], [122, 4, 383], [515, 4, 43], [310, 4, 43], [419, 4, 45], [109, 4, 123], [348, 4, 300], [20, 4, 98], [347, 4, 300], [534, 4, 116], [710, 4, 184], [173, 4, 227], [595, 4, 86], [745, 4, 28], [418, 4, 45], [110, 4, 123], [373, 4, 52], [120, 4, 55], [723, 4, 45], [617, 4, 491], [370, 4, 55], [406, 4, 74], [496, 4, 43], [425, 4, 310], [77, 4, 39], [561, 4, 95], [282, 4, 93], [610, 4, 43], [380, 4, 346], [131, 4, 54], [280, 4, 93], [261, 4, 336], [311, 4, 270], [354, 4, 103], [779, 4, 310], [9, 4, 39], [300, 4, 193], [74, 4, 268], [589, 4, 43], [50, 4, 45], [741, 4, 45], [19, 4, 98], [37, 4, 39], [744, 4, 28], [192, 4, 275], [76, 4, 268], [19, 4, 98], [352, 4, 20], [476, 4, 334], [321, 4, 45], [616, 4, 51], [318, 4, 99], [21, 4, 43], [527, 4, 316], [331, 4, 71], [584, 4, 106], [423, 4, 106], [319, 4, 99], [187, 4, 235], [689, 4, 55], [525, 4, 106], [299, 4, 106], [511, 4, 43], [306, 4, 189], [307, 4, 96], [222, 4, 145], [422, 4, 106], [526, 4, 106], [259, 4, 55], [446, 4, 111], [305, 4, 189], [725, 4, 45], [320, 4, 45], [521, 4, 45], [736, 4, 81], [229, 4, 336], [258, 4, 55], [302, 4, 193], [304, 4, 189], [633, 4, 116], [495, 4, 43], [519, 4, 45], [687, 4, 115], [89, 4, 106], [722, 4, 45], [24, 4, 40], [764, 4, 73], [472, 4, 28], [532, 4, 116], [742, 4, 584], [729, 4, 45], [308, 4, 96], [281, 4, 93], [101, 4, 49], [350, 4, 346], [393, 4, 45], [737, 4, 81], [114, 4, 79], [296, 4, 28], [262, 4, 336], [553, 4, 44], [548, 4, 74], [293, 4, 497], [765, 4, 495], [711, 4, 184], [688, 4, 55], [75, 4, 268], [90, 4, 110], [37, 4, 39], [344, 4, 229], [297, 4, 28], [312, 4, 270], [497, 4, 43], [260, 4, 55], [324, 4, 123], [701, 4, 2], [583, 4, 106], [88, 4, 106], [51, 4, 45], [55, 4, 39], [208, 4, 174], [766, 4, 43], [523, 4, 39], [533, 4, 116], [74, 4, 300], [22, 4, 43], [605, 4, 45], [179, 4, 86], [582, 4, 106], [315, 4, 74], [587, 4, 98], [180, 4, 86], [755, 4, 310], [513, 4, 43], [23, 4, 40], [724, 4, 45], [395, 4, 45], [188, 4, 235], [745, 4, 28], [394, 4, 45], [552, 4, 44], [163, 4, 95], [76, 4, 300], [50, 4, 45], [190, 4, 28], [743, 4, 584], [20, 4, 98], [161, 4, 111], [528, 4, 316], [768, 4, 210], [207, 4, 28], [127, 4, 20], [162, 4, 111], [78, 4, 39], [358, 4, 45], [372, 4, 52], [359, 4, 43], [51, 4, 45], [611, 4, 43], [635, 4, 116], [343, 4, 229], [726, 4, 45], [73, 4, 48], [371, 4, 52], [585, 4, 45], [578, 3, 115], [2, 3, 45], [577, 3, 115], [28, 3, 28], [575, 3, 93], [458, 3, 48], [569, 3, 278], [234, 3, 43], [504, 3, 43], [105, 3, 39], [774, 3, 111], [226, 3, 48], [733, 3, 45], [241, 3, 45], [68, 3, 116], [574, 3, 93], [735, 3, 43], [435, 3, 139], [105, 3, 39], [505, 3, 43], [498, 3, 39], [510, 3, 45], [104, 3, 39], [274, 3, 106], [732, 3, 45], [608, 3, 107], [273, 3, 106], [454, 3, 189], [555, 3, 205], [174, 3, 111], [333, 3, 310], [579, 3, 115], [580, 3, 346], [734, 3, 43], [453, 3, 189], [128, 3, 39], [271, 3, 45], [39, 3, 111], [27, 3, 28], [66, 3, 116], [206, 3, 205], [86, 3, 45], [499, 3, 39], [67, 3, 116], [581, 3, 346], [556, 3, 230], [27, 3, 117], [572, 3, 608], [576, 3, 93], [434, 3, 139], [550, 3, 253], [444, 3, 28], [750, 3, 300], [731, 3, 45], [500, 3, 39], [87, 3, 45], [270, 3, 45], [1, 3, 45], [554, 3, 205], [607, 3, 107], [443, 3, 28], [749, 3, 300], [3, 3, 45], [509, 3, 45], [445, 3, 28], [568, 3, 278], [334, 3, 310], [184, 2, 39], [298, 2, 39], [423, 2, 300], [422, 2, 300], [183, 2, 39], [474, 1, 417], [283, 1, 145], [121, 1, 129], [121, 1, 105], [121, 1, 55], [121, 1, 56], [121, 1, 671], [121, 1, 229], [666, 1, 16], [666, 1, 522], [474, 1, 192], [666, 1, 600], [666, 1, 78], [474, 1, 160], [666, 1, 79], [666, 1, 77], [184, 1, 346], [474, 1, 277], [184, 1, 33], [474, 1, 33], [685, 1, 230], [685, 1, 584], [685, 1, 589], [685, 1, 33], [184, 1, 55], [771, 1, 346], [332, 1, 40], [431, 1, 252], [184, 1, 39], [771, 1, 226], [602, 1, 451], [602, 1, 209], [562, 1, 310], [602, 1, 33], [602, 1, 86], [719, 1, 88], [426, 1, 16], [653, 1, 39], [653, 1, 10], [56, 1, 10], [332, 1, 43], [56, 1, 43], [56, 1, 343], [56, 1, 67], [719, 1, 33], [56, 1, 116], [719, 1, 106], [787, 1, 110], [562, 1, 182], [478, 1, 104], [426, 1, 107], [478, 1, 43], [478, 1, 466], [478, 1, 420], [678, 1, 382], [478, 1, 194], [478, 1, 181], [787, 1, 212], [658, 1, 594], [678, 1, 343], [211, 1, 33], [494, 1, 545], [678, 1, 345], [211, 1, 40], [658, 1, 561], [678, 1, 43], [211, 1, 55], [658, 1, 272], [678, 1, 93], [211, 1, 194], [211, 1, 191], [787, 1, 670], [658, 1, 45], [211, 1, 56], [678, 1, 500], [211, 1, 565], [426, 1, 132], [658, 1, 400], [88, 1, 139], [787, 1, 580], [88, 1, 1], [678, 1, 10], [309, 1, 86], [773, 1, 442], [787, 1, 276], [658, 1, 98], [773, 1, 305], [658, 1, 114], [773, 1, 718], [773, 1, 422], [426, 1, 566], [773, 1, 286], [773, 1, 377], [309, 1, 33], [773, 1, 423], [658, 1, 1], [773, 1, 33], [773, 1, 424], [102, 1, 140], [730, 1, 45], [102, 1, 95], [102, 1, 253], [658, 1, 145], [551, 1, 99], [730, 1, 1], [787, 1, 18], [551, 1, 43], [730, 1, 574], [730, 1, 55], [10, 1, 81], [730, 1, 664], [787, 1, 50], [10, 1, 33], [479, 1, 403], [604, 1, 242], [618, 1, 175], [604, 1, 569], [604, 1, 29], [618, 1, 300], [604, 1, 435], [604, 1, 306], [618, 1, 90], [571, 1, 400], [604, 1, 380], [618, 1, 55], [604, 1, 192], [618, 1, 33], [787, 1, 452], [604, 1, 489], [618, 1, 189], [604, 1, 37], [571, 1, 369], [604, 1, 51], [294, 1, 44], [790, 1, 322], [758, 1, 139], [294, 1, 1], [758, 1, 230], [294, 1, 336], [790, 1, 100], [571, 1, 228], [294, 1, 310], [494, 1, 93], [294, 1, 497], [758, 1, 52], [758, 1, 227], [546, 1, 584], [758, 1, 445], [546, 1, 71], [571, 1, 286], [758, 1, 1], [426, 1, 310], [758, 1, 207], [571, 1, 43], [758, 1, 259], [758, 1, 50], [4, 1, 10], [4, 1, 45], [275, 1, 417], [275, 1, 18], [571, 1, 468], [412, 1, 182], [275, 1, 185], [178, 1, 43], [275, 1, 75], [674, 1, 33], [571, 1, 539], [674, 1, 43], [571, 1, 10], [82, 1, 84], [82, 1, 161], [403, 1, 33], [82, 1, 604], [82, 1, 48], [82, 1, 443], [82, 1, 192], [411, 1, 269], [82, 1, 33], [475, 1, 348], [475, 1, 400], [411, 1, 319], [475, 1, 163], [475, 1, 370], [411, 1, 33], [475, 1, 43], [178, 1, 366], [411, 1, 335], [475, 1, 500], [411, 1, 182], [634, 1, 116], [475, 1, 93], [332, 1, 74], [634, 1, 458], [475, 1, 104], [475, 1, 100], [634, 1, 82], [178, 1, 101], [761, 1, 150], [592, 1, 346], [203, 1, 33], [592, 1, 145], [634, 1, 44], [80, 1, 33], [80, 1, 110], [80, 1, 505], [80, 1, 174], [178, 1, 100], [203, 1, 93], [203, 1, 385], [494, 1, 98], [80, 1, 281], [428, 1, 361], [178, 1, 403], [80, 1, 45], [203, 1, 310], [203, 1, 384], [35, 1, 1], [203, 1, 45], [52, 1, 45], [578, 1, 115], [35, 1, 45], [35, 1, 574], [35, 1, 671], [578, 1, 149], [35, 1, 227], [178, 1, 64], [231, 1, 45], [231, 1, 111], [231, 1, 316], [231, 1, 33], [547, 1, 74], [52, 1, 10], [428, 1, 111], [353, 1, 282], [578, 1, 289], [236, 1, 270], [236, 1, 33], [236, 1, 252], [236, 1, 193], [578, 1, 205], [524, 1, 33], [428, 1, 216], [547, 1, 72], [218, 1, 281], [218, 1, 123], [399, 1, 45], [547, 1, 73], [678, 1, 212], [38, 1, 53], [38, 1, 109], [38, 1, 98], [38, 1, 417], [38, 1, 286], [38, 1, 219], [547, 1, 178], [399, 1, 33], [2, 1, 45], [428, 1, 1], [678, 1, 343], [2, 1, 73], [2, 1, 33], [245, 1, 61], [598, 1, 438], [245, 1, 329], [245, 1, 240], [678, 1, 270], [245, 1, 43], [245, 1, 44], [678, 1, 43], [248, 1, 201], [248, 1, 423], [248, 1, 44], [248, 1, 424], [598, 1, 33], [248, 1, 422], [598, 1, 106], [248, 1, 43], [177, 1, 64], [332, 1, 194], [678, 1, 93], [598, 1, 431], [598, 1, 174], [248, 1, 103], [598, 1, 205], [181, 1, 33], [577, 1, 149], [428, 1, 277], [678, 1, 501], [181, 1, 406], [181, 1, 569], [181, 1, 86], [522, 1, 98], [678, 1, 10], [381, 1, 270], [181, 1, 84], [181, 1, 9], [181, 1, 192], [493, 1, 363], [493, 1, 322], [493, 1, 69], [28, 1, 111], [493, 1, 386], [428, 1, 563], [381, 1, 377], [181, 1, 602], [267, 1, 16], [181, 1, 45], [181, 1, 7], [381, 1, 149], [28, 1, 306], [291, 1, 104], [25, 1, 84], [291, 1, 450], [28, 1, 40], [291, 1, 103], [28, 1, 10], [381, 1, 262], [291, 1, 71], [291, 1, 210], [25, 1, 39], [428, 1, 150], [291, 1, 28], [28, 1, 28], [291, 1, 106], [291, 1, 10], [575, 1, 1], [575, 1, 93], [575, 1, 321], [428, 1, 193], [520, 1, 16], [575, 1, 589], [53, 1, 583], [53, 1, 45], [520, 1, 45], [53, 1, 129], [381, 1, 219], [53, 1, 415], [520, 1, 98], [53, 1, 511], [53, 1, 252], [53, 1, 44], [520, 1, 43], [53, 1, 10], [708, 1, 109], [332, 1, 71], [279, 1, 45], [728, 1, 1], [728, 1, 55], [606, 1, 45], [366, 1, 55], [756, 1, 275], [756, 1, 310], [428, 1, 340], [366, 1, 128], [279, 1, 366], [756, 1, 148], [756, 1, 71], [606, 1, 377], [606, 1, 93], [164, 1, 143], [366, 1, 250], [279, 1, 487], [164, 1, 95], [606, 1, 472], [164, 1, 45], [332, 1, 279], [428, 1, 243], [366, 1, 334], [279, 1, 17], [606, 1, 357], [164, 1, 138], [606, 1, 485], [164, 1, 33], [279, 1, 346], [606, 1, 678], [164, 1, 193], [279, 1, 55], [286, 1, 33], [408, 1, 43], [286, 1, 183], [408, 1, 29], [279, 1, 542], [332, 1, 596], [656, 1, 45], [286, 1, 73], [656, 1, 1], [279, 1, 56], [279, 1, 182], [286, 1, 71], [286, 1, 78], [116, 1, 145], [69, 1, 22], [596, 1, 86], [596, 1, 81], [129, 1, 150], [72, 1, 40], [596, 1, 71], [596, 1, 564], [596, 1, 169], [100, 1, 268], [492, 1, 74], [463, 1, 122], [146, 1, 52], [146, 1, 17], [463, 1, 438], [463, 1, 378], [609, 1, 109], [458, 1, 33], [609, 1, 220], [458, 1, 145], [609, 1, 506], [569, 1, 139], [609, 1, 481], [569, 1, 390], [100, 1, 33], [609, 1, 123], [738, 1, 81], [26, 1, 84], [738, 1, 85], [569, 1, 1], [26, 1, 98], [738, 1, 403], [569, 1, 278], [26, 1, 85], [738, 1, 11], [535, 1, 45], [26, 1, 39], [738, 1, 268], [209, 1, 33], [535, 1, 145], [738, 1, 44], [209, 1, 204], [586, 1, 532], [586, 1, 224], [738, 1, 189], [586, 1, 45], [209, 1, 423], [586, 1, 293], [586, 1, 28], [586, 1, 33], [705, 1, 71], [89, 1, 139], [89, 1, 106], [89, 1, 1], [209, 1, 424], [705, 1, 33], [89, 1, 599], [727, 1, 45], [209, 1, 184], [705, 1, 145], [89, 1, 189], [686, 1, 132], [209, 1, 422], [686, 1, 64], [169, 1, 310], [746, 1, 45], [746, 1, 55], [209, 1, 39], [234, 1, 33], [214, 1, 33], [234, 1, 382], [727, 1, 122], [686, 1, 33], [214, 1, 203], [214, 1, 400], [95, 1, 33], [670, 1, 22], [670, 1, 584], [95, 1, 20], [727, 1, 663], [95, 1, 106], [670, 1, 33], [169, 1, 48], [214, 1, 292], [465, 1, 132], [727, 1, 52], [214, 1, 43], [465, 1, 275], [465, 1, 335], [95, 1, 300], [8, 1, 33], [214, 1, 331], [169, 1, 103], [8, 1, 55], [169, 1, 71], [8, 1, 39], [214, 1, 30], [285, 1, 71], [170, 1, 48], [285, 1, 33], [169, 1, 440], [170, 1, 145], [439, 1, 112], [433, 1, 35], [439, 1, 93], [439, 1, 321], [243, 1, 435], [169, 1, 44], [228, 1, 52], [228, 1, 43], [132, 1, 144], [243, 1, 43], [204, 1, 33], [243, 1, 326], [204, 1, 182], [243, 1, 44], [75, 1, 33], [652, 1, 33], [75, 1, 111], [652, 1, 22], [652, 1, 364], [75, 1, 397], [75, 1, 300], [652, 1, 302], [752, 1, 611], [752, 1, 469], [752, 1, 450], [652, 1, 359], [752, 1, 487], [652, 1, 205], [752, 1, 145], [284, 1, 98], [284, 1, 483], [652, 1, 187], [752, 1, 169], [494, 1, 510], [122, 1, 112], [727, 1, 10], [106, 1, 370], [652, 1, 45], [661, 1, 45], [106, 1, 24], [652, 1, 596], [661, 1, 33], [508, 1, 422], [727, 1, 339], [106, 1, 179], [508, 1, 43], [326, 1, 149], [508, 1, 316], [326, 1, 150], [508, 1, 423], [106, 1, 27], [508, 1, 33], [326, 1, 60], [326, 1, 316], [326, 1, 562], [326, 1, 298], [727, 1, 675], [79, 1, 33], [508, 1, 44], [106, 1, 25], [79, 1, 174], [508, 1, 424], [79, 1, 281], [106, 1, 26], [105, 1, 125], [105, 1, 45], [367, 1, 44], [106, 1, 96], [367, 1, 250], [504, 1, 33], [105, 1, 172], [329, 1, 185], [329, 1, 117], [329, 1, 28], [106, 1, 279], [329, 1, 225], [105, 1, 39], [329, 1, 49], [630, 1, 16], [630, 1, 413], [336, 1, 35], [122, 1, 93], [272, 1, 72], [210, 1, 33], [630, 1, 119], [336, 1, 207], [410, 1, 33], [673, 1, 22], [210, 1, 204], [410, 1, 182], [673, 1, 332], [673, 1, 74], [272, 1, 310], [630, 1, 365], [630, 1, 198], [673, 1, 39], [673, 1, 33], [210, 1, 423], [449, 1, 28], [673, 1, 89], [449, 1, 33], [272, 1, 267], [774, 1, 33], [153, 1, 45], [781, 1, 74], [781, 1, 310], [630, 1, 31], [781, 1, 415], [272, 1, 45], [630, 1, 43], [781, 1, 71], [153, 1, 75], [210, 1, 424], [781, 1, 229], [153, 1, 33], [189, 1, 235], [122, 1, 385], [266, 1, 106], [210, 1, 184], [630, 1, 18], [153, 1, 77], [213, 1, 110], [189, 1, 39], [189, 1, 33], [213, 1, 132], [189, 1, 150], [210, 1, 422], [288, 1, 10], [421, 1, 234], [421, 1, 74], [213, 1, 117], [421, 1, 80], [213, 1, 205], [708, 1, 33], [288, 1, 179], [421, 1, 73], [421, 1, 33], [210, 1, 200], [288, 1, 253], [694, 1, 1], [288, 1, 116], [213, 1, 564], [694, 1, 39], [516, 1, 122], [669, 1, 22], [516, 1, 503], [133, 1, 45], [516, 1, 43], [516, 1, 154], [669, 1, 33], [288, 1, 227], [531, 1, 1], [646, 1, 196], [210, 1, 39], [531, 1, 387], [531, 1, 270], [646, 1, 82], [531, 1, 304], [191, 1, 74], [531, 1, 589], [98, 1, 145], [531, 1, 45], [98, 1, 300], [53, 1, 252], [494, 1, 116], [424, 1, 10], [682, 1, 230], [531, 1, 581], [682, 1, 584], [588, 1, 64], [191, 1, 71], [383, 1, 246], [383, 1, 341], [54, 1, 346], [54, 1, 10], [133, 1, 343], [143, 1, 33], [479, 1, 56], [253, 1, 1], [612, 1, 200], [253, 1, 43], [612, 1, 372], [133, 1, 270], [424, 1, 28], [612, 1, 43], [612, 1, 82], [612, 1, 10], [253, 1, 98], [438, 1, 313], [122, 1, 469], [424, 1, 530], [392, 1, 394], [392, 1, 370], [392, 1, 183], [438, 1, 383], [392, 1, 10], [226, 1, 33], [392, 1, 52], [226, 1, 48], [392, 1, 43], [226, 1, 61], [424, 1, 310], [226, 1, 355], [392, 1, 269], [226, 1, 145], [226, 1, 331], [226, 1, 324], [253, 1, 71], [226, 1, 60], [253, 1, 210], [142, 1, 423], [122, 1, 384], [133, 1, 39], [424, 1, 39], [142, 1, 44], [142, 1, 424], [142, 1, 48], [142, 1, 17], [142, 1, 184], [142, 1, 422], [382, 1, 246], [142, 1, 442], [382, 1, 352], [133, 1, 33], [295, 1, 242], [295, 1, 423], [295, 1, 44], [295, 1, 424], [295, 1, 1], [503, 1, 224], [295, 1, 586], [295, 1, 422], [733, 1, 64], [295, 1, 336], [295, 1, 310], [733, 1, 45], [295, 1, 497], [557, 1, 210], [733, 1, 690], [200, 1, 149], [200, 1, 45], [733, 1, 497], [733, 1, 350], [733, 1, 249], [384, 1, 239], [310, 1, 86], [310, 1, 336], [310, 1, 604], [515, 1, 10], [503, 1, 346], [515, 1, 589], [322, 1, 45], [310, 1, 43], [322, 1, 33], [704, 1, 33], [310, 1, 33], [122, 1, 501], [704, 1, 145], [310, 1, 424], [241, 1, 33], [503, 1, 55], [151, 1, 144], [151, 1, 1], [459, 1, 43], [503, 1, 39], [151, 1, 513], [459, 1, 181], [477, 1, 8], [477, 1, 248], [477, 1, 20], [503, 1, 33], [5, 1, 10], [477, 1, 43], [365, 1, 45], [365, 1, 242], [477, 1, 9], [365, 1, 111], [477, 1, 356], [477, 1, 310], [477, 1, 50], [5, 1, 52], [365, 1, 423], [477, 1, 101], [477, 1, 7], [365, 1, 207], [477, 1, 325], [68, 1, 2], [53, 1, 415], [5, 1, 45], [365, 1, 55], [68, 1, 43], [68, 1, 67], [68, 1, 469], [109, 1, 139], [365, 1, 181], [68, 1, 116], [68, 1, 70], [419, 1, 45], [503, 1, 163], [419, 1, 242], [718, 1, 137], [718, 1, 523], [718, 1, 225], [718, 1, 44], [419, 1, 98], [242, 1, 111], [419, 1, 346], [539, 1, 116], [419, 1, 423], [242, 1, 1], [242, 1, 45], [539, 1, 43], [419, 1, 49], [242, 1, 38], [109, 1, 33], [108, 1, 122], [348, 1, 106], [348, 1, 10], [539, 1, 117], [348, 1, 55], [348, 1, 300], [317, 1, 139], [317, 1, 1], [317, 1, 599], [317, 1, 378], [518, 1, 381], [317, 1, 441], [25, 1, 84], [518, 1, 95], [317, 1, 124], [518, 1, 111], [317, 1, 281], [518, 1, 60], [518, 1, 678], [317, 1, 34], [325, 1, 150], [479, 1, 315], [20, 1, 184], [795, 1, 24], [795, 1, 43], [795, 1, 501], [20, 1, 98], [795, 1, 67], [122, 1, 345], [795, 1, 229], [539, 1, 249], [20, 1, 116], [795, 1, 483], [20, 1, 39], [20, 1, 33], [20, 1, 14], [643, 1, 82], [643, 1, 424], [506, 1, 43], [25, 1, 39], [220, 1, 316], [506, 1, 33], [220, 1, 33], [28, 1, 368], [28, 1, 111], [28, 1, 232], [28, 1, 301], [28, 1, 333], [28, 1, 556], [28, 1, 163], [677, 1, 43], [347, 1, 106], [238, 1, 1], [347, 1, 10], [534, 1, 116], [534, 1, 43], [534, 1, 1], [677, 1, 10], [534, 1, 117], [574, 1, 1], [716, 1, 275], [368, 1, 93], [368, 1, 250], [122, 1, 581], [710, 1, 109], [710, 1, 310], [716, 1, 505], [710, 1, 271], [716, 1, 312], [566, 1, 98], [735, 1, 228], [289, 1, 374], [716, 1, 36], [735, 1, 43], [681, 1, 442], [681, 1, 332], [735, 1, 28], [681, 1, 425], [735, 1, 33], [566, 1, 17], [681, 1, 400], [681, 1, 588], [681, 1, 228], [681, 1, 533], [105, 1, 125], [566, 1, 43], [681, 1, 475], [681, 1, 457], [681, 1, 379], [681, 1, 210], [105, 1, 29], [681, 1, 14], [105, 1, 45], [289, 1, 10], [681, 1, 334], [681, 1, 163], [105, 1, 39], [265, 1, 81], [265, 1, 33], [440, 1, 1], [739, 1, 145], [53, 1, 45], [435, 1, 139], [316, 1, 1], [390, 1, 10], [440, 1, 204], [390, 1, 43], [70, 1, 22], [173, 1, 204], [145, 1, 84], [173, 1, 1], [615, 1, 329], [70, 1, 35], [615, 1, 400], [435, 1, 53], [778, 1, 310], [615, 1, 420], [145, 1, 64], [70, 1, 74], [615, 1, 20], [615, 1, 159], [615, 1, 229], [778, 1, 383], [778, 1, 150], [289, 1, 359], [778, 1, 10], [778, 1, 452], [249, 1, 18], [249, 1, 311], [595, 1, 81], [15, 1, 31], [15, 1, 41], [595, 1, 71], [564, 1, 110], [595, 1, 169], [289, 1, 281], [714, 1, 48], [714, 1, 103], [505, 1, 33], [714, 1, 33], [505, 1, 44], [745, 1, 43], [505, 1, 109], [745, 1, 269], [745, 1, 28], [745, 1, 33], [745, 1, 44], [745, 1, 179], [505, 1, 43], [745, 1, 68], [58, 1, 44], [289, 1, 386], [564, 1, 117], [505, 1, 67], [564, 1, 55], [505, 1, 563], [58, 1, 46], [289, 1, 207], [631, 1, 33], [276, 1, 64], [276, 1, 45], [631, 1, 122], [631, 1, 468], [418, 1, 49], [641, 1, 359], [641, 1, 16], [641, 1, 253], [435, 1, 116], [373, 1, 44], [641, 1, 310], [631, 1, 510], [641, 1, 207], [641, 1, 37], [373, 1, 424], [110, 1, 139], [641, 1, 542], [85, 1, 99], [289, 1, 227], [85, 1, 161], [782, 1, 33], [85, 1, 64], [110, 1, 458], [85, 1, 45], [85, 1, 98], [110, 1, 123], [110, 1, 33], [462, 1, 84], [462, 1, 161], [462, 1, 604], [462, 1, 48], [462, 1, 112], [110, 1, 108], [462, 1, 243], [430, 1, 400], [462, 1, 602], [462, 1, 443], [289, 1, 303], [373, 1, 52], [430, 1, 310], [651, 1, 22], [462, 1, 192], [462, 1, 33], [373, 1, 99], [430, 1, 228], [651, 1, 302], [430, 1, 114], [693, 1, 399], [373, 1, 422], [430, 1, 17], [651, 1, 45], [680, 1, 210], [680, 1, 33], [680, 1, 14], [430, 1, 389], [594, 1, 469], [594, 1, 589], [373, 1, 43], [770, 1, 310], [594, 1, 270], [594, 1, 1], [594, 1, 346], [770, 1, 71], [594, 1, 56], [284, 1, 230], [284, 1, 405], [360, 1, 150], [770, 1, 28], [594, 1, 361], [435, 1, 103], [665, 1, 106], [373, 1, 19], [770, 1, 106], [665, 1, 182], [360, 1, 204], [239, 1, 98], [239, 1, 43], [360, 1, 227], [510, 1, 274], [510, 1, 45], [107, 1, 68], [323, 1, 284], [107, 1, 370], [373, 1, 525], [323, 1, 45], [107, 1, 183], [323, 1, 157], [107, 1, 228], [107, 1, 4], [107, 1, 264], [510, 1, 28], [107, 1, 279], [107, 1, 97], [373, 1, 182], [323, 1, 116], [537, 1, 496], [510, 1, 10], [537, 1, 45], [323, 1, 52], [537, 1, 48], [498, 1, 33], [13, 1, 40], [13, 1, 81], [537, 1, 145], [537, 1, 51], [613, 1, 45], [323, 1, 90], [323, 1, 33], [120, 1, 33], [120, 1, 106], [59, 1, 422], [693, 1, 11], [59, 1, 316], [59, 1, 44], [59, 1, 424], [59, 1, 46], [536, 1, 496], [536, 1, 45], [168, 1, 132], [536, 1, 48], [693, 1, 396], [168, 1, 81], [536, 1, 145], [314, 1, 33], [168, 1, 40], [601, 1, 84], [168, 1, 116], [168, 1, 450], [693, 1, 505], [601, 1, 674], [168, 1, 565], [314, 1, 589], [168, 1, 71], [723, 1, 64], [723, 1, 670], [601, 1, 11], [723, 1, 45], [168, 1, 14], [601, 1, 268], [168, 1, 599], [723, 1, 33], [767, 1, 522], [767, 1, 28], [617, 1, 594], [104, 1, 45], [601, 1, 602], [617, 1, 104], [617, 1, 98], [617, 1, 515], [617, 1, 71], [617, 1, 491], [617, 1, 384], [601, 1, 544], [640, 1, 24], [640, 1, 98], [693, 1, 346], [640, 1, 345], [370, 1, 33], [640, 1, 43], [640, 1, 370], [640, 1, 348], [370, 1, 204], [693, 1, 55], [25, 1, 84], [496, 1, 22], [406, 1, 71], [25, 1, 39], [435, 1, 10], [693, 1, 150], [52, 1, 10], [600, 1, 84], [600, 1, 11], [496, 1, 35], [600, 1, 268], [425, 1, 107], [600, 1, 544], [52, 1, 45], [799, 1, 562], [799, 1, 254], [799, 1, 469], [425, 1, 132], [799, 1, 256], [496, 1, 43], [298, 1, 55], [799, 1, 82], [298, 1, 150], [799, 1, 44], [274, 1, 1], [274, 1, 75], [693, 1, 406], [496, 1, 33], [158, 1, 10], [632, 1, 12], [632, 1, 11], [632, 1, 210], [158, 1, 43], [632, 1, 28], [632, 1, 319], [632, 1, 44], [660, 1, 33], [660, 1, 43], [660, 1, 563], [77, 1, 45], [660, 1, 359], [660, 1, 14], [660, 1, 523], [660, 1, 97], [447, 1, 203], [447, 1, 98], [77, 1, 33], [447, 1, 193], [64, 1, 134], [250, 1, 18], [64, 1, 93], [561, 1, 16], [113, 1, 111], [468, 1, 245], [64, 1, 100], [250, 1, 311], [763, 1, 75], [763, 1, 3], [763, 1, 207], [468, 1, 143], [732, 1, 64], [763, 1, 688], [763, 1, 150], [763, 1, 229], [468, 1, 495], [541, 1, 81], [561, 1, 357], [541, 1, 450], [541, 1, 75], [541, 1, 33], [541, 1, 320], [800, 1, 451], [541, 1, 182], [800, 1, 234], [468, 1, 396], [732, 1, 45], [608, 1, 310], [608, 1, 52], [608, 1, 107], [468, 1, 403], [800, 1, 236], [608, 1, 123], [800, 1, 93], [800, 1, 429], [62, 1, 61], [800, 1, 232], [273, 1, 117], [159, 1, 10], [62, 1, 66], [732, 1, 497], [282, 1, 361], [159, 1, 43], [113, 1, 1], [732, 1, 350], [159, 1, 55], [769, 1, 71], [34, 1, 40], [282, 1, 500], [599, 1, 11], [732, 1, 249], [62, 1, 509], [282, 1, 93], [282, 1, 104], [62, 1, 95], [282, 1, 585], [62, 1, 3], [282, 1, 100], [610, 1, 10], [282, 1, 45], [117, 1, 43], [655, 1, 248], [94, 1, 122], [282, 1, 581], [655, 1, 10], [655, 1, 52], [476, 1, 161], [117, 1, 55], [655, 1, 595], [655, 1, 272], [655, 1, 336], [655, 1, 247], [117, 1, 56], [783, 1, 475], [655, 1, 415], [655, 1, 39], [117, 1, 145], [783, 1, 327], [380, 1, 361], [783, 1, 43], [783, 1, 117], [380, 1, 270], [783, 1, 33], [117, 1, 108], [380, 1, 273], [380, 1, 149], [783, 1, 182], [380, 1, 219], [119, 1, 224], [119, 1, 64], [442, 1, 109], [119, 1, 398], [119, 1, 48], [432, 1, 45], [94, 1, 180], [442, 1, 425], [119, 1, 346], [442, 1, 228], [119, 1, 39], [94, 1, 95], [432, 1, 207], [131, 1, 55], [442, 1, 180], [432, 1, 252], [131, 1, 47], [432, 1, 10], [131, 1, 45], [476, 1, 393], [113, 1, 45], [628, 1, 413], [628, 1, 64], [628, 1, 276], [628, 1, 17], [628, 1, 31], [442, 1, 174], [628, 1, 43], [628, 1, 37], [530, 1, 32], [644, 1, 422], [628, 1, 18], [530, 1, 300], [648, 1, 93], [34, 1, 224], [476, 1, 356], [648, 1, 98], [644, 1, 82], [648, 1, 496], [648, 1, 47], [94, 1, 325], [448, 1, 673], [387, 1, 33], [448, 1, 197], [216, 1, 374], [216, 1, 122], [530, 1, 189], [216, 1, 10], [530, 1, 10], [216, 1, 343], [216, 1, 608], [448, 1, 98], [216, 1, 313], [113, 1, 38], [530, 1, 563], [448, 1, 396], [448, 1, 193], [668, 1, 63], [448, 1, 232], [530, 1, 229], [668, 1, 52], [668, 1, 43], [706, 1, 200], [668, 1, 33], [706, 1, 401], [668, 1, 526], [34, 1, 24], [706, 1, 71], [280, 1, 45], [706, 1, 364], [706, 1, 33], [485, 1, 442], [706, 1, 145], [784, 1, 691], [354, 1, 180], [706, 1, 182], [784, 1, 475], [784, 1, 327], [784, 1, 43], [784, 1, 117], [485, 1, 257], [349, 1, 150], [784, 1, 33], [784, 1, 182], [354, 1, 566], [485, 1, 246], [784, 1, 187], [476, 1, 469], [659, 1, 97], [311, 1, 86], [261, 1, 33], [311, 1, 98], [311, 1, 609], [485, 1, 463], [311, 1, 589], [558, 1, 110], [354, 1, 103], [558, 1, 504], [311, 1, 45], [485, 1, 83], [558, 1, 28], [558, 1, 350], [659, 1, 43], [485, 1, 414], [454, 1, 40], [567, 1, 88], [454, 1, 310], [454, 1, 189], [354, 1, 101], [567, 1, 98], [779, 1, 55], [567, 1, 17], [9, 1, 430], [9, 1, 33], [476, 1, 602], [230, 1, 43], [567, 1, 43], [9, 1, 110], [354, 1, 282], [230, 1, 281], [9, 1, 55], [230, 1, 55], [9, 1, 39], [623, 1, 111], [659, 1, 33], [230, 1, 56], [623, 1, 1], [230, 1, 145], [404, 1, 43], [623, 1, 484], [623, 1, 310], [404, 1, 33], [623, 1, 667], [623, 1, 189], [300, 1, 33], [397, 1, 45], [230, 1, 108], [397, 1, 98], [397, 1, 33], [452, 1, 423], [300, 1, 252], [452, 1, 44], [74, 1, 111], [300, 1, 45], [452, 1, 424], [74, 1, 33], [6, 1, 394], [476, 1, 443], [240, 1, 43], [300, 1, 39], [6, 1, 17], [6, 1, 10], [452, 1, 40], [251, 1, 105], [6, 1, 52], [6, 1, 421], [6, 1, 337], [6, 1, 403], [452, 1, 422], [6, 1, 45], [251, 1, 215], [6, 1, 257], [251, 1, 93], [589, 1, 64], [589, 1, 38], [452, 1, 43], [251, 1, 73], [589, 1, 41], [357, 1, 16], [769, 1, 106], [589, 1, 565], [589, 1, 43], [589, 1, 501], [792, 1, 714], [240, 1, 123], [792, 1, 95], [452, 1, 282], [81, 1, 48], [792, 1, 93], [81, 1, 33], [147, 1, 43], [792, 1, 322], [792, 1, 100], [388, 1, 110], [147, 1, 35], [50, 1, 28], [50, 1, 10], [798, 1, 314], [798, 1, 410], [34, 1, 116], [798, 1, 210], [741, 1, 1], [798, 1, 432], [388, 1, 71], [798, 1, 533], [663, 1, 413], [388, 1, 33], [798, 1, 15], [663, 1, 64], [555, 1, 359], [555, 1, 99], [663, 1, 45], [555, 1, 510], [555, 1, 33], [663, 1, 98], [645, 1, 359], [555, 1, 205], [663, 1, 52], [663, 1, 394], [645, 1, 200], [663, 1, 33], [237, 1, 370], [37, 1, 181], [391, 1, 183], [237, 1, 197], [391, 1, 10], [391, 1, 52], [645, 1, 286], [391, 1, 43], [19, 1, 39], [237, 1, 27], [34, 1, 64], [476, 1, 33], [237, 1, 228], [19, 1, 33], [237, 1, 98], [645, 1, 90], [237, 1, 283], [246, 1, 43], [246, 1, 44], [645, 1, 335], [237, 1, 116], [744, 1, 43], [150, 1, 673], [237, 1, 279], [269, 1, 16], [645, 1, 317], [150, 1, 93], [150, 1, 149], [150, 1, 219], [150, 1, 50], [645, 1, 341], [263, 1, 33], [76, 1, 397], [193, 1, 33], [263, 1, 45], [193, 1, 193], [45, 1, 78], [45, 1, 72], [45, 1, 312], [45, 1, 77], [638, 1, 368], [638, 1, 24], [192, 1, 74], [638, 1, 98], [76, 1, 111], [638, 1, 43], [744, 1, 33], [638, 1, 370], [638, 1, 232], [802, 1, 425], [192, 1, 1], [802, 1, 8], [192, 1, 71], [802, 1, 673], [802, 1, 228], [76, 1, 268], [802, 1, 372], [802, 1, 7], [802, 1, 9], [192, 1, 579], [802, 1, 409], [802, 1, 68], [476, 1, 335], [642, 1, 359], [76, 1, 33], [642, 1, 84], [166, 1, 129], [642, 1, 253], [166, 1, 48], [642, 1, 310], [166, 1, 33], [76, 1, 484], [19, 1, 33], [642, 1, 417], [53, 1, 129], [357, 1, 43], [642, 1, 207], [19, 1, 39], [563, 1, 184], [642, 1, 37], [563, 1, 310], [417, 1, 45], [563, 1, 114], [352, 1, 122], [563, 1, 50], [563, 1, 182], [664, 1, 81], [664, 1, 33], [328, 1, 185], [328, 1, 117], [29, 1, 10], [328, 1, 28], [29, 1, 45], [417, 1, 117], [328, 1, 44], [622, 1, 111], [622, 1, 310], [352, 1, 10], [622, 1, 1], [321, 1, 568], [321, 1, 45], [321, 1, 487], [616, 1, 71], [476, 1, 334], [321, 1, 55], [650, 1, 22], [352, 1, 168], [321, 1, 150], [650, 1, 45], [321, 1, 484], [385, 1, 273], [713, 1, 242], [321, 1, 205], [713, 1, 34], [385, 1, 93], [174, 1, 204], [713, 1, 33], [713, 1, 106], [713, 1, 130], [713, 1, 44], [352, 1, 310], [174, 1, 47], [222, 1, 33], [713, 1, 181], [713, 1, 334], [21, 1, 64], [21, 1, 45], [527, 1, 93], [32, 1, 43], [255, 1, 10], [32, 1, 64], [331, 1, 40], [331, 1, 43], [333, 1, 64], [352, 1, 39], [333, 1, 45], [579, 1, 149], [30, 1, 45], [30, 1, 10], [413, 1, 368], [579, 1, 289], [415, 1, 230], [413, 1, 450], [415, 1, 16], [413, 1, 389], [413, 1, 33], [579, 1, 205], [413, 1, 182], [318, 1, 43], [413, 1, 483], [762, 1, 589], [777, 1, 84], [762, 1, 75], [762, 1, 3], [777, 1, 33], [579, 1, 115], [33, 1, 64], [579, 1, 146], [762, 1, 150], [762, 1, 229], [33, 1, 43], [584, 1, 253], [747, 1, 40], [584, 1, 329], [584, 1, 573], [584, 1, 310], [584, 1, 333], [584, 1, 106], [584, 1, 311], [11, 1, 106], [580, 1, 55], [167, 1, 132], [167, 1, 81], [318, 1, 44], [155, 1, 43], [57, 1, 374], [167, 1, 40], [57, 1, 10], [57, 1, 99], [684, 1, 230], [57, 1, 43], [57, 1, 67], [629, 1, 16], [684, 1, 33], [155, 1, 33], [57, 1, 515], [423, 1, 300], [423, 1, 352], [423, 1, 106], [57, 1, 116], [423, 1, 189], [466, 1, 569], [466, 1, 43], [319, 1, 44], [466, 1, 84], [319, 1, 400], [466, 1, 67], [319, 1, 163], [466, 1, 98], [466, 1, 604], [466, 1, 7], [222, 1, 106], [319, 1, 99], [233, 1, 176], [319, 1, 43], [657, 1, 45], [629, 1, 43], [319, 1, 364], [233, 1, 111], [657, 1, 1], [657, 1, 145], [319, 1, 116], [165, 1, 33], [788, 1, 110], [788, 1, 212], [689, 1, 130], [759, 1, 43], [689, 1, 10], [689, 1, 444], [689, 1, 28], [788, 1, 54], [689, 1, 55], [788, 1, 581], [759, 1, 33], [429, 1, 408], [689, 1, 504], [788, 1, 585], [429, 1, 180], [429, 1, 149], [429, 1, 566], [525, 1, 29], [429, 1, 381], [525, 1, 408], [233, 1, 192], [788, 1, 114], [429, 1, 595], [525, 1, 28], [429, 1, 310], [525, 1, 33], [429, 1, 45], [525, 1, 106], [233, 1, 160], [788, 1, 505], [429, 1, 345], [363, 1, 45], [517, 1, 111], [363, 1, 111], [517, 1, 149], [233, 1, 277], [788, 1, 55], [233, 1, 33], [299, 1, 33], [363, 1, 55], [306, 1, 33], [363, 1, 181], [479, 1, 109], [479, 1, 84], [676, 1, 45], [479, 1, 86], [306, 1, 106], [676, 1, 33], [479, 1, 310], [479, 1, 435], [483, 1, 184], [483, 1, 225], [479, 1, 268], [479, 1, 271], [268, 1, 106], [511, 1, 589], [306, 1, 29], [511, 1, 10], [183, 1, 33], [720, 1, 502], [720, 1, 93], [306, 1, 189], [570, 1, 43], [720, 1, 194], [720, 1, 271], [570, 1, 10], [720, 1, 593], [646, 1, 196], [307, 1, 117], [639, 1, 24], [639, 1, 479], [639, 1, 98], [646, 1, 82], [639, 1, 43], [639, 1, 370], [455, 1, 74], [183, 1, 55], [422, 1, 189], [455, 1, 20], [467, 1, 52], [467, 1, 43], [420, 1, 234], [734, 1, 33], [467, 1, 123], [662, 1, 45], [255, 1, 45], [187, 1, 150], [467, 1, 9], [467, 1, 108], [420, 1, 33], [453, 1, 310], [128, 1, 33], [775, 1, 111], [526, 1, 29], [526, 1, 408], [526, 1, 28], [526, 1, 33], [526, 1, 106], [271, 1, 310], [259, 1, 33], [775, 1, 205], [259, 1, 55], [667, 1, 43], [794, 1, 8], [667, 1, 33], [794, 1, 612], [259, 1, 189], [259, 1, 45], [259, 1, 341], [702, 1, 39], [702, 1, 33], [160, 1, 10], [305, 1, 29], [794, 1, 116], [160, 1, 99], [16, 1, 33], [160, 1, 43], [257, 1, 299], [257, 1, 394], [160, 1, 55], [257, 1, 136], [257, 1, 10], [257, 1, 52], [257, 1, 24], [257, 1, 28], [305, 1, 33], [257, 1, 45], [160, 1, 97], [257, 1, 7], [672, 1, 74], [794, 1, 565], [305, 1, 106], [446, 1, 33], [46, 1, 10], [446, 1, 122], [305, 1, 189], [446, 1, 278], [446, 1, 387], [446, 1, 118], [593, 1, 378], [593, 1, 323], [593, 1, 346], [794, 1, 9], [593, 1, 71], [593, 1, 145], [593, 1, 101], [402, 1, 45], [794, 1, 106], [103, 1, 140], [446, 1, 316], [103, 1, 23], [402, 1, 117], [402, 1, 210], [103, 1, 93], [130, 1, 44], [437, 1, 33], [794, 1, 179], [437, 1, 241], [437, 1, 240], [103, 1, 402], [437, 1, 93], [103, 1, 95], [130, 1, 37], [437, 1, 95], [437, 1, 335], [437, 1, 286], [264, 1, 33], [514, 1, 122], [514, 1, 43], [514, 1, 481], [514, 1, 154], [254, 1, 400], [264, 1, 583], [254, 1, 1], [254, 1, 43], [254, 1, 98], [264, 1, 28], [254, 1, 530], [264, 1, 563], [254, 1, 437], [254, 1, 71], [264, 1, 415], [254, 1, 210], [185, 1, 175], [264, 1, 45], [725, 1, 52], [264, 1, 39], [725, 1, 10], [692, 1, 150], [740, 1, 8], [185, 1, 88], [386, 1, 43], [692, 1, 55], [521, 1, 16], [502, 1, 346], [502, 1, 55], [502, 1, 39], [386, 1, 35], [502, 1, 33], [672, 1, 33], [185, 1, 67], [521, 1, 45], [320, 1, 150], [736, 1, 11], [521, 1, 98], [39, 1, 47], [521, 1, 43], [27, 1, 111], [27, 1, 10], [66, 1, 43], [66, 1, 67], [185, 1, 21], [225, 1, 217], [356, 1, 8], [356, 1, 248], [185, 1, 452], [356, 1, 20], [356, 1, 43], [356, 1, 9], [206, 1, 111], [356, 1, 356], [356, 1, 310], [356, 1, 50], [356, 1, 101], [44, 1, 230], [356, 1, 7], [185, 1, 383], [490, 1, 346], [206, 1, 99], [356, 1, 325], [691, 1, 239], [691, 1, 185], [691, 1, 525], [490, 1, 294], [691, 1, 55], [691, 1, 33], [691, 1, 108], [172, 1, 204], [172, 1, 84], [740, 1, 228], [490, 1, 145], [212, 1, 418], [212, 1, 98], [559, 1, 43], [212, 1, 43], [212, 1, 364], [801, 1, 442], [36, 1, 107], [754, 1, 670], [559, 1, 29], [801, 1, 674], [801, 1, 111], [801, 1, 270], [36, 1, 118], [801, 1, 60], [138, 1, 110], [801, 1, 578], [44, 1, 74], [801, 1, 49], [36, 1, 47], [754, 1, 404], [801, 1, 508], [138, 1, 132], [754, 1, 75], [126, 1, 52], [126, 1, 43], [36, 1, 671], [754, 1, 210], [126, 1, 123], [625, 1, 368], [625, 1, 442], [36, 1, 3], [625, 1, 12], [754, 1, 572], [625, 1, 43], [740, 1, 43], [229, 1, 52], [140, 1, 106], [625, 1, 210], [140, 1, 10], [625, 1, 259], [625, 1, 10], [450, 1, 422], [450, 1, 281], [450, 1, 423], [229, 1, 422], [450, 1, 28], [450, 1, 33], [450, 1, 44], [450, 1, 424], [86, 1, 29], [67, 1, 2], [405, 1, 604], [229, 1, 43], [405, 1, 268], [67, 1, 43], [405, 1, 43], [405, 1, 33], [486, 1, 109], [486, 1, 462], [486, 1, 8], [486, 1, 7], [196, 1, 270], [67, 1, 116], [486, 1, 9], [486, 1, 484], [486, 1, 193], [486, 1, 146], [573, 1, 541], [196, 1, 93], [573, 1, 331], [573, 1, 270], [215, 1, 10], [573, 1, 47], [215, 1, 43], [573, 1, 321], [215, 1, 269], [751, 1, 346], [751, 1, 145], [229, 1, 417], [196, 1, 39], [499, 1, 52], [284, 1, 346], [53, 1, 44], [499, 1, 292], [499, 1, 316], [740, 1, 249], [196, 1, 33], [258, 1, 33], [499, 1, 39], [499, 1, 33], [302, 1, 10], [302, 1, 43], [229, 1, 336], [304, 1, 33], [258, 1, 45], [304, 1, 106], [232, 1, 45], [232, 1, 111], [89, 1, 139], [232, 1, 31], [232, 1, 422], [740, 1, 145], [232, 1, 523], [232, 1, 30], [232, 1, 424], [633, 1, 33], [633, 1, 82], [229, 1, 517], [101, 1, 598], [101, 1, 268], [101, 1, 602], [407, 1, 230], [101, 1, 33], [401, 1, 45], [101, 1, 49], [407, 1, 580], [401, 1, 117], [683, 1, 186], [407, 1, 345], [683, 1, 230], [407, 1, 72], [754, 1, 74], [683, 1, 584], [495, 1, 33], [407, 1, 599], [287, 1, 10], [519, 1, 16], [287, 1, 281], [683, 1, 505], [36, 1, 574], [89, 1, 1], [683, 1, 316], [683, 1, 597], [679, 1, 33], [679, 1, 14], [687, 1, 132], [687, 1, 64], [687, 1, 115], [229, 1, 123], [687, 1, 33], [687, 1, 179], [91, 1, 110], [91, 1, 48], [91, 1, 390], [91, 1, 504], [91, 1, 62], [662, 1, 98], [91, 1, 56], [89, 1, 106], [436, 1, 33], [91, 1, 182], [355, 1, 43], [722, 1, 670], [355, 1, 101], [89, 1, 44], [619, 1, 1], [722, 1, 33], [47, 1, 10], [413, 1, 450], [47, 1, 77], [47, 1, 440], [89, 1, 599], [47, 1, 71], [507, 1, 43], [144, 1, 16], [47, 1, 78], [491, 1, 50], [413, 1, 389], [491, 1, 466], [252, 1, 1], [413, 1, 33], [144, 1, 181], [416, 1, 16], [252, 1, 43], [195, 1, 55], [195, 1, 300], [24, 1, 423], [195, 1, 39], [40, 1, 583], [413, 1, 483], [24, 1, 44], [40, 1, 50], [40, 1, 3], [24, 1, 424], [40, 1, 38], [764, 1, 22], [24, 1, 40], [67, 1, 67], [24, 1, 422], [764, 1, 270], [24, 1, 43], [764, 1, 579], [416, 1, 109], [507, 1, 33], [472, 1, 423], [472, 1, 398], [472, 1, 424], [472, 1, 106], [472, 1, 422], [472, 1, 28], [486, 1, 282], [24, 1, 35], [472, 1, 12], [532, 1, 43], [472, 1, 282], [532, 1, 1], [103, 1, 140], [103, 1, 402], [330, 1, 337], [103, 1, 692], [357, 1, 74], [103, 1, 93], [416, 1, 230], [330, 1, 117], [389, 1, 110], [330, 1, 28], [573, 1, 350], [389, 1, 75], [389, 1, 71], [389, 1, 33], [330, 1, 349], [330, 1, 49], [389, 1, 89], [389, 1, 452], [330, 1, 185], [742, 1, 71], [244, 1, 284], [507, 1, 44], [361, 1, 43], [379, 1, 23], [244, 1, 43], [379, 1, 153], [379, 1, 451], [379, 1, 232], [244, 1, 221], [379, 1, 523], [801, 1, 442], [801, 1, 674], [801, 1, 111], [244, 1, 326], [801, 1, 270], [244, 1, 44], [801, 1, 60], [416, 1, 40], [801, 1, 578], [801, 1, 49], [361, 1, 181], [801, 1, 508], [721, 1, 592], [721, 1, 394], [721, 1, 36], [41, 1, 71], [414, 1, 450], [223, 1, 55], [25, 1, 84], [729, 1, 45], [247, 1, 103], [414, 1, 33], [25, 1, 39], [247, 1, 43], [414, 1, 182], [729, 1, 1], [92, 1, 122], [729, 1, 574], [729, 1, 55], [92, 1, 95], [414, 1, 483], [44, 1, 71], [296, 1, 33], [247, 1, 201], [529, 1, 300], [308, 1, 8], [308, 1, 197], [529, 1, 10], [308, 1, 93], [247, 1, 44], [308, 1, 117], [308, 1, 9], [308, 1, 428], [308, 1, 96], [308, 1, 7], [199, 1, 33], [199, 1, 408], [199, 1, 505], [281, 1, 93], [199, 1, 174], [780, 1, 589], [199, 1, 237], [199, 1, 281], [636, 1, 81], [780, 1, 497], [461, 1, 372], [636, 1, 52], [281, 1, 104], [74, 1, 33], [60, 1, 346], [281, 1, 100], [74, 1, 111], [281, 1, 45], [789, 1, 150], [51, 1, 161], [407, 1, 40], [51, 1, 328], [461, 1, 10], [51, 1, 45], [51, 1, 400], [461, 1, 43], [51, 1, 28], [461, 1, 269], [51, 1, 10], [51, 1, 563], [350, 1, 287], [581, 1, 432], [350, 1, 35], [581, 1, 17], [581, 1, 346], [407, 1, 311], [350, 1, 352], [581, 1, 55], [350, 1, 346], [565, 1, 110], [393, 1, 1], [565, 1, 117], [461, 1, 98], [565, 1, 55], [350, 1, 55], [565, 1, 205], [737, 1, 81], [737, 1, 11], [737, 1, 268], [114, 1, 132], [737, 1, 189], [338, 1, 33], [737, 1, 44], [338, 1, 88], [501, 1, 33], [338, 1, 394], [114, 1, 275], [338, 1, 106], [376, 1, 393], [376, 1, 36], [376, 1, 93], [461, 1, 373], [376, 1, 359], [376, 1, 232], [489, 1, 346], [112, 1, 31], [461, 1, 279], [112, 1, 184], [112, 1, 359], [489, 1, 145], [112, 1, 30], [112, 1, 39], [112, 1, 32], [456, 1, 1], [760, 1, 43], [760, 1, 33], [760, 1, 20], [786, 1, 212], [262, 1, 336], [262, 1, 242], [786, 1, 310], [262, 1, 168], [262, 1, 422], [436, 1, 93], [262, 1, 423], [179, 1, 45], [262, 1, 28], [416, 1, 565], [262, 1, 33], [262, 1, 44], [262, 1, 555], [262, 1, 424], [179, 1, 33], [553, 1, 99], [654, 1, 52], [553, 1, 43], [654, 1, 39], [654, 1, 10], [553, 1, 28], [83, 1, 398], [715, 1, 48], [715, 1, 236], [662, 1, 52], [296, 1, 116], [786, 1, 93], [83, 1, 43], [715, 1, 103], [715, 1, 71], [715, 1, 542], [715, 1, 33], [715, 1, 586], [83, 1, 413], [715, 1, 406], [785, 1, 413], [786, 1, 597], [785, 1, 206], [785, 1, 84], [785, 1, 212], [83, 1, 210], [785, 1, 604], [83, 1, 64], [785, 1, 98], [785, 1, 384], [293, 1, 1], [364, 1, 45], [364, 1, 111], [364, 1, 207], [364, 1, 55], [786, 1, 312], [364, 1, 181], [786, 1, 678], [590, 1, 71], [620, 1, 396], [620, 1, 1], [292, 1, 71], [786, 1, 577], [620, 1, 197], [292, 1, 28], [292, 1, 106], [292, 1, 10], [548, 1, 71], [620, 1, 252], [765, 1, 93], [620, 1, 96], [620, 1, 179], [277, 1, 413], [416, 1, 194], [37, 1, 52], [277, 1, 64], [711, 1, 184], [277, 1, 45], [277, 1, 365], [277, 1, 403], [277, 1, 98], [277, 1, 116], [413, 1, 450], [717, 1, 355], [711, 1, 153], [711, 1, 310], [99, 1, 43], [99, 1, 145], [711, 1, 271], [99, 1, 469], [44, 1, 51], [711, 1, 566], [99, 1, 11], [99, 1, 300], [139, 1, 110], [24, 1, 242], [413, 1, 182], [40, 1, 111], [40, 1, 47], [507, 1, 316], [139, 1, 44], [139, 1, 131], [717, 1, 269], [139, 1, 132], [413, 1, 389], [139, 1, 56], [717, 1, 542], [717, 1, 13], [227, 1, 43], [688, 1, 28], [416, 1, 163], [688, 1, 504], [709, 1, 33], [227, 1, 64], [709, 1, 109], [413, 1, 33], [709, 1, 421], [709, 1, 74], [556, 1, 596], [709, 1, 310], [201, 1, 237], [488, 1, 104], [346, 1, 275], [346, 1, 132], [346, 1, 310], [260, 1, 33], [369, 1, 175], [488, 1, 236], [346, 1, 378], [488, 1, 93], [556, 1, 495], [556, 1, 71], [346, 1, 51], [413, 1, 182], [152, 1, 45], [488, 1, 427], [413, 1, 483], [556, 1, 538], [152, 1, 33], [488, 1, 461], [75, 1, 397], [75, 1, 111], [75, 1, 268], [103, 1, 95], [330, 1, 225], [75, 1, 33], [488, 1, 375], [696, 1, 39], [27, 1, 111], [696, 1, 33], [90, 1, 55], [90, 1, 33], [149, 1, 86], [540, 1, 81], [14, 1, 106], [149, 1, 17], [675, 1, 33], [149, 1, 43], [540, 1, 33], [675, 1, 292], [149, 1, 355], [675, 1, 526], [675, 1, 43], [675, 1, 418], [675, 1, 359], [481, 1, 361], [675, 1, 490], [149, 1, 9], [675, 1, 494], [481, 1, 93], [700, 1, 584], [481, 1, 156], [149, 1, 239], [700, 1, 270], [481, 1, 363], [700, 1, 574], [700, 1, 39], [369, 1, 300], [481, 1, 383], [700, 1, 33], [649, 1, 393], [649, 1, 546], [27, 1, 10], [649, 1, 98], [149, 1, 35], [649, 1, 103], [611, 1, 372], [649, 1, 232], [649, 1, 565], [611, 1, 43], [748, 1, 64], [748, 1, 40], [611, 1, 82], [149, 1, 542], [611, 1, 10], [748, 1, 390], [748, 1, 44], [244, 1, 436], [748, 1, 661], [344, 1, 106], [297, 1, 33], [344, 1, 93], [344, 1, 63], [297, 1, 362], [344, 1, 100], [344, 1, 229], [297, 1, 292], [635, 1, 44], [297, 1, 28], [635, 1, 82], [48, 1, 33], [635, 1, 161], [635, 1, 200], [635, 1, 116], [603, 1, 451], [297, 1, 116], [603, 1, 86], [48, 1, 50], [603, 1, 242], [603, 1, 29], [614, 1, 453], [284, 1, 466], [312, 1, 86], [48, 1, 193], [662, 1, 33], [369, 1, 457], [614, 1, 329], [469, 1, 400], [614, 1, 45], [469, 1, 403], [469, 1, 104], [256, 1, 10], [469, 1, 98], [614, 1, 117], [469, 1, 450], [469, 1, 33], [469, 1, 193], [614, 1, 37], [256, 1, 24], [469, 1, 405], [614, 1, 556], [256, 1, 28], [312, 1, 98], [614, 1, 181], [572, 1, 1], [135, 1, 84], [312, 1, 609], [256, 1, 45], [73, 1, 132], [135, 1, 270], [73, 1, 40], [135, 1, 39], [135, 1, 33], [337, 1, 33], [73, 1, 378], [337, 1, 88], [337, 1, 106], [337, 1, 408], [73, 1, 48], [337, 1, 93], [337, 1, 473], [497, 1, 22], [337, 1, 585], [73, 1, 513], [73, 1, 51], [627, 1, 64], [497, 1, 35], [627, 1, 43], [753, 1, 210], [312, 1, 45], [597, 1, 33], [597, 1, 106], [497, 1, 43], [136, 1, 52], [136, 1, 270], [497, 1, 33], [136, 1, 39], [136, 1, 33], [374, 1, 36], [26, 1, 84], [26, 1, 94], [182, 1, 230], [26, 1, 85], [26, 1, 98], [576, 1, 1], [26, 1, 683], [369, 1, 55], [26, 1, 39], [576, 1, 93], [182, 1, 437], [576, 1, 321], [576, 1, 589], [345, 1, 132], [509, 1, 10], [182, 1, 78], [345, 1, 310], [182, 1, 345], [260, 1, 55], [369, 1, 33], [182, 1, 72], [324, 1, 52], [182, 1, 348], [182, 1, 241], [369, 1, 106], [646, 1, 196], [65, 1, 134], [646, 1, 82], [357, 1, 437], [61, 1, 346], [699, 1, 88], [699, 1, 86], [154, 1, 45], [699, 1, 45], [699, 1, 573], [154, 1, 80], [699, 1, 181], [772, 1, 33], [701, 1, 33], [65, 1, 93], [701, 1, 468], [701, 1, 197], [583, 1, 253], [260, 1, 359], [583, 1, 310], [342, 1, 129], [65, 1, 100], [342, 1, 106], [342, 1, 43], [342, 1, 145], [583, 1, 333], [342, 1, 11], [583, 1, 106], [154, 1, 75], [96, 1, 1], [88, 1, 139], [96, 1, 95], [88, 1, 1], [409, 1, 43], [409, 1, 228], [224, 1, 132], [154, 1, 33], [339, 1, 189], [55, 1, 346], [55, 1, 382], [55, 1, 10], [208, 1, 33], [55, 1, 453], [409, 1, 283], [55, 1, 55], [409, 1, 29], [208, 1, 423], [208, 1, 20], [208, 1, 424], [55, 1, 39], [549, 1, 235], [549, 1, 74], [208, 1, 106], [549, 1, 72], [409, 1, 116], [549, 1, 73], [224, 1, 190], [154, 1, 77], [208, 1, 422], [441, 1, 64], [357, 1, 75], [441, 1, 304], [441, 1, 590], [441, 1, 448], [154, 1, 572], [441, 1, 269], [208, 1, 300], [434, 1, 10], [396, 1, 45], [377, 1, 88], [396, 1, 33], [12, 1, 16], [12, 1, 93], [377, 1, 23], [512, 1, 402], [512, 1, 122], [512, 1, 43], [377, 1, 153], [512, 1, 154], [49, 1, 33], [377, 1, 451], [49, 1, 48], [487, 1, 184], [434, 1, 116], [377, 1, 523], [49, 1, 405], [49, 1, 16], [487, 1, 225], [49, 1, 193], [49, 1, 50], [194, 1, 55], [479, 1, 59], [49, 1, 483], [49, 1, 318], [186, 1, 61], [134, 1, 33], [186, 1, 95], [186, 1, 195], [186, 1, 3], [224, 1, 441], [25, 1, 84], [194, 1, 39], [134, 1, 270], [125, 1, 43], [125, 1, 84], [25, 1, 39], [134, 1, 55], [125, 1, 98], [690, 1, 55], [690, 1, 33], [260, 1, 189], [224, 1, 55], [690, 1, 108], [523, 1, 86], [156, 1, 43], [523, 1, 569], [156, 1, 33], [224, 1, 350], [134, 1, 39], [156, 1, 108], [523, 1, 98], [766, 1, 33], [523, 1, 268], [260, 1, 45], [22, 1, 64], [695, 1, 98], [695, 1, 598], [695, 1, 268], [523, 1, 39], [695, 1, 87], [695, 1, 570], [695, 1, 13], [695, 1, 582], [224, 1, 60], [22, 1, 45], [533, 1, 116], [123, 1, 43], [550, 1, 55], [550, 1, 39], [550, 1, 33], [533, 1, 43], [123, 1, 98], [533, 1, 1], [25, 1, 84], [123, 1, 410], [533, 1, 117], [22, 1, 365], [25, 1, 39], [338, 1, 93], [38, 1, 219], [327, 1, 33], [38, 1, 286], [224, 1, 62], [38, 1, 420], [38, 1, 58], [38, 1, 605], [38, 1, 109], [38, 1, 417], [217, 1, 122], [176, 1, 204], [219, 1, 88], [260, 1, 341], [22, 1, 228], [219, 1, 52], [219, 1, 504], [219, 1, 281], [217, 1, 10], [219, 1, 123], [219, 1, 414], [176, 1, 186], [471, 1, 196], [176, 1, 118], [22, 1, 529], [217, 1, 43], [471, 1, 270], [786, 1, 110], [176, 1, 45], [471, 1, 39], [471, 1, 33], [217, 1, 343], [176, 1, 345], [395, 1, 33], [400, 1, 33], [217, 1, 359], [400, 1, 453], [217, 1, 313], [400, 1, 55], [400, 1, 563], [22, 1, 43], [400, 1, 45], [605, 1, 93], [284, 1, 145], [53, 1, 583], [341, 1, 145], [587, 1, 84], [647, 1, 61], [115, 1, 43], [553, 1, 44], [647, 1, 453], [63, 1, 100], [115, 1, 4], [647, 1, 24], [470, 1, 270], [470, 1, 75], [470, 1, 39], [470, 1, 33], [180, 1, 84], [647, 1, 43], [582, 1, 333], [444, 1, 530], [315, 1, 71], [444, 1, 28], [444, 1, 33], [198, 1, 310], [444, 1, 82], [198, 1, 64], [61, 1, 55], [31, 1, 40], [278, 1, 45], [31, 1, 10], [31, 1, 276], [31, 1, 24], [278, 1, 55], [118, 1, 64], [31, 1, 39], [395, 1, 145], [335, 1, 10], [118, 1, 346], [750, 1, 300], [118, 1, 39], [335, 1, 43], [180, 1, 86], [395, 1, 453], [750, 1, 523], [755, 1, 71], [750, 1, 189], [375, 1, 393], [375, 1, 36], [750, 1, 563], [375, 1, 93], [375, 1, 232], [545, 1, 224], [545, 1, 226], [180, 1, 45], [545, 1, 40], [513, 1, 589], [545, 1, 111], [545, 1, 103], [83, 1, 28], [785, 1, 110], [545, 1, 205], [553, 1, 681], [724, 1, 64], [545, 1, 334], [141, 1, 400], [724, 1, 670], [141, 1, 163], [23, 1, 43], [513, 1, 10], [724, 1, 45], [23, 1, 35], [124, 1, 122], [731, 1, 64], [124, 1, 1], [724, 1, 369], [124, 1, 142], [124, 1, 195], [724, 1, 662], [451, 1, 44], [141, 1, 106], [451, 1, 40], [451, 1, 43], [395, 1, 45], [141, 1, 10], [124, 1, 181], [124, 1, 577], [482, 1, 387], [61, 1, 95], [724, 1, 33], [482, 1, 93], [482, 1, 156], [141, 1, 43], [482, 1, 363], [712, 1, 33], [457, 1, 16], [712, 1, 106], [457, 1, 487], [141, 1, 364], [157, 1, 33], [712, 1, 44], [395, 1, 232], [457, 1, 1], [457, 1, 213], [457, 1, 55], [500, 1, 33], [17, 1, 16], [500, 1, 52], [500, 1, 292], [500, 1, 359], [157, 1, 52], [500, 1, 316], [157, 1, 360], [500, 1, 39], [157, 1, 43], [17, 1, 28], [84, 1, 64], [84, 1, 45], [17, 1, 33], [141, 1, 71], [479, 1, 437], [671, 1, 381], [671, 1, 581], [671, 1, 585], [53, 1, 10], [671, 1, 80], [745, 1, 709], [671, 1, 580], [671, 1, 447], [671, 1, 345], [671, 1, 574], [671, 1, 312], [671, 1, 572], [671, 1, 579], [671, 1, 273], [745, 1, 98], [163, 1, 33], [157, 1, 108], [745, 1, 43], [776, 1, 52], [745, 1, 501], [776, 1, 33], [157, 1, 284], [745, 1, 28], [711, 1, 109], [745, 1, 33], [157, 1, 38], [76, 1, 33], [745, 1, 44], [394, 1, 45], [188, 1, 235], [394, 1, 232], [394, 1, 33], [552, 1, 99], [394, 1, 145], [76, 1, 111], [18, 1, 16], [18, 1, 98], [163, 1, 193], [552, 1, 43], [18, 1, 28], [18, 1, 542], [18, 1, 33], [552, 1, 28], [76, 1, 484], [552, 1, 44], [235, 1, 166], [87, 1, 196], [87, 1, 329], [87, 1, 45], [87, 1, 29], [270, 1, 310], [76, 1, 397], [87, 1, 324], [180, 1, 33], [76, 1, 300], [50, 1, 232], [50, 1, 28], [697, 1, 157], [796, 1, 209], [163, 1, 45], [796, 1, 84], [796, 1, 35], [1, 1, 33], [697, 1, 23], [796, 1, 268], [697, 1, 457], [796, 1, 294], [797, 1, 275], [697, 1, 39], [797, 1, 403], [697, 1, 33], [797, 1, 469], [797, 1, 71], [797, 1, 33], [797, 1, 106], [697, 1, 46], [688, 1, 10], [554, 1, 33], [190, 1, 10], [111, 1, 30], [111, 1, 39], [190, 1, 39], [20, 1, 33], [20, 1, 184], [743, 1, 584], [709, 1, 532], [20, 1, 98], [20, 1, 14], [528, 1, 372], [303, 1, 583], [743, 1, 522], [20, 1, 116], [303, 1, 584], [743, 1, 78], [20, 1, 39], [743, 1, 676], [743, 1, 71], [188, 1, 39], [624, 1, 10], [303, 1, 442], [528, 1, 16], [303, 1, 269], [556, 1, 64], [161, 1, 10], [97, 1, 248], [97, 1, 1], [528, 1, 93], [97, 1, 93], [97, 1, 417], [97, 1, 95], [97, 1, 171], [97, 1, 50], [303, 1, 310], [161, 1, 193], [97, 1, 415], [303, 1, 45], [351, 1, 33], [791, 1, 713], [188, 1, 33], [197, 1, 228], [313, 1, 33], [197, 1, 270], [791, 1, 232], [197, 1, 39], [197, 1, 33], [340, 1, 428], [568, 1, 139], [791, 1, 358], [340, 1, 562], [791, 1, 322], [340, 1, 300], [791, 1, 100], [340, 1, 346], [528, 1, 316], [768, 1, 522], [340, 1, 37], [340, 1, 55], [340, 1, 189], [340, 1, 321], [768, 1, 210], [207, 1, 40], [768, 1, 28], [188, 1, 150], [768, 1, 249], [768, 1, 660], [313, 1, 148], [427, 1, 111], [127, 1, 11], [162, 1, 111], [427, 1, 1], [127, 1, 116], [698, 1, 45], [427, 1, 150], [162, 1, 10], [473, 1, 184], [427, 1, 193], [473, 1, 64], [698, 1, 181], [793, 1, 132], [427, 1, 218], [78, 1, 224], [473, 1, 300], [78, 1, 398], [793, 1, 471], [473, 1, 246], [78, 1, 45], [793, 1, 1], [78, 1, 98], [793, 1, 470], [473, 1, 31], [793, 1, 321], [793, 1, 51], [358, 1, 361], [473, 1, 316], [78, 1, 52], [78, 1, 31], [358, 1, 93], [162, 1, 489], [358, 1, 310], [78, 1, 39], [358, 1, 45], [358, 1, 35], [358, 1, 485], [202, 1, 243], [202, 1, 194], [202, 1, 219], [202, 1, 68], [480, 1, 175], [544, 1, 40], [544, 1, 111], [372, 1, 99], [162, 1, 98], [544, 1, 103], [544, 1, 205], [544, 1, 334], [162, 1, 193], [372, 1, 52], [607, 1, 310], [607, 1, 52], [473, 1, 181], [372, 1, 43], [372, 1, 44], [372, 1, 182], [359, 1, 248], [359, 1, 10], [626, 1, 228], [359, 1, 43], [359, 1, 364], [626, 1, 43], [480, 1, 93], [359, 1, 195], [359, 1, 98], [162, 1, 97], [398, 1, 45], [51, 1, 161], [398, 1, 98], [51, 1, 328], [398, 1, 17], [480, 1, 156], [3, 1, 33], [707, 1, 33], [398, 1, 370], [398, 1, 33], [51, 1, 45], [51, 1, 400], [3, 1, 80], [443, 1, 33], [707, 1, 587], [51, 1, 232], [149, 1, 7], [51, 1, 28], [378, 1, 23], [51, 1, 563], [378, 1, 196], [378, 1, 153], [464, 1, 31], [378, 1, 451], [480, 1, 262], [378, 1, 523], [221, 1, 64], [221, 1, 300], [221, 1, 246], [464, 1, 398], [543, 1, 111], [221, 1, 31], [3, 1, 22], [221, 1, 316], [464, 1, 439], [221, 1, 181], [205, 1, 393], [464, 1, 184], [205, 1, 450], [205, 1, 475], [205, 1, 390], [543, 1, 205], [205, 1, 192], [205, 1, 429], [637, 1, 16], [205, 1, 120], [205, 1, 33], [637, 1, 552], [205, 1, 484], [205, 1, 182], [3, 1, 73], [464, 1, 359], [637, 1, 476], [637, 1, 81], [71, 1, 22], [71, 1, 230], [71, 1, 536], [637, 1, 257], [71, 1, 254], [71, 1, 256], [637, 1, 52], [71, 1, 75], [635, 1, 304], [637, 1, 172], [71, 1, 79], [637, 1, 394], [71, 1, 255], [464, 1, 30], [637, 1, 71], [637, 1, 37], [749, 1, 189], [637, 1, 542], [480, 1, 363], [3, 1, 45], [464, 1, 39], [637, 1, 133], [603, 1, 209], [343, 1, 106], [464, 1, 32], [637, 1, 483], [637, 1, 405], [343, 1, 93], [614, 1, 196], [726, 1, 45], [362, 1, 329], [362, 1, 573], [726, 1, 122], [362, 1, 104], [726, 1, 52], [362, 1, 43], [362, 1, 420], [362, 1, 181], [290, 1, 106], [726, 1, 10], [177, 1, 43], [591, 1, 74], [591, 1, 310], [290, 1, 10], [445, 1, 33], [614, 1, 276], [445, 1, 201], [591, 1, 117], [445, 1, 242], [591, 1, 71], [445, 1, 424], [42, 1, 310], [256, 1, 52], [445, 1, 82], [42, 1, 48], [42, 1, 103], [445, 1, 28], [42, 1, 71], [568, 1, 1], [148, 1, 86], [445, 1, 530], [42, 1, 44], [171, 1, 86], [175, 1, 204], [43, 1, 74], [560, 1, 43], [175, 1, 45], [301, 1, 3], [171, 1, 486], [301, 1, 213], [301, 1, 252], [301, 1, 47], [757, 1, 139], [171, 1, 254], [171, 1, 48], [43, 1, 71], [171, 1, 598], [757, 1, 10], [148, 1, 35], [560, 1, 28], [93, 1, 122], [484, 1, 184], [171, 1, 256], [484, 1, 225], [542, 1, 206], [542, 1, 81], [93, 1, 180], [93, 1, 95], [542, 1, 450], [542, 1, 75], [542, 1, 33], [171, 1, 145], [542, 1, 163], [312, 1, 589], [93, 1, 325], [560, 1, 29], [171, 1, 255], [621, 1, 10], [621, 1, 43], [658, 1, 594], [25, 1, 84], [658, 1, 561], [658, 1, 272], [658, 1, 45], [658, 1, 400], [658, 1, 98], [703, 1, 33], [658, 1, 114], [703, 1, 106], [460, 1, 196], [658, 1, 1], [560, 1, 185], [460, 1, 8], [460, 1, 43], [460, 1, 75], [658, 1, 145], [460, 1, 181], [538, 1, 561], [371, 1, 99], [538, 1, 116], [538, 1, 43], [538, 1, 117], [771, 1, 106], [538, 1, 20], [137, 1, 33], [148, 1, 239], [137, 1, 159], [137, 1, 176], [25, 1, 39], [137, 1, 160], [585, 1, 293], [334, 1, 143], [474, 1, 433], [334, 1, 225], [148, 1, 43], [771, 1, 117], [334, 1, 365], [284, 1, 18], [474, 1, 176], [334, 1, 310], [585, 1, 33], [334, 1, 47], [334, 1, 45], [771, 1, 300], [334, 1, 64], [7, 1, 33]];
var abilityNames = ["Stench", "Drizzle", "Speed boost", "Battle armor", "Sturdy", "Damp", "Limber", "Sand veil", "Static", "Volt absorb", "Water absorb", "Oblivious", "Cloud nine", "Compoundeyes", "Insomnia", "Color change", "Immunity", "Flash fire", "Shield dust", "Own tempo", "Suction cups", "Intimidate", "Shadow tag", "Rough skin", "Wonder guard", "Levitate", "Effect spore", "Synchronize", "Clear body", "Natural cure", "Lightning Rod", "Serene grace", "Swift swim", "Chlorophyll", "Illuminate", "Trace", "Huge power", "Poison point", "Inner focus", "Magma armor", "Water veil", "Magnet pull", "Soundproof", "Rain dish", "Sand stream", "Pressure", "Thick fat", "Early bird", "Flame body", "Run away", "Keen eye", "Hyper cutter", "Pickup", "Truant", "Hustle", "Cute charm", "Plus", "Minus", "Forecast", "Sticky hold", "Shed skin", "Guts", "Marvel scale", "Liquid ooze", "Overgrow", "Blaze", "Torrent", "Swarm", "Rock head", "Drought", "Arena trap", "Vital spirit", "White smoke", "Pure power", "Shell armor", "Air lock", "Tangled feet", "Motor drive", "Rivalry", "Steadfast", "Snow cloak", "Gluttony", "Anger point", "Unburden", "Heatproof", "Simple", "Dry skin", "Download", "Iron fist", "Poison heal", "Adaptability", "Skill link", "Hydration", "Solar power", "Quick feet", "Normalize", "Sniper", "Magic guard", "No guard", "Stall", "Technician", "Leaf guard", "Klutz", "Mold breaker", "Super luck", "Aftermath", "Anticipation", "Forewarn", "Unaware", "Tinted lens", "Filter", "Slow start", "Scrappy", "Storm drain", "Ice body", "Solid rock", "Snow warning", "Honey gather", "Frisk", "Reckless", "Multitype", "Flower gift", "Bad dreams", "Pickpocket", "Sheer force", "Contrary", "Unnerve", "Defiant", "Defeatist", "Cursed body", "Healer", "Friend guard", "Weak armor", "Heavy metal", "Light metal", "Multiscale", "Toxic boost", "Flare boost", "Harvest", "Telepathy", "Moody", "Overcoat", "Poison touch", "Regenerator", "Big pecks", "Sand rush", "Wonder skin", "Analytic", "Illusion", "Imposter", "Infiltrator", "Mummy", "Moxie", "Justified", "Rattled", "Magic bounce", "Sap sipper", "Prankster", "Sand force", "Iron barbs", "Zen mode", "Victory star", "Turboblaze", "Teravolt", "Aroma veil", "Flower veil", "Cheek pouch", "Protean", "Fur coat", "Magician", "Bulletproof", "Competitive", "Strong jaw", "Refrigerate", "Sweet veil", "Stance change", "Gale wings", "Mega launcher", "Grass pelt", "Symbiosis", "Tough claws", "Pixilate", "Gooey", "Aerilate", "Parental bond", "Dark aura", "Fairy aura", "Aura break", "Mountaineer", "Wave rider", "Skater", "Thrust", "Perception", "Parry", "Instinct", "Dodge", "Jagged edge", "Frostbite", "Tenacity", "Pride", "Deep sleep", "Slush Rush", "Spirit", "Warm blanket", "Gulp", "Herbivore", "Sandpit", "Hot blooded", "Medic", "Life force", "Lunchbox", "Nurse", "Melee", "Sponge", "Bodyguard", "Hero", "Last bastion", "Stealth", "Vanguard", "Nomad", "Sequence", "Grass cloak", "Celebrate", "Lullaby", "Calming", "Daze", "Frighten", "Interference", "Mood maker", "Confidence", "Fortune", "Bonanza", "Explode", "Omnipotent", "Share", "Black hole", "Shadow dash", "Sprint", "Disgust", "High rise", "Climber", "Flame boost", "Aqua boost", "Run up", "Conqueror", "Shackle", "Decoy", "Shield"];
var collisionTiles = ["1_8", "1_9", "1_17", "1_18", "1_25", "1_26", "1_27", "1_34", "1_36", "1_43", "1_44", "1_45", "1_52", "1_53", "1_54", "1_55", "1_56", "1_57", "1_64", "1_66", "1_72", "1_73", "1_74", "1_75", "1_76", "1_77", "1_78", "1_79", "1_80", "1_82", "1_90", "1_91", "1_92", "1_99", "1_100", "1_101", "1_105", "1_106", "1_107", "1_108", "1_110", "1_111", "1_112", "1_113", "1_123", "1_124", "1_125", "1_127", "1_128", "1_137", "1_141", "1_142", "1_143", "1_145", "1_146", "1_147", "1_148", "1_149", "1_155", "1_159", "1_160", "1_161", "1_163", "1_181", "1_182", "1_183", "1_184", "1_185", "1_190", "1_192", "1_193", "1_195", "1_196", "1_197", "1_198", "1_199", "1_200", "1_201", "1_202", "1_205", "1_206", "1_207", "1_214", "1_216", "1_232", "1_234", "1_235", "1_236", "1_237", "1_238", "1_250", "1_253", "1_254", "1_255", "1_256", "1_258", "1_260", "1_261", "1_271", "1_273]", "[1_277", "1_285", "1_286", "1_287", "1_288", "1_303", "1_304", "1_305", "1_306", "1_311", "1_312", "1_313", "1_314", "1_315", "1_320", "1_322", "1_323", "1_329", "1_330", "1_331", "1_332", "1_340", "1_341", "1_342", "1_349", "1_351", "1_358", "1_359", "1_360", "1_352", "1_353", "1_354", "1_355", "1_356", "1_364", "1_365", "1_361", "1_363", "1_367", "1_368", "1_369", "1_370", "1_372", "1_373", "1_374", "1_376", "1_377", "1_378", "1_379", "1_380", "1_381", "1_382", "1_383", "1_385", "1_387", "1_388", "1_389", "1_390", "1_394", "1_395", "1_396", "1_403", "1_404", "1_404", "1_407", "1_409", "1_410", "1_411", "1_412", "1_413", "1_414", "1_418", "1_419", "1_420", "1_421", "1_422", "1_423", "1_424", "1_425", "1_430", "1_431", "1_432", "1_439", "1_441", "1_448", "1_449", "1_450", "1_457", "1_458", "1_459"];
var test123 = ["For some time after its birth, it grows by gaining nourishment from the seed on its back.", "When the bud on its back starts swelling, a sweet aroma wafts to indicate the flower\'s coming bloom.", "After a rainy day, the flower on its back smells stronger. The scent attracts other Pokemon.", "The fire on the tip of its tail is a measure of its life. If healthy, its tail burns intensely.", "In the rocky mountains where Charmeleon live, their fiery tails shine at night like stars.", "It is said that Charizard\'s fire burns hotter if it has experienced harsh battles.", "It shelters itself in its shell then strikes back with spouts of water at every opportunity.", "It is said to live 10,000 years. Its furry tail is popular as a symbol of longevity.", "The jets of water it spouts from the rocket cannons on its shell can punch through thick steel.", "It releases a stench from its red antenna to repel enemies. It grows by molting repeatedly.", "A steel-hard shell protects its tender body. It quietly endures hardships while awaiting evolution.", "It loves the honey of flowers and can locate flower patches that have even tiny amounts of pollen.", "It eats its weight in leaves every day. It fends off attackers with the needle on its head.", "While awaiting evolution, it hides from predators under leaves and in nooks of branches.", "Its best attack involves flying around at high speed, striking with poison needles, then flying off.", "It is docile and prefers to avoid conflict. If disturbed, however, it can ferociously strike back.", "It flies over its wide territory in search of prey, downing it with its highly developed claws.", "By flapping its wings with all its might, Pidgeot can make a gust of wind capable of bending tall trees.", "It searches for food all day. It gnaws on hard objects to wear down its fangs, which grow constantly during its lifetime.", "With its long fangs, this surprisingly violent Pokemon can gnaw away even thick concrete with ease.", "It flaps its small wings busily to fly. Using its beak, it searches in grass for prey.", "It has the stamina to fly all day on its broad wings. It fights by using its sharp beak.", "It sneaks through grass without making a sound and strikes unsuspecting prey from behind.", "The pattern on its belly is for intimidation. It constricts foes while they are frozen in fear.", "It occasionally uses an electric shock to recharge a fellow Pikachu that is in a weakened state.", "Its tail discharges electricity into the ground, protecting it from getting shocked.", "It digs deep burrows to live in. When in danger, it rolls up its body to withstand attacks.", "The spikes on its body are made up of its hardened hide. It rolls up and attacks foes with its spikes.", "While it does not prefer to fight, even one drop of the poison it secretes from barbs can be fatal.", "When it senses danger, it raises all the barbs on its body. These barbs grow slower than Nidorino\'s.", "Its entire body is armored with hard scales. It will protect the young in its burrow with its life.", "It scans its surroundings by raising its ears out of the grass. Its toxic horn is for protection.", "It has a violent disposition and stabs foes with its horn, which oozes poison upon impact.", "One swing of its mighty tail can snap a telephone pole as if it were a matchstick.", "On nights with a full moon, Clefairy gather from all over and dance. Bathing in moonlight makes them float.", "Their ears are sensitive enough to hear a pin drop from over a mile away, so they\'re usually found in quiet places.", "As each tail grows, its fur becomes more lustrous. When held, it feels slightly warm.", "Each of its nine tails is imbued with supernatural power, and it can live for a thousand years.", "Looking into its cute, round eyes makes it start singing a song so pleasant listeners can\'t help but fall asleep.", "Its fine fur feels so pleasant, those who accidentally touch it cannot take their hands away.", "It does not need eyes, because it emits ultrasonic waves to check its surroundings while it flies.", "Flitting around in the dead of night, it sinks its fangs into its prey and drains a nearly fatal amount of blood.", "It often plants its root feet in the ground during the day and sows seeds as it walks about at night.", "The honey it drools from its mouth smells so atrocious, it can curl noses more than a mile away.", "Its petals are the largest in the world. As it walks, it scatters extremely allergenic pollen.", "Mushrooms named tochukaso grow on its back. They grow along with the host Paras.", "A mushroom grown larger than the host\'s body controls Parasect. It scatters poisonous spores.", "Its big eyes are actually clusters of tiny eyes. At night, its kind is drawn by light.", "It flutters its wings to scatter dustlike scales. The scales leach toxins if they contact skin.", "A Pokemon that lives underground. Because of its dark habitat, it is repelled by bright sunlight.", "Its three heads move alternately, driving it through tough soil to depths of over 60 miles.", "It is nocturnal in nature. If it spots something shiny, its eyes glitter brightly.", "A very haughty Pokemon. Among fans, the size of the jewel in its forehead is a topic of much talk.", "When headaches stimulate its brain cells, which are usually inactive, it can use a mysterious power.", "When its forehead shines mysteriously, Golduck can use the full extent of its power.", "It lives in treetop colonies. If one becomes enraged, the whole colony rampages for no reason.", "It grows angry if you see its eyes and gets angrier if you run. If you beat it, it gets even madder.", "Extremely loyal to its Trainer, it will bark at those who approach the Trainer unexpectedly and run them out of town.", "The sight of it running over 6,200 miles in a single day and night has captivated many people.", "Its skin is so thin, its internal organs are visible. It has trouble walking on its newly grown feet.", "The spiral pattern on its belly subtly undulates. Staring at it gradually causes drowsiness.", "With its extremely tough muscles, it can keep swimming in the Pacific Ocean without resting.", "Using its psychic power is such a strain on its brain that it needs to sleep for 18 hours a day.", "It stares at its silver spoon to focus its mind. It emits more alpha waves while doing so.", "The spoons clutched in its hands are said to have been created by its psychic powers.", "Though small in stature, it is powerful enough to easily heft and throw a number of Geodude at once.", "It happily carries heavy cargo to toughen up. It willingly does hard work for people.", "Its four muscled arms slam foes with powerful punches and chops at blinding speed.", "It prefers hot and humid environments. It is quick at capturing prey with its vines.", "A Pokemon that appears to be a plant. It captures unwary prey by dousing them with a toxic powder.", "It pools in its mouth a fluid with a honey-like scent, which is really an acid that dissolves anything.", "Because its body is almost entirely composed of water, it shrivels up if it is washed ashore.", "It extends its 80 tentacles to form an encircling poisonous net that is difficult to escape.", "At rest, it looks just like a rock. Carelessly stepping on it will make it swing its fists angrily.", "It rolls on mountain paths to move. Once it builds momentum, no Pokemon can stop it without difficulty.", "Even dynamite can\'t harm its hard, boulder-like body. It sheds its hide just once a year.", "As a newborn, it can barely stand. However, through galloping, its legs are made tougher and faster.", "When at an all-out gallop, its blazing mane sparkles, enhancing its beautiful appearance.", "Although slow, it is skilled at fishing with its tail. It does not feel pain if its tail is bitten.", "Though usually dim witted, it seems to become inspired if the Shellder on its tail bites down.", "The electromagnetic waves emitted by the units at the sides of its head expel antigravity, which allows it to float.", "The stronger electromagnetic waves from the three linked Magnemite are enough to dry out surrounding moisture.", "It can\'t live without the stalk it holds. That\'s why it defends the stalk from attackers with its life.", "The brains in its two heads appear to communicate emotions to each other with a telepathic power.", "When Doduo evolves into this odd breed, one of its heads splits into two. It runs at nearly 40 mph.", "The colder it gets, the better it feels. It joyfully swims around oceans so cold that they are filled with floating ice.", "Its streamlined body has low resistance, and it swims around cold oceans at a speed of eight knots.", "Born from sludge, these Pokemon now gather in polluted places and increase the bacteria in their bodies.", "It\'s so stinky! Muk\'s body contains toxic elements, and any plant will wilt when it passes by.", "It swims backward by opening and closing its two shells. Its large tongue is always kept hanging out.", "It fights by keeping its shell tightly shut for protection and by shooting spikes to repel foes.", "Born from gases, anyone would faint if engulfed by its gaseous body, which contains poison.", "It likes to lurk in the dark and tap shoulders with a gaseous hand. Its touch causes endless shuddering.", "The leer that floats in darkness belongs to a Gengar delighting in casting curses on people.", "Opening its large mouth, it ingests massive amounts of soil and creates long tunnels.", "It can tell what people are dreaming by sniffing with its big nose. It loves fun dreams.", "Seeing its swinging pendulum can induce sleep in three seconds, even in someone who just woke up.", "It lives in burrows dug on sandy beaches. Its pincers fully grow back if they are broken in battle.", "The larger pincer has 10,000- horsepower strength. However, it is so heavy, it is difficult to aim.", "It looks just like a Poke Ball. It is dangerous because it may electrocute or explode on contact.", "It is known to drift on winds if it is bloated to bursting with stored electricity.", "Its six eggs converse using telepathy. They can quickly gather if they become separated.", "It is called \'The Walking Jungle.\' If a head grows too big, it falls off and becomes an Exeggcute.", "When it thinks of its dead mother, it cries. Its crying makes the skull it wears rattle hollowly.", "From its birth, this savage Pokemon constantly holds bones. It is skilled in using them as weapons.", "Its legs can stretch double. First-time foes are startled by its extensible reach.", "The arm-twisting punches it throws pulverize even concrete. It rests after three minutes of fighting.", "Being licked by its long, saliva-covered tongue leaves a tingling sensation. Extending its tongue retracts its tail.", "Toxic gas is held within its thin, balloon-shaped body, so it can cause massive explosions.", "Inhaling toxic fumes from trash and mixing them inside its body lets it spread an even fouler stench.", "Its powerful tackles can destroy anything. However, it is too slow witted to help people work.", "Standing on its hind legs freed its forelegs and made it smarter. It is very forgetful, however.", "A kindly Pokemon that lays highly nutritious eggs and shares them with injured Pokemon or people.", "Many writhing vines cover it, so its true identity remains unknown. The blue vines grow its whole life long.", "It raises its offspring in its belly pouch. It lets the baby out to play only when it feels safe.", "It makes its nest in the shade of corals. If it senses danger, it spits murky ink and flees.", "Its spines provide protection. Its fins and bones are prized as traditional-medicine ingredients.", "Though it appears very elegant when swimming with fins unfurled, it can jab powerfully with its horn.", "In autumn, its body becomes more fatty in preparing to propose to a mate. It takes on beautiful colors.", "As long as its red core remains, it can regenerate its body instantly, even if it\'s torn apart.", "Its core shines in many colors and sends radio signals into space to communicate with something.", "It shapes an invisible wall in midair by minutely vibrating its fingertips to stop molecules in the air.", "The sharp scythes on its forearms become increasingly sharp by cutting through hard objects.", "Its cries sound like human speech. However, it is impossible to tell what it is trying to say.", "Research is progressing on storing lightning in Electabuzz so this energy can be used at any time.", "The scorching fire exhaled by Magmar forms heat waves around its body, making it hard to see the Pokemon clearly.", "It grips prey with its powerful pincers and will not let go until the prey is torn in half.", "Once it takes aim at its foe, it makes a headlong charge. It is famous for its violent nature.", "A Magikarp living for many years can leap a mountain using Splash. The move remains useless, though.", "Once it begins to rampage, a Gyarados will burn everything down, even in a harsh storm.", "Able to understand human speech and very intelligent, it loves to swim in the sea with people on its back.", "It can reconstitute its entire cellular structure to change into what it sees, but it returns to normal when it relaxes.", "Thanks to its unstable genetic makeup, this special Pokemon conceals many different possible evolutions.", "Its cell composition is similar to water molecules. As a result, it can\'t be seen when it melts away into water.", "By storing electricity in its body, it can shoot its bristlelike fur like a barrage of missiles.", "Inhaled air is carried to its flame sac, heated, and exhaled as fire that reaches over 3,000 degrees F.", "A man-made Pokemon created using advanced scientific means. It can move freely in cyberspace.", "A Pokemon that was resurrected from a fossil using modern science. It swam in ancient seas.", "It is thought that this Pokemon became extinct because its spiral shell grew too large.", "It is thought to have inhabited beaches 300 million years ago. It is protected by a stiff shell.", "It is thought that this Pokemon came onto land because its prey adapted to life on land.", "A Pokemon that roamed the skies in the dinosaur era. Its teeth are like saw blades.", "When its belly is full, it becomes too lethargic to even lift a finger, so it is safe to bounce on its belly.", "A legendary bird Pokemon. It can create blizzards by freezing moisture in the air.", "A legendary Pokemon that is said to live in thunderclouds. It freely controls lightning bolts.", "One of the legendary bird Pokemon. It is said that its appearance indicates the coming of spring.", "It is called the \'Mirage Pokemon\' because so few have seen it. Its shed skin has been found.", "If its body takes on an aura, the weather changes instantly. It is said to live in seas and lakes.", "It is said to make its home somewhere in the sea. It guides crews of shipwrecks to shore.", "A Pokemon created by recombining Mew\'s genes. It\'s said to have the most savage heart among Pokemon.", "Because it can use all kinds of moves, many scientists believe Mew to be the ancestor of Pokemon.", "It uses the leaf on its head to determine the temperature and humidity. It loves to sunbathe.", "The buds that ring its neck give off a spicy aroma that perks people up.", "Its breath has the fantastic ability to revive dead plants and flowers.", "It has a timid nature. If it is startled, the flames on its back burn more vigorously.", "It intimidates foes with the heat of its flames. The fire burns more strongly when it readies to fight.", "It attacks using blasts of fire. It creates heat shimmers with intense fire to hide itself.", "It has the habit of biting anything with its developed jaws. Even its Trainer needs to be careful.", "Once it bites down, it won\'t let go until it loses its fangs. New fangs quickly grow into place.", "It usually moves slowly, but it goes at blinding speed when it attacks and bites prey.", "It has a very nervous nature. It stands up high on its tail so it can scan wide areas.", "The mother puts its offspring to sleep by curling up around them. It corners foes with speed.", "It marks time precisely. Some countries consider it to be a wise friend, versed in the world\'s ways.", "Its eyes are specially developed to enable it to see clearly even in murky darkness and minimal light.", "It is so timid, it can\'t move if it isn\'t with a swarm of others. It conveys its feelings with scent.", "It uses starlight as energy. When more stars appear at night, the patterns on its back grow larger.", "It sets a trap by spinning a web with thin but strong silk. It waits motionlessly for prey to arrive.", "It attaches silk to its prey and sets it free. Later, it tracks the silk to the prey and its friends.", "Having four wings allows it to fly more quickly and quietly so it can sneak up on prey without its noticing.", "It discharges positive and negative electricity from its antenna tips to shock its foes.", "Lanturn\'s light can shine up from great depths. It is nicknamed \'The Deep-Sea Star.\'", "The electric sacs in its cheeks are small. If even a little electricity leaks, it becomes shocked.", "According to local rumors, Cleffa are often seen in places where shooting stars have fallen.", "Its body has a faintly sweet scent and is bouncy and soft. If it bounces even once, it cannot stop.", "It transforms the kindness and joy of others into happiness, which it stores in its shell.", "To share its happiness, it flies around the world seeking kind- hearted people.", "It picks food from cactus plants, deftly avoiding buds and spines. It seems to skip about to move.", "This odd Pokemon can see both the past and the future. It eyes the sun\'s movement all day.", "When cold weather increases static electricity, its wool doubles in size and the tip of its tail glows slightly.", "Not even downy wool will grow on its rubbery, nonconductive patches of skin that prevent electrical shock.", "The tip of its tail shines so brightly it can be used to send sea-navigation beacons to distant foreign shores.", "When the heavy rainfall season ends, it is drawn out by warm sunlight to dance in the open.", "The oil-filled tail functions as a buoy, so it\'s fine even in rivers with strong currents.", "Its long ears are superb sensors. It can distinguish the movements of things in water and tell what they are.", "To avoid being attacked, it does nothing but mimic a tree. It hates water and flees from rain.", "It gathers groups of others as their leader. Its cries make Poliwag obey.", "It drifts on winds. It is said that when Hoppip gather in fields and mountains, spring is on the way.", "It blooms when the weather warms. It floats in the sky to soak up as much sunlight as possible.", "Blown by seasonal winds, it circles the globe, scattering cotton spores as it goes.", "It lives high among the treetops. It can use its tail as freely and cleverly as its hands.", "It suddenly falls out of the sky in the morning. Knowing it\'s weak, it simply feeds until it evolves.", "Since it converts sunlight into energy, it is always looking in the direction of the sun.", "By flapping its wings at high speed, it can fly freely through the air. Even sudden stops are no problem.", "When walking on land, it covers its body with a poisonous film that keeps its skin from dehydrating.", "It has an easygoing nature. It doesn\'t care if it bumps its head on boats and boulders while swimming.", "Its fur is so sensitive, it can feel minute shifts in the air and predict the weather...and its foes\' thoughts.", "When exposed to the moon\'s aura, the rings on its body glow faintly and it\'s filled with a mysterious power.", "If spotted, it will lure an unwary person into chasing it then lose the pursuer on mountain trails.", "Being bitten by Shellder gave it intelligence comparable to that of award-winning scientists.", "A Pokemon that startles people in the middle of the night. It gathers fear as its energy.", "When alone, nothing happens. However, if there are two or more, an odd power is said to emerge.", "It desperately tries to keep its black tail hidden. It is said to be proof the tail hides a secret.", "The head on its tail contains a small brain. It can instinctively fight even while facing backward.", "It looks just like a pinecone. Its shell protects it from bird Pokemon that peck it by mistake.", "It is encased in a steel shell. Its peering eyes are all that can be seen of its mysterious innards.", "It creates mazes in dark locations. When spotted, it flees into the ground by digging with its tail.", "It clamps on to its chosen prey then jabs the stinger on its tail into the prey while it\'s stunned with surprise.", "The iron it ingested with the soil it swallowed transformed its body and made it harder than diamonds.", "Small Pokemon flee from its scary face. It is, however, considered by women to be cute.", "It is timid in spite of its looks. If it becomes enraged, however, it will strike with its huge fangs.", "It shoots the poison spines on its body in all directions. Its round form makes it a poor swimmer.", "It raises its pincers with eyelike markings for intimidation. It also swings them down dangerously.", "The berries stored in its vaselike shell eventually become a thick, pulpy juice.", "No matter how heavy its opponents, it flings them far away with its prized horn.", "A smart and sneaky Pokemon, it makes its opponents flinch by suddenly showing the claws hidden in its paws.", "It lets honey soak into its paws so it can lick them all the time. Every set of paws tastes unique.", "In its territory, it leaves scratches on trees that bear delicious berries or fruits.", "Its body is made of magma. If it doesn\'t keep moving, its body will cool and harden.", "Its body temperature is roughly 18,000 degrees F. Flames spout from gaps in its hardened shell.", "Rooting the tip of its snout into the ground, it searches for food. Sometimes it even digs up a hot spring.", "With its excellent sense of smell, it\'s even able to find mushrooms that are buried under frozen ground.", "They prefer unpolluted southern seas. Their coral branches lose their color and deteriorate in dirty water.", "The water they shoot from their mouths can hit moving prey from more than 300 feet away.", "It has a tendency to want to be in holes. It prefers rock crags or pots and sprays ink from them before attacking.", "It carries food all day long. When someone is lost in the mountains, it shares that food.", "If it builds up enough speed swimming, it can fly over 300 feet out of the water from the surface of the ocean.", "Its heavy-looking iron body is actually thin and light, so it can fly at speeds over 180 mph.", "It is smart enough to hunt in packs. It uses a variety of cries for communicating with others.", "The flames it breathes when angry contain toxins. If they cause a burn, it will hurt forever.", "It lives in caves on the seafloor and creates giant whirlpools every time it moves.", "It is strong despite its compact size. It can easily pick up and carry an adult human on its back.", "It attacks by curling up then rolling into its foe. It can blow apart a house in one hit.", "It was upgraded to enable the exploration of other planets. However, it failed to measure up.", "Staring at its antlers creates an odd sensation as if one were being drawn into their centers.", "It marks its territory by using its tail like a paintbrush. There are more than 5,000 different marks.", "It is famous for its eagerness to fight and always nurses injuries from challenging larger foes.", "It fights while spinning like a top. The centrifugal force boosts its destructive power by 10.", "It tests everything by touching with its lips, which remember what it likes and dislikes.", "Spinning its arms around to generate electricity makes the area between its horns shine light blue.", "It\'s small, but its body temperature is over 1,100 degrees F. Embers escape its mouth and nose when it breathes.", "It is said that kids who drink Miltank\'s milk grow up to become hearty, healthy adults.", "The eggs it lays are filled with happiness. Eating even one bite will bring a smile to anyone.", "It is said to have fallen with lightning. It can fire thunderbolts from the rain clouds on its back.", "It is said that when it roars, a volcano erupts somewhere around the globe.", "It races around the world to purify fouled water. It dashes away with the north wind.", "Born deep underground, it comes aboveground and becomes a pupa once it has finished eating the surrounding soil.", "This pupa flies around wildly by venting with great force the gas pressurized inside its body.", "The quakes caused when it walks make even great mountains crumble and change the surrounding terrain.", "It sleeps in a deep-sea trench. If it flaps its wings, it is said to cause a 40-day storm.", "Its feathers are in seven colors. It is said that anyone seeing it is promised eternal happiness.", "It has the power to travel across time, but it is said to appear only in peaceful times.", "The soles of its feet are covered by countless tiny spikes, enabling it to walk on walls and ceilings.", "It lives in dense jungles. While closing in on its prey, it leaps from branch to branch.", "The leaves that grow on its arms can slice down thick trees. It is without peer in jungle combat.", "A fire burns inside, so it feels very warm to hug. It launches fireballs of 1,800 degrees F.", "Its kicking mastery lets it loose 10 kicks per second. It emits sharp cries to intimidate foes.", "Flames spout from its wrists, enveloping its knuckles. Its punches scorch its foes.", "To alert it, the fin on its head senses the flow of water. It has the strength to heft boulders.", "Its sturdy legs give it sure footing, even in mud. It burrows into dirt to sleep.", "It can swim while towing a large ship. It bashes down foes with a swing of its thick arms.", "A Pokemon with a persistent nature, it chases its chosen prey until the prey becomes exhausted.", "It chases down prey in a pack. It will never disobey the commands of a skilled Trainer.", "It walks in zigzag fashion. It is good at finding items in the grass and even in the ground.", "It charges prey at speeds over 60 mph. However, because it can only run straight, it often fails.", "Often targeted by bird Pokemon, it desperately resists by releasing poison from its tail spikes.", "It wraps silk around the branches of a tree. It drinks rainwater on its silk while awaiting evolution.", "Despite its looks, it is aggressive. It jabs with its long, thin mouth if disturbed while collecting pollen.", "It never forgets any attack it endured while in the cocoon. After evolution, it seeks payback.", "Toxic powder is scattered with each flap. At night, it is known to strip leaves off trees lining boulevards.", "It looks like an aquatic plant and serves as a ferry to Pokemon that can\'t swim.", "It has a mischievous spirit. If it spots an angler, it will tug on the fishing line to interfere.", "If it hears festive music, all its muscles fill with energy. It can\'t help breaking out into a dance.", "When it dangles from a tree branch, it looks just like an acorn. It enjoys scaring other Pokemon.", "The sound of its grass flute makes its listeners uneasy. It lives deep in forests.", "By flapping its leafy fan, it can whip up gusts of 100 ft/second that can level houses.", "It has a gutsy spirit that makes it bravely take on tough foes. It flies in search of warm climates.", "It circles the sky in search of prey. When it spots one, it dives steeply to catch the prey.", "It makes its nest on sheer cliffs. Riding the sea breeze, it glides up into the expansive skies.", "Skimming the water\'s surface, it dips its large bill in the sea, scoops up food and water, and carries it.", "If its horns capture the warm feelings of people or Pokemon, its body warms up slightly.", "If its Trainer becomes happy, it overflows with energy, dancing joyously while spinning about.", "To protect its Trainer, it will expend all its psychic power to create a small black hole.", "It appears as if it is skating on water. It draws prey with a sweet scent from the tip of its head.", "Its antennae have eye patterns on them. Its four wings enable it to hover and fly in any direction.", "It spouts poison spores from the top of its head. These spores cause pain all over if inhaled.", "Its short arms stretch when it throws punches. Its technique is equal to that of pro boxers.", "If it eats just three leaves in a day, it is satisfied. Other than that, it sleeps for 20 hours a day.", "Its heartbeat is fast and its blood so agitated that it can\'t sit still for one second.", "This Pokemon lives lying on its side. It only rolls over and moves when there is no more grass to eat.", "It grows underground, sensing its surroundings using antennae instead of its virtually blind eyes.", "Because it moves so quickly, it sometimes becomes unseeable. It congregates around tree sap.", "A discarded bug shell that came to life. Peering into the crack on its back is said to steal one\'s spirit.", "Usually, its cries are like quiet murmurs. If frightened, it shrieks at the same volume as a jet plane.", "The shock waves from its cries can tip over trucks. It stamps its feet to power up.", "Its howls can be heard over six miles away. It emits all sorts of noises from the ports on its body.", "It toughens its body by slamming into thick trees. Many snapped trees can be found near its nest.", "It loves to match power with big-bodied Pokemon. It can knock a truck flying with its arm thrusts.", "It swings its large, nutrient-filled tail around to fight opponents bigger than itself.", "Its magnetic nose always faces north and draws iron objects to its body to protect itself better.", "It shows its cute side by chasing its own tail until it gets dizzy.", "The reason it does not have a nest is that it simply searches for a clean, comfortable place then sleeps there.", "It hides in the darkness of caves. Its diet of gems has transformed its eyes into gemstones.", "Attached to its head is a huge set of jaws formed by horns. It can chew through iron beams.", "In order to build up its steel body, it eats iron ore. This pesky Pokemon is known to eat railroad tracks.", "Lairon fight over territory, and when their steel bodies collide, sparks fly.", "It claims an entire mountain as its own. The more wounds it has, the more it has battled, so don\'t take it lightly.", "It always trains deep in mountains. It levitates when it heightens its spiritual power through meditation.", "It gains the ability to see the aura of its opponents by honing its mind through starvation.", "Using electricity stored in its fur, it stimulates its muscles to heighten its reaction speed.", "It discharges electricity from its mane. It creates a thundercloud overhead to drop lightning bolts.", "It cheers on friends with pom-poms made of sparks. It drains power from telephone poles.", "It cheers on friends. If its friends are losing, its body lets off more and more sparks.", "It communicates with others by lighting up its rear at night. It loves Illumise\'s sweet aroma.", "With its sweet aroma, it guides Volbeat to draw signs with light in the night sky.", "It uses the different poisons in each hand separately when it attacks. The stronger its aroma, the healthier it is.", "Almost all its body is its stomach. Its harsh digestive juices quickly dissolve anything it swallows.", "It swallows anything whole. It sweats toxic fluids from its follicles to douse foes.", "They swarm any foe that invades their territory. Their sharp fangs can tear out boat hulls.", "Its fangs rip through sheet iron. It swims at 75 mph and is known as \'The Bully of the Sea.\'", "It eats one ton of food every day. It plays by shooting stored seawater out its blowholes with great force.", "It can sometimes knock out opponents with the shock created by breaching and crashing its big body onto the water.", "The magma in its body reaches 2,200 degrees F. Its hump gets smaller when it uses Fire-type moves.", "The volcanoes on its back have a major eruption every 10 years--or whenever it becomes really angry.", "It burns coal inside its shell for energy. It blows out black soot if it is endangered.", "Using its tail like a spring, it keeps its heart beating by bouncing constantly. If it stops, it dies.", "It uses black pearls to amplify its psychic power. It does a strange dance to control foes\' minds.", "No two Spinda have the same pattern of spots. Its tottering step fouls the aim of foes.", "It makes an inescapable conical pit and lies in wait at the bottom for prey to come tumbling down.", "The ultrasonic waves it generates by rubbing its two wings together cause severe headaches.", "Known as \'The Desert Spirit,\' this Pokemon hides in the sandstorms it causes by beating its wings.", "By storing water in its body, this desert dweller can survive for 30 days without water.", "It becomes active at night, seeking prey that is exhausted from the day\'s desert heat.", "For some reason, it likes to land on people\'s heads softly and act like it\'s a hat.", "On sunny days, it flies freely through the sky and blends into the clouds. It sings in a beautiful soprano.", "It\'s Seviper\'s archrival. To threaten those it encounters, it fans out the claws on its front paws.", "Constant polishing makes the edge of the blade on its tail extremely sharp. It\'s Zangoose\'s archrival.", "The phase of the moon apparently has some effect on its power. It\'s active on the night of a full moon.", "Solar energy is the source of its power, so it is strong during the daytime. When it spins, its body shines.", "Its slimy body is hard to grasp. In one region, it is said to have been born from hardened mud.", "It is extremely protective of its territory. If any foe approaches, it attacks using vicious tremors.", "No matter how dirty the water in the river, it will adapt and thrive. It has a strong will to survive.", "Loving to battle, this Pokemon pinches all Pokemon that enter its territory with its pincers and throws them out.", "Discovered in ancient ruins, it moves by spinning around and forms a group when it finds others.", "This mysterious Pokemon started life as an ancient clay figurine made over 20,000 years ago.", "It lived on the seafloor 100 million years ago and was reanimated scientifically.", "It lives in the shallows of warm seas. When the tide goes out, it digs up prey from beaches.", "A Pokemon ancestor that was reanimated from a fossil. It lived in the sea and hunted with claws.", "It went ashore after evolving. Its entire body is clad in a sturdy armor.", "It is a shabby and ugly Pokemon. However, it is very hardy and can survive on little water.", "Its lovely scales are described as rainbow colored. They change color depending on the viewing angle.", "Temperature and weather affect its cellular structure, so this Pokemon changes form according to the weather.", "It can freely change its body\'s color. The zigzag pattern on its belly doesn\'t change, however.", "It feeds on the dark emotions of sadness and hatred, which make it grow steadily stronger.", "A doll that became a Pokemon over its grudge of being thrown away. It seeks the child who disowned it.", "It loves the crying of children. It startles bad kids by passing through walls and making them cry.", "It seeks drifting will-o\'-the-wisps and sucks them into its empty body. What happens inside is a mystery.", "It flies by flapping its broad leaves and gives the sweet, delicious fruit around its neck to children.", "Its cries echo inside its hollow body to emerge as beautiful notes for startling and repelling foes.", "It appears from deep in the mountains to warn people about upcoming disasters it has sensed with its horn.", "It grows strong by pushing up against others en masse. It loves eating sweet fruit.", "It is said that several Snorunt gather under giant leaves and live together in harmony.", "It prevents prey from escaping by instantaneously freezing moisture in the air.", "They can\'t swim well yet, and they move much faster by rolling. When they\'re happy, they clap fins.", "Be it Spheal or Poke Ball, it will spin any round object on its nose with the greatest of ease.", "Not only does its thick blubber keep it warm, it also protects it from attacks. It shatters ice with its prized tusks.", "It makes a single pearl during its lifetime. The pearl is said to amplify psychic power.", "It lives deep in the sea. With a tail shaped like a small fish, it attracts unsuspecting prey.", "It lives at the bottom of the sea. In the springtime, its pink body turns more vivid for some reason.", "A rare Pokemon discovered during a deep-sea exploration. It has not changed in over 100 million years.", "It lives in warm seas. It is said that a couple finding this Pokemon will be blessed with eternal love.", "Dreaming of one day flying, it practices by leaping off cliffs every day.", "Within its rugged shell, its cells have begun changing. The shell peels off the instant it evolves.", "As a result of its long-held dream of flying, its cellular structure changed, and wings grew out.", "Its cells are all magnetic, and it communicates with others by using magnetic pulses.", "It is formed by two Beldum joining together. Its two brains are linked, amplifying its psychic power.", "With four linked brains, it\'s more intelligent than a supercomputer, and it uses calculations to analyze foes.", "Its entire body is made of rock. If any part chips off in battle, it attaches rocks to repair itself.", "Its body is made of ice from the ice age. It controls frigid air of -328 degrees Fahrenheit.", "Tempered by pressure underground over tens of thousands of years, its body cannot be scratched.", "Its body is covered with a down that can refract light in such a way that it becomes invisible.", "A highly intelligent Pokemon. By folding back its wings in flight, it can overtake jet planes.", "It is said to have widened the seas by causing downpours. It had been asleep in a marine trench.", "It had been asleep in underground magma ever since it fiercely fought Kyogre long ago.", "It lives in the ozone layer far above the clouds and cannot be seen from the ground.", "It is said to have the ability to grant any wish for just one week every thousand years.", "An alien virus that fell to earth on a meteor underwent a DNA mutation to become this Pokemon.", "The shell on its back is made of soil. On a very healthy Turtwig, the shell should feel moist.", "It knows where pure water wells up. It carries fellow Pokemon there on its back.", "Some Pokemon are born on a Torterra\'s back and spend their entire life there.", "It is very agile. Before going to sleep, it extinguishes the flame on its tail to prevent fires.", "It skillfully controls the intensity of the fire on its tail to keep its foes at an ideal distance.", "It uses unique fighting moves with fire on its hands and feet. It will take on any opponent.", "A poor walker, it often falls down. However, its strong pride makes it puff up its chest without a care.", "Because every Prinplup considers itself to be the most important, they can never form a group.", "If anyone were to hurt its pride, it would slash them with wings that can cleave through an ice floe.", "Because they are weak individually, they form groups. However, they bicker if the group grows too big.", "Recognizing their own weakness, they always live in a group. When alone, a Staravia cries noisily.", "It never stops attacking even if it is injured. It fusses over the shape of its comb.", "A comparison revealed that Bidoof\'s front teeth grow at the same rate as Rattata\'s.", "A river dammed by Bibarel will never overflow its banks, which is appreciated by people nearby.", "Its legs are short. Whenever it stumbles, its stiff antennae clack with a xylophone-like sound.", "There is a village that hosts a contest based on the amazingly variable cries of this Pokemon.", "The extension and contraction of its muscles generates electricity. It glows when in trouble.", "Strong electricity courses through the tips of its sharp claws. A light scratch causes fainting in foes.", "It can see clearly through walls to track down its prey and seek its lost young.", "Sensitive to changing temperatures, the bud blooms when it\'s warm, releasing toxic pollen.", "Luring prey with a sweet scent, it uses poison whips on its arms to poison, bind, and finish off the prey.", "A lifelong jungle dweller from 100 million years ago, it would snap obstructing trees with head butts.", "If two were to smash their heads together, their foot-thick skulls would keep them from fainting.", "It is outstandingly armored. As a result, it can eat grass and berries without having to fight.", "When they lined up side by side, no foe could break through. They shielded their young in that way.", "Even if it is born where there are no cocooning materials, it somehow always ends up with a cloak.", "When evolving, its body takes in surrounding materials. As a result, there are many body variations.", "While it loves floral honey, it won\'t gather any itself. Instead, it plots to steal some from Combee.", "This Pokemon is a set of three. When they sleep, they gather up and form a giant hive of 100 Combee.", "It houses its colony in cells in its body and releases various pheromones to make those grubs do its bidding.", "A pair may be seen rubbing their cheek pouches together in an effort to share stored electricity.", "It inflates the flotation sac around its neck and pokes its head out of the water to see what is going on.", "It is a common sight around fishing ports. It is known to rescue people and carry off prey.", "The small ball is not only filled with nutrients, it is also tasty. Starly try to peck it off.", "If it senses strong sunlight, it opens its folded petals to absorb the sun\'s rays with its whole body.", "Beware of pushing strongly on its squishy body, as it makes a mysterious purple fluid ooze out.", "Long ago, its entire back was shielded with a sturdy shell. There are traces of it left in its cells.", "Split into two, the tails are so adept at handling and doing things, Ambipom rarely uses its hands.", "These Pokemon are called the \'Signpost for Wandering Spirits.\' Children holding them sometimes vanish.", "They carry people and Pokemon, but the wind can catch them, so there can\'t be a fixed destination.", "By extending its rolled-up ears and striking the ground, it can bound so high it surprises itself.", "Extremely cautious, it quickly bounds off when it senses danger.", "Its cry sounds like an incantation. It is said the cry may rarely be imbued with happiness-giving power.", "If one utters a deep cry, many Murkrow gather quickly. For this, it is called \'Summoner of Night.\'", "It hides its spiteful tendency of hooking its claws into the nose of its Trainer if it isn\'t fed.", "It binds its body with its tails to make itself look bigger. If it locks eyes, it will glare ceaselessly.", "There is an orb inside its mouth. When it hops, the orb bounces all over and makes a ringing sound.", "It sprays a foul fluid from its rear. Its stench spreads over a mile radius, driving Pokemon away.", "It attacks by spraying a horribly smelly fluid from the tip of its tail. Attacks from above confound it.", "They are found in ancient tombs. The patterns on their backs are said to be imbued with mysterious power.", "In ages past, this Pokemon was revered as a bringer of rain. It was found buried in the ground.", "It prefers an arid atmosphere. It leaks water that looks like tears when adjusting its moisture level.", "It mimics the expressions and motions of those it sees to understand the feelings of others.", "It likes to carry around a small rock. It may wander around others\' feet and cause them to stumble.", "Its tongue is just like a human\'s. As a result, it can cleverly mimic human speech.", "Its constant mischief and misdeeds resulted in it being bound to an Odd Keystone by a mysterious spell.", "It attacks using its huge mouth. While its attacks are powerful, it hurts itself out of clumsiness, too.", "It loves sparkly things. It seeks treasures in caves and hoards the loot in its nest.", "It is said that when one runs at high speed, its wings create blades of wind that can fell nearby trees.", "In its desperation to gulp down food, it forgets about the food it has hidden under its fur.", "It uses the shapes of auras, which change according to emotion, to communicate with others.", "By reading the auras of all things, it can tell how others are feeling from over half a mile away.", "It shuts its nostrils tight then travels through sand as if walking. They form colonies of around 10.", "It is surprisingly quick to anger. It holds its mouth agape as a display of its strength.", "It lives in arid regions and can go without food for a year while waiting for prey.", "It takes pride in its strength. Even though it can tear foes apart, it finishes them off with powerful poison.", "Inflating its poison sacs, it fills the area with an odd sound and hits flinching opponents with a poison jab.", "The croaking that Toxicroak produces before a battle is for churning the poison it has stored in its poison sac.", "Using its tentacles to lash itself to trees, it lies in wait for prey, luring it close with sweet-smelling drool.", "The line running down its side can store sunlight. It shines vividly at night.", "It crawls along the seafloor using its long front fins like legs. It competes for food with Lanturn.", "The pattern on its back varies by region. It often swims in a school of Remoraid.", "Seemingly curious about people, they gather around footsteps they find on snowy mountains.", "They appear when the snow flowers bloom. When the petals fall, they retreat to places unknown again.", "They communicate by clawing signs in boulders and work together to surround enemies.", "Sometimes the magnetism emitted by Magnezone is too strong, making them attract each other so they cannot move.", "Their saliva contains lots of components that can dissolve anything. The numbness caused by their lick does not dissipate.", "It can launch a rock held in its hand like a missile by tightening then expanding muscles instantly.", "Even if one of its arms is eaten, it\'s fine. The Pokemon regenerates quickly and will go right back to normal.", "The instant it presses the tips of its tails onto an opponent, it sends over 20,000 volts of electricity into the foe.", "When shooting 3,600 degree F fireballs from its arms, its body takes on a whitish hue from the intense heat.", "It shares many blessings with people who respect one another\'s rights and avoid needless strife.", "It prefers to battle by biting apart foes\' heads instantly while flying by at high speed.", "With cells similar to those of plants, it performs photosynthesis inside its body and creates pure air.", "It lowers its body heat to freeze its fur. The hairs then become like needles it can fire.", "It dances silently through the sky. When it approaches prey, it can land a critical hit in an instant.", "When the temperature rose at the end of the ice age, most Mamoswine disappeared.", "Its programming was modified to enable work in alien dimensions. It did not work as planned.", "When trying to protect someone, it extends its elbows as if they were swords and fights savagely.", "It freely controls three units called Mini-Noses using magnetic force.", "It is said to take lost spirits into its pliant body and guide them home.", "It freezes prey by blowing its -58 degrees F breath. It is said to then secretly display its prey.", "Its electric-like body can enter some kinds of machines and take control in order to make mischief.", "When Uxie flew, people gained the ability to solve problems. It was the birth of knowledge.", "When Mesprit flew, people learned the joy and sadness of living. It was the birth of emotions.", "When Azelf flew, people gained the determination to do things. It was the birth of willpower.", "A legendary Pokemon of Sinnoh. It is said that time flows when Dialga\'s heart beats.", "A legendary Pokemon of Sinnoh. It is said that space becomes more stable with Palkia\'s every breath.", "Its body is made of rugged steel. However, it is partially melted in spots because of its own heat.", "It is said to have made Pokemon that look like itself from a special ice mountain, rocks, and magma.", "It was banished for its violence. It silently gazed upon the old world from the Distortion World.", "On nights around the quarter moon, the aurora from its tail extends and undulates beautifully.", "It drifts in warm seas. It always returns to where it was born, no matter how far it may have drifted.", "It is born with a wondrous power that lets it bond with any kind of Pokemon.", "To protect itself, it afflicts those around it with nightmares. However, it means no harm.", "The flowers all over its body burst into bloom if it is lovingly hugged and senses gratitude.", "It is said to have emerged from an egg in a place where there was nothing then shaped the world.", "When it shares the infinite energy it creates, that being\'s entire body will be overflowing with power.", "Being exposed to sunlight makes its movements swifter. It uses vines more adeptly than its hands.", "When it gets dirty, its leaves can\'t be used in photosynthesis, so it always keeps itself clean.", "It only gives its all against strong opponents who are not fazed by the glare from Serperior\'s noble eyes.", "It loves to eat roasted berries, but sometimes it gets too excited and burns them to a crisp.", "The more it eats, the more fuel it has to make the fire in its stomach stronger. This fills it with even more power.", "A flaring beard of fire is proof that it is fired up. It is adept at using many different moves.", "The scalchop on its stomach isn\'t just used for battle--it can be used to break open hard berries as well.", "As a result of strict training, each Dewott learns different forms for using the scalchops.", "In the time it takes a foe to blink, it can draw and sheathe the seamitars attached to its front legs.", "Extremely cautious, one of them will always be on the lookout, but it won\'t notice a foe coming from behind.", "Using luminescent matter, it makes its eyes and body glow and stuns attacking opponents.", "Though it is a very brave Pokemon, it\'s also smart enough to check its foe\'s strength and avoid battle.", "This very loyal Pokemon helps Trainers, and it also takes care of other Pokemon.", "Being wrapped in its long fur is so comfortable that a person would be fine even overnight on a wintry mountain.", "Their cute act is a ruse. They trick people and steal their valuables just to see the looks on their faces.", "Their beautiful form comes from the muscles they have developed. They run silently in the night.", "It\'s good at finding berries and gathers them from all over. It\'s kind enough to share them with friends.", "It strikes its enemies with a thorn-covered tail. The leaf on its head is bitter.", "Very intelligent, it roasts berries before eating them. It likes to help people.", "When it gets excited, embers rise from its head and tail and it gets hot. For some reason, it loves sweets.", "The water stored inside the tuft on its head is full of nutrients. It waters plants with it using its tail.", "It prefers places with clean water. When its tuft runs low, it replenishes it by siphoning up water with its tail.", "This Pokemon appears before people and Pokemon who are having nightmares and eats those dreams.", "The dream mist coming from its forehead changes into many different colors depending on the dream that was eaten.", "This very forgetful Pokemon will wait for a new order from its Trainer even though it already has one.", "No matter where in the world it goes, it knows where its nest is, so it never gets separated from its Trainer.", "Males swing the plumage on their heads to threaten others, but females are better at flying.", "Its mane shines when it discharges electricity. They use the frequency and rhythm of these flashes to communicate.", "When this ill-tempered Pokemon runs wild, it shoots lightning from its mane in all directions.", "The hexagonal-shaped hole is its ear. It has a tendency to walk in the direction the sound is coming from.", "When it is healthy, its core sticks out. Always facing the same way, it swiftly moves front to back and left to right.", "The solar rays it absorbs are processed in its energy core and fired as a ball of light.", "The heart-shaped mark left on a body after a Woobat has been attached to it is said to bring good fortune.", "It shakes its tail vigorously when it emits ultrasonic waves strong enough to reduce concrete to rubble.", "By spinning its body, it can dig straight through the ground at a speed of 30 mph.", "Forming a drill with its steel claws and head, it can bore through a steel plate, no matter how thick it is.", "Using the feelers on its ears, it can tell how someone is feeling or when an egg might hatch.", "Always carrying squared logs, they help out with construction. As they grow, they carry bigger logs.", "With strengthened bodies, they skillfully wield steel beams to take down buildings.", "Rather than rely on force, they master moves that utilize the centrifugal force of spinning concrete.", "By vibrating its cheeks, it emits sound waves imperceptible to humans and warns others of danger.", "It lives in the water and on land. It uses its long, sticky tongue to immobilize its opponents.", "By putting power into its bumps, it creates vibrations and increases the power of its punches.", "When it encounters a foe bigger than itself, it wants to throw it. It changes belts as it gets stronger.", "Desiring the strongest karate chop, they seclude themselves in mountains and train without sleeping.", "Since this Pokemon makes its own clothes out of leaves, it is a popular mascot for fashion designers.", "Preferring dark, damp places, it spends the entire day eating fallen leaves that lie around it.", "Upon finding a small Pokemon, it weaves clothing for it from leaves by using the sticky silk secreted from its mouth.", "Using the feelers on its head and tail, it picks up vibrations in the air to determine its prey\'s location and state.", "Storing energy for evolution, it sits. But, when predators approach, it moves to stab them with poison spikes.", "It clasps its prey with the claws on its neck until it stops moving. Then it finishes it off with deadly poison.", "Perhaps because they feel more at ease in a group, they stick to others they find. They end up looking like a cloud.", "They appear along with whirlwinds. They pull pranks, such as moving furniture and leaving balls of cotton in homes.", "The leaves on its head grow right back even if they fall out. These bitter leaves refresh those who eat them.", "The fragrance of the garland on its head has a relaxing effect, but taking care of it is very difficult.", "Red- and blue-striped Basculin are very violent and always fighting. They are also remarkably tasty.", "They live hidden under hot desert sands in order to keep their body temperature from dropping.", "Protected by thin membranes, their eyes can see even in the dead of night. They live in groups of a few individuals.", "Very violent Pokemon, they try to clamp down on anything that moves in front of their eyes.", "When it sleeps, it pulls its limbs into its body and its internal fire goes down to 1,100\' F.", "When one is injured in a fierce battle, it hardens into a stone-like form. Then it meditates and sharpens its mind.", "When it moves rhythmically, it makes a sound similar to maracas, making the surprised Pokemon flee.", "When it finds a stone of a suitable size, it secretes a liquid from its mouth to open up a hole to crawl into.", "When its boulder is broken in battles for territory, it feels unsure and begins to weaken.", "Proud of its sturdy skull, it suddenly headbutts everything, but its weight makes it unstable, too.", "It pulls up its shed skin to protect itself while it kicks. The bigger the crest, the more respected it is.", "The guardians of an ancient city, they always fly the same route while keeping watch for invaders.", "These Pokemon arose from the spirits of people interred in graves. Each retains memories of its former life.", "Grave robbers who mistake them for real coffins and get too close end up trapped inside their bodies.", "This Pokemon was restored from a fossil. It swam skillfully and dove to depths beyond half a mile.", "It could knock out a foe with a slap from one of its developed front appendages and chew it up, shell or bones and all.", "It was revived from an ancient fossil. Not able to fly, it lived in treetops and hopped from one branch to another.", "It runs better than it flies. It takes off into the sky by running at a speed of 25 mph.", "Wanting more garbage, they follow people who litter. They always belch poison gas.", "Consuming garbage makes new kinds of poison gases and liquids inside their bodies.", "It changes so it looks just like its foe, tricks it, and then uses that opportunity to flee.", "Stories say those who tried to catch Zoroark were trapped in an illusion and punished.", "Minccino greet each other by grooming one another thoroughly with their tails.", "Cinccino\'s body is coated in a special oil that helps it deflect attacks, such as punches.", "It stares intently at everything. It can become so obsessed with watching that it doesn\'t notice attacks.", "According to many old tales, it creates friends for itself by controlling sleeping children on starry nights.", "It can see the future from the movement of the stars. When it learns its Trainer\'s life span, it cries in sadness.", "Because their bodies are enveloped in a special liquid, they are fine in any environment, no matter how severe.", "When their two divided brains think the same thoughts, their psychic power is maximized.", "They use psychic power to control their arms, which are made of a special liquid. They can crush boulders psychically.", "They are better at swimming than flying, and they happily eat their favorite food, peat moss, as they dive underwater.", "Despite their elegant appearance, they can flap their wings strongly and fly for thousands of miles.", "Theoretically, this Pokemon formed from icicles bathed in energy from the morning sun. Their breath is -58\' F.", "They cool down the surrounding air and create ice particles, which they use to freeze their foes.", "Swallowing large amounts of water, they make snow clouds inside their bodies and, when angry, cause violent blizzards.", "Their coloring changes according to the seasons and can be slightly affected by the temperature and humidity as well.", "They migrate according to the seasons, so some people call Sawsbuck the harbingers of spring.", "It glides on its outstretched membrane while shocking foes with the electricity stored in the pouches on its cheeks.", "For some reason they evolve when they receive electrical energy while they are attacking Shelmet.", "Wearing the shell covering they stole from Shelmet, they defend themselves and attack with two lances.", "It lures Pokemon with its pattern that looks just like a Pok\' Ball then releases poison spores.", "It moves the caps on both arms and does a dance to lure prey. It prefers damp places.", "If its veil-like arms stun and wrap a foe, that foe will be dragged miles below the surface, never to return.", "Its body is mostly seawater. It\'s said there\'s a castle of ships Jellicent have sunk on the seafloor.", "It gently holds injured and weak Pokemon in its fins. Its special membrane heals their wounds.", "Since it can\'t generate its own electricity, it sticks onto large-bodied Pokemon and absorbs static electricity.", "It creates barriers from electrified silk that stun foes. This works as a weapon as well as a defense.", "It absorbs the iron it finds in the rock while clinging to the ceiling. It shoots spikes when in danger.", "By swinging around its three spiky feelers and shooting spikes, it can obliterate an opponent.", "Two bodies comprise a fixed pair. They spin around each other to generate energy.", "A minigear and big gear comprise its body. If the minigear it launches at a foe doesn\'t return, it will die.", "The minigear spins at high speed. Then the energy from the red core charges the minigear to make it ready to fire.", "One alone can emit only a trickle of electricity, so a group of them gathers to unleash a powerful electric shock.", "It wraps itself around its prey and paralyzes it with electricity from the round spots on its sides. Then it chomps.", "It latches on to prey with its sucker mouth, sinking in its fangs and shocking the prey with powerful electricity.", "Rumors of its origin are linked to a UFO crash site in the desert 50 years ago.", "Apparently, it communicates by flashing its three fingers, but those patterns haven\'t been decoded.", "Its flame is usually out, but it starts shining when it absorbs life force from people or Pokemon.", "The spirits it absorbs fuel its baleful fire. It hangs around hospitals waiting for people to pass on.", "The spirits burned up in its ominous flame lose their way and wander this world forever.", "Its large tusks have a tendency to break, but each time they grow back, they grow in harder and sturdier.", "A broken tusk will not grow back, so it diligently sharpens its tusks on river rocks after the end of a battle.", "Its tusks are incredibly destructive. They can easily slice through a thick, sturdy steel column every time.", "Their snot is a barometer of health. When healthy, their snot is sticky and the power of their ice moves increases.", "They love the cold seas of the north. They create pathways across the ocean waters by freezing their own breath.", "They are composed of ice crystals. They capture prey with chains of ice, freezing the prey at -148\' F.", "When it and Karrablast are together, and both receive electrical stimulation, they both evolve.", "When its body dries out, it weakens. So it wraps a membrane around itself for protection while it spits poison.", "When its opponent can\'t be paralyzed, it contorts itself with unexpected speed and flops away.", "It takes pride in the speed at which it can use moves. What it loses in power, it makes up for in quantity.", "Using the long fur on its arms like whips, it launches into combo attacks that, once started, no one can stop.", "It runs through the narrow tunnels formed by Excadrill and Onix. It uses its sharp claws to catch prey.", "Ancient science fashioned this Pokemon from clay. It\'s been active for thousands of years.", "Golurk were created to protect people and Pokemon. They run on a mysterious energy.", "Ignoring their injuries, groups attack by sinking the blades that cover their bodies into their prey.", "This pitiless Pokemon commands a group of Pawniard to hound prey into immobility. It then moves in to finish the prey off.", "They are known to charge so wildly that if a train were to enter their territory, they would send it flying.", "It stands up to massive opponents, not out of courage, but out of recklessness. But that is how it gets stronger.", "For the sake of its friends, this brave warrior of the sky will not stop battling, even if injured.", "Their wings are too tiny to allow them to fly. They guard their posteriors with bones that were gathered by Mandibuzz.", "They fly in circles around the sky. When they spot prey, they attack and carry it back to their nest with ease.", "It draws in air through its tail, transforms it into fire, and uses it like a tongue. It melts Durant and eats them.", "Individuals each play different roles in driving Heatmor, their natural predator, away from their colony.", "Lacking sight, it\'s unaware of its surroundings, so it bumps into things and eats anything that moves.", "The two heads do not get along. Whichever head eats more than the other gets to be the leader.", "It responds to movement by attacking. This scary, three-headed Pokemon devours everything in its path!", "Said to have been born from the sun, it spews fire from its horns and encases itself in a cocoon of fire when it evolves.", "Thought to be an embodiment of the sun, it appeared during a bitterly cold winter and saved Pokemon from freezing.", "It has a body and heart of steel. It worked with its allies to punish people when they hurt Pokemon.", "Spoken of in legend, this Pokemon used its phenomenal power to destroy a castle in its effort to protect Pokemon.", "Legends say this Pokemon confounded opponents with its swift movements.", "In every direction it flies, creating winds so powerful, they blow everything away.", "As it flies around, it shoots lightning all over the place and causes forest fires. It is therefore disliked.", "This legendary Pokemon can scorch the world with fire. It helps those who want to build a world of truth.", "This legendary Pokemon can scorch the world with lightning. It assists those who want to build an ideal world.", "From the forces of lightning and wind, it creates energy to give nutrients to the soil and make the land abundant.", "This legendary ice Pokemon waits for a hero to fill in the missing parts of its body with truth or ideals.", "When it is resolute, its body fills with power and it becomes swifter. Its jumps are then too fast to follow.", "The melodies sung by Meloetta have the power to make Pokemon that hear them happy or sad.", "This Pokemon existed 300 million years ago. Team Plasma altered it and attached a cannon to its back.", "The quills on its head are usually soft. When it flexes them, the points become so hard and sharp that they can pierce rock.", "It relies on its sturdy shell to deflect predators\' attacks. It counterattacks with its sharp quills.", "Its Tackle is forceful enough to flip a 50-ton tank. It shields its allies from danger with its own body.", "Eating a twig fills it with energy,  and its roomy ears give vent to air  hotter than 390 degrees Fahrenheit.", "It has a twig stuck in its tail. With  friction from its tail fur, it sets the  twig on fire and launches into battle.", "It gazes into the flame at the tip of its branch to achieve a focused state, which allows it to see into the future.", "It secretes flexible bubbles from its chest and back. The bubbles reduce the damage it would otherwise take when attacked.", "It can throw bubble-covered pebbles with precise control, hitting empty cans up to a hundred feet away.", "It creates throwing stars out of compressed water. When it spins them and throws them at high speed, these stars can split metal in two.", "They use their large ears to dig burrows.  They will dig the whole night through.", "With their powerful ears, they can heft boulders of a ton or more with ease. They can be a big help at construction sites.", "These friendly Pokemon send signals to one another with beautiful chirps and tail-feather movements.", "From its beak, it expels embers that set  the tall grass on fire. Then it pounces on  the bewildered prey that pop out of the grass.", "In the fever of an exciting battle, it showers embers from the gaps between  its feathers and takes to the air.", "When under attack from bird Pokemon, it spews a poisonous black powder that causes paralysis on contact.", "It lives hidden within thicket shadows. When predators attack, it quickly bristles the fur  covering its body in an effort to threaten them.", "Vivillon with many different patterns are  found all over the world. These patterns  are affected by the climate of their habitat.", "The stronger the opponent it faces, the more heat surges from its mane and the more power flows through its body.", "The male with the largest mane of fire  is the leader of the pride.", "It draws out and controls the hidden power of flowers. The flower Flab\'b\' holds is most likely part of its body.", "It flutters around fields of flowers and cares for flowers that are starting to wilt. It draws out the hidden power of flowers to battle.", "It claims exquisite flower gardens as its territory, and it obtains power from basking in the energy emitted by flowering plants.", "Thought to be one of the first Pokemon to live in harmony with humans, it has a placid disposition.", "It can tell how its Trainer is feeling by subtle shifts in the grip on its horns. This empathic sense lets them run as if one being.", "It does its best to be taken seriously by its enemies, but its glare is not sufficiently intimidating. Chewing on a leaf is its trademark.", "Although it posses a violent temperament, it won\'t put up with bullying. It uses the leaf in its mouth to sense the movements of its enemies.", "Trimming its fluffy fur not only makes  it more elegant but also increases the  swiftness of its movements.", "The organ that emits its intense psychic power is sheltered by its ears to keep power from leaking out.", "When in danger, it raises its ears and releases enough psychic power to grind a 10-ton truck into dust.", "Apparently this Pokemon is born when a departed spirit inhabits a sword. It attaches itself to people and drinks their life force.", "When Honedge evolves, it divides into two swords, which cooperate via telepathy to coordinate attacks and slash their enemies to ribbons.", "Generations of kings were attended by these Pokemon, which used their spectral power to manipulate and control people and Pokemon.", "It emits a scent that enraptures those who smell it. This fragance changes depending on what it has eaten.", "It devises various scents, pleasant and unpleasant, and emits scents that its enemies dislike in order to gain an edge in battle.", "To entangle its opponents in battle, it extrudes  white threads as sweet and sticky as cotton candy.", "It can distinguish the faintest of scents. It puts its sensitive sense of smell to use by helping pastry chefs in their work.", "Opponents who stare at the flashing of the  light-emitting spots on its body become dazed and lose their will to fight.", "It wields the most compelling hypnotic powers of any Pokemon, and it forces others to do whatever it wants.", "Two Binacle live together on one rock. When they fight, one of them will move to a different rock.", "When they evolve, two Binacle multiply into seven. They fight with the power of seven Binacle.", "Camouflaged as rotten kelp, they spray liquid poison on prey that approaches unawares and then finish it off.", "Their poison is strong enough to eat through the hull of a tanker, and they spit it indiscriminately at anything that enters their territory.", "They knock down flying prey by firing  compressed water from their massive  claws like shooting a pistol.", "Their enormous claws launch cannonballs of water powerful enough to pierce tanker hulls.", "They make their home in deserts. They can  generate their energy from basking in the sun,  so eating food is not a requirement. ", "They flare their frills and generate energy. A single Heliolisk can generate sufficient electricity to power a skyscraper.", "This Pokemon was restored from a fossil. If something happens that it doesn\'t like, it throws a tantrum and runs wild.", "Thanks to its gargantuan jaws, which could shred thick metal plates as if they were paper, it was invincible in the ancient world it once inhabited.", "This ancient Pokemon was restored  from part of its body that had been  frozen in ice for over 100 million years.", "The diamond-shaped crystals on its body expel air as cold as -240 degrees Fahrenheit, surrounding its enemies and encasing them in ice.", "It sends a soothing aura from its ribbonlike feelers to calm fights.", "Although its body is small, its proficient fighting skills enable it to keep up with big bruisers like Machamp and Hariyama.", "Its whiskers serve as antennas. By sending and  receiving electrical waves, it can communicate  with others over vast distances.", "Born from the temperatures and pressures deep underground, it fires beams from the stone in its head.", "The weakest Dragon-Type Pokemon, it lives in damp, shady places, so its body doesn\'t dry out.", "It drives away opponents by excreting a  sticky liquid that can dissolve anything.  Its eyes devolved, so it can\'t see anything. ", "This very friendly Dragon-type Pokemon will hug its beloved trainer, leaving that trainer covered in sticky slime", "These key collectors threaten any attackers by fiercely jingling their keys at them.", "These Pokemon are created when spirits possess rotten tree stumps. They prefer to live in abandoned forests.", "It can control trees at will. It will trap people who harm the forest, so they can never leave.", "The pumpkin body is inhabited by a spirit trapped in this world. As the sun sets, it becomes restless and active.", "Singing in eerie voices, they wander town streets on the night of the new moon. Anyone who hears their song is cursed.", "It blocks opponents\' attacks with the ice that shields its body. it uses cold air to repair any cracks with new ice.", "Its ice-covered body is as hard as steel. Its cumbersome frame crushes anything that stands in its way.", "They live in pitch-black caves. Their enormous ears can emit ultrasonic waves of 200,000 hertz.", "They fly around on moonless nights and attack careless prey. Nothing can beat them in a battle in the dark.", "Legends say it can share eternal life. It slept for a thousand years in the form of a tree before its revival.", "When this legendary Pokemon\'s wings and tail feathers spread wide and glow red, it absorbs the life force of living creatures.", "When the Kalos region\'s ecosystem falls into disarray, it appears and reveals its secret power."];
var moveData = [["", "", "", "", "", ""], [100, 40, "Physical", "No additional effect.", "Pound", "Normal"], [100, 50, "Physical", "High critical hit ratio.", "Karate Chop", "Fighting"], [85, 15, "Physical", "Hits 2-5 times in one turn.", "Double Slap", "Normal"], [85, 18, "Physical", "Hits 2-5 times in one turn.", "Comet Punch", "Normal"], [85, 80, "Physical", "No additional effect.", "Mega Punch", "Normal"], [100, 40, "Physical", "Scatters coins.", "Pay Day", "Normal"], [100, 75, "Physical", "10% chance to burn the target.", "Fire Punch", "Fire"], [100, 75, "Physical", "10% chance to freeze the target.", "Ice Punch", "Ice"], [100, 75, "Physical", "10% chance to paralyze the target.", "Thunder Punch", "Electric"], [100, 40, "Physical", "No additional effect.", "Scratch", "Normal"], [100, 55, "Physical", "No additional effect.", "Vice Grip", "Normal"], [30, 0, "Physical", "OHKOs the target. Fails if user is a lower level.", "Guillotine", "Normal"], [100, 80, "Special", "Charges, then hits foe(s) turn 2. High crit ratio.", "Razor Wind", "Normal"], [true, 0, "Status", "Raises the user\'s Attack by 2.", "Swords Dance", "Normal"], [95, 50, "Physical", "No additional effect.", "Cut", "Normal"], [100, 40, "Special", "Power doubles during Fly, Bounce, and Sky Drop.", "Gust", "Flying"], [100, 60, "Physical", "No additional effect.", "Wing Attack", "Flying"], [true, 0, "Status", "Forces the target to switch to a random ally.", "Whirlwind", "Normal"], [95, 90, "Physical", "Flies up on first turn, then strikes the next turn.", "Fly", "Flying"], [85, 15, "Physical", "Traps and damages the target for 4-5 turns.", "Bind", "Normal"], [75, 80, "Physical", "No additional effect.", "Slam", "Normal"], [100, 45, "Physical", "No additional effect.", "Vine Whip", "Grass"], [100, 65, "Physical", "30% chance to flinch the target.", "Stomp", "Normal"], [100, 30, "Physical", "Hits 2 times in one turn.", "Double Kick", "Fighting"], [75, 120, "Physical", "No additional effect.", "Mega Kick", "Normal"], [95, 100, "Physical", "User is hurt by 50% of its max HP if it misses.", "Jump Kick", "Fighting"], [85, 60, "Physical", "30% chance to flinch the target.", "Rolling Kick", "Fighting"], [100, 0, "Status", "Lowers the target\'s accuracy by 1.", "Sand Attack", "Ground"], [100, 70, "Physical", "30% chance to flinch the target.", "Headbutt", "Normal"], [100, 65, "Physical", "No additional effect.", "Horn Attack", "Normal"], [85, 15, "Physical", "Hits 2-5 times in one turn.", "Fury Attack", "Normal"], [30, 0, "Physical", "OHKOs the target. Fails if user is a lower level.", "Horn Drill", "Normal"], [100, 40, "Physical", "No additional effect.", "Tackle", "Normal"], [100, 85, "Physical", "30% chance to paralyze the target.", "Body Slam", "Normal"], [90, 15, "Physical", "Traps and damages the target for 4-5 turns.", "Wrap", "Normal"], [85, 90, "Physical", "Has 1/4 recoil.", "Take Down", "Normal"], [100, 120, "Physical", "Lasts 2-3 turns. Confuses the user afterwards.", "Thrash", "Normal"], [100, 120, "Physical", "Has 33% recoil.", "Double-Edge", "Normal"], [100, 0, "Status", "Lowers the foe(s) Defense by 1.", "Tail Whip", "Normal"], [100, 15, "Physical", "30% chance to poison the target.", "Poison Sting", "Poison"], [100, 25, "Physical", "Hits 2 times. Each hit has 20% chance to poison.", "Twineedle", "Bug"], [95, 25, "Physical", "Hits 2-5 times in one turn.", "Pin Missile", "Bug"], [100, 0, "Status", "Lowers the foe(s) Defense by 1.", "Leer", "Normal"], [100, 60, "Physical", "30% chance to flinch the target.", "Bite", "Dark"], [100, 0, "Status", "Lowers the foe(s) Attack by 1.", "Growl", "Normal"], [true, 0, "Status", "Forces the target to switch to a random ally.", "Roar", "Normal"], [55, 0, "Status", "Puts the target to sleep.", "Sing", "Normal"], [55, 0, "Status", "Confuses the target.", "Supersonic", "Normal"], [90, 0, "Special", "Always does 20 HP of damage.", "Sonic Boom", "Normal"], [100, 0, "Status", "For 4 turns, disables the target\'s last move used.", "Disable", "Normal"], [100, 40, "Special", "10% chance to lower the foe(s) Sp. Def by 1.", "Acid", "Poison"], [100, 40, "Special", "10% chance to burn the target.", "Ember", "Fire"], [100, 90, "Special", "10% chance to burn the target.", "Flamethrower", "Fire"], [true, 0, "Status", "For 5 turns, protects user\'s party from stat drops.", "Mist", "Ice"], [100, 40, "Special", "No additional effect.", "Water Gun", "Water"], [80, 110, "Special", "No additional effect.", "Hydro Pump", "Water"], [100, 90, "Special", "Hits adjacent Pokemon. Power doubles on Dive.", "Surf", "Water"], [100, 90, "Special", "10% chance to freeze the target.", "Ice Beam", "Ice"], [70, 110, "Special", "10% chance to freeze the foe(s).", "Blizzard", "Ice"], [100, 65, "Special", "10% chance to confuse the target.", "Psybeam", "Psychic"], [100, 65, "Special", "10% chance to lower the target\'s Speed by 1.", "Bubble Beam", "Water"], [100, 65, "Special", "10% chance to lower the foe\'s Attack by 1.", "Aurora Beam", "Ice"], [90, 150, "Special", "User cannot move next turn.", "Hyper Beam", "Normal"], [100, 35, "Physical", "No additional effect.", "Peck", "Flying"], [100, 80, "Physical", "No additional effect.", "Drill Peck", "Flying"], [80, 80, "Physical", "Has 1/4 recoil.", "Submission", "Fighting"], [100, 0, "Physical", "More power the heavier the target.", "Low Kick", "Fighting"], [100, 0, "Physical", "If hit by physical attack, returns double damage.", "Counter", "Fighting"], [100, 0, "Physical", "Does damage equal to the user\'s level.", "Seismic Toss", "Fighting"], [100, 80, "Physical", "No additional effect.", "Strength", "Normal"], [100, 20, "Special", "User recovers 50% of the damage dealt.", "Absorb", "Grass"], [100, 40, "Special", "User recovers 50% of the damage dealt.", "Mega Drain", "Grass"], [90, 0, "Status", "1/8 of target\'s HP is restored to user every turn.", "Leech Seed", "Grass"], [true, 0, "Status", "Raises user\'s Attack and Sp. Atk by 1; 2 in Sun.", "Growth", "Normal"], [95, 55, "Physical", "High critical hit ratio. Hits adjacent foes.", "Razor Leaf", "Grass"], [100, 120, "Special", "Charges turn 1. Hits turn 2. No charge in sunlight.", "Solar Beam", "Grass"], [75, 0, "Status", "Poisons the target.", "Poison Powder", "Poison"], [75, 0, "Status", "Paralyzes the target.", "Stun Spore", "Grass"], [75, 0, "Status", "Puts the target to sleep.", "Sleep Powder", "Grass"], [100, 120, "Special", "Lasts 2-3 turns. Confuses the user afterwards.", "Petal Dance", "Grass"], [95, 0, "Status", "Lowers the foe(s) Speed by 2.", "String Shot", "Bug"], [100, 0, "Special", "Always does 40 HP of damage.", "Dragon Rage", "Dragon"], [85, 35, "Special", "Traps and damages the target for 4-5 turns.", "Fire Spin", "Fire"], [100, 40, "Special", "10% chance to paralyze the target.", "Thunder Shock", "Electric"], [100, 90, "Special", "10% chance to paralyze the target.", "Thunderbolt", "Electric"], [90, 0, "Status", "Paralyzes the target.", "Thunder Wave", "Electric"], [70, 110, "Special", "30% chance to paralyze target. Can\'t miss in rain.", "Thunder", "Electric"], [90, 50, "Physical", "No additional effect.", "Rock Throw", "Rock"], [100, 100, "Physical", "Hits adjacent Pokemon. Power doubles on Dig.", "Earthquake", "Ground"], [30, 0, "Physical", "OHKOs the target. Fails if user is a lower level.", "Fissure", "Ground"], [100, 80, "Physical", "Digs underground turn 1, strikes turn 2.", "Dig", "Ground"], [90, 0, "Status", "Badly poisons the target.", "Toxic", "Poison"], [100, 50, "Special", "10% chance to confuse the target.", "Confusion", "Psychic"], [100, 90, "Special", "10% chance to lower the target\'s Sp. Def by 1.", "Psychic", "Psychic"], [60, 0, "Status", "Puts the target to sleep.", "Hypnosis", "Psychic"], [true, 0, "Status", "Raises the user\'s Attack by 1.", "Meditate", "Psychic"], [true, 0, "Status", "Raises the user\'s Speed by 2.", "Agility", "Psychic"], [100, 40, "Physical", "Usually goes first.", "Quick Attack", "Normal"], [100, 20, "Physical", "Raises the user\'s Attack by 1 if hit during use.", "Rage", "Normal"], [true, 0, "Status", "Flee from wild Pokemon battles.", "Teleport", "Psychic"], [100, 0, "Special", "Does damage equal to the user\'s level.", "Night Shade", "Ghost"], [true, 0, "Status", "The last move the target used replaces this one.", "Mimic", "Normal"], [85, 0, "Status", "Lowers the target\'s Defense by 2.", "Screech", "Normal"], [true, 0, "Status", "Raises the user\'s evasiveness by 1.", "Double Team", "Normal"], [true, 0, "Status", "Heals the user by 50% of its max HP.", "Recover", "Normal"], [true, 0, "Status", "Raises the user\'s Defense by 1.", "Harden", "Normal"], [true, 0, "Status", "Raises the user\'s evasiveness by 2.", "Minimize", "Normal"], [100, 0, "Status", "Lowers the target\'s accuracy by 1.", "Smokescreen", "Normal"], [100, 0, "Status", "Confuses the target.", "Confuse Ray", "Ghost"], [true, 0, "Status", "Raises the user\'s Defense by 1.", "Withdraw", "Water"], [true, 0, "Status", "Raises the user\'s Defense by 1.", "Defense Curl", "Normal"], [true, 0, "Status", "Raises the user\'s Defense by 2.", "Barrier", "Psychic"], [true, 0, "Status", "For 5 turns, special damage to allies is halved.", "Light Screen", "Psychic"], [true, 0, "Status", "Eliminates all stat changes.", "Haze", "Ice"], [true, 0, "Status", "For 5 turns, physical damage to allies is halved.", "Reflect", "Psychic"], [true, 0, "Status", "Raises the user\'s critical hit ratio by 2.", "Focus Energy", "Normal"], [true, 0, "Physical", "Waits 2 turns; deals double the damage taken.", "Bide", "Normal"], [true, 0, "Status", "Picks a random move.", "Metronome", "Normal"], [true, 0, "Status", "User uses the target\'s last used move against it.", "Mirror Move", "Flying"], [100, 200, "Physical", "Hits adjacent Pokemon. The user faints.", "Self-Destruct", "Normal"], [75, 100, "Physical", "No additional effect.", "Egg Bomb", "Normal"], [100, 30, "Physical", "30% chance to paralyze the target.", "Lick", "Ghost"], [70, 30, "Special", "40% chance to poison the target.", "Smog", "Poison"], [100, 65, "Special", "30% chance to poison the target.", "Sludge", "Poison"], [85, 65, "Physical", "10% chance to flinch the target.", "Bone Club", "Ground"], [85, 110, "Special", "10% chance to burn the target.", "Fire Blast", "Fire"], [100, 80, "Physical", "20% chance to flinch the target.", "Waterfall", "Water"], [85, 35, "Physical", "Traps and damages the target for 4-5 turns.", "Clamp", "Water"], [true, 60, "Special", "This move does not check accuracy. Hits foes.", "Swift", "Normal"], [100, 130, "Physical", "Raises user\'s Defense by 1 on turn 1. Hits turn 2.", "Skull Bash", "Normal"], [100, 20, "Physical", "Hits 2-5 times in one turn.", "Spike Cannon", "Normal"], [100, 10, "Physical", "10% chance to lower the target\'s Speed by 1.", "Constrict", "Normal"], [true, 0, "Status", "Raises the user\'s Sp. Def by 2.", "Amnesia", "Psychic"], [80, 0, "Status", "Lowers the target\'s accuracy by 1.", "Kinesis", "Psychic"], [true, 0, "Status", "Heals the user by 50% of its max HP.", "Soft-Boiled", "Normal"], [90, 130, "Physical", "User is hurt by 50% of its max HP if it misses.", "High Jump Kick", "Fighting"], [100, 0, "Status", "Paralyzes the target.", "Glare", "Normal"], [100, 100, "Special", "User gains 1/2 HP inflicted. Sleeping target only.", "Dream Eater", "Psychic"], [90, 0, "Status", "Poisons the foe(s).", "Poison Gas", "Poison"], [85, 15, "Physical", "Hits 2-5 times in one turn.", "Barrage", "Normal"], [100, 80, "Physical", "User recovers 50% of the damage dealt.", "Leech Life", "Bug"], [75, 0, "Status", "Puts the target to sleep.", "Lovely Kiss", "Normal"], [90, 140, "Physical", "Charges, then hits turn 2. 30% flinch. High crit.", "Sky Attack", "Flying"], [true, 0, "Status", "Copies target\'s stats, moves, types, and Ability.", "Transform", "Normal"], [100, 40, "Special", "10% chance to lower the foe(s) Speed by 1.", "Bubble", "Water"], [100, 70, "Physical", "20% chance to confuse the target.", "Dizzy Punch", "Normal"], [100, 0, "Status", "Puts the target to sleep.", "Spore", "Grass"], [100, 0, "Status", "Lowers the target\'s accuracy by 1.", "Flash", "Normal"], [100, 0, "Special", "Random damage equal to 0.5x-1.5x user\'s level.", "Psywave", "Psychic"], [true, 0, "Status", "Does nothing.", "Splash", "Normal"], [true, 0, "Status", "Raises the user\'s Defense by 2.", "Acid Armor", "Poison"], [90, 100, "Physical", "High critical hit ratio.", "Crabhammer", "Water"], [100, 250, "Physical", "Hits adjacent Pokemon. The user faints.", "Explosion", "Normal"], [80, 18, "Physical", "Hits 2-5 times in one turn.", "Fury Swipes", "Normal"], [90, 50, "Physical", "Hits 2 times in one turn.", "Bonemerang", "Ground"], [true, 0, "Status", "User sleeps 2 turns and restores HP and status.", "Rest", "Psychic"], [90, 75, "Physical", "30% chance to flinch the foe(s).", "Rock Slide", "Rock"], [90, 80, "Physical", "10% chance to flinch the target.", "Hyper Fang", "Normal"], [true, 0, "Status", "Raises the user\'s Attack by 1.", "Sharpen", "Normal"], [true, 0, "Status", "Changes user\'s type to match its first move.", "Conversion", "Normal"], [100, 80, "Special", "20% chance to paralyze or burn or freeze target.", "Tri Attack", "Normal"], [90, 0, "Physical", "Does damage equal to 1/2 target\'s current HP.", "Super Fang", "Normal"], [100, 70, "Physical", "High critical hit ratio.", "Slash", "Normal"], [true, 0, "Status", "User takes 1/4 its max HP to put in a Substitute.", "Substitute", "Normal"], [true, 50, "Physical", "User loses 25% of its max HP as recoil.", "Struggle", "Normal"], [true, 0, "Status", "Permanently copies the last move target used.", "Sketch", "Normal"], [90, 10, "Physical", "Hits 3 times. Each hit can miss, but power rises.", "Triple Kick", "Fighting"], [100, 60, "Physical", "If the user has no item, it steals the target\'s.", "Thief", "Dark"], [true, 0, "Status", "The target cannot switch out.", "Spider Web", "Bug"], [true, 0, "Status", "User\'s next move will not miss the target.", "Mind Reader", "Normal"], [100, 0, "Status", "A sleeping target is hurt by 1/4 max HP per turn.", "Nightmare", "Ghost"], [100, 60, "Physical", "10% chance to burn the target. Thaws user.", "Flame Wheel", "Fire"], [100, 50, "Special", "User must be asleep. 30% chance to flinch target.", "Snore", "Normal"], [true, 0, "Status", "Curses if Ghost, else +1 Atk, +1 Def, -1 Spe.", "Curse", "Ghost"], [100, 0, "Physical", "More power the less HP the user has left.", "Flail", "Normal"], [true, 0, "Status", "Changes user\'s type to resist target\'s last move.", "Conversion 2", "Normal"], [95, 100, "Special", "High critical hit ratio.", "Aeroblast", "Flying"], [100, 0, "Status", "Lowers the target\'s Speed by 2.", "Cotton Spore", "Grass"], [100, 0, "Physical", "More power the less HP the user has left.", "Reversal", "Fighting"], [100, 0, "Status", "Lowers the PP of the target\'s last move by 4.", "Spite", "Ghost"], [100, 40, "Special", "10% chance to freeze the foe(s).", "Powder Snow", "Ice"], [true, 0, "Status", "Prevents moves from affecting the user this turn.", "Protect", "Normal"], [100, 40, "Physical", "Usually goes first.", "Mach Punch", "Fighting"], [100, 0, "Status", "Lowers the target\'s Speed by 2.", "Scary Face", "Normal"], [true, 60, "Physical", "This move does not check accuracy.", "Feint Attack", "Dark"], [75, 0, "Status", "Confuses the target.", "Sweet Kiss", "Fairy"], [true, 0, "Status", "User loses 50% max HP. Maximizes Attack.", "Belly Drum", "Normal"], [100, 90, "Special", "30% chance to poison the target.", "Sludge Bomb", "Poison"], [100, 20, "Special", "100% chance to lower the target\'s accuracy by 1.", "Mud-Slap", "Ground"], [85, 65, "Special", "50% chance to lower the target\'s accuracy by 1.", "Octazooka", "Water"], [true, 0, "Status", "Hurts grounded foes on switch-in. Max 3 layers.", "Spikes", "Ground"], [50, 120, "Special", "100% chance to paralyze the target.", "Zap Cannon", "Electric"], [true, 0, "Status", "Fighting, Normal hit Ghost. Evasiveness ignored.", "Foresight", "Normal"], [true, 0, "Status", "If an opponent knocks out the user, it also faints.", "Destiny Bond", "Ghost"], [true, 0, "Status", "All active Pokemon will faint in 3 turns.", "Perish Song", "Normal"], [95, 55, "Special", "100% chance to lower the foe(s) Speed by 1.", "Icy Wind", "Ice"], [true, 0, "Status", "Prevents moves from affecting the user this turn.", "Detect", "Fighting"], [90, 25, "Physical", "Hits 2-5 times in one turn.", "Bone Rush", "Ground"], [true, 0, "Status", "User\'s next move will not miss the target.", "Lock-On", "Normal"], [100, 120, "Physical", "Lasts 2-3 turns. Confuses the user afterwards.", "Outrage", "Dragon"], [true, 0, "Status", "For 5 turns, a sandstorm rages.", "Sandstorm", "Rock"], [100, 75, "Special", "User recovers 50% of the damage dealt.", "Giga Drain", "Grass"], [true, 0, "Status", "The user survives the next hit with at least 1 HP.", "Endure", "Normal"], [100, 0, "Status", "Lowers the target\'s Attack by 2.", "Charm", "Fairy"], [90, 30, "Physical", "Power doubles with each hit. Repeats for 5 turns.", "Rollout", "Rock"], [100, 40, "Physical", "Always leaves the target with at least 1 HP.", "False Swipe", "Normal"], [85, 0, "Status", "Raises the target\'s Attack by 2 and confuses it.", "Swagger", "Normal"], [true, 0, "Status", "Heals the user by 50% of its max HP.", "Milk Drink", "Normal"], [100, 65, "Physical", "30% chance to paralyze the target.", "Spark", "Electric"], [95, 40, "Physical", "Power doubles with each hit, up to 160.", "Fury Cutter", "Bug"], [90, 70, "Physical", "10% chance to raise the user\'s Defense by 1.", "Steel Wing", "Steel"], [true, 0, "Status", "The target cannot switch out.", "Mean Look", "Normal"], [100, 0, "Status", "A target of the opposite gender gets infatuated.", "Attract", "Normal"], [true, 0, "Status", "User must be asleep. Uses another known move.", "Sleep Talk", "Normal"], [true, 0, "Status", "Cures the user\'s party of all status conditions.", "Heal Bell", "Normal"], [100, 0, "Physical", "Max 102 power at maximum Happiness.", "Return", "Normal"], [90, 0, "Physical", "40, 80, 120 power, or heals target by 1/4 max HP.", "Present", "Normal"], [100, 0, "Physical", "Max 102 power at minimum Happiness.", "Frustration", "Normal"], [true, 0, "Status", "For 5 turns, protects user\'s party from status.", "Safeguard", "Normal"], [true, 0, "Status", "Shares HP of user and target equally.", "Pain Split", "Normal"], [95, 100, "Physical", "50% chance to burn the target. Thaws user.", "Sacred Fire", "Fire"], [100, 0, "Physical", "Hits adjacent Pokemon. Power varies; 2x on Dig.", "Magnitude", "Ground"], [50, 100, "Physical", "100% chance to confuse the target.", "Dynamic Punch", "Fighting"], [85, 120, "Physical", "No additional effect.", "Megahorn", "Bug"], [100, 60, "Special", "30% chance to paralyze the target.", "Dragon Breath", "Dragon"], [true, 0, "Status", "User switches, passing stat changes and more.", "Baton Pass", "Normal"], [100, 0, "Status", "The target repeats its last move for 3 turns.", "Encore", "Normal"], [100, 40, "Physical", "Power doubles if a foe is switching out.", "Pursuit", "Dark"], [100, 20, "Physical", "Frees user from hazards/partial trap/Leech Seed.", "Rapid Spin", "Normal"], [100, 0, "Status", "Lowers the foe(s) evasion by 2.", "Sweet Scent", "Normal"], [75, 100, "Physical", "30% chance to lower the target\'s Defense by 1.", "Iron Tail", "Steel"], [95, 50, "Physical", "10% chance to raise the user\'s Attack by 1.", "Metal Claw", "Steel"], [true, 70, "Physical", "This move does not check accuracy. Goes last.", "Vital Throw", "Fighting"], [true, 0, "Status", "Heals the user by a weather-dependent amount.", "Morning Sun", "Normal"], [true, 0, "Status", "Heals the user by a weather-dependent amount.", "Synthesis", "Grass"], [true, 0, "Status", "Heals the user by a weather-dependent amount.", "Moonlight", "Fairy"], [100, 60, "Special", "Varies in type based on the user\'s IVs.", "Hidden Power", "Normal"], [80, 100, "Physical", "High critical hit ratio.", "Cross Chop", "Fighting"], [100, 40, "Special", "20% chance to flinch the foe(s).", "Twister", "Dragon"], [true, 0, "Status", "For 5 turns, heavy rain powers Water moves.", "Rain Dance", "Water"], [true, 0, "Status", "For 5 turns, intense sunlight powers Fire moves.", "Sunny Day", "Fire"], [100, 80, "Physical", "20% chance to lower the target\'s Defense by 1.", "Crunch", "Dark"], [100, 0, "Special", "If hit by special attack, returns double damage.", "Mirror Coat", "Psychic"], [true, 0, "Status", "Copies the target\'s current stat stages.", "Psych Up", "Normal"], [100, 80, "Physical", "Nearly always goes first.", "Extreme Speed", "Normal"], [100, 60, "Special", "10% chance to raise all stats by 1 (not acc/eva).", "Ancient Power", "Rock"], [100, 80, "Special", "20% chance to lower the target\'s Sp. Def by 1.", "Shadow Ball", "Ghost"], [100, 120, "Special", "Hits two turns after being used.", "Future Sight", "Psychic"], [100, 40, "Physical", "50% chance to lower the target\'s Defense by 1.", "Rock Smash", "Fighting"], [85, 35, "Special", "Traps and damages the target for 4-5 turns.", "Whirlpool", "Water"], [100, 0, "Physical", "All healthy allies aid in damaging the target.", "Beat Up", "Dark"], [100, 40, "Physical", "Hits first. First turn out only. 100% flinch chance.", "Fake Out", "Normal"], [100, 90, "Special", "Lasts 3 turns. Active Pokemon cannot fall asleep.", "Uproar", "Normal"], [true, 0, "Status", "Raises user\'s Defense, Sp. Def by 1. Max 3 uses.", "Stockpile", "Normal"], [100, 0, "Special", "More power with more uses of Stockpile.", "Spit Up", "Normal"], [true, 0, "Status", "Heals the user based on uses of Stockpile.", "Swallow", "Normal"], [90, 95, "Special", "10% chance to burn the foe(s).", "Heat Wave", "Fire"], [true, 0, "Status", "For 5 turns, hail crashes down.", "Hail", "Ice"], [100, 0, "Status", "Target can\'t select the same move twice in a row.", "Torment", "Dark"], [100, 0, "Status", "Raises the target\'s Sp. Atk by 1 and confuses it.", "Flatter", "Dark"], [85, 0, "Status", "Burns the target.", "Will-O-Wisp", "Fire"], [100, 0, "Status", "Lowers target\'s Attack, Sp. Atk by 2. User faints.", "Memento", "Dark"], [100, 70, "Physical", "Power doubles if user is burn/poison/paralyzed.", "Facade", "Normal"], [100, 150, "Physical", "Fails if the user takes damage before it hits.", "Focus Punch", "Fighting"], [100, 70, "Physical", "Power doubles if target is paralyzed, and cures it.", "Smelling Salts", "Normal"], [true, 0, "Status", "The foes\' moves target the user on the turn used.", "Follow Me", "Normal"], [true, 0, "Status", "Attack depends on terrain (default Tri Attack).", "Nature Power", "Normal"], [true, 0, "Status", "Boosts next Electric move and user\'s Sp. Def by 1.", "Charge", "Electric"], [100, 0, "Status", "For 3 turns, the target can\'t use status moves.", "Taunt", "Dark"], [true, 0, "Status", "One adjacent ally\'s move power is 1.5x this turn.", "Helping Hand", "Normal"], [100, 0, "Status", "User switches its held item with the target\'s.", "Trick", "Psychic"], [true, 0, "Status", "User replaces its Ability with the target\'s.", "Role Play", "Psychic"], [true, 0, "Status", "Next turn, 50% of the user\'s max HP is restored.", "Wish", "Normal"], [true, 0, "Status", "Uses a random move known by a team member.", "Assist", "Normal"], [true, 0, "Status", "User recovers 1/16 max HP per turn. Traps user.", "Ingrain", "Grass"], [100, 120, "Physical", "Lowers the user\'s Attack and Defense by 1.", "Superpower", "Fighting"], [true, 0, "Status", "Bounces back certain non-damaging moves.", "Magic Coat", "Psychic"], [true, 0, "Status", "Restores the item the user last used.", "Recycle", "Normal"], [100, 60, "Physical", "Power doubles if user is damaged by the target.", "Revenge", "Fighting"], [100, 75, "Physical", "Destroys screens, unless the target is immune.", "Brick Break", "Fighting"], [true, 0, "Status", "Puts the target to sleep after 1 turn.", "Yawn", "Normal"], [100, 65, "Physical", "1.5x damage if foe holds an item. Removes item.", "Knock Off", "Dark"], [100, 0, "Physical", "Lowers the target\'s HP to the user\'s HP.", "Endeavor", "Normal"], [100, 150, "Special", "Less power as user\'s HP decreases. Hits foe(s).", "Eruption", "Fire"], [true, 0, "Status", "The user and the target trade Abilities.", "Skill Swap", "Psychic"], [true, 0, "Status", "No foe can use any move known by the user.", "Imprison", "Psychic"], [true, 0, "Status", "User cures its burn, poison, or paralysis.", "Refresh", "Normal"], [true, 0, "Status", "If the user faints, the attack used loses all its PP.", "Grudge", "Ghost"], [true, 0, "Status", "User steals certain support moves to use itself.", "Snatch", "Dark"], [100, 70, "Physical", "Effect varies with terrain. (30% paralysis chance)", "Secret Power", "Normal"], [100, 80, "Physical", "Dives underwater turn 1, strikes turn 2.", "Dive", "Water"], [100, 15, "Physical", "Hits 2-5 times in one turn.", "Arm Thrust", "Fighting"], [true, 0, "Status", "Changes user\'s type by terrain (default Normal).", "Camouflage", "Normal"], [true, 0, "Status", "Raises the user\'s Sp. Atk by 3.", "Tail Glow", "Bug"], [100, 70, "Special", "50% chance to lower the target\'s Sp. Def by 1.", "Luster Purge", "Psychic"], [100, 70, "Special", "50% chance to lower the target\'s Sp. Atk by 1.", "Mist Ball", "Psychic"], [100, 0, "Status", "Lowers the target\'s Attack by 2.", "Feather Dance", "Flying"], [100, 0, "Status", "Confuses adjacent Pokemon.", "Teeter Dance", "Normal"], [90, 85, "Physical", "High critical hit ratio. 10% chance to burn.", "Blaze Kick", "Fire"], [true, 0, "Status", "For 5 turns, Electric-type attacks have 1/3 power.", "Mud Sport", "Ground"], [90, 30, "Physical", "Power doubles with each hit. Repeats for 5 turns.", "Ice Ball", "Ice"], [100, 60, "Physical", "30% chance to flinch the target.", "Needle Arm", "Grass"], [true, 0, "Status", "Heals the user by 50% of its max HP.", "Slack Off", "Normal"], [100, 90, "Special", "No additional effect. Hits adjacent foes.", "Hyper Voice", "Normal"], [100, 50, "Physical", "50% chance to badly poison the target.", "Poison Fang", "Poison"], [95, 75, "Physical", "50% chance to lower the target\'s Defense by 1.", "Crush Claw", "Normal"], [90, 150, "Special", "User cannot move next turn.", "Blast Burn", "Fire"], [90, 150, "Special", "User cannot move next turn.", "Hydro Cannon", "Water"], [90, 90, "Physical", "20% chance to raise the user\'s Attack by 1.", "Meteor Mash", "Steel"], [100, 30, "Physical", "30% chance to flinch the target.", "Astonish", "Ghost"], [100, 50, "Special", "Power doubles and type varies in each weather.", "Weather Ball", "Normal"], [true, 0, "Status", "Cures the user\'s party of all status conditions.", "Aromatherapy", "Grass"], [100, 0, "Status", "Lowers the target\'s Sp. Def by 2.", "Fake Tears", "Dark"], [95, 60, "Special", "High critical hit ratio. Hits adjacent foes.", "Air Cutter", "Flying"], [90, 130, "Special", "Lowers the user\'s Sp. Atk by 2.", "Overheat", "Fire"], [true, 0, "Status", "Fighting, Normal hit Ghost. Evasiveness ignored.", "Odor Sleuth", "Normal"], [95, 60, "Physical", "100% chance to lower the target\'s Speed by 1.", "Rock Tomb", "Rock"], [100, 60, "Special", "10% chance to raise all stats by 1 (not acc/eva).", "Silver Wind", "Bug"], [85, 0, "Status", "Lowers the target\'s Sp. Def by 2.", "Metal Sound", "Steel"], [55, 0, "Status", "Puts the target to sleep.", "Grass Whistle", "Grass"], [100, 0, "Status", "Lowers the target\'s Attack and Defense by 1.", "Tickle", "Normal"], [true, 0, "Status", "Raises the user\'s Defense and Sp. Def by 1.", "Cosmic Power", "Psychic"], [100, 150, "Special", "Less power as user\'s HP decreases. Hits foe(s).", "Water Spout", "Water"], [100, 75, "Special", "10% chance to confuse the target.", "Signal Beam", "Bug"], [true, 60, "Physical", "This move does not check accuracy.", "Shadow Punch", "Ghost"], [100, 80, "Special", "10% chance to flinch the target.", "Extrasensory", "Psychic"], [90, 85, "Physical", "Can hit Pokemon using Bounce, Fly, or Sky Drop.", "Sky Uppercut", "Fighting"], [85, 35, "Physical", "Traps and damages the target for 4-5 turns.", "Sand Tomb", "Ground"], [30, 0, "Special", "OHKOs a non-Ice target. Fails if user is a lower level.", "Sheer Cold", "Ice"], [85, 90, "Special", "30% chance to lower the foe(s) accuracy by 1.", "Muddy Water", "Water"], [100, 25, "Physical", "Hits 2-5 times in one turn.", "Bullet Seed", "Grass"], [true, 60, "Physical", "This move does not check accuracy.", "Aerial Ace", "Flying"], [100, 25, "Physical", "Hits 2-5 times in one turn.", "Icicle Spear", "Ice"], [true, 0, "Status", "Raises the user\'s Defense by 2.", "Iron Defense", "Steel"], [true, 0, "Status", "The target cannot switch out.", "Block", "Normal"], [true, 0, "Status", "Raises the user\'s Attack by 1.", "Howl", "Normal"], [100, 80, "Physical", "No additional effect.", "Dragon Claw", "Dragon"], [90, 150, "Special", "User cannot move next turn.", "Frenzy Plant", "Grass"], [true, 0, "Status", "Raises the user\'s Attack and Defense by 1.", "Bulk Up", "Fighting"], [85, 85, "Physical", "Bounces turn 1. Hits turn 2. 30% paralyze.", "Bounce", "Flying"], [95, 55, "Special", "100% chance to lower the target\'s Speed by 1.", "Mud Shot", "Ground"], [100, 50, "Physical", "High critical hit ratio. 10% chance to poison.", "Poison Tail", "Poison"], [100, 60, "Physical", "If the user has no item, it steals the target\'s.", "Covet", "Normal"], [100, 120, "Physical", "Has 33% recoil. 10% chance to paralyze target.", "Volt Tackle", "Electric"], [true, 60, "Special", "This move does not check accuracy.", "Magical Leaf", "Grass"], [true, 0, "Status", "For 5 turns, Fire-type attacks have 1/3 power.", "Water Sport", "Water"], [true, 0, "Status", "Raises the user\'s Sp. Atk and Sp. Def by 1.", "Calm Mind", "Psychic"], [100, 90, "Physical", "High critical hit ratio.", "Leaf Blade", "Grass"], [true, 0, "Status", "Raises the user\'s Attack and Speed by 1.", "Dragon Dance", "Dragon"], [90, 25, "Physical", "Hits 2-5 times in one turn.", "Rock Blast", "Rock"], [true, 60, "Special", "This move does not check accuracy.", "Shock Wave", "Electric"], [100, 60, "Special", "20% chance to confuse the target.", "Water Pulse", "Water"], [100, 140, "Special", "Hits two turns after being used.", "Doom Desire", "Steel"], [90, 140, "Special", "Lowers the user\'s Sp. Atk by 2.", "Psycho Boost", "Psychic"], [true, 0, "Status", "Heals 50% HP. Flying-type removed \'til turn ends.", "Roost", "Flying"], [true, 0, "Status", "For 5 turns, negates all Ground immunities.", "Gravity", "Psychic"], [true, 0, "Status", "Psychic hits Dark. Evasiveness ignored.", "Miracle Eye", "Psychic"], [100, 70, "Physical", "Power doubles if target is asleep, and wakes it.", "Wake-Up Slap", "Fighting"], [90, 100, "Physical", "Lowers the user\'s Speed by 1.", "Hammer Arm", "Fighting"], [100, 0, "Physical", "More power the slower the user than the target.", "Gyro Ball", "Steel"], [true, 0, "Status", "User faints. Replacement is fully healed.", "Healing Wish", "Psychic"], [100, 65, "Special", "Power doubles if the target\'s HP is 50% or less.", "Brine", "Water"], [100, 0, "Physical", "Power and type depends on the user\'s Berry.", "Natural Gift", "Normal"], [100, 30, "Physical", "Nullifies Detect, Protect, and Quick/Wide Guard.", "Feint", "Normal"], [100, 60, "Physical", "User steals and eats the target\'s Berry.", "Pluck", "Flying"], [true, 0, "Status", "For 4 turns, allies\' Speed is doubled.", "Tailwind", "Flying"], [true, 0, "Status", "Raises a random stat of the user or an ally by 2.", "Acupressure", "Normal"], [100, 0, "Physical", "If hit by an attack, returns 1.5x damage.", "Metal Burst", "Steel"], [100, 70, "Physical", "User switches out after damaging the target.", "U-turn", "Bug"], [100, 120, "Physical", "Lowers the user\'s Defense and Sp. Def by 1.", "Close Combat", "Fighting"], [100, 50, "Physical", "Power doubles if the user moves after the target.", "Payback", "Dark"], [100, 60, "Physical", "Power doubles if target was damaged this turn.", "Assurance", "Dark"], [100, 0, "Status", "For 5 turns, the target can\'t use any items.", "Embargo", "Dark"], [100, 0, "Physical", "Flings the user\'s item at the target. Power varies.", "Fling", "Dark"], [100, 0, "Status", "Transfers the user\'s status ailment to the target.", "Psycho Shift", "Psychic"], [true, 0, "Special", "More power the fewer PP this move has left.", "Trump Card", "Normal"], [100, 0, "Status", "For 5 turns, the foe(s) is prevented from healing.", "Heal Block", "Psychic"], [100, 0, "Special", "More power the more HP the target has left.", "Wring Out", "Normal"], [true, 0, "Status", "Switches user\'s Attack and Defense stats.", "Power Trick", "Psychic"], [100, 0, "Status", "Nullifies the target\'s Ability.", "Gastro Acid", "Poison"], [true, 0, "Status", "For 5 turns, shields user\'s party from critical hits.", "Lucky Chant", "Normal"], [true, 0, "Status", "Copies a foe at 1.5x power. User must be faster.", "Me First", "Normal"], [true, 0, "Status", "Uses the last move used in the battle.", "Copycat", "Normal"], [true, 0, "Status", "Swaps Attack and Sp. Atk stat stages with target.", "Power Swap", "Psychic"], [true, 0, "Status", "Swaps Defense and Sp. Def changes with target.", "Guard Swap", "Psychic"], [100, 0, "Physical", "60 power +20 for each of the target\'s stat boosts.", "Punishment", "Dark"], [100, 140, "Physical", "Fails unless each known move has been used.", "Last Resort", "Normal"], [100, 0, "Status", "The target\'s Ability becomes Insomnia.", "Worry Seed", "Grass"], [100, 70, "Physical", "Usually goes first. Fails if target is not attacking.", "Sucker Punch", "Dark"], [true, 0, "Status", "Poisons grounded foes on switch-in. Max 2 layers.", "Toxic Spikes", "Poison"], [true, 0, "Status", "Swaps all stat changes with target.", "Heart Swap", "Psychic"], [true, 0, "Status", "User recovers 1/16 max HP per turn.", "Aqua Ring", "Water"], [true, 0, "Status", "For 5 turns, the user is immune to Ground moves.", "Magnet Rise", "Electric"], [100, 120, "Physical", "Has 33% recoil. 10% chance to burn. Thaws user.", "Flare Blitz", "Fire"], [100, 60, "Physical", "30% chance to paralyze the target.", "Force Palm", "Fighting"], [true, 80, "Special", "This move does not check accuracy.", "Aura Sphere", "Fighting"], [true, 0, "Status", "Raises the user\'s Speed by 2.", "Rock Polish", "Rock"], [100, 80, "Physical", "30% chance to poison the target.", "Poison Jab", "Poison"], [100, 80, "Special", "20% chance to flinch the target.", "Dark Pulse", "Dark"], [100, 70, "Physical", "High critical hit ratio.", "Night Slash", "Dark"], [90, 90, "Physical", "No additional effect.", "Aqua Tail", "Water"], [100, 80, "Physical", "No additional effect.", "Seed Bomb", "Grass"], [95, 75, "Special", "30% chance to flinch the target.", "Air Slash", "Flying"], [100, 80, "Physical", "No additional effect.", "X-Scissor", "Bug"], [100, 90, "Special", "10% chance to lower the target\'s Sp. Def. by 1.", "Bug Buzz", "Bug"], [100, 85, "Special", "No additional effect.", "Dragon Pulse", "Dragon"], [75, 100, "Physical", "20% chance to flinch the target.", "Dragon Rush", "Dragon"], [100, 80, "Special", "No additional effect.", "Power Gem", "Rock"], [100, 75, "Physical", "User recovers 50% of the damage dealt.", "Drain Punch", "Fighting"], [100, 40, "Special", "Usually goes first.", "Vacuum Wave", "Fighting"], [70, 120, "Special", "10% chance to lower the target\'s Sp. Def by 1.", "Focus Blast", "Fighting"], [100, 90, "Special", "10% chance to lower the target\'s Sp. Def. by 1.", "Energy Ball", "Grass"], [100, 120, "Physical", "Has 33% recoil.", "Brave Bird", "Flying"], [100, 90, "Special", "10% chance to lower the target\'s Sp. Def. by 1.", "Earth Power", "Ground"], [100, 0, "Status", "User switches its held item with the target\'s.", "Switcheroo", "Dark"], [90, 150, "Physical", "User cannot move next turn.", "Giga Impact", "Normal"], [true, 0, "Status", "Raises the user\'s Sp. Atk by 2.", "Nasty Plot", "Dark"], [100, 40, "Physical", "Usually goes first.", "Bullet Punch", "Steel"], [100, 60, "Physical", "Power doubles if user is damaged by the target.", "Avalanche", "Ice"], [100, 40, "Physical", "Usually goes first.", "Ice Shard", "Ice"], [100, 70, "Physical", "High critical hit ratio.", "Shadow Claw", "Ghost"], [95, 65, "Physical", "10% chance to paralyze. 10% chance to flinch.", "Thunder Fang", "Electric"], [95, 65, "Physical", "10% chance to freeze. 10% chance to flinch.", "Ice Fang", "Ice"], [95, 65, "Physical", "10% chance to burn. 10% chance to flinch.", "Fire Fang", "Fire"], [100, 40, "Physical", "Usually goes first.", "Shadow Sneak", "Ghost"], [85, 65, "Special", "30% chance to lower the target\'s accuracy by 1.", "Mud Bomb", "Ground"], [100, 70, "Physical", "High critical hit ratio.", "Psycho Cut", "Psychic"], [90, 80, "Physical", "20% chance to flinch the target.", "Zen Headbutt", "Psychic"], [85, 65, "Special", "30% chance to lower the target\'s accuracy by 1.", "Mirror Shot", "Steel"], [100, 80, "Special", "10% chance to lower the target\'s Sp. Def by 1.", "Flash Cannon", "Steel"], [85, 90, "Physical", "20% chance to confuse the target.", "Rock Climb", "Normal"], [true, 0, "Status", "-1 evasion; clears user and target side\'s hazards.", "Defog", "Flying"], [true, 0, "Status", "For 5 turns, slower Pokemon move first.", "Trick Room", "Psychic"], [90, 130, "Special", "Lowers the user\'s Sp. Atk by 2.", "Draco Meteor", "Dragon"], [100, 80, "Special", "30% chance to paralyze adjacent Pokemon.", "Discharge", "Electric"], [100, 80, "Special", "30% chance to burn adjacent Pokemon.", "Lava Plume", "Fire"], [90, 130, "Special", "Lowers the user\'s Sp. Atk by 2.", "Leaf Storm", "Grass"], [85, 120, "Physical", "No additional effect.", "Power Whip", "Grass"], [90, 150, "Physical", "User cannot move next turn.", "Rock Wrecker", "Rock"], [100, 70, "Physical", "High critical hit ratio. 10% chance to poison.", "Cross Poison", "Poison"], [80, 120, "Physical", "30% chance to poison the target.", "Gunk Shot", "Poison"], [100, 80, "Physical", "30% chance to flinch the target.", "Iron Head", "Steel"], [true, 60, "Physical", "This move does not check accuracy.", "Magnet Bomb", "Steel"], [80, 100, "Physical", "High critical hit ratio.", "Stone Edge", "Rock"], [100, 0, "Status", "Lowers the foe(s) Sp. Atk by 2 if opposite gender.", "Captivate", "Normal"], [true, 0, "Status", "Hurts foes on switch-in. Factors Rock weakness.", "Stealth Rock", "Rock"], [100, 0, "Special", "More power the heavier the target.", "Grass Knot", "Grass"], [100, 65, "Special", "100% chance to confuse the target.", "Chatter", "Flying"], [100, 100, "Special", "Type varies based on the held Plate.", "Judgment", "Normal"], [100, 60, "Physical", "User steals and eats the target\'s Berry.", "Bug Bite", "Bug"], [90, 50, "Special", "70% chance to raise the user\'s Sp. Atk by 1.", "Charge Beam", "Electric"], [100, 120, "Physical", "Has 33% recoil.", "Wood Hammer", "Grass"], [100, 40, "Physical", "Usually goes first.", "Aqua Jet", "Water"], [100, 90, "Physical", "High critical hit ratio.", "Attack Order", "Bug"], [true, 0, "Status", "Raises the user\'s Defense and Sp. Def by 1.", "Defend Order", "Bug"], [true, 0, "Status", "Heals the user by 50% of its max HP.", "Heal Order", "Bug"], [80, 150, "Physical", "Has 1/2 recoil.", "Head Smash", "Rock"], [90, 35, "Physical", "Hits 2 times in one turn.", "Double Hit", "Normal"], [90, 150, "Special", "User cannot move next turn.", "Roar of Time", "Dragon"], [95, 100, "Special", "High critical hit ratio.", "Spacial Rend", "Dragon"], [true, 0, "Status", "User faints. Replacement is fully healed, with PP.", "Lunar Dance", "Psychic"], [100, 0, "Physical", "More power the more HP the target has left.", "Crush Grip", "Normal"], [75, 100, "Special", "Traps and damages the target for 4-5 turns.", "Magma Storm", "Fire"], [50, 0, "Status", "Puts the foe(s) to sleep.", "Dark Void", "Dark"], [85, 120, "Special", "40% chance to lower the target\'s Sp. Def by 2.", "Seed Flare", "Grass"], [100, 60, "Special", "10% chance to raise all stats by 1 (not acc/eva).", "Ominous Wind", "Ghost"], [100, 120, "Physical", "Disappears turn 1. Hits turn 2. Breaks protection.", "Shadow Force", "Ghost"], [true, 0, "Status", "Raises the user\'s Attack and accuracy by 1.", "Hone Claws", "Dark"], [true, 0, "Status", "Protects allies from multi-target hits this turn.", "Wide Guard", "Rock"], [true, 0, "Status", "Averages Defense and Sp. Def stats with target.", "Guard Split", "Psychic"], [true, 0, "Status", "Averages Attack and Sp. Atk stats with target.", "Power Split", "Psychic"], [true, 0, "Status", "For 5 turns, all Defense and Sp. Def stats switch.", "Wonder Room", "Psychic"], [100, 80, "Special", "Damages target based on Defense, not Sp. Def.", "Psyshock", "Psychic"], [100, 65, "Special", "Power doubles if the target is poisoned.", "Venoshock", "Poison"], [true, 0, "Status", "Raises the user\'s Speed by 2; user loses 100 kg.", "Autotomize", "Steel"], [true, 0, "Status", "The foes\' moves target the user on the turn used.", "Rage Powder", "Bug"], [true, 0, "Status", "For 3 turns, target floats but moves can\'t miss it.", "Telekinesis", "Psychic"], [true, 0, "Status", "For 5 turns, all held items have no effect.", "Magic Room", "Psychic"], [100, 50, "Physical", "Removes the target\'s Ground immunity.", "Smack Down", "Rock"], [100, 60, "Physical", "Always results in a critical hit.", "Storm Throw", "Fighting"], [100, 70, "Special", "Damages Pokemon next to the target as well.", "Flame Burst", "Fire"], [100, 95, "Special", "10% chance to poison adjacent Pokemon.", "Sludge Wave", "Poison"], [true, 0, "Status", "Raises the user\'s Sp. Atk, Sp. Def, Speed by 1.", "Quiver Dance", "Bug"], [100, 0, "Physical", "More power the heavier the user than the target.", "Heavy Slam", "Steel"], [100, 120, "Special", "Hits adjacent Pokemon sharing the user\'s type.", "Synchronoise", "Psychic"], [100, 0, "Special", "More power the faster the user is than the target.", "Electro Ball", "Electric"], [100, 0, "Status", "Changes the target\'s type to Water.", "Soak", "Water"], [100, 50, "Physical", "100% chance to raise the user\'s Speed by 1.", "Flame Charge", "Fire"], [true, 0, "Status", "Raises user\'s Attack, Defense, and accuracy by 1.", "Coil", "Poison"], [100, 65, "Physical", "100% chance to lower the target\'s Speed by 1.", "Low Sweep", "Fighting"], [100, 40, "Special", "100% chance to lower the target\'s Sp. Def by 2.", "Acid Spray", "Poison"], [100, 95, "Physical", "Uses target\'s Attack stat in damage calculation.", "Foul Play", "Dark"], [100, 0, "Status", "The target\'s Ability becomes Simple.", "Simple Beam", "Normal"], [100, 0, "Status", "The target\'s Ability changes to match the user\'s.", "Entrainment", "Normal"], [true, 0, "Status", "The target makes its move right after the user.", "After You", "Normal"], [100, 60, "Special", "Power doubles if others used Round this turn.", "Round", "Normal"], [100, 40, "Special", "Power increases when used on consecutive turns.", "Echoed Voice", "Normal"], [100, 70, "Physical", "Ignores the target\'s stat stage changes.", "Chip Away", "Normal"], [true, 50, "Special", "Eliminates the target\'s stat changes.", "Clear Smog", "Poison"], [100, 20, "Special", " + 20 power for each of the user\'s stat boosts.", "Stored Power", "Psychic"], [true, 0, "Status", "Protects allies from priority attacks this turn.", "Quick Guard", "Fighting"], [true, 0, "Status", "The user swaps positions with its ally.", "Ally Switch", "Psychic"], [100, 80, "Special", "30% chance to burn the target. Thaws target.", "Scald", "Water"], [true, 0, "Status", "Lowers Def, SpD by 1; raises Atk, SpA, Spe by 2.", "Shell Smash", "Normal"], [true, 0, "Status", "Heals the target by 50% of its max HP.", "Heal Pulse", "Psychic"], [100, 65, "Special", "Power doubles if the target has a status ailment.", "Hex", "Ghost"], [100, 60, "Physical", "User and foe fly up turn 1. Damages on turn 2.", "Sky Drop", "Flying"], [true, 0, "Status", "Raises the user\'s Speed by 2 and Attack by 1.", "Shift Gear", "Steel"], [90, 60, "Physical", "Forces the target to switch to a random ally.", "Circle Throw", "Fighting"], [100, 60, "Special", "Destroys the foe(s) Berry/Gem.", "Incinerate", "Fire"], [100, 0, "Status", "Forces the target to move last this turn.", "Quash", "Dark"], [100, 55, "Physical", "Power doubles if the user has no held item.", "Acrobatics", "Flying"], [true, 0, "Status", "User becomes the same type as the target.", "Reflect Type", "Normal"], [100, 70, "Physical", "Power doubles if an ally fainted last turn.", "Retaliate", "Normal"], [100, 0, "Special", "Does damage equal to the user\'s HP. User faints.", "Final Gambit", "Fighting"], [true, 0, "Status", "User passes its held item to the target.", "Bestow", "Normal"], [50, 100, "Special", "100% chance to burn the target.", "Inferno", "Fire"], [100, 80, "Special", "Use with Grass or Fire Pledge for added effect.", "Water Pledge", "Water"], [100, 80, "Special", "Use with Grass or Water Pledge for added effect.", "Fire Pledge", "Fire"], [100, 80, "Special", "Use with Fire or Water Pledge for added effect.", "Grass Pledge", "Grass"], [100, 70, "Special", "User switches out after damaging the target.", "Volt Switch", "Electric"], [100, 50, "Special", "100% chance to lower the foe(s) Sp. Atk by 1.", "Struggle Bug", "Bug"], [100, 60, "Physical", "100% chance to lower adjacent Pkmn Speed by 1.", "Bulldoze", "Ground"], [90, 60, "Special", "Always results in a critical hit.", "Frost Breath", "Ice"], [90, 60, "Physical", "Forces the target to switch to a random ally.", "Dragon Tail", "Dragon"], [true, 0, "Status", "Raises the user\'s Attack and Sp. Atk by 1.", "Work Up", "Normal"], [95, 55, "Special", "100% chance to lower the foe(s) Speed by 1.", "Electroweb", "Electric"], [100, 90, "Physical", "Has 1/4 recoil.", "Wild Charge", "Electric"], [95, 80, "Physical", "High critical hit ratio.", "Drill Run", "Ground"], [90, 40, "Physical", "Hits 2 times in one turn.", "Dual Chop", "Dragon"], [100, 60, "Physical", "30% chance to flinch the target.", "Heart Stamp", "Psychic"], [100, 75, "Physical", "User recovers 50% of the damage dealt.", "Horn Leech", "Grass"], [100, 90, "Physical", "Ignores the target\'s stat stage changes.", "Sacred Sword", "Fighting"], [95, 75, "Physical", "50% chance to lower the target\'s Defense by 1.", "Razor Shell", "Water"], [100, 0, "Physical", "More power the heavier the user than the target.", "Heat Crash", "Fire"], [90, 65, "Special", "50% chance to lower the target\'s accuracy by 1.", "Leaf Tornado", "Grass"], [100, 65, "Physical", "30% chance to flinch the target.", "Steamroller", "Bug"], [true, 0, "Status", "Raises the user\'s Defense by 3.", "Cotton Guard", "Grass"], [95, 85, "Special", "40% chance to lower the target\'s accuracy by 1.", "Night Daze", "Dark"], [100, 100, "Special", "Damages target based on Defense, not Sp. Def.", "Psystrike", "Psychic"], [85, 25, "Physical", "Hits 2-5 times in one turn.", "Tail Slap", "Normal"], [70, 110, "Special", "30% chance to confuse target. Can\'t miss in rain.", "Hurricane", "Flying"], [100, 120, "Physical", "Has 1/4 recoil.", "Head Charge", "Normal"], [85, 50, "Physical", "Hits 2 times in one turn.", "Gear Grind", "Steel"], [100, 100, "Special", "30% chance to burn adjacent Pokemon.", "Searing Shot", "Fire"], [100, 120, "Special", "Type varies based on the held Drive.", "Techno Blast", "Normal"], [100, 75, "Special", "10% chance to sleep foe(s). Meloetta transforms.", "Relic Song", "Normal"], [100, 85, "Special", "Damages target based on Defense, not Sp. Def.", "Secret Sword", "Fighting"], [95, 65, "Special", "100% chance to lower the foe(s) Speed by 1.", "Glaciate", "Ice"], [85, 130, "Physical", "20% chance to paralyze the target.", "Bolt Strike", "Electric"], [85, 130, "Special", "20% chance to burn the target.", "Blue Flare", "Fire"], [100, 80, "Special", "50% chance to raise the user\'s Sp. Atk by 1.", "Fiery Dance", "Fire"], [90, 140, "Physical", "Charges turn 1. Hits turn 2. 30% paralyze.", "Freeze Shock", "Ice"], [90, 140, "Special", "Charges turn 1. Hits turn 2. 30% burn.", "Ice Burn", "Ice"], [95, 55, "Special", "100% chance to lower the foe(s) Sp. Atk by 1.", "Snarl", "Dark"], [90, 85, "Physical", "30% chance to flinch the target.", "Icicle Crash", "Ice"], [95, 180, "Physical", "Lowers the user\'s Defense, Sp. Def, Speed by 1.", "V-create", "Fire"], [100, 100, "Special", "Power doubles if used after Fusion Bolt.", "Fusion Flare", "Fire"], [100, 100, "Physical", "Power doubles if used after Fusion Flare.", "Fusion Bolt", "Electric"], [95, 100, "Physical", "Combines Flying in its type effectiveness.", "Flying Press", "Fighting"], [true, 0, "Status", "Protects allies from attacks. First turn out only.", "Mat Block", "Fighting"], [90, 120, "Special", "Cannot be selected until the user eats a Berry.", "Belch", "Poison"], [true, 0, "Status", "Raises Atk, Sp. Atk of grounded Grass types by 1.", "Rototiller", "Ground"], [true, 0, "Status", "Lowers Speed of grounded foes by 1 on switch-in.", "Sticky Web", "Bug"], [100, 50, "Physical", "Raises user\'s Attack by 3 if this KOes the target.", "Fell Stinger", "Bug"], [100, 90, "Physical", "Disappears turn 1. Hits turn 2. Breaks protection.", "Phantom Force", "Ghost"], [100, 0, "Status", "Adds Ghost to the target\'s type(s).", "Trick-or-Treat", "Ghost"], [100, 0, "Status", "Lowers the target\'s Attack and Sp. Atk by 1.", "Noble Roar", "Normal"], [true, 0, "Status", "Normal moves become Electric type this turn.", "Ion Deluge", "Electric"], [100, 65, "Special", "User recovers 50% of the damage dealt.", "Parabolic Charge", "Electric"], [100, 0, "Status", "Adds Grass to the target\'s type(s).", "Forest\'s Curse", "Grass"], [100, 90, "Physical", "No additional effect. Hits adjacent Pokemon.", "Petal Blizzard", "Grass"], [100, 70, "Special", "10% chance to freeze. Super effective on Water.", "Freeze-Dry", "Ice"], [true, 40, "Special", "This move does not check accuracy. Hits foes.", "Disarming Voice", "Fairy"], [100, 0, "Status", "Lowers target\'s Atk, Sp. Atk by 1. User switches.", "Parting Shot", "Dark"], [true, 0, "Status", "Inverts the target\'s stat stages.", "Topsy-Turvy", "Dark"], [100, 50, "Special", "User recovers 75% of the damage dealt.", "Draining Kiss", "Fairy"], [true, 0, "Status", "Protects allies from Status moves this turn.", "Crafty Shield", "Fairy"], [true, 0, "Status", "Raises Defense by 1 of all active Grass types.", "Flower Shield", "Fairy"], [true, 0, "Status", "5 turns. Grounded: +Grass power,+1/16 max HP.", "Grassy Terrain", "Grass"], [true, 0, "Status", "5 turns. Can\'t status,-Dragon power vs grounded.", "Misty Terrain", "Fairy"], [true, 0, "Status", "Changes the target\'s move to Electric this turn.", "Electrify", "Electric"], [90, 90, "Physical", "10% chance to lower the target\'s Attack by 1.", "Play Rough", "Fairy"], [100, 40, "Special", "No additional effect.", "Fairy Wind", "Fairy"], [100, 95, "Special", "30% chance to lower the target\'s Sp. Atk by 1.", "Moonblast", "Fairy"], [100, 140, "Special", "No additional effect. Hits adjacent Pokemon.", "Boomburst", "Normal"], [true, 0, "Status", "Prevents all Pokemon from switching next turn.", "Fairy Lock", "Fairy"], [true, 0, "Status", "Protects from attacks. Contact try: lowers Atk by 2.", "King\'s Shield", "Steel"], [true, 0, "Status", "Lowers the target\'s Attack by 1.", "Play Nice", "Normal"], [true, 0, "Status", "Lowers the target\'s Sp. Atk by 1.", "Confide", "Normal"], [95, 100, "Physical", "50% chance to raise user\'s Def by 2 for each hit.", "Diamond Storm", "Rock"], [95, 110, "Special", "30% chance to burn the target.", "Steam Eruption", "Water"], [true, 80, "Special", "Breaks the target\'s protection for this turn.", "Hyperspace Hole", "Psychic"], [100, 15, "Special", "Hits 2-5 times in one turn.", "Water Shuriken", "Water"], [100, 75, "Special", "100% chance to lower the target\'s Sp. Atk by 1.", "Mystical Fire", "Fire"], [true, 0, "Status", "Protects from moves. Contact: loses 1/8 max HP.", "Spiky Shield", "Grass"], [true, 0, "Status", "Raises an ally\'s Sp. Def by 1.", "Aromatic Mist", "Fairy"], [100, 0, "Status", "Lowers the target\'s Sp. Atk by 2.", "Eerie Impulse", "Electric"], [100, 0, "Status", "Lowers Atk, Sp. Atk, Speed of poisoned foes by 1.", "Venom Drench", "Poison"], [100, 0, "Status", "If using a Fire move, target loses 1/4 max HP.", "Powder", "Bug"], [true, 0, "Status", "Charges, then raises SpA, SpD, Spe by 2 turn 2.", "Geomancy", "Fairy"], [true, 0, "Status", "Raises Def, Sp. Def of allies with Plus/Minus by 1.", "Magnetic Flux", "Electric"], [true, 0, "Status", "No competitive use.", "Happy Hour", "Normal"], [true, 0, "Status", "5 turns. Grounded: +Electric power, can\'t sleep.", "Electric Terrain", "Electric"], [100, 80, "Special", "No additional effect. Hits adjacent foes.", "Dazzling Gleam", "Fairy"], [true, 0, "Status", "No competitive use. Or any use.", "Celebrate", "Normal"], ["", "", "", "", "", ""], [100, 0, "Status", "Lowers the target\'s Attack by 1.", "Baby-Doll Eyes", "Fairy"], [100, 20, "Physical", "100% chance to paralyze the target.", "Nuzzle", "Electric"], [100, 40, "Physical", "Always leaves the target with at least 1 HP.", "Hold Back", "Normal"], [100, 20, "Special", "Traps and damages the target for 4-5 turns.", "Infestation", "Bug"], [100, 40, "Physical", "100% chance to raise the user\'s Attack by 1.", "Power-Up Punch", "Fighting"], [100, 80, "Special", "User recovers 75% of the damage dealt.", "Oblivion Wing", "Flying"], [100, 90, "Physical", "Grounds adjacent foes. First hit neutral on Flying.", "Thousand Arrows", "Ground"], [100, 90, "Physical", "Hits adjacent foes. Prevents them from switching.", "Thousand Waves", "Ground"], [100, 90, "Physical", "No additional effect. Hits adjacent foes.", "Land\'s Wrath", "Ground"], [90, 140, "Special", "Has 1/2 recoil.", "Light of Ruin", "Fairy"], [85, 110, "Special", "No additional effect. Hits adjacent foes.", "Origin Pulse", "Water"], [85, 120, "Physical", "No additional effect. Hits adjacent Pokemon.", "Precipice Blades", "Ground"], [100, 120, "Physical", "Lowers the user\'s Defense and Sp. Def by 1.", "Dragon Ascent", "Flying"], [true, 100, "Physical", "Hoopa-U: Lowers user\'s Def by 1; breaks protection.", "Hyperspace Fury", "Dark"], [true, 1, "Physical", "No additional effect.", "Breakneck Blitz", "Normal"], ["", "", "", "", "", ""], [true, 1, "Physical", "No additional effect.", "All-Out Pummeling", "Fighting"], ["", "", "", "", "", ""], [true, 1, "Physical", "No additional effect.", "Supersonic Skystrike", "Flying"], ["", "", "", "", "", ""], [true, 1, "Physical", "No additional effect.", "Acid Downpour", "Poison"], ["", "", "", "", "", ""], [true, 1, "Physical", "No additional effect.", "Tectonic Rage", "Ground"], ["", "", "", "", "", ""], [true, 1, "Physical", "No additional effect.", "Continental Crush", "Rock"], ["", "", "", "", "", ""], [true, 1, "Physical", "No additional effect.", "Savage Spin-Out", "Bug"], ["", "", "", "", "", ""], [true, 1, "Physical", "No additional effect.", "Never-Ending Nightmare", "Ghost"], ["", "", "", "", "", ""], [true, 1, "Physical", "No additional effect.", "Corkscrew Crash", "Steel"], ["", "", "", "", "", ""], [true, 1, "Physical", "No additional effect.", "Inferno Overdrive", "Fire"], ["", "", "", "", "", ""], [true, 1, "Physical", "No additional effect.", "Hydro Vortex", "Water"], ["", "", "", "", "", ""], [true, 1, "Physical", "No additional effect.", "Bloom Doom", "Grass"], ["", "", "", "", "", ""], [true, 1, "Physical", "No additional effect.", "Gigavolt Havoc", "Electric"], ["", "", "", "", "", ""], [true, 1, "Physical", "No additional effect.", "Shattered Psyche", "Psychic"], ["", "", "", "", "", ""], [true, 1, "Physical", "No additional effect.", "Subzero Slammer", "Ice"], ["", "", "", "", "", ""], [true, 1, "Physical", "No additional effect.", "Devastating Drake", "Dragon"], ["", "", "", "", "", ""], [true, 1, "Physical", "No additional effect.", "Black Hole Eclipse", "Dark"], ["", "", "", "", "", ""], [true, 1, "Physical", "No additional effect.", "Twinkle Tackle", "Fairy"], ["", "", "", "", "", ""], [true, 210, "Physical", "No additional effect.", "Catastropika", "Electric"], [true, 0, "Status", "Heals the user by a weather-dependent amount.", "Shore Up", "Ground"], [100, 90, "Physical", "Hits first. First turn out only.", "First Impression", "Bug"], [true, 0, "Status", "Protects from moves. Contact: poison.", "Baneful Bunker", "Poison"], [100, 80, "Physical", "Prevents the target from switching out.", "Spirit Shackle", "Ghost"], [100, 85, "Physical", "Ignores the target\'s stat stage changes.", "Darkest Lariat", "Dark"], [100, 90, "Special", "The target is cured of its burn.", "Sparkling Aria", "Water"], [90, 100, "Physical", "Lowers the user\'s Speed by 1.", "Ice Hammer", "Ice"], [true, 0, "Status", "Heals the target by 50% of its max HP.", "Floral Healing", "Fairy"], [95, 95, "Physical", "No additional effect.", "High Horsepower", "Ground"], [100, 0, "Status", "User heals HP=target\'s Atk stat. Lowers Atk by 1.", "Strength Sap", "Grass"], [100, 125, "Physical", "Charges turn 1. Hits turn 2. No charge in sunlight.", "Solar Blade", "Grass"], [100, 40, "Physical", "No additional effect.", "Leafage", "Grass"], [true, 0, "Status", "Moves redirect to the target on the turn used.", "Spotlight", "Normal"], [100, 0, "Status", "Lowers the target\'s Speed by 1 and poisons it.", "Toxic Thread", "Poison"], [true, 0, "Status", "Next turn, the user\'s attack will be a critical hit.", "Laser Focus", "Normal"], [true, 0, "Status", "Raises Atk, Sp. Atk of allies with Plus/Minus by 1.", "Gear Up", "Steel"], [100, 80, "Physical", "For 2 turns, the target cannot use sound moves.", "Throat Chop", "Dark"], [100, 90, "Special", "If the target is an ally, heals 50% of its max HP.", "Pollen Puff", "Bug"], [100, 80, "Physical", "Prevents the target from switching out.", "Anchor Shot", "Steel"], [true, 0, "Status", "5 turns. Grounded: +Psychic power, priority-safe.", "Psychic Terrain", "Psychic"], [100, 80, "Physical", "100% chance to lower the target\'s Attack by 1.", "Lunge", "Bug"], [100, 80, "Physical", "100% chance to lower the target\'s Defense by 1.", "Fire Lash", "Fire"], [100, 20, "Physical", " + 20 power for each of the user\'s stat boosts.", "Power Trip", "Dark"], [100, 130, "Special", "User\'s Fire-type is removed until it switches out.", "Burn Up", "Fire"], [true, 0, "Status", "Swaps Speed stat with target.", "Speed Swap", "Psychic"], [true, 70, "Physical", "This move does not check accuracy.", "Smart Strike", "Steel"], [true, 0, "Status", "Heals the target by 50% of its max HP.", "Purify", "Poison"], [100, 90, "Special", "Type varies based on the user\'s primary type.", "Revelation Dance", "Normal"], [100, 100, "Special", "Nullifies the foe(s) Ability if the target moves first.", "Core Enforcer", "Dragon"], [100, 70, "Physical", "100% chance to lower the target\'s Attack by 1.", "Trop Kick", "Grass"], [true, 0, "Status", "The target immediately uses its last used move.", "Instruct", "Psychic"], [100, 100, "Physical", "Burns on contact with the user before it moves.", "Beak Blast", "Flying"], [100, 110, "Special", "Lowers the user\'s Defense by 1.", "Clanging Scales", "Dragon"], [100, 90, "Physical", "No additional effect.", "Dragon Hammer", "Dragon"], [100, 60, "Physical", "No additional effect. Hits adjacent Pokemon.", "Brutal Swing", "Dark"], [true, 0, "Status", "For 5 turns, damage to allies is halved. Hail only.", "Aurora Veil", "Ice"], [true, 180, "Physical", "No additional effect.", "Sinister Arrow Raid", "Ghost"], [true, 180, "Physical", "No additional effect.", "Malicious Moonsault", "Dark"], [true, 195, "Special", "No additional effect.", "Oceanic Operetta", "Water"], [true, 0, "Special", "Does damage equal to 3/4 target\'s current HP.", "Guardian of Alola", "Fairy"], [true, 195, "Physical", "No additional effect.", "Soul-Stealing 7-Star Strike", "Ghost"], [true, 175, "Special", "100% chance to paralyze the target.", "Stoked Sparksurfer", "Electric"], [true, 210, "Physical", "No additional effect.", "Pulverizing Pancake", "Normal"], [true, 0, "Status", "Raises user\'s Atk, Def, SpA, SpD, and Spe by 2.", "Extreme Evoboost", "Normal"], [true, 185, "Special", "Summons Psychic Terrain.", "Genesis Supernova", "Psychic"], [100, 150, "Special", "User must take physical damage before moving.", "Shell Trap", "Fire"], [90, 130, "Special", "Lowers the user\'s Sp. Atk by 2.", "Fleur Cannon", "Fairy"], [100, 85, "Physical", "Destroys screens, unless the target is immune.", "Psychic Fangs", "Psychic"], [100, 75, "Physical", "Power doubles if the user\'s last move failed.", "Stomping Tantrum", "Ground"], [100, 85, "Physical", "20% chance to lower the target\'s Defense by 1.", "Shadow Bone", "Ghost"], [100, 40, "Physical", "Usually goes first.", "Accelerock", "Rock"], [100, 85, "Physical", "20% chance to lower the target\'s Defense by 1.", "Liquidation", "Water"], [100, 160, "Special", "User cannot move next turn.", "Prismatic Laser", "Psychic"], [100, 90, "Physical", "Steals target\'s boosts before dealing damage.", "Spectral Thief", "Ghost"], [100, 100, "Physical", "Ignores the Abilities of other Pokemon.", "Sunsteel Strike", "Steel"], [100, 100, "Special", "Ignores the Abilities of other Pokemon.", "Moongeist Beam", "Ghost"], [true, 0, "Status", "Lowers the target\'s Attack and Sp. Atk by 1.", "Tearful Look", "Normal"], [100, 80, "Physical", "30% chance to flinch the target.", "Zing Zap", "Electric"], [90, 0, "Special", "Does damage equal to 1/2 target\'s current HP.", "Nature\'s Madness", "Fairy"], [100, 90, "Physical", "Type varies based on the held Memory.", "Multi-Attack", "Normal"], [true, 195, "Special", "Very high critical hit ratio.", "10,000,000 Volt Thunderbolt", "Electric"]];
var littleCupPokemon = ["Abra", "Amaura", "Anorith", "Archen", "Aron", "Axew", "Azurill", "Bagon", "Baltoy", "Barboach", "Beldum", "Bellsprout", "Bergmite", "Bidoof", "Binacle", "Blitzle", "Bonsly", "Bronzor", "Budew", "Buizel", "Bulbasaur", "Buneary", "Bunnelby", "Burmy", "Cacnea", "Carvanha", "Caterpie", "Charmander", "Cherubi", "Chespin", "Chikorita", "Chimchar", "Chinchou", "Chingling", "Clamperl", "Clauncher", "Cleffa", "Combee", "Corphish", "Cottonee", "Cranidos", "Croagunk", "Cubchoo", "Cubone", "Cyndaquil", "Darumaka", "Deerling", "Deino", "Diglett", "Doduo", "Dratini", "Drilbur", "Drowzee", "Ducklett", "Duskull", "Dwebble", "Eevee", "Ekans", "Electrike", "Elekid", "Elgyem", "Espurr", "Exeggcute", "Feebas", "Fennekin", "Ferroseed", "Finneon", "Flabebe", "Fletching", "Foongus", "Frillish", "Froakie", "Gastly", "Geodude", "Gible", "Glameow", "Goldeen", "Golett", "Goomy", "Grimer", "Growlithe", "Gulpin", "Happiny", "Helioptile", "Hippopotas", "Honedge", "Hoothoot", "Hoppop", "Horsea", "Houndour", "Igglybuff", "Inkay", "Joltik", "Kabuto", "Karrablast", "Klink", "Koffing", "Krabby", "Kricketot", "Larvesta", "Larvitar", "Ledyba", "Lickitung", "Lileep", "Lillipup", "Litleo", "Litwick", "Lotad", "Machop", "Magby", "Magikarp", "Magnemite", "Makuhita", "Mankey", "Mantyke", "Mareep", "Meowth", "Mienfoo", "Mime-jr", "Minccino", "Mudkip", "Munchlax", "Munna", "Natu", "Nidoran-f", "Nidoran-m", "Nincada", "Noibat", "Nosepass", "Numel", "Oddish", "Omanyte", "Onix", "Oshawott", "Pancham", "Panpour", "Pansage", "Pansear", "Paras", "Patrat", "Pawniard", "Petilil", "Phanpy", "Phantump", "Pichu", "Pidgey", "Pidove", "Pineco", "Piplup", "Poliwag", "Ponyta", "Poochyena", "Porygon", "Psyduck", "Pumpkaboo", "Purrloin", "Ralts", "Rattata", "Remoraid", "Rhyhorn", "Riolu", "Roggenrola", "Rufflet", "Sandile", "Sandshrew", "Scatterbug", "Scraggy", "Seedot", "Seel", "Sentret", "Sewaddle", "Shellder", "Shellos", "Shelmet", "Shieldon", "Shinx", "Shroomish", "Shuppet", "Skiddo", "Skitty", "Skorupi", "Skrelp", "Slakoth", "Slowpoke", "Slugma", "Smoochum", "Snivy", "Snorunt", "Snover", "Snubbull", "Solosis", "Spearow", "Spheal", "Spinarak", "Spoink", "Spritzee", "Squirtle", "Starly", "Staryu", "Stunky", "Sunkern", "Surskit", "Swablu", "Swinub", "Taillow", "Teddiursa", "Tentacool", "Tepig", "Timburr", "Tirtouga", "Togepi", "Torchic", "Totodile", "Trapinch", "Treecko", "Trubbish", "Turtwig", "Tympole", "Tynamo", "Tyrogue", "Tyrunt", "Vanillite", "Venipede", "Venonat", "Voltorb", "Vullaby", "Wailmer", "Weedle", "Whismur", "Woobat", "Wooper", "Wurmple", "Wynaut", "Yamask", "Zigzagoon", "Zorua", "Zubat"];
var abilityDescriptions = ["This Pokemon\'s attacks without a chance to flinch have a 10% chance to flinch.", "On switch-in, this Pokemon summons Rain Dance.", "This Pokemon\'s Speed is raised 1 stage at the end of each full turn on the field.", "This Pokemon cannot be struck by a critical hit.", "If this Pokemon is at full HP, it survives one hit with at least 1 HP. Immune to OHKO.", "Prevents Explosion/Mind Blown/Self-Destruct/Aftermath while this Pokemon is active.", "This Pokemon cannot be paralyzed. Gaining this Ability while paralyzed cures it.", "If Sandstorm is active, this Pokemon\'s evasiveness is 1.25x; immunity to Sandstorm.", "30% chance a Pokemon making contact with this Pokemon will be paralyzed.", "This Pokemon heals 1/4 of its max HP when hit by Electric moves; Electric immunity.", "This Pokemon heals 1/4 of its max HP when hit by Water moves; Water immunity.", "This Pokemon cannot be infatuated or taunted. Immune to Intimidate.", "While this Pokemon is active, the effects of weather conditions are disabled.", "This Pokemon\'s moves have their accuracy multiplied by 1.3.", "This Pokemon cannot fall asleep. Gaining this Ability while asleep cures it.", "This Pokemon\'s type changes to the type of a move it\'s hit by, unless it has the type.", "This Pokemon cannot be poisoned. Gaining this Ability while poisoned cures it.", "This Pokemon\'s Fire attacks do 1.5x damage if hit by one Fire move; Fire immunity.", "This Pokemon is not affected by the secondary effect of another Pokemon\'s attack.", "This Pokemon cannot be confused. Immune to Intimidate.", "This Pokemon cannot be forced to switch out by another Pokemon\'s attack or item.", "On switch-in, this Pokemon lowers the Attack of adjacent opponents by 1 stage.", "Prevents adjacent foes from choosing to switch unless they also have this Ability.", "Pokemon making contact with this Pokemon lose 1/8 of their max HP.", "This Pokemon can only be damaged by supereffective moves and indirect damage.", "This Pokemon is immune to Ground; Gravity/Ingrain/Smack Down/Iron Ball nullify it.", "30% chance of poison/paralysis/sleep on others making contact with this Pokemon.", "If another Pokemon burns/poisons/paralyzes this Pokemon, it also gets that status.", "Prevents other Pokemon from lowering this Pokemon\'s stat stages.", "This Pokemon has its major status condition cured when it switches out.", "This Pokemon draws Electric moves to itself to raise Sp. Atk by 1; Electric immunity.", "This Pokemon\'s moves have their secondary effect chance doubled.", "If Rain Dance is active, this Pokemon\'s Speed is doubled.", "If Sunny Day is active, this Pokemon\'s Speed is doubled.", "Raises the likelihood of meeting wild Pokemon.", "On switch-in, or when it can, this Pokemon copies a random adjacent foe\'s Ability.", "This Pokemon\'s Attack is doubled.", "30% chance a Pokemon making contact with this Pokemon will be poisoned.", "This Pokemon cannot be made to flinch. Immune to Intimidate.", "This Pokemon cannot be frozen. Gaining this Ability while frozen cures it.", "This Pokemon cannot be burned. Gaining this Ability while burned cures it.", "Prevents adjacent Steel-type foes from choosing to switch.", "This Pokemon is immune to sound-based moves, including Heal Bell.", "If Rain Dance is active, this Pokemon heals 1/16 of its max HP each turn.", "On switch-in, this Pokemon summons Sandstorm.", "If this Pokemon is the target of a foe\'s move, that move loses one additional PP.", "Fire/Ice-type moves against this Pokemon deal damage with a halved attacking stat.", "This Pokemon\'s sleep counter drops by 2 instead of 1.", "30% chance a Pokemon making contact with this Pokemon will be burned.", "Enables a sure getaway from wild Pokemon.", "This Pokemon\'s accuracy can\'t be lowered by others; ignores their evasiveness stat.", "Prevents other Pokemon from lowering this Pokemon\'s Attack stat stage.", "If this Pokemon has no item, it finds one used by an adjacent Pokemon this turn.", "This Pokemon skips every other turn instead of using a move.", "This Pokemon\'s Attack is 1.5x and accuracy of its physical attacks is 0.8x.", "30% chance of infatuating Pokemon of the opposite gender if they make contact.", "If an active ally has this Ability or the Minus Ability, this Pokemon\'s Sp. Atk is 1.5x.", "If an active ally has this Ability or the Plus Ability, this Pokemon\'s Sp. Atk is 1.5x.", "Castform\'s type changes to the current weather condition\'s type, except Sandstorm.", "This Pokemon cannot lose its held item due to another Pokemon\'s attack.", "This Pokemon has a 33% chance to have its status cured at the end of each turn.", "If this Pokemon is statused, its Attack is 1.5x; ignores burn halving physical damage.", "If this Pokemon is statused, its Defense is 1.5x.", "This Pokemon damages those draining HP from it for as much as they would heal.", "At 1/3 or less of its max HP, this Pokemon\'s attacking stat is 1.5x with Grass attacks.", "At 1/3 or less of its max HP, this Pokemon\'s attacking stat is 1.5x with Fire attacks.", "At 1/3 or less of its max HP, this Pokemon\'s attacking stat is 1.5x with Water attacks.", "At 1/3 or less of its max HP, this Pokemon\'s attacking stat is 1.5x with Bug attacks.", "This Pokemon does not take recoil damage besides Struggle/Life Orb/crash damage.", "On switch-in, this Pokemon summons Sunny Day.", "Prevents adjacent foes from choosing to switch unless they are airborne.", "This Pokemon cannot fall asleep. Gaining this Ability while asleep cures it.", "Prevents other Pokemon from lowering this Pokemon\'s stat stages.", "This Pokemon\'s Attack is doubled.", "This Pokemon cannot be struck by a critical hit.", "While this Pokemon is active, the effects of weather conditions are disabled.", "This Pokemon\'s evasiveness is doubled as long as it is confused.", "This Pokemon\'s Speed is raised 1 stage if hit by an Electric move; Electric immunity.", "This Pokemon\'s attacks do 1.25x on same gender targets; 0.75x on opposite gender.", "If this Pokemon flinches, its Speed is raised by 1 stage.", "If Hail is active, this Pokemon\'s evasiveness is 1.25x; immunity to Hail.", "When this Pokemon has 1/2 or less of its maximum HP, it uses certain Berries early.", "If this Pokemon (not its substitute) takes a critical hit, its Attack is raised 12 stages.", "Speed is doubled on held item loss; boost is lost if it switches, gets new item/Ability.", "The power of Fire-type attacks against this Pokemon is halved; burn damage halved.", "When this Pokemon\'s stat stages are raised or lowered, the effect is doubled instead.", "This Pokemon is healed 1/4 by Water, 1/8 by Rain; is hurt 1.25x by Fire, 1/8 by Sun.", "On switch-in, Attack or Sp. Atk is raised 1 stage based on the foes\' weaker Defense.", "This Pokemon\'s punch-based attacks have 1.2x power. Sucker Punch is not boosted.", "This Pokemon is healed by 1/8 of its max HP each turn when poisoned; no HP loss.", "This Pokemon\'s same-type attack bonus (STAB) is 2 instead of 1.5.", "This Pokemon\'s multi-hit attacks always hit the maximum number of times.", "This Pokemon has its status cured at the end of each turn if Rain Dance is active.", "If Sunny Day is active, this Pokemon\'s Sp. Atk is 1.5x; loses 1/8 max HP per turn.", "If this Pokemon is statused, its Speed is 1.5x; ignores Speed drop from paralysis.", "This Pokemon\'s moves are changed to be Normal type and have 1.2x power.", "If this Pokemon strikes with a critical hit, the damage is multiplied by 1.5.", "This Pokemon can only be damaged by direct attacks.", "Every move used by or against this Pokemon will always hit.", "This Pokemon moves last among Pokemon using the same or greater priority moves.", "This Pokemon\'s moves of 60 power or less have 1.5x power. Includes Struggle.", "If Sunny Day is active, this Pokemon cannot be statused and Rest will fail for it.", "This Pokemon\'s held item has no effect, except Macho Brace. Fling cannot be used.", "This Pokemon\'s moves and their effects ignore the Abilities of other Pokemon.", "This Pokemon\'s critical hit ratio is raised by 1 stage.", "If this Pokemon is KOed with a contact move, that move\'s user loses 1/4 its max HP.", "On switch-in, this Pokemon shudders if any foe has a supereffective or OHKO move.", "On switch-in, this Pokemon is alerted to the foes\' move with the highest power.", "This Pokemon ignores other Pokemon\'s stat stages when taking or doing damage.", "This Pokemon\'s attacks that are not very effective on a target deal double damage.", "This Pokemon receives 3/4 damage from supereffective attacks.", "On switch-in, this Pokemon\'s Attack and Speed are halved for 5 turns.", "Fighting, Normal moves hit Ghost. Immune to Intimidate.", "This Pokemon draws Water moves to itself to raise Sp. Atk by 1; Water immunity.", "If Hail is active, this Pokemon heals 1/16 of its max HP each turn; immunity to Hail.", "This Pokemon receives 3/4 damage from supereffective attacks.", "On switch-in, this Pokemon summons Hail.", "The Pokemon may gather Honey after a battle.", "On switch-in, this Pokemon identifies the held items of all opposing Pokemon.", "This Pokemon\'s attacks with recoil or crash damage have 1.2x power; not Struggle.", "If this Pokemon is an Arceus, its type changes to match its held Plate or Z-Crystal.", "If user is Cherrim and Sunny Day is active, it and allies\' Attack and Sp. Def are 1.5x.", "Causes sleeping adjacent foes to lose 1/8 of their max HP at the end of each turn.", "If this Pokemon has no item, it steals the item off a Pokemon making contact with it.", "This Pokemon\'s attacks with secondary effects have 1.3x power; nullifies the effects.", "If this Pokemon has a stat stage raised it is lowered instead, and vice versa.", "While this Pokemon is active, it prevents opposing Pokemon from using their Berries.", "This Pokemon\'s Attack is raised by 2 for each of its stats that is lowered by a foe.", "While this Pokemon has 1/2 or less of its max HP, its Attack and Sp. Atk are halved.", "If this Pokemon is hit by an attack, there is a 30% chance that move gets disabled.", "30% chance of curing an adjacent ally\'s status at the end of each turn.", "This Pokemon\'s allies receive 3/4 damage from other Pokemon\'s attacks.", "If a physical attack hits this Pokemon, Defense is lowered by 1, Speed is raised by 2.", "This Pokemon\'s weight is doubled.", "This Pokemon\'s weight is halved.", "If this Pokemon is at full HP, damage taken from attacks is halved.", "While this Pokemon is poisoned, its physical attacks have 1.5x power.", "While this Pokemon is burned, its special attacks have 1.5x power.", "If last item used is a Berry, 50% chance to restore it each end of turn. 100% in Sun.", "This Pokemon does not take damage from attacks made by its allies.", "Boosts a random stat (except accuracy/evasion) +2 and another stat -1 every turn.", "This Pokemon is immune to powder moves and damage from Sandstorm or Hail.", "This Pokemon\'s contact moves have a 30% chance of poisoning.", "This Pokemon restores 1/3 of its maximum HP, rounded down, when it switches out.", "Prevents other Pokemon from lowering this Pokemon\'s Defense stat stage.", "If Sandstorm is active, this Pokemon\'s Speed is doubled; immunity to Sandstorm.", "Status moves with accuracy checks are 50% accurate when used on this Pokemon.", "This Pokemon\'s attacks have 1.3x power if it is the last to move in a turn.", "This Pokemon appears as the last Pokemon in the party until it takes direct damage.", "On switch-in, this Pokemon Transforms into the opposing Pokemon that is facing it.", "Moves ignore substitutes and foe\'s Reflect/Light Screen/Safeguard/Mist/Aurora Veil.", "Pokemon making contact with this Pokemon have their Ability changed to Mummy.", "This Pokemon\'s Attack is raised by 1 stage if it attacks and KOes another Pokemon.", "This Pokemon\'s Attack is raised by 1 stage after it is damaged by a Dark-type move.", "Speed is raised 1 stage if hit by a Bug-, Dark-, or Ghost-type attack, or Intimidated.", "This Pokemon blocks certain status moves and bounces them back to the user.", "This Pokemon\'s Attack is raised 1 stage if hit by a Grass move; Grass immunity.", "This Pokemon\'s Status moves have priority raised by 1, but Dark types are immune.", "This Pokemon\'s Ground/Rock/Steel attacks do 1.3x in Sandstorm; immunity to it.", "Pokemon making contact with this Pokemon lose 1/8 of their max HP.", "If Darmanitan, at end of turn changes Mode to Standard if > 1/2 max HP, else Zen.", "This Pokemon and its allies\' moves have their accuracy multiplied by 1.1.", "This Pokemon\'s moves and their effects ignore the Abilities of other Pokemon.", "This Pokemon\'s moves and their effects ignore the Abilities of other Pokemon.", "Protects user/allies from Attract, Disable, Encore, Heal Block, Taunt, and Torment.", "This side\'s Grass types can\'t have stats lowered or status inflicted by other Pokemon.", "If this Pokemon eats a Berry, it restores 1/3 of its max HP after the Berry\'s effect.", "This Pokemon\'s type changes to match the type of the move it is about to use.", "This Pokemon\'s Defense is doubled.", "If this Pokemon has no item, it steals the item off a Pokemon it hits with an attack.", "Makes user immune to ballistic moves (Shadow Ball, Sludge Bomb, Focus Blast, etc).", "This Pokemon\'s Sp. Atk is raised by 2 for each of its stats that is lowered by a foe.", "This Pokemon\'s bite-based attacks have 1.5x power. Bug Bite is not boosted.", "This Pokemon\'s Normal-type moves become Ice type and have 1.2x power.", "This Pokemon and its allies cannot fall asleep.", "If Aegislash, changes Forme to Blade before attacks and Shield before King\'s Shield.", "If this Pokemon is at full HP, its Flying-type moves have their priority increased by 1.", "This Pokemon\'s pulse moves have 1.5x power. Heal Pulse heals 3/4 target\'s max HP.", "If Grassy Terrain is active, this Pokemon\'s Defense is multiplied by 1.5.", "If an ally uses its item, this Pokemon gives its item to that ally immediately.", "This Pokemon\'s contact moves have their power multiplied by 1.3.", "This Pokemon\'s Normal-type moves become Fairy type and have 1.2x power.", "Pokemon making contact with this Pokemon have their Speed lowered by 1 stage.", "This Pokemon\'s damaging moves hit twice. The second hit has its damage quartered.", "This Pokemon\'s Normal-type moves become Flying type and have 1.2x power.", "While this Pokemon is active, a Dark move used by any Pokemon has 1.33x power.", "While this Pokemon is active, a Fairy move used by any Pokemon has 1.33x power.", "While this Pokemon is active, the Dark Aura and Fairy Aura power modifier is 0.75x.", "On switch-in, heavy rain begins until this Ability is not active in battle.", "On switch-in, extremely harsh sunlight begins until this Ability is not active in battle.", "On switch-in, strong winds begin until this Ability is not active in battle.", "This Pokemon\'s Defense is raised by 1 stage after it is damaged by a move.", "This Pokemon switches out when it reaches 1/2 or less of its maximum HP.", "This Pokemon switches out when it reaches 1/2 or less of its maximum HP.", "This Pokemon\'s Defense is raised 2 stages after it is damaged by a Water-type move.", "This Pokemon\'s attacks are critical hits if the target is poisoned.", "If Minior, switch-in/end of turn it changes to Core at 1/2 max HP or less, else Meteor.", "This Pokemon\'s attacking stat is doubled against a target that switched in this turn.", "This Pokemon\'s Water power is 2x; it can\'t be burned; Fire power against it is halved.", "This Pokemon\'s attacking stat is multiplied by 1.5 while using a Steel-type attack.", "This Pokemon\'s Sp. Atk is raised by 1 when it reaches 1/2 or less of its max HP.", "If Hail is active, this Pokemon\'s Speed is doubled.", "This Pokemon\'s attacks do not make contact with the target.", "This Pokemon\'s sound-based moves become Water type.", "This Pokemon\'s healing moves have their priority increased by 3.", "This Pokemon\'s Normal-type moves become Electric type and have 1.2x power.", "If Electric Terrain is active, this Pokemon\'s Speed is doubled.", "If user is Wishiwashi, changes to School Form if it has > 1/4 max HP, else Solo Form.", "(Mimikyu only) The first hit it takes is blocked, and it takes 1/8 HP damage instead.", "After KOing a Pokemon: becomes Ash-Greninja, Water Shuriken: 20 power, hits 3x.", "If Zygarde 10%/50%, changes to Complete if at 1/2 max HP or less at end of turn.", "This Pokemon can poison or badly poison other Pokemon regardless of their typing.", "This Pokemon cannot be statused, and is considered to be asleep.", "While this Pokemon is active, allies are protected from opposing priority moves.", "If this Pokemon is KOed with a move, that move\'s user loses an equal amount of HP.", "After another Pokemon uses a dance move, this Pokemon uses the same move.", "This Pokemon\'s allies have the power of their special attacks multiplied by 1.3.", "This Pokemon takes 1/2 damage from contact moves, 2x damage from Fire moves.", "While this Pokemon is active, allies are protected from opposing priority moves.", "This Pokemon\'s Sp. Atk is raised by 1 stage when another Pokemon faints.", "Pokemon making contact with this Pokemon have their Speed lowered by 1 stage.", "This Pokemon copies the Ability of an ally that faints.", "This Pokemon copies the Ability of an ally that faints.", "This Pokemon\'s highest stat is raised by 1 if it attacks and KOes another Pokemon.", "If this Pokemon is a Silvally, its type changes to match its held Memory.", "On switch-in, this Pokemon summons Electric Terrain.", "On switch-in, this Pokemon summons Psychic Terrain.", "On switch-in, this Pokemon summons Misty Terrain.", "On switch-in, this Pokemon summons Grassy Terrain.", "Prevents other Pokemon from lowering this Pokemon\'s stat stages.", "If this Pokemon is at full HP, damage taken from attacks is halved.", "This Pokemon receives 3/4 damage from supereffective attacks.", "This Pokemon\'s attacks that are super effective against the target do 1.25x damage.", "On switch-in, this Pokemon\'s Attack is raised by 1 stage.", "On switch-in, this Pokemon\'s Defense is raised by 1 stage.", "This Pokemon\'s type changes to match the type of the move it is about to use.", "The Pokemon will fetch the Poke Ball from the first failed throw of the battle.", "Lowers Speed of all Pokemon except itself when hit by an attack.", "Ignores the effects of opposing Pokemon\'s moves/Abilities that redirect move targets.", "Bounces back only the stat-lowering effects that the Pokemon receives.", "Get prey with Surf/Dive. When taking damage, prey is used to attack.", "Ignores the effects of opposing Pokemon\'s Abilities and moves that draw in moves.", "This Pokemon\'s Speed is raised by 6 stages after it is damaged by Fire/Water moves.", "Boosts sound move power, 0.5x— damage from sound moves.", "The Pokemon creates a sandstorm when it\'s hit by an attack.", "This Pokemon\'s Special Defense is doubled.", "Ripens Berries and doubles their effect.", "(Eiscue only) First physical hit deals 0 damage, breaks ice head.", "This Pokemon\'s allies have the base power of their moves multiplied by 1.3.", "Changes the Pokemon\'s type depending on the terrain.", "Removes Reflect, Light Screen, and Aurora Veil on switch-in.", "This Pokemon and its allies\' Steel-type moves have their BP mutiplied by 1.5.", "When hit by a contact move, the Pokemon and the attacker faint in 3 turns.", "Exchanges abilities when hitting a Pokemon with a contact move.", "Boosts the Pokemon\'s Attack stat but only allows the use of the first selected move.", "Nullifies abilities while on the field.", "Protects the Pokemon and its ally Pokemon from being poisoned.", "Changes between Full Belly and Hangry Mode at the end of each turn."];
var dir = "down";
var battleType = "";
var battleType2 = "";
var trainerName = "";
var trainerDirection = "";
var battleBg = "";
var oldBattleBg = "";
var moveType = "";
var bobbing = "";
var followPokemonMove = "";
var globalAnimation = "";
var lastPM = "";
var lastPM2 = "";
var continueButtonText = "";
var chatType = "english";
if (testClient == true)
{
    _root.lowercaseUsername = _root.username.toLowerCase();
    _root.encryptedMuted = _root.calcMD5(muted + _root.kg1() + _root.username);
    _root.encryptedstepsWalked = _root.calcMD5(stepsWalked + _root.kg1() + _root.username);
} // end if
_root.autoKickI = setInterval(autoKick, 2700000);
_root.autoKickI2 = setInterval(autoKick2, 172800000);
resetGlobalAnimationObj();
var clickX = [];
var clickY = [];
var clickTime = [];
var clickTimes = [];
var recentX = [];
var recentY = [];
var curClickX = 0;
var curClickY = 0;
var lastClickX = curClickX;
var lastClickY = curClickY;
var tCheck = 120000;
var chainClick = 0;
if (loadedGUI == undefined)
{
    mainGUI._visible = false;
} // end if
var GUI = _root.createEmptyMovieClip("GUI", _root.getNextHighestDepth());
GUI._x = 0;
GUI._y = 0;
onEnterFrame = function ()
{
    if (updateListingPrice == true)
    {
        if (Number(marketplace.sell.listingDetails.priceT.text) > 0)
        {
            marketplace.sell.listingDetails.listingFeeT.htmlText = "<b>" + format(Math.ceil(Number(marketplace.sell.listingDetails.priceT.text) / 100) + 500);
        }
        else
        {
            marketplace.sell.listingDetails.listingFeeT.htmlText = "<b>0";
        } // end if
    } // end else if
    handleGlobalAnimations();
    if (checkForBattle == true)
    {
        if (_root.battleReady == true)
        {
            checkingForBattle = false;
            unfadeScreen();
        } // end if
    } // end if
    if (battleAnimation > 0)
    {
        if (battleAnimation == 1)
        {
            battleAnimation = 2;
            bobbing = "down";
            mainGUI.battleBackground.userHp._alpha = 0;
            mainGUI.battleBackground.enemyHp._alpha = 0;
            mainGUI.battleBackground.backPokemon._alpha = 0;
            mainGUI.battleBackground.wildPokemonIcon._alpha = 0;
            mainGUI.battleBackground.backPokemon._visible = true;
            mainGUI.battleBackground.wildPokemonIcon._visible = true;
            if (_root.bt == "d")
            {
                mainGUI.battleBackground.backPokemon2._alpha = 0;
                mainGUI.battleBackground.backPokemon2._visible = true;
                mainGUI.battleBackground.wildPokemonIcon2._alpha = 0;
                mainGUI.battleBackground.wildPokemonIcon2._visible = true;
                mainGUI.battleBackground.userHp2._visible = true;
                mainGUI.battleBackground.enemyHp2._visible = true;
            }
            else
            {
                mainGUI.battleBackground.userHp._visible = true;
                mainGUI.battleBackground.enemyHp._visible = true;
            } // end else if
        }
        else if (battleAnimation == 2)
        {
            if (mainGUI.battleBackground.userHp._alpha < 100)
            {
                mainGUI.battleBackground.userHp._alpha = mainGUI.battleBackground.userHp._alpha + 8;
                mainGUI.battleBackground.enemyHp._alpha = mainGUI.battleBackground.enemyHp._alpha + 8;
                mainGUI.battleBackground.backPokemon._alpha = mainGUI.battleBackground.backPokemon._alpha + 8;
                mainGUI.battleBackground.wildPokemonIcon._alpha = mainGUI.battleBackground.wildPokemonIcon._alpha + 8;
                if (_root.bt == "d")
                {
                    mainGUI.battleBackground.backPokemon2._alpha = mainGUI.battleBackground.backPokemon2._alpha + 8;
                    mainGUI.battleBackground.wildPokemonIcon2._alpha = mainGUI.battleBackground.wildPokemonIcon2._alpha + 8;
                } // end if
            }
            else
            {
                battleAnimation = 0;
                mainGUI.battleBackground.battleT._visible = true;
                displayBattleText();
            } // end if
        } // end else if
    } // end else if
    if (bobbing != "")
    {
        ++bobbingFrameCount;
        if (bobbingFrameCount >= 22)
        {
            bobbingFrameCount = 0;
            if (bobbing == "down")
            {
                _root.mainGUI.battleBackground.backPokemon._y = _root.mainGUI.battleBackground.backPokemon._y + 2;
                _root.mainGUI.battleBackground.backPokemon2._y = _root.mainGUI.battleBackground.backPokemon2._y + 2;
                bobbing = "up";
            }
            else if (bobbing == "up")
            {
                _root.mainGUI.battleBackground.backPokemon._y = _root.mainGUI.battleBackground.backPokemon._y - 2;
                _root.mainGUI.battleBackground.backPokemon2._y = _root.mainGUI.battleBackground.backPokemon2._y - 2;
                bobbing = "down";
            } // end if
        } // end if
    } // end else if
    handleDragging();
    if (_root.fadeOutMusic == true)
    {
        mySound.setVolume(mySound.getVolume() - 2);
        if (mySound.getVolume() <= 0)
        {
            startPlayingSound(_root.fadeOutMusicArray[0], _root.fadeOutMusicArray[1]);
        } // end if
    }
    else if (_root.fadeInMusic == true)
    {
        if (musicVolume > 0)
        {
            mySound.setVolume(mySound.getVolume() + 2);
            if (mySound.getVolume() >= musicVolume)
            {
                _root.fadeInMusic = false;
            } // end if
        }
        else
        {
            _root.fadeInMusic = false;
        } // end else if
    } // end else if
    handlePlayerMovement();
    if (player.followPokemonBox.followPokemonImage._width == 128)
    {
        if (followPokemonMove == "down")
        {
            if (player.followPokemonBox._y > -offsetAmountFollowPokemon / 2 - 16)
            {
                player.followPokemonBox._y = player.followPokemonBox._y - player.followPokemonBox.ySpeed;
            }
            else
            {
                followPokemonMove = "";
            } // end else if
            if (player.followPokemonBox._x < 0)
            {
                player.followPokemonBox._x = player.followPokemonBox._x + player.followPokemonBox.xSpeed;
            } // end if
            if (player.followPokemonBox._x > 0)
            {
                player.followPokemonBox._x = player.followPokemonBox._x - player.followPokemonBox.xSpeed;
            } // end if
        }
        else if (followPokemonMove == "up")
        {
            if (player.followPokemonBox._y < offsetAmountFollowPokemon / 2)
            {
                player.followPokemonBox._y = player.followPokemonBox._y + player.followPokemonBox.ySpeed;
            }
            else
            {
                followPokemonMove = "";
            } // end else if
            if (player.followPokemonBox._x < 0)
            {
                player.followPokemonBox._x = player.followPokemonBox._x + player.followPokemonBox.xSpeed;
            } // end if
            if (player.followPokemonBox._x > 0)
            {
                player.followPokemonBox._x = player.followPokemonBox._x - player.followPokemonBox.xSpeed;
            } // end if
        }
        else if (followPokemonMove == "left")
        {
            if (player.followPokemonBox._y < 0)
            {
                player.followPokemonBox._y = player.followPokemonBox._y + player.followPokemonBox.ySpeed;
            } // end if
            if (player.followPokemonBox._y > 0)
            {
                player.followPokemonBox._y = player.followPokemonBox._y - player.followPokemonBox.ySpeed;
            } // end if
            if (player.followPokemonBox._x < offsetAmountFollowPokemon / 2 + 16)
            {
                player.followPokemonBox._x = player.followPokemonBox._x + player.followPokemonBox.xSpeed;
            }
            else
            {
                followPokemonMove = "";
            } // end else if
        }
        else if (followPokemonMove == "right")
        {
            if (player.followPokemonBox._y < 0)
            {
                player.followPokemonBox._y = player.followPokemonBox._y + player.followPokemonBox.ySpeed;
            } // end if
            if (player.followPokemonBox._y > 0)
            {
                player.followPokemonBox._y = player.followPokemonBox._y - player.followPokemonBox.ySpeed;
            } // end if
            if (player.followPokemonBox._x > -offsetAmountFollowPokemon / 2 - 16)
            {
                player.followPokemonBox._x = player.followPokemonBox._x - player.followPokemonBox.xSpeed;
            }
            else
            {
                followPokemonMove = "";
            } // end else if
        } // end else if
    }
    else if (followPokemonMove == "down")
    {
        if (player.followPokemonBox._y > -offsetAmountFollowPokemon / 2)
        {
            player.followPokemonBox._y = player.followPokemonBox._y - player.followPokemonBox.ySpeed;
        }
        else
        {
            followPokemonMove = "";
        } // end else if
        if (player.followPokemonBox._x < 0)
        {
            player.followPokemonBox._x = player.followPokemonBox._x + player.followPokemonBox.xSpeed;
        } // end if
        if (player.followPokemonBox._x > 0)
        {
            player.followPokemonBox._x = player.followPokemonBox._x - player.followPokemonBox.xSpeed;
        } // end if
    }
    else if (followPokemonMove == "up")
    {
        if (player.followPokemonBox._y < offsetAmountFollowPokemon / 2)
        {
            player.followPokemonBox._y = player.followPokemonBox._y + player.followPokemonBox.ySpeed;
        }
        else
        {
            followPokemonMove = "";
        } // end else if
        if (player.followPokemonBox._x < 0)
        {
            player.followPokemonBox._x = player.followPokemonBox._x + player.followPokemonBox.xSpeed;
        } // end if
        if (player.followPokemonBox._x > 0)
        {
            player.followPokemonBox._x = player.followPokemonBox._x - player.followPokemonBox.xSpeed;
        } // end if
    }
    else if (followPokemonMove == "left")
    {
        if (player.followPokemonBox._y < 0)
        {
            player.followPokemonBox._y = player.followPokemonBox._y + player.followPokemonBox.ySpeed;
        } // end if
        if (player.followPokemonBox._y > 0)
        {
            player.followPokemonBox._y = player.followPokemonBox._y - player.followPokemonBox.ySpeed;
        } // end if
        if (player.followPokemonBox._x < offsetAmountFollowPokemon / 2)
        {
            player.followPokemonBox._x = player.followPokemonBox._x + player.followPokemonBox.xSpeed;
        }
        else
        {
            followPokemonMove = "";
        } // end else if
    }
    else if (followPokemonMove == "right")
    {
        if (player.followPokemonBox._y < 0)
        {
            player.followPokemonBox._y = player.followPokemonBox._y + player.followPokemonBox.ySpeed;
        } // end if
        if (player.followPokemonBox._y > 0)
        {
            player.followPokemonBox._y = player.followPokemonBox._y - player.followPokemonBox.ySpeed;
        } // end if
        if (player.followPokemonBox._x > -offsetAmountFollowPokemon / 2)
        {
            player.followPokemonBox._x = player.followPokemonBox._x - player.followPokemonBox.xSpeed;
        }
        else
        {
            followPokemonMove = "";
        } // end else if
    } // end else if
    handleMoveMap();
    handleNpcMovement();
    for (var _loc2 = 0; _loc2 < activePlayers.length; ++_loc2)
    {
        if (activePlayers[_loc2].moveQueue == undefined)
        {
            activePlayers.splice(_loc2, 1);
            continue;
        } // end if
        if (_root["animationI_" + activePlayers[_loc2].name] != undefined)
        {
            clearInterval(_root["animationI_" + activePlayers[_loc2].name]);
        } // end if
        var _loc3 = {x: activePlayers[_loc2].followPokemonBox._x, y: activePlayers[_loc2].followPokemonBox._y};
        activePlayers[_loc2].followPokemonBox._parent.localToGlobal(_loc3);
        if (activePlayers[_loc2].moveMapAmount == 0)
        {
            if (activePlayers[_loc2].moveQueue[0] == "u")
            {
                drawPlayer(activePlayers[_loc2], 0, 1);
            }
            else if (activePlayers[_loc2].moveQueue[0] == "d")
            {
                drawPlayer(activePlayers[_loc2], 0, 0);
            }
            else if (activePlayers[_loc2].moveQueue[0] == "l")
            {
                drawPlayer(activePlayers[_loc2], 0, 2);
            }
            else if (activePlayers[_loc2].moveQueue[0] == "r")
            {
                drawPlayer(activePlayers[_loc2], 0, 3);
            }
            else if (activePlayers[_loc2].moveQueue[0] == "bu")
            {
                drawPlayer(activePlayers[_loc2], 6, 1);
            }
            else if (activePlayers[_loc2].moveQueue[0] == "bd")
            {
                drawPlayer(activePlayers[_loc2], 6, 0);
            }
            else if (activePlayers[_loc2].moveQueue[0] == "bl")
            {
                drawPlayer(activePlayers[_loc2], 6, 2);
            }
            else if (activePlayers[_loc2].moveQueue[0] == "br")
            {
                drawPlayer(activePlayers[_loc2], 6, 3);
            }
            else if (activePlayers[_loc2].moveQueue[0] == "su")
            {
                drawPlayer(activePlayers[_loc2], 12, 1);
            }
            else if (activePlayers[_loc2].moveQueue[0] == "sd")
            {
                drawPlayer(activePlayers[_loc2], 12, 0);
            }
            else if (activePlayers[_loc2].moveQueue[0] == "sl")
            {
                drawPlayer(activePlayers[_loc2], 12, 2);
            }
            else if (activePlayers[_loc2].moveQueue[0] == "sr")
            {
                drawPlayer(activePlayers[_loc2], 12, 3);
            } // end else if
        } // end else if
        activePlayers[_loc2].moveMapAmount = activePlayers[_loc2].moveMapAmount + activePlayers[_loc2].speed;
        if (activePlayers[_loc2].moveQueue[0] == "d" || activePlayers[_loc2].moveQueue[0] == "bd" || activePlayers[_loc2].moveQueue[0] == "sd")
        {
            activePlayers[_loc2]._y = activePlayers[_loc2]._y + activePlayers[_loc2].speed;
            if (activePlayers[_loc2].moveQueue[0] == "bd")
            {
                checkPlayerMovement("down", activePlayers[_loc2], "bike");
            }
            else if (activePlayers[_loc2].moveQueue[0] == "sd")
            {
                checkPlayerMovement("down", activePlayers[_loc2], "surf");
            }
            else
            {
                checkPlayerMovement("down", activePlayers[_loc2], "");
            } // end else if
            if (activePlayers[_loc2].followPokemonBox.followPokemonImage._width == 128)
            {
                if (_loc3.y > activePlayers[_loc2]._y - 64 - 32)
                {
                    activePlayers[_loc2].followPokemonBox._y = activePlayers[_loc2].followPokemonBox._y - activePlayers[_loc2].followPokemonBox.ySpeed;
                } // end if
                if (_loc3.x < activePlayers[_loc2]._x)
                {
                    activePlayers[_loc2].followPokemonBox._x = activePlayers[_loc2].followPokemonBox._x + activePlayers[_loc2].followPokemonBox.xSpeed;
                } // end if
                if (_loc3.x > activePlayers[_loc2]._x)
                {
                    activePlayers[_loc2].followPokemonBox._x = activePlayers[_loc2].followPokemonBox._x - activePlayers[_loc2].followPokemonBox.xSpeed;
                } // end if
            }
            else
            {
                if (_loc3.y > activePlayers[_loc2]._y - 64)
                {
                    activePlayers[_loc2].followPokemonBox._y = activePlayers[_loc2].followPokemonBox._y - activePlayers[_loc2].followPokemonBox.ySpeed;
                } // end if
                if (_loc3.x < activePlayers[_loc2]._x)
                {
                    activePlayers[_loc2].followPokemonBox._x = activePlayers[_loc2].followPokemonBox._x + activePlayers[_loc2].followPokemonBox.xSpeed;
                } // end if
                if (_loc3.x > activePlayers[_loc2]._x)
                {
                    activePlayers[_loc2].followPokemonBox._x = activePlayers[_loc2].followPokemonBox._x - activePlayers[_loc2].followPokemonBox.xSpeed;
                } // end if
            } // end else if
        }
        else if (activePlayers[_loc2].moveQueue[0] == "u" || activePlayers[_loc2].moveQueue[0] == "bu" || activePlayers[_loc2].moveQueue[0] == "su")
        {
            activePlayers[_loc2]._y = activePlayers[_loc2]._y - activePlayers[_loc2].speed;
            if (activePlayers[_loc2].moveQueue[0] == "bu")
            {
                checkPlayerMovement("up", activePlayers[_loc2], "bike");
            }
            else if (activePlayers[_loc2].moveQueue[0] == "su")
            {
                checkPlayerMovement("up", activePlayers[_loc2], "surf");
            }
            else
            {
                checkPlayerMovement("up", activePlayers[_loc2], "");
            } // end else if
            if (activePlayers[_loc2].followPokemonBox.followPokemonImage._width == 128)
            {
                if (_loc3.y < activePlayers[_loc2]._y + 64 + 16)
                {
                    activePlayers[_loc2].followPokemonBox._y = activePlayers[_loc2].followPokemonBox._y + activePlayers[_loc2].followPokemonBox.ySpeed;
                } // end if
                if (_loc3.x < activePlayers[_loc2]._x)
                {
                    activePlayers[_loc2].followPokemonBox._x = activePlayers[_loc2].followPokemonBox._x + activePlayers[_loc2].followPokemonBox.xSpeed;
                } // end if
                if (_loc3.x > activePlayers[_loc2]._x)
                {
                    activePlayers[_loc2].followPokemonBox._x = activePlayers[_loc2].followPokemonBox._x - activePlayers[_loc2].followPokemonBox.xSpeed;
                } // end if
            }
            else
            {
                if (_loc3.y < activePlayers[_loc2]._y + 64)
                {
                    activePlayers[_loc2].followPokemonBox._y = activePlayers[_loc2].followPokemonBox._y + activePlayers[_loc2].followPokemonBox.ySpeed;
                } // end if
                if (_loc3.x < activePlayers[_loc2]._x)
                {
                    activePlayers[_loc2].followPokemonBox._x = activePlayers[_loc2].followPokemonBox._x + activePlayers[_loc2].followPokemonBox.xSpeed;
                } // end if
                if (_loc3.x > activePlayers[_loc2]._x)
                {
                    activePlayers[_loc2].followPokemonBox._x = activePlayers[_loc2].followPokemonBox._x - activePlayers[_loc2].followPokemonBox.xSpeed;
                } // end if
            } // end else if
        }
        else if (activePlayers[_loc2].moveQueue[0] == "r" || activePlayers[_loc2].moveQueue[0] == "br" || activePlayers[_loc2].moveQueue[0] == "sr")
        {
            activePlayers[_loc2]._x = activePlayers[_loc2]._x + activePlayers[_loc2].speed;
            if (activePlayers[_loc2].moveQueue[0] == "br")
            {
                checkPlayerMovement("right", activePlayers[_loc2], "bike");
            }
            else if (activePlayers[_loc2].moveQueue[0] == "sr")
            {
                checkPlayerMovement("right", activePlayers[_loc2], "surf");
            }
            else
            {
                checkPlayerMovement("right", activePlayers[_loc2], "");
            } // end else if
            if (activePlayers[_loc2].followPokemonBox.followPokemonImage._width == 128)
            {
                if (_loc3.y < activePlayers[_loc2]._y)
                {
                    activePlayers[_loc2].followPokemonBox._y = activePlayers[_loc2].followPokemonBox._y + activePlayers[_loc2].followPokemonBox.ySpeed;
                } // end if
                if (_loc3.y > activePlayers[_loc2]._y)
                {
                    activePlayers[_loc2].followPokemonBox._y = activePlayers[_loc2].followPokemonBox._y - activePlayers[_loc2].followPokemonBox.ySpeed;
                } // end if
                if (_loc3.x > activePlayers[_loc2]._x - 64 - 32)
                {
                    activePlayers[_loc2].followPokemonBox._x = activePlayers[_loc2].followPokemonBox._x - activePlayers[_loc2].followPokemonBox.xSpeed;
                } // end if
            }
            else
            {
                if (_loc3.y < activePlayers[_loc2]._y)
                {
                    activePlayers[_loc2].followPokemonBox._y = activePlayers[_loc2].followPokemonBox._y + activePlayers[_loc2].followPokemonBox.ySpeed;
                } // end if
                if (_loc3.y > activePlayers[_loc2]._y)
                {
                    activePlayers[_loc2].followPokemonBox._y = activePlayers[_loc2].followPokemonBox._y - activePlayers[_loc2].followPokemonBox.ySpeed;
                } // end if
                if (_loc3.x > activePlayers[_loc2]._x - 64)
                {
                    activePlayers[_loc2].followPokemonBox._x = activePlayers[_loc2].followPokemonBox._x - activePlayers[_loc2].followPokemonBox.xSpeed;
                } // end if
            } // end else if
        }
        else if (activePlayers[_loc2].moveQueue[0] == "l" || activePlayers[_loc2].moveQueue[0] == "bl" || activePlayers[_loc2].moveQueue[0] == "sl")
        {
            activePlayers[_loc2]._x = activePlayers[_loc2]._x - activePlayers[_loc2].speed;
            if (activePlayers[_loc2].moveQueue[0] == "bl")
            {
                checkPlayerMovement("left", activePlayers[_loc2], "bike");
            }
            else if (activePlayers[_loc2].moveQueue[0] == "sl")
            {
                checkPlayerMovement("left", activePlayers[_loc2], "surf");
            }
            else
            {
                checkPlayerMovement("left", activePlayers[_loc2], "");
            } // end else if
            if (activePlayers[_loc2].followPokemonBox.followPokemonImage._width == 128)
            {
                if (_loc3.y < activePlayers[_loc2]._y)
                {
                    activePlayers[_loc2].followPokemonBox._y = activePlayers[_loc2].followPokemonBox._y + activePlayers[_loc2].followPokemonBox.ySpeed;
                } // end if
                if (_loc3.y > activePlayers[_loc2]._y)
                {
                    activePlayers[_loc2].followPokemonBox._y = activePlayers[_loc2].followPokemonBox._y - activePlayers[_loc2].followPokemonBox.ySpeed;
                } // end if
                if (_loc3.x < activePlayers[_loc2]._x + 64 + 32)
                {
                    activePlayers[_loc2].followPokemonBox._x = activePlayers[_loc2].followPokemonBox._x + activePlayers[_loc2].followPokemonBox.xSpeed;
                } // end if
            }
            else
            {
                if (_loc3.y < activePlayers[_loc2]._y)
                {
                    activePlayers[_loc2].followPokemonBox._y = activePlayers[_loc2].followPokemonBox._y + activePlayers[_loc2].followPokemonBox.ySpeed;
                } // end if
                if (_loc3.y > activePlayers[_loc2]._y)
                {
                    activePlayers[_loc2].followPokemonBox._y = activePlayers[_loc2].followPokemonBox._y - activePlayers[_loc2].followPokemonBox.ySpeed;
                } // end if
                if (_loc3.x < activePlayers[_loc2]._x + 64)
                {
                    activePlayers[_loc2].followPokemonBox._x = activePlayers[_loc2].followPokemonBox._x + activePlayers[_loc2].followPokemonBox.xSpeed;
                } // end else if
            } // end else if
        } // end else if
        if (activePlayers[_loc2].moveQueue[0] != "jump")
        {
            if (activePlayers[_loc2].moveMapAmount >= 64)
            {
                if (activePlayers[_loc2].moveQueue[0] == "u" || activePlayers[_loc2].moveQueue[0] == "bu" || activePlayers[_loc2].moveQueue[0] == "su")
                {
                    --activePlayers[_loc2].tileY;
                }
                else if (activePlayers[_loc2].moveQueue[0] == "d" || activePlayers[_loc2].moveQueue[0] == "bd" || activePlayers[_loc2].moveQueue[0] == "sd")
                {
                    ++activePlayers[_loc2].tileY;
                }
                else if (activePlayers[_loc2].moveQueue[0] == "r" || activePlayers[_loc2].moveQueue[0] == "br" || activePlayers[_loc2].moveQueue[0] == "sr")
                {
                    ++activePlayers[_loc2].tileX;
                }
                else if (activePlayers[_loc2].moveQueue[0] == "l" || activePlayers[_loc2].moveQueue[0] == "bl" || activePlayers[_loc2].moveQueue[0] == "sl")
                {
                    --activePlayers[_loc2].tileX;
                } // end else if
                if (collisionArray[activePlayers[_loc2].tileY][activePlayers[_loc2].tileX] == 3 && (_root.battleBg == "" || _root.battleBg == "grass"))
                {
                    grassAnimation(activePlayers[_loc2].tileX, activePlayers[_loc2].tileY);
                }
                else if (collisionArray[activePlayers[_loc2].tileY][activePlayers[_loc2].tileX] == 17)
                {
                    snowAnimation(activePlayers[_loc2].tileX, activePlayers[_loc2].tileY);
                } // end else if
                activePlayers[_loc2].moveMapAmount = 0;
                activePlayers[_loc2].moveQueue.splice(0, 1);
                if (activePlayers[_loc2].moveQueue.length == 0)
                {
                    activePlayers[_loc2].moving = false;
                    activePlayers.splice(_loc2, 1);
                    continue;
                } // end if
            } // end if
        } // end if
    } // end of for
    handleBattleText();
    if (itemImageDrag._x != undefined)
    {
        itemImageDrag._x = _xmouse;
        itemImageDrag._y = _ymouse;
    } // end if
};
smartfox.onAdminMessage = function (message)
{
    systemMessage(message);
};
smartfox.onUserLeaveRoom = function (fromRoom, usrId)
{
    for (var _loc2 = 0; _loc2 < players.length; ++_loc2)
    {
        if (players[_loc2].userId == usrId)
        {
            name = players[_loc2].name;
            players.splice(_loc2, 1);
            clearInterval(_root["animationI_" + name]);
            removeMovieClip (_root["player_" + name]);
            break;
        } // end if
    } // end of for
};
smartfox.onExtensionResponse = function (resObj, type)
{
    if (type == "xml")
    {
        handleXMLResponse(resObj);
    }
    else if (type == "str")
    {
        handleStringResponse(resObj);
    }
    else
    {
        trace ("unknown type");
    } // end else if
};
keyListener.onKeyUp = function ()
{
    resetAutoKick();
    if (Key.getCode() == 9)
    {
        if (_root.login._x != undefined)
        {
            if (login.usernameField._currentframe == 2)
            {
                Selection.setFocus(login.passwordT);
            }
            else
            {
                Selection.setFocus(login.usernameT);
            } // end else if
        }
        else if (lastPM != "")
        {
            Selection.setFocus(mainGUI.inputT);
            mainGUI.inputT.text = "@" + lastPM + " ";
            Selection.setSelection(9999, 9999);
            mainGUI.chatBg.inputTBg._visible = false;
            typing = true;
        } // end else if
    }
    else if (Key.getCode() == 38 || Key.getCode() == 87)
    {
        if (login._x == undefined)
        {
            if (typing == false)
            {
                if (bW == true)
                {
                    sendKeyLog("UP", getTimer());
                } // end if
                if (_root.requestTime != undefined)
                {
                    if (canMove != true && (_root.tradeRequest._x != undefined || _root.battleRequest._x != undefined))
                    {
                        ++movementPresses;
                    } // end if
                } // end if
            } // end if
            wDown = false;
            bDownTime = 0;
        } // end if
    }
    else if (Key.getCode() == 39 || Key.getCode() == 68)
    {
        if (login._x == undefined)
        {
            if (typing == false)
            {
                if (bW == true)
                {
                    sendKeyLog("RIGHT", getTimer());
                } // end if
                if (_root.requestTime != undefined)
                {
                    if (canMove != true && (_root.tradeRequest._x != undefined || _root.battleRequest._x != undefined))
                    {
                        ++movementPresses;
                    } // end if
                } // end if
            } // end if
            dDown = false;
            bDownTime = 0;
        } // end if
    }
    else if (Key.getCode() == 40 || Key.getCode() == 83)
    {
        if (login._x == undefined)
        {
            if (typing == false)
            {
                if (bW == true)
                {
                    sendKeyLog("DOWN", getTimer());
                } // end if
                if (_root.requestTime != undefined)
                {
                    if (canMove != true && (_root.tradeRequest._x != undefined || _root.battleRequest._x != undefined))
                    {
                        ++movementPresses;
                    } // end if
                } // end if
            } // end if
            sDown = false;
            bDownTime = 0;
        } // end if
    }
    else if (Key.getCode() == 37 || Key.getCode() == 65)
    {
        if (login._x == undefined)
        {
            if (typing == false)
            {
                if (bW == true)
                {
                    sendKeyLog("LEFT", getTimer());
                } // end if
                if (_root.requestTime != undefined)
                {
                    if (canMove != true && (_root.tradeRequest._x != undefined || _root.battleRequest._x != undefined))
                    {
                        ++movementPresses;
                    } // end if
                } // end if
            } // end if
            aDown = false;
            bDownTime = 0;
        } // end if
    }
    else if (Key.getCode() == 18)
    {
        if (login._x == undefined)
        {
            if (lastPM2 != "" && login._x == undefined)
            {
                Selection.setFocus(mainGUI.inputT);
                mainGUI.inputT.text = "@" + lastPM2 + " ";
                Selection.setSelection(9999, 9999);
                mainGUI.chatBg.inputTBg._visible = false;
                typing = true;
            } // end if
        } // end if
    }
    else if (Key.getCode() == 49 || Key.getCode() == 97)
    {
        if (login._x == undefined)
        {
            if (bW == true)
            {
                sendKeyLog("1", getTimer());
            } // end if
            if (_root.battle == true && _root.mainGUI.battleBackground._visible == true && _root.typing == false)
            {
                if (_root.mainGUI.battleBackground.fightB._visible == true)
                {
                    showMoveButtons();
                }
                else if (_root.mainGUI.battleBackground.move1B._visible == true)
                {
                    useBattleMove(0, _root.mainGUI.battleBackground.move1B);
                } // end if
            } // end if
        } // end else if
    }
    else if (Key.getCode() == 50 || Key.getCode() == 98)
    {
        if (login._x == undefined)
        {
            if (bW == true)
            {
                sendKeyLog("2", getTimer());
            } // end if
            if (_root.battle == true && _root.mainGUI.battleBackground._visible == true && _root.typing == false)
            {
                if (_root.mainGUI.battleBackground.move2B._visible == true)
                {
                    useBattleMove(1, _root.mainGUI.battleBackground.move2B);
                } // end if
            } // end if
        } // end if
    }
    else if (Key.getCode() == 51 || Key.getCode() == 99)
    {
        if (login._x == undefined)
        {
            if (bW == true)
            {
                sendKeyLog("3", getTimer());
            } // end if
            if (_root.battle == true && _root.mainGUI.battleBackground._visible == true && _root.typing == false)
            {
                if (_root.mainGUI.battleBackground.move3B._visible == true)
                {
                    useBattleMove(2, _root.mainGUI.battleBackground.move3B);
                } // end if
            } // end if
        } // end if
    }
    else if (Key.getCode() == 52 || Key.getCode() == 100)
    {
        if (login._x == undefined)
        {
            if (bW == true)
            {
                sendKeyLog("4", getTimer());
            } // end if
            if (_root.battle == true && _root.mainGUI.battleBackground._visible == true && _root.typing == false)
            {
                if (_root.mainGUI.battleBackground.runB._visible == true)
                {
                    runFromBattle();
                }
                else if (_root.mainGUI.battleBackground.move4B._visible == true)
                {
                    useBattleMove(3, _root.mainGUI.battleBackground.move4B);
                } // end if
            } // end if
        } // end else if
    }
    else if (Key.getCode() == 53 || Key.getCode() == 101)
    {
        if (login._x == undefined)
        {
            if (bW == true)
            {
                sendKeyLog("5", getTimer());
            } // end if
            if (_root.battle == true && _root.mainGUI.battleBackground._visible == true && _root.typing == false)
            {
                if (_root.mainGUI.battleBackground.backB._visible == true)
                {
                    battleBackButton();
                } // end if
            } // end if
        } // end if
    }
    else if (Key.getCode() == 32)
    {
        if (login._x == undefined)
        {
            if (typing == false && bW == true)
            {
                sendKeyLog("SPACE", getTimer());
            } // end if
            if (guiUp == false)
            {
                if (chatBoxOpen == false)
                {
                    if (mainGUI.hookingUI instanceof MovieClip)
                    {
                        mainGUI.hookingUI.dir = 0;
                        if (mainGUI.hookingUI._visible == true)
                        {
                            if (mainGUI.hookingUI.hook.hitbox.hitTest(mainGUI.hookingUI.perfectZone))
                            {
                                getTimestamp("goodHook", 1);
                            }
                            else if (mainGUI.hookingUI.hook.hitbox.hitTest(mainGUI.hookingUI.zone.hitbox))
                            {
                                getTimestamp("goodHook", 0);
                            }
                            else
                            {
                                failedHook();
                            } // end else if
                        }
                        else
                        {
                            failedHook();
                        } // end else if
                    }
                    else if (dir == "up")
                    {
                        interact(player.tileX, player.tileY - 1);
                    }
                    else if (dir == "down")
                    {
                        interact(player.tileX, player.tileY + 1);
                    }
                    else if (dir == "left")
                    {
                        interact(player.tileX - 1, player.tileY);
                    }
                    else if (dir == "right")
                    {
                        interact(player.tileX + 1, player.tileY);
                    } // end else if
                }
                else
                {
                    nextMessage();
                } // end if
            } // end if
        } // end else if
    }
    else if (Key.getCode() == 13)
    {
        if (login._x != undefined)
        {
            if (connected)
            {
                if (login.usernameT.text != "" && login.passwordT.text != "")
                {
                    if (!loginBusy)
                    {
                        loginBusy = true;
                        _root.username = String(login.usernameT.text);
                        _root.lowercaseUsername = _root.username.toLowerCase();
                        _root.hashpassword = sha1(_root.lowercaseUsername + String(login.passwordT.text));
                        smartfox.login(zone, String(username), hashpassword);
                    } // end if
                } // end if
            } // end if
        }
        else if (mainGUI.inputT.length == 0 && typing == false)
        {
            Selection.setFocus(mainGUI.inputT);
            mainGUI.chatBg.inputTBg._visible = false;
            typing = true;
        }
        else if (getTimer() - lastMessage >= 2000)
        {
            sendChatMsg();
        } // end else if
    }
    else if (Key.getCode() == 66)
    {
        if (login._x == undefined)
        {
            if (typing == false)
            {
                if (moving == false)
                {
                    useMount();
                } // end if
            } // end if
        } // end if
    }
    else if (Key.getCode() == 70)
    {
        if (login._x == undefined)
        {
            if (typing == false)
            {
                if (fishing == false)
                {
                    if (moving == false)
                    {
                        fishItemNum = -1;
                        for (var _loc2 = 0; _loc2 < _root.inventory.length; ++_loc2)
                        {
                            if (_root.inventory[_loc2][0] == "Master Rod" && fishingLevel >= 100)
                            {
                                fishItemNum = _loc2;
                                checkFish(fishItemNum);
                                break;
                            }
                            else if (_root.inventory[_loc2][0] == "AFK Rod" && fishingLevel >= 50)
                            {
                                fishItemNum = _loc2;
                                checkFish(fishItemNum);
                                break;
                            }
                            else if (_root.inventory[_loc2][0] == "Steel Rod" && fishingLevel >= 50)
                            {
                                fishItemNum = _loc2;
                                checkFish(fishItemNum);
                                break;
                            }
                            else if (_root.inventory[_loc2][0] == "Super Rod" && fishingLevel >= 20)
                            {
                                fishItemNum = _loc2;
                                checkFish(fishItemNum);
                                break;
                            }
                            else if (_root.inventory[_loc2][0] == "Good Rod" && fishingLevel >= 5)
                            {
                                fishItemNum = _loc2;
                                checkFish(fishItemNum);
                                break;
                            }
                            else if (_root.inventory[_loc2][0] == "Old Rod")
                            {
                                fishItemNum = _loc2;
                                checkFish(fishItemNum);
                                break;
                            } // end else if
                            if (_loc2 == _root.inventory.length - 1)
                            {
                                systemMessage("You don\'t have a fishing rod you can use!");
                            } // end if
                        } // end of for
                    } // end if
                }
                else
                {
                    stopFishing();
                } // end if
            } // end if
        } // end else if
    }
    else if (Key.getCode() == 73)
    {
        if (login._x == undefined)
        {
            if (typing == false)
            {
                mainGUI.inventory.swapDepths(mainGUI.getNextHighestDepth());
                if (trading == false)
                {
                    if (mainGUI.inventoryB._currentframe != 2)
                    {
                        mainGUI.inventoryB.gotoAndStop("click");
                        mainGUI.inventory._visible = true;
                    }
                    else
                    {
                        mainGUI.inventoryB.gotoAndStop(1);
                        mainGUI.inventory._visible = false;
                    } // end if
                } // end if
            } // end if
        } // end else if
    }
    else if (Key.getCode() == 67)
    {
        if (login._x == undefined)
        {
            if (typing == false)
            {
                if (mainGUI.clanB._currentframe != 2)
                {
                    if (_root.clan != "")
                    {
                        mainGUI.clanB.gotoAndStop("click");
                        loadClanGUIInfo();
                        mainGUI.clanGUI.swapDepths(mainGUI.getNextHighestDepth());
                    }
                    else
                    {
                        systemMessage("You need to be in a clan to view the clan interface.");
                    } // end else if
                }
                else
                {
                    mainGUI.clanB.gotoAndStop(1);
                    mainGUI.clanGUI._visible = false;
                } // end if
            } // end if
        } // end else if
    }
    else if (Key.getCode() == 77)
    {
        if (login._x == undefined)
        {
            if (typing == false)
            {
                if (chatBoxOpen == false)
                {
                    if (kantoMap._x == undefined)
                    {
                        if (_root.mapType == undefined || _root.mapType == "Kanto")
                        {
                            _root.mapType2 = "Kanto";
                            kantoMap = _root.mainGUI.attachMovie("kantoMap", "kantoMap", _root.getNextHighestDepth());
                            setMapRollOvers();
                        }
                        else if (_root.mapType == "Johto")
                        {
                            _root.mapType2 = "Johto";
                            kantoMap = _root.mainGUI.attachMovie("johtoMap", "kantoMap", _root.getNextHighestDepth());
                            setJohtoMapRollOvers();
                        }
                        else if (_root.mapType == "Hoenn")
                        {
                            _root.mapType2 = "Hoenn";
                            kantoMap = _root.mainGUI.attachMovie("hoennMap", "kantoMap", _root.getNextHighestDepth());
                            setHoennMapRollOvers();
                        }
                        else if (_root.mapType == "Sinnoh")
                        {
                            _root.mapType2 = "Sinnoh";
                            kantoMap = _root.mainGUI.attachMovie("sinnohMap", "kantoMap", _root.getNextHighestDepth());
                            setSinnohMapRollOvers();
                        }
                        else if (_root.mapType == "Unova")
                        {
                            _root.mapType2 = "Unova";
                            kantoMap = _root.mainGUI.attachMovie("UnovaMap", "kantoMap", _root.getNextHighestDepth());
                            setUnovaMapRollOvers();
                        } // end else if
                        setMapStuff();
                    }
                    else
                    {
                        removeMovieClip (kantoMap);
                        mainGUI.mapB.gotoAndStop(1);
                    } // end if
                } // end if
            } // end if
        } // end else if
    }
    else if (Key.getCode() == 80)
    {
        if (login._x == undefined)
        {
            if (typing == false)
            {
                if (mainGUI.pokedex._visible == false)
                {
                    mainGUI.pokedex._visible = true;
                    mainGUI.pokedex.swapDepths(mainGUI.getNextHighestDepth());
                    mainGUI.pokedex.seenT.htmlText = "<b>" + pokedexSeenAmount;
                    mainGUI.pokedex.caughtT.htmlText = "<b>" + pokedexCaughtAmount;
                    mainGUI.pokedex.caught2T.htmlText = "<b>" + _root.caughtAmount2;
                }
                else
                {
                    mainGUI.pokedex._visible = false;
                } // end if
            } // end if
        } // end else if
    }
    else if (Key.getCode() == 16)
    {
        if (user.getName() == "Brody" || _root.debugOn == true)
        {
            systemMessage("MF: " + _root.mapLayer1._currentframe + ", " + _root.mapLayer1_2._currentframe);
        } // end else if
    } // end else if
    if (Key.getCode() == 27 && useItemOnPokemon._visible == true)
    {
        removeMovieClip (darkScreen);
        removeMovieClip (itemImageDrag);
        useItemOnPokemon._visible = false;
        for (var _loc3 = 1; _loc3 < 7; ++_loc3)
        {
            mainGUI["pokemonIcon" + _loc3].highlightBg._visible = false;
        } // end of for
        itemOnPokemon = false;
        _root.itemOnPokemonName = "";
        guiUp = false;
        canMove = true;
    } // end if
};
Key.addListener(keyListener);
var i = 1;
while (i < 7)
{
    mainGUI["pokemonIcon" + i].swapDepths(mainGUI.getNextHighestDepth());
    mainGUI["pokemonIcon" + i].loopNum = i - 1;
    mainGUI["pokemonIcon" + i].bg.loopNum = i - 1;
    mainGUI["pokemonIcon" + i].bg.onRollOver = function ()
    {
        mainGUI["pokemonIcon" + (this.loopNum + 1)].highlightBg._visible = true;
    };
    mainGUI["pokemonIcon" + i].bg.onRollOut = function ()
    {
        mainGUI["pokemonIcon" + (this.loopNum + 1)].highlightBg._visible = false;
    };
    mainGUI["pokemonIcon" + i].bg.onRelease = function ()
    {
        if (itemOnPokemon == true || trading == true)
        {
            if (trading == false)
            {
                if (usedAnItem != true)
                {
                    usedAnItem = true;
                    getTimestamp("useItem2", this.loopNum, _root.itemOnPokemonName);
                } // end if
            }
            else if (usedAnItem != true)
            {
                usedAnItem = true;
                getTimestamp("useItem2", this.loopNum + 1, true);
            } // end else if
            removeMovieClip (darkScreen);
            removeMovieClip (itemImageDrag);
            useItemOnPokemon._visible = false;
            for (var _loc3 = 1; _loc3 < 7; ++_loc3)
            {
                mainGUI["pokemonIcon" + _loc3].highlightBg._visible = false;
            } // end of for
        }
        else if (mainGUI.pokemonSummary._visible == false)
        {
            mainGUI.pokemonSummary._visible = true;
            pokemonSummaryNum = this.loopNum;
            setPokemonSummary(this.loopNum);
        }
        else if (pokemonSummaryNum != this.loopNum)
        {
            mainGUI.pokemonSummary._visible = true;
            pokemonSummaryNum = this.loopNum;
            setPokemonSummary(this.loopNum);
        }
        else
        {
            mainGUI.pokemonSummary._visible = false;
        } // end else if
    };
    ++i;
} // end while
mainGUI.battleBackground.backB.onRelease = function ()
{
    this.gotoAndStop(1);
    battleBackButton();
};
mainGUI.battleBackground.fightB.onRelease = function ()
{
    this.gotoAndStop(1);
    showMoveButtons();
};
mainGUI.battleBackground.fightB.onRollOver = function ()
{
    this.gotoAndStop(2);
};
mainGUI.battleBackground.fightB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.battleBackground.move1B.onRelease = function ()
{
    this.gotoAndStop(1);
    useBattleMove(0, this);
};
mainGUI.battleBackground.move2B.onRelease = function ()
{
    this.gotoAndStop(1);
    useBattleMove(1, this);
};
mainGUI.battleBackground.move3B.onRelease = function ()
{
    this.gotoAndStop(1);
    useBattleMove(2, this);
};
mainGUI.battleBackground.move4B.onRelease = function ()
{
    this.gotoAndStop(1);
    useBattleMove(3, this);
};
mainGUI.battleBackground.pokemonB.onRelease = function ()
{
    if (canSwitchPokemon != false)
    {
        this.gotoAndStop(1);
        if (isWaiting == false)
        {
            mainGUI.battleBackground.fightB._visible = false;
            mainGUI.battleBackground.bagB._visible = false;
            mainGUI.battleBackground.pokemonB._visible = false;
            mainGUI.battleBackground.runB._visible = false;
            mainGUI.battleBackground.bg.gotoAndStop(2);
            for (var _loc3 = 1; _loc3 < 7; ++_loc3)
            {
                if (userPokemon[_loc3 - 1] != undefined)
                {
                    if (_root.userPokemon[_loc3 - 1].currentHp > 0)
                    {
                        mainGUI.battleBackground["pokemon" + _loc3 + "B"].bg.gotoAndStop(1);
                    }
                    else
                    {
                        mainGUI.battleBackground["pokemon" + _loc3 + "B"].bg.gotoAndStop("dark");
                    } // end else if
                    mainGUI.battleBackground["pokemon" + _loc3 + "B"].i.gotoAndStop(userPokemon[_loc3 - 1].id);
                    mainGUI.battleBackground["pokemon" + _loc3 + "B"].nameT.htmlText = "<b>" + userPokemon[_loc3 - 1].name;
                    mainGUI.battleBackground["pokemon" + _loc3 + "B"]._visible = true;
                } // end if
            } // end of for
            mainGUI.battleBackground.backB._visible = true;
        } // end if
    } // end if
};
mainGUI.battleBackground.pokemon1B.onRelease = function ()
{
    if (this.bg._currentframe != 4)
    {
        this.bg.gotoAndStop(1);
    } // end if
    if (_root.isBusy == false)
    {
        if (switchMove === true)
        {
            if (userPokemon[0] != undefined && activePokemon != 0 && isWaiting == false && userPokemon[0].currentHp > 0)
            {
                switchMove = false;
                isWaiting = true;
                hidePokemonButtons();
                if (battleType == "wild" || battleType == "trainer")
                {
                    getTimestamp("battleMove", switchMoveNum, "", 0);
                }
                else
                {
                    mainGUI.battleBackground.backB._visible = false;
                    mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                    mainGUI.battleBackground.battleT._visible = true;
                    getTimestamp("battleMovePvp", switchMoveNum, "", 0);
                } // end if
            } // end else if
        }
        else if (_root.voltSwitching == true)
        {
            if (userPokemon[0] != undefined && activePokemon != 0 && isWaiting == false && userPokemon[0].currentHp > 0)
            {
                _root.voltSwitching = false;
                isWaiting = true;
                hidePokemonButtons();
                if (battleType == "wild" || battleType == "trainer")
                {
                    switchMove = false;
                    getTimestamp("battleMove", switchMoveNum, "", 0);
                }
                else
                {
                    mainGUI.battleBackground.backB._visible = false;
                    mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                    mainGUI.battleBackground.battleT._visible = true;
                    getTimestamp("battleMovePvpVS", 0, "", 0);
                } // end if
            } // end else if
        }
        else if (userPokemon[0] != undefined && activePokemon != 0 && isWaiting == false && userPokemon[0].currentHp > 0)
        {
            isWaiting = true;
            hidePokemonButtons();
            if (battleType == "wild" || battleType == "trainer")
            {
                getTimestamp("battleMove", 0, "switchPokemon", 0);
            }
            else if (battleType == "pvp")
            {
                for (var _loc3 = 1; _loc3 < 7; ++_loc3)
                {
                    mainGUI.battleBackground["pokemon" + _loc3 + "B"]._visible = false;
                } // end of for
                mainGUI.battleBackground.backB._visible = false;
                mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                mainGUI.battleBackground.battleT._visible = true;
                getTimestamp("battleMovePvp", 0, "switchPokemon", 0);
            } // end else if
        } // end else if
    } // end else if
};
mainGUI.battleBackground.pokemon2B.onRelease = function ()
{
    if (this.bg._currentframe != 4)
    {
        this.bg.gotoAndStop(1);
    } // end if
    if (_root.isBusy == false)
    {
        if (switchMove === true)
        {
            if (userPokemon[1] != undefined && activePokemon != 1 && isWaiting == false && userPokemon[1].currentHp > 0)
            {
                switchMove = false;
                isWaiting = true;
                hidePokemonButtons();
                if (battleType == "wild" || battleType == "trainer")
                {
                    getTimestamp("battleMove", switchMoveNum, "", 1);
                }
                else
                {
                    mainGUI.battleBackground.backB._visible = false;
                    mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                    mainGUI.battleBackground.battleT._visible = true;
                    getTimestamp("battleMovePvp", switchMoveNum, "", 1);
                } // end if
            } // end else if
        }
        else if (_root.voltSwitching == true)
        {
            if (userPokemon[1] != undefined && activePokemon != 1 && isWaiting == false && userPokemon[1].currentHp > 0)
            {
                _root.voltSwitching = false;
                isWaiting = true;
                hidePokemonButtons();
                if (battleType == "wild" || battleType == "trainer")
                {
                    switchMove = false;
                    getTimestamp("battleMove", switchMoveNum, "", 1);
                }
                else
                {
                    mainGUI.battleBackground.backB._visible = false;
                    mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                    mainGUI.battleBackground.battleT._visible = true;
                    getTimestamp("battleMovePvpVS", 0, "", 1);
                } // end if
            } // end else if
        }
        else if (userPokemon[1] != undefined && activePokemon != 1 && isWaiting == false && userPokemon[1].currentHp > 0)
        {
            isWaiting = true;
            hidePokemonButtons();
            if (battleType == "wild" || battleType == "trainer")
            {
                getTimestamp("battleMove", 0, "switchPokemon", 1);
            }
            else if (battleType == "pvp")
            {
                for (var _loc3 = 1; _loc3 < 7; ++_loc3)
                {
                    mainGUI.battleBackground["pokemon" + _loc3 + "B"]._visible = false;
                } // end of for
                mainGUI.battleBackground.backB._visible = false;
                mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                mainGUI.battleBackground.battleT._visible = true;
                getTimestamp("battleMovePvp", 0, "switchPokemon", 1);
            } // end else if
        } // end else if
    } // end else if
};
mainGUI.battleBackground.pokemon3B.onRelease = function ()
{
    if (this.bg._currentframe != 4)
    {
        this.bg.gotoAndStop(1);
    } // end if
    if (_root.isBusy == false)
    {
        if (switchMove === true)
        {
            if (userPokemon[2] != undefined && activePokemon != 2 && isWaiting == false && userPokemon[2].currentHp > 0)
            {
                switchMove = false;
                isWaiting = true;
                hidePokemonButtons();
                if (battleType == "wild" || battleType == "trainer")
                {
                    getTimestamp("battleMove", switchMoveNum, "", 2);
                }
                else
                {
                    mainGUI.battleBackground.backB._visible = false;
                    mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                    mainGUI.battleBackground.battleT._visible = true;
                    getTimestamp("battleMovePvp", switchMoveNum, "", 2);
                } // end if
            } // end else if
        }
        else if (_root.voltSwitching == true)
        {
            if (userPokemon[2] != undefined && activePokemon != 2 && isWaiting == false && userPokemon[2].currentHp > 0)
            {
                _root.voltSwitching = false;
                isWaiting = true;
                hidePokemonButtons();
                if (battleType == "wild" || battleType == "trainer")
                {
                    switchMove = false;
                    getTimestamp("battleMove", switchMoveNum, "", 2);
                }
                else
                {
                    mainGUI.battleBackground.backB._visible = false;
                    mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                    mainGUI.battleBackground.battleT._visible = true;
                    getTimestamp("battleMovePvpVS", 0, "", 2);
                } // end if
            } // end else if
        }
        else if (userPokemon[2] != undefined && activePokemon != 2 && isWaiting == false && userPokemon[2].currentHp > 0)
        {
            isWaiting = true;
            hidePokemonButtons();
            if (battleType == "wild" || battleType == "trainer")
            {
                getTimestamp("battleMove", 0, "switchPokemon", 2);
            }
            else if (battleType == "pvp")
            {
                for (var _loc3 = 1; _loc3 < 7; ++_loc3)
                {
                    mainGUI.battleBackground["pokemon" + _loc3 + "B"]._visible = false;
                } // end of for
                mainGUI.battleBackground.backB._visible = false;
                mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                mainGUI.battleBackground.battleT._visible = true;
                getTimestamp("battleMovePvp", 0, "switchPokemon", 2);
            } // end else if
        } // end else if
    } // end else if
};
mainGUI.battleBackground.pokemon4B.onRelease = function ()
{
    if (this.bg._currentframe != 4)
    {
        this.bg.gotoAndStop(1);
    } // end if
    if (_root.isBusy == false)
    {
        if (switchMove === true)
        {
            if (userPokemon[3] != undefined && activePokemon != 3 && isWaiting == false && userPokemon[3].currentHp > 0)
            {
                switchMove = false;
                isWaiting = true;
                hidePokemonButtons();
                if (battleType == "wild" || battleType == "trainer")
                {
                    getTimestamp("battleMove", switchMoveNum, "", 3);
                }
                else
                {
                    mainGUI.battleBackground.backB._visible = false;
                    mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                    mainGUI.battleBackground.battleT._visible = true;
                    getTimestamp("battleMovePvp", switchMoveNum, "", 3);
                } // end if
            } // end else if
        }
        else if (_root.voltSwitching == true)
        {
            if (userPokemon[3] != undefined && activePokemon != 3 && isWaiting == false && userPokemon[3].currentHp > 0)
            {
                _root.voltSwitching = false;
                isWaiting = true;
                hidePokemonButtons();
                if (battleType == "wild" || battleType == "trainer")
                {
                    switchMove = false;
                    getTimestamp("battleMove", switchMoveNum, "", 3);
                }
                else
                {
                    mainGUI.battleBackground.backB._visible = false;
                    mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                    mainGUI.battleBackground.battleT._visible = true;
                    getTimestamp("battleMovePvpVS", 0, "", 3);
                } // end if
            } // end else if
        }
        else if (userPokemon[3] != undefined && activePokemon != 3 && isWaiting == false && userPokemon[3].currentHp > 0)
        {
            isWaiting = true;
            hidePokemonButtons();
            if (battleType == "wild" || battleType == "trainer")
            {
                getTimestamp("battleMove", 0, "switchPokemon", 3);
            }
            else if (battleType == "pvp")
            {
                for (var _loc3 = 1; _loc3 < 7; ++_loc3)
                {
                    mainGUI.battleBackground["pokemon" + _loc3 + "B"]._visible = false;
                } // end of for
                mainGUI.battleBackground.backB._visible = false;
                mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                mainGUI.battleBackground.battleT._visible = true;
                getTimestamp("battleMovePvp", 0, "switchPokemon", 3);
            } // end else if
        } // end else if
    } // end else if
};
mainGUI.battleBackground.pokemon5B.onRelease = function ()
{
    if (this.bg._currentframe != 4)
    {
        this.bg.gotoAndStop(1);
    } // end if
    if (_root.isBusy == false)
    {
        if (switchMove === true)
        {
            if (userPokemon[4] != undefined && activePokemon != 4 && isWaiting == false && userPokemon[4].currentHp > 0)
            {
                switchMove = false;
                isWaiting = true;
                hidePokemonButtons();
                if (battleType == "wild" || battleType == "trainer")
                {
                    getTimestamp("battleMove", switchMoveNum, "", 4);
                }
                else
                {
                    mainGUI.battleBackground.backB._visible = false;
                    mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                    mainGUI.battleBackground.battleT._visible = true;
                    getTimestamp("battleMovePvp", switchMoveNum, "", 4);
                } // end if
            } // end else if
        }
        else if (_root.voltSwitching == true)
        {
            if (userPokemon[4] != undefined && activePokemon != 4 && isWaiting == false && userPokemon[4].currentHp > 0)
            {
                _root.voltSwitching = false;
                isWaiting = true;
                hidePokemonButtons();
                if (battleType == "wild" || battleType == "trainer")
                {
                    switchMove = false;
                    getTimestamp("battleMove", switchMoveNum, "", 4);
                }
                else
                {
                    mainGUI.battleBackground.backB._visible = false;
                    mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                    mainGUI.battleBackground.battleT._visible = true;
                    getTimestamp("battleMovePvpVS", 0, "", 4);
                } // end if
            } // end else if
        }
        else if (userPokemon[4] != undefined && activePokemon != 4 && isWaiting == false && userPokemon[4].currentHp > 0)
        {
            isWaiting = true;
            hidePokemonButtons();
            if (battleType == "wild" || battleType == "trainer")
            {
                getTimestamp("battleMove", 0, "switchPokemon", 4);
            }
            else if (battleType == "pvp")
            {
                for (var _loc3 = 1; _loc3 < 7; ++_loc3)
                {
                    mainGUI.battleBackground["pokemon" + _loc3 + "B"]._visible = false;
                } // end of for
                mainGUI.battleBackground.backB._visible = false;
                mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                mainGUI.battleBackground.battleT._visible = true;
                getTimestamp("battleMovePvp", 0, "switchPokemon", 4);
            } // end else if
        } // end else if
    } // end else if
};
mainGUI.battleBackground.pokemon6B.onRelease = function ()
{
    if (this.bg._currentframe != 4)
    {
        this.bg.gotoAndStop(1);
    } // end if
    if (_root.isBusy == false)
    {
        if (switchMove === true)
        {
            if (userPokemon[3] != undefined && activePokemon != 5 && isWaiting == false && userPokemon[5].currentHp > 0)
            {
                switchMove = false;
                isWaiting = true;
                hidePokemonButtons();
                if (battleType == "wild" || battleType == "trainer")
                {
                    getTimestamp("battleMove", switchMoveNum, "", 5);
                }
                else
                {
                    mainGUI.battleBackground.backB._visible = false;
                    mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                    mainGUI.battleBackground.battleT._visible = true;
                    getTimestamp("battleMovePvp", switchMoveNum, "", 5);
                } // end if
            } // end else if
        }
        else if (_root.voltSwitching == true)
        {
            if (userPokemon[5] != undefined && activePokemon != 5 && isWaiting == false && userPokemon[5].currentHp > 0)
            {
                _root.voltSwitching = false;
                isWaiting = true;
                hidePokemonButtons();
                if (battleType == "wild" || battleType == "trainer")
                {
                    switchMove = false;
                    getTimestamp("battleMove", switchMoveNum, "", 5);
                }
                else
                {
                    mainGUI.battleBackground.backB._visible = false;
                    mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                    mainGUI.battleBackground.battleT._visible = true;
                    getTimestamp("battleMovePvpVS", 0, "", 5);
                } // end if
            } // end else if
        }
        else if (userPokemon[5] != undefined && activePokemon != 5 && isWaiting == false && userPokemon[5].currentHp > 0)
        {
            isWaiting = true;
            hidePokemonButtons();
            if (battleType == "wild" || battleType == "trainer")
            {
                getTimestamp("battleMove", 0, "switchPokemon", 5);
            }
            else if (battleType == "pvp")
            {
                for (var _loc3 = 1; _loc3 < 7; ++_loc3)
                {
                    mainGUI.battleBackground["pokemon" + _loc3 + "B"]._visible = false;
                } // end of for
                mainGUI.battleBackground.backB._visible = false;
                mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
                mainGUI.battleBackground.battleT._visible = true;
                getTimestamp("battleMovePvp", 0, "switchPokemon", 5);
            } // end else if
        } // end else if
    } // end else if
};
mainGUI.battleBackground.bagB.onRelease = function ()
{
    showBattleBag();
};
mainGUI.battleBackground.bagB.onRollOver = function ()
{
    if (this._currentframe != 4)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.battleBackground.bagB.onRollOut = function ()
{
    if (this._currentframe != 4)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.creditShopB.onRelease = function ()
{
    this.gotoAndStop(2);
    if (trading == false && battle == false)
    {
        if (mainGUI.creditShop._visible == false)
        {
            mainGUI.creditShop._visible = true;
        }
        else if (confirmBox.msgT.text == undefined)
        {
            this.gotoAndStop(1);
            mainGUI.creditShop._visible = false;
        } // end if
    } // end else if
};
mainGUI.creditShop.mainTab.gotoAndStop("click");
mainGUI.creditShop.mainTab.onRelease = function ()
{
    if (this._currentframe != 2)
    {
        mainGUI.creditShop.mainTab.gotoAndStop("click");
        mainGUI.creditShop.decorativeTab.gotoAndStop(1);
        mainGUI.creditShop.eventTab.gotoAndStop(1);
        mainGUI.creditShop.mountTab.gotoAndStop(1);
        makeCreditShop("Main");
    } // end if
};
mainGUI.creditShop.mainTab.onReleaseOutside = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.creditShop.mainTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.creditShop.mainTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.creditShop.decorativeTab.onRelease = function ()
{
    if (this._currentframe != 2)
    {
        mainGUI.creditShop.mainTab.gotoAndStop(1);
        mainGUI.creditShop.decorativeTab.gotoAndStop("click");
        mainGUI.creditShop.eventTab.gotoAndStop(1);
        mainGUI.creditShop.mountTab.gotoAndStop(1);
        makeCreditShop("Decorative");
    } // end if
};
mainGUI.creditShop.mainTab.onReleaseOutside = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.creditShop.decorativeTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.creditShop.decorativeTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.creditShop.eventTab.onRelease = function ()
{
    if (this._currentframe != 2)
    {
        mainGUI.creditShop.mainTab.gotoAndStop(1);
        mainGUI.creditShop.decorativeTab.gotoAndStop(1);
        mainGUI.creditShop.eventTab.gotoAndStop("click");
        mainGUI.creditShop.mountTab.gotoAndStop(1);
        makeCreditShop("Event");
    } // end if
};
mainGUI.creditShop.eventTab.onReleaseOutside = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.creditShop.eventTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.creditShop.eventTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.creditShop.mountTab.onRelease = function ()
{
    if (this._currentframe != 2)
    {
        mainGUI.creditShop.mainTab.gotoAndStop(1);
        mainGUI.creditShop.decorativeTab.gotoAndStop(1);
        mainGUI.creditShop.eventTab.gotoAndStop(1);
        mainGUI.creditShop.mountTab.gotoAndStop("click");
        makeCreditShop("Mount");
    } // end if
};
mainGUI.creditShop.mountTab.onReleaseOutside = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.creditShop.mountTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.creditShop.mountTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.creditShop.exitB.onRelease = function ()
{
    if (confirmBox.msgT.text == undefined)
    {
        mainGUI.creditShopB.gotoAndStop(1);
        mainGUI.creditShop._visible = false;
    } // end if
};
assignMouseEvents(mainGUI.creditShop.exitB);
mainGUI.creditShop.moreCreditsB.onRelease = function ()
{
    this.gotoAndStop(1);
    getURL("https://pokemon-planet.com/donate.php", "_blank");
};
assignMouseEvents(mainGUI.creditShop.moreCreditsB);
mainGUI.creditShop.scrollBar.onPress = function ()
{
    this.gotoAndStop("click");
    _root.dragScrollbar = 25;
    this.startDrag(true, this._x, mainGUI.creditShop.scrollUpB._y + mainGUI.creditShop.scrollUpB._height / 2 + this._height / 2, this._x, mainGUI.creditShop.scrollDownB._y - mainGUI.creditShop.scrollDownB._height / 2 - this._height / 2);
};
mainGUI.creditShop.scrollBar.onRelease = mainGUI.creditShop.scrollBar.onReleaseOutside = function ()
{
    this.gotoAndStop(1);
    _root.dragScrollbar = 0;
    this.stopDrag();
};
mainGUI.creditShop.scrollBar.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.creditShop.scrollBar.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.pokemonIcon1.i.onRelease = mainGUI.pokemonIcon1.i.onReleaseOutside = function ()
{
    if (trading == true)
    {
        getTimestamp("useItem2", 1, true);
    }
    else if (battle == false && isBusy == false && releasePokemonIcon._x == undefined)
    {
        stopDrag ();
        if (mainGUI.pokemonIcon1.i.hitTest(mainGUI.pokemonIcon2) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon2._visible == true)
        {
            getTimestamp("reorderPokemon", 0, 2);
        }
        else if (mainGUI.pokemonIcon1.i.hitTest(mainGUI.pokemonIcon3) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon3._visible == true)
        {
            getTimestamp("reorderPokemon", 0, 3);
        }
        else if (mainGUI.pokemonIcon1.i.hitTest(mainGUI.pokemonIcon4) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon4._visible == true)
        {
            getTimestamp("reorderPokemon", 0, 4);
        }
        else if (mainGUI.pokemonIcon1.i.hitTest(mainGUI.pokemonIcon5) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon5._visible == true)
        {
            getTimestamp("reorderPokemon", 0, 5);
        }
        else if (mainGUI.pokemonIcon1.i.hitTest(mainGUI.pokemonIcon6) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon6._visible == true)
        {
            getTimestamp("reorderPokemon", 0, 6);
        }
        else if (mainGUI.pokemonIcon1.i.hitTest(mainGUI.storage))
        {
            getTimestamp("reorderStoragePokemon", 0, 0);
        }
        else if (mainGUI.pokemonIcon1.i.hitTest(marketplace.sell.dragItemToSell))
        {
            if (userPokemon.length > 1)
            {
                tradeableItem = true;
                for (b = 0; b < untradeablePokemon.length; b++)
                {
                    if (userPokemon[0].name.toLowerCase() == untradeablePokemon[b].toLowerCase() && (userPokemon[0].originalCatcher == "Professor Oak" || userPokemon[0].originalCatcher == "???"))
                    {
                        tradeableItem = false;
                        break;
                    } // end if
                } // end of for
                if (tradeableItem == true)
                {
                    itemForSaleType = "pokemon";
                    marketplace.sell.i.gotoAndStop("none");
                    marketplace.sell.i2._visible = true;
                    marketplace.sell.i2.gotoAndStop(userPokemon[0].id);
                    marketplace.sell.nameT.htmlText = "<b> Lv " + userPokemon[0].level + " " + userPokemon[0].name;
                    itemForSale = 0;
                    itemForSaleAmount = 1;
                } // end if
            } // end if
            returnOldIcon(mainGUI.pokemonIcon1.i, -60, -10);
        }
        else
        {
            returnOldIcon(mainGUI.pokemonIcon1.i, -60, -10);
        } // end else if
    } // end else if
};
mainGUI.pokemonIcon2.i.onRelease = mainGUI.pokemonIcon2.i.onReleaseOutside = function ()
{
    if (trading == true)
    {
        getTimestamp("useItem2", 2, true);
    }
    else if (battle == false && isBusy == false && releasePokemonIcon._x == undefined)
    {
        stopDrag ();
        if (mainGUI.pokemonIcon2.i.hitTest(mainGUI.pokemonIcon1) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon1._visible == true)
        {
            getTimestamp("reorderPokemon", 1, 1);
        }
        else if (mainGUI.pokemonIcon2.i.hitTest(mainGUI.pokemonIcon3) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon3._visible == true)
        {
            getTimestamp("reorderPokemon", 1, 3);
        }
        else if (mainGUI.pokemonIcon2.i.hitTest(mainGUI.pokemonIcon4) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon4._visible == true)
        {
            getTimestamp("reorderPokemon", 1, 4);
        }
        else if (mainGUI.pokemonIcon2.i.hitTest(mainGUI.pokemonIcon5) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon5._visible == true)
        {
            getTimestamp("reorderPokemon", 1, 5);
        }
        else if (mainGUI.pokemonIcon2.i.hitTest(mainGUI.pokemonIcon6) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon6._visible == true)
        {
            getTimestamp("reorderPokemon", 1, 6);
        }
        else if (mainGUI.pokemonIcon2.i.hitTest(mainGUI.storage))
        {
            getTimestamp("reorderStoragePokemon", 1, 0);
        }
        else if (mainGUI.pokemonIcon2.i.hitTest(marketplace.sell.dragItemToSell))
        {
            if (userPokemon.length > 1)
            {
                tradeableItem = true;
                for (b = 0; b < untradeablePokemon.length; b++)
                {
                    if (userPokemon[1].name == untradeablePokemon[b] && (userPokemon[1].originalCatcher == "Professor Oak" || userPokemon[1].originalCatcher == "???"))
                    {
                        tradeableItem = false;
                        break;
                    } // end if
                } // end of for
                if (tradeableItem == true)
                {
                    itemForSaleType = "pokemon";
                    marketplace.sell.i.gotoAndStop("none");
                    marketplace.sell.i2._visible = true;
                    marketplace.sell.i2.gotoAndStop(userPokemon[1].id);
                    marketplace.sell.nameT.htmlText = "<b> Lv " + userPokemon[1].level + " " + userPokemon[1].name;
                    itemForSale = 1;
                    itemForSaleAmount = 1;
                } // end if
            } // end if
            returnOldIcon(mainGUI.pokemonIcon2.i, -60, -10);
        }
        else
        {
            returnOldIcon(mainGUI.pokemonIcon2.i, -60, -10);
        } // end else if
    } // end else if
};
mainGUI.pokemonIcon3.i.onRelease = mainGUI.pokemonIcon3.i.onReleaseOutside = function ()
{
    if (trading == true)
    {
        getTimestamp("useItem2", 3, true);
    }
    else if (battle == false && isBusy == false && releasePokemonIcon._x == undefined)
    {
        stopDrag ();
        if (mainGUI.pokemonIcon3.i.hitTest(mainGUI.pokemonIcon2) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon2._visible == true)
        {
            getTimestamp("reorderPokemon", 2, 2);
        }
        else if (mainGUI.pokemonIcon3.i.hitTest(mainGUI.pokemonIcon1) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon1._visible == true)
        {
            getTimestamp("reorderPokemon", 2, 1);
        }
        else if (mainGUI.pokemonIcon3.i.hitTest(mainGUI.pokemonIcon4) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon4._visible == true)
        {
            getTimestamp("reorderPokemon", 2, 4);
        }
        else if (mainGUI.pokemonIcon3.i.hitTest(mainGUI.pokemonIcon5) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon5._visible == true)
        {
            getTimestamp("reorderPokemon", 2, 5);
        }
        else if (mainGUI.pokemonIcon3.i.hitTest(mainGUI.pokemonIcon6) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon6._visible == true)
        {
            getTimestamp("reorderPokemon", 2, 6);
        }
        else if (mainGUI.pokemonIcon3.i.hitTest(mainGUI.storage))
        {
            getTimestamp("reorderStoragePokemon", 2, 0);
        }
        else if (mainGUI.pokemonIcon3.i.hitTest(marketplace.sell.dragItemToSell))
        {
            if (userPokemon.length > 1)
            {
                tradeableItem = true;
                for (b = 0; b < untradeablePokemon.length; b++)
                {
                    if (userPokemon[2].name == untradeablePokemon[b] && (userPokemon[2].originalCatcher == "Professor Oak" || userPokemon[2].originalCatcher == "???"))
                    {
                        tradeableItem = false;
                        break;
                    } // end if
                } // end of for
                if (tradeableItem == true)
                {
                    itemForSaleType = "pokemon";
                    marketplace.sell.i.gotoAndStop("none");
                    marketplace.sell.i2._visible = true;
                    marketplace.sell.i2.gotoAndStop(userPokemon[2].id);
                    marketplace.sell.nameT.htmlText = "<b> Lv " + userPokemon[2].level + " " + userPokemon[2].name;
                    itemForSale = 2;
                    itemForSaleAmount = 1;
                } // end if
            } // end if
            returnOldIcon(mainGUI.pokemonIcon3.i, -60, -10);
        }
        else
        {
            returnOldIcon(mainGUI.pokemonIcon3.i, -60, -10);
        } // end else if
    } // end else if
};
mainGUI.pokemonIcon4.i.onRelease = mainGUI.pokemonIcon4.i.onReleaseOutside = function ()
{
    if (trading == true)
    {
        getTimestamp("useItem2", 4, true);
    }
    else if (battle == false && isBusy == false && releasePokemonIcon._x == undefined)
    {
        stopDrag ();
        if (mainGUI.pokemonIcon4.i.hitTest(mainGUI.pokemonIcon2) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon2._visible == true)
        {
            getTimestamp("reorderPokemon", 3, 2);
        }
        else if (mainGUI.pokemonIcon4.i.hitTest(mainGUI.pokemonIcon3) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon3._visible == true)
        {
            getTimestamp("reorderPokemon", 3, 3);
        }
        else if (mainGUI.pokemonIcon4.i.hitTest(mainGUI.pokemonIcon1) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon1._visible == true)
        {
            getTimestamp("reorderPokemon", 3, 1);
        }
        else if (mainGUI.pokemonIcon4.i.hitTest(mainGUI.pokemonIcon5) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon5._visible == true)
        {
            getTimestamp("reorderPokemon", 3, 5);
        }
        else if (mainGUI.pokemonIcon4.i.hitTest(mainGUI.pokemonIcon6) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon6._visible == true)
        {
            getTimestamp("reorderPokemon", 3, 6);
        }
        else if (mainGUI.pokemonIcon4.i.hitTest(mainGUI.storage))
        {
            getTimestamp("reorderStoragePokemon", 3, 0);
        }
        else if (mainGUI.pokemonIcon4.i.hitTest(marketplace.sell.dragItemToSell))
        {
            if (userPokemon.length > 1)
            {
                tradeableItem = true;
                for (b = 0; b < untradeablePokemon.length; b++)
                {
                    if (userPokemon[3].name == untradeablePokemon[b] && (userPokemon[3].originalCatcher == "Professor Oak" || userPokemon[3].originalCatcher == "???"))
                    {
                        tradeableItem = false;
                        break;
                    } // end if
                } // end of for
                if (tradeableItem == true)
                {
                    itemForSaleType = "pokemon";
                    marketplace.sell.i.gotoAndStop("none");
                    marketplace.sell.i2._visible = true;
                    marketplace.sell.i2.gotoAndStop(userPokemon[3].id);
                    marketplace.sell.nameT.htmlText = "<b> Lv " + userPokemon[3].level + " " + userPokemon[3].name;
                    itemForSale = 3;
                    itemForSaleAmount = 1;
                } // end if
            } // end if
            returnOldIcon(mainGUI.pokemonIcon4.i, -60, -10);
        }
        else
        {
            returnOldIcon(mainGUI.pokemonIcon4.i, -60, -10);
        } // end else if
    } // end else if
};
mainGUI.pokemonIcon5.i.onRelease = mainGUI.pokemonIcon5.i.onReleaseOutside = function ()
{
    if (trading == true)
    {
        getTimestamp("useItem2", 5, true);
    }
    else if (battle == false && isBusy == false && releasePokemonIcon._x == undefined)
    {
        stopDrag ();
        if (mainGUI.pokemonIcon5.i.hitTest(mainGUI.pokemonIcon2) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon2._visible == true)
        {
            getTimestamp("reorderPokemon", 4, 2);
        }
        else if (mainGUI.pokemonIcon5.i.hitTest(mainGUI.pokemonIcon3) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon3._visible == true)
        {
            getTimestamp("reorderPokemon", 4, 3);
        }
        else if (mainGUI.pokemonIcon5.i.hitTest(mainGUI.pokemonIcon4) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon4._visible == true)
        {
            getTimestamp("reorderPokemon", 4, 4);
        }
        else if (mainGUI.pokemonIcon5.i.hitTest(mainGUI.pokemonIcon1) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon1._visible == true)
        {
            getTimestamp("reorderPokemon", 4, 1);
        }
        else if (mainGUI.pokemonIcon5.i.hitTest(mainGUI.pokemonIcon6) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon6._visible == true)
        {
            getTimestamp("reorderPokemon", 4, 6);
        }
        else if (mainGUI.pokemonIcon5.i.hitTest(mainGUI.storage))
        {
            getTimestamp("reorderStoragePokemon", 4, 0);
        }
        else if (mainGUI.pokemonIcon5.i.hitTest(marketplace.sell.dragItemToSell))
        {
            if (userPokemon.length > 1)
            {
                tradeableItem = true;
                for (b = 0; b < untradeablePokemon.length; b++)
                {
                    if (userPokemon[4].name == untradeablePokemon[b] && (userPokemon[4].originalCatcher == "Professor Oak" || userPokemon[4].originalCatcher == "???"))
                    {
                        tradeableItem = false;
                        break;
                    } // end if
                } // end of for
                if (tradeableItem == true)
                {
                    itemForSaleType = "pokemon";
                    marketplace.sell.i.gotoAndStop("none");
                    marketplace.sell.i2._visible = true;
                    marketplace.sell.i2.gotoAndStop(userPokemon[4].id);
                    marketplace.sell.nameT.htmlText = "<b> Lv " + userPokemon[4].level + " " + userPokemon[4].name;
                    itemForSale = 4;
                    itemForSaleAmount = 1;
                } // end if
            } // end if
            returnOldIcon(mainGUI.pokemonIcon5.i, -60, -10);
        }
        else
        {
            returnOldIcon(mainGUI.pokemonIcon5.i, -60, -10);
        } // end else if
    } // end else if
};
mainGUI.pokemonIcon6.i.onRelease = mainGUI.pokemonIcon6.i.onReleaseOutside = function ()
{
    if (trading == true)
    {
        getTimestamp("useItem2", 6, true);
    }
    else if (battle == false && isBusy == false && releasePokemonIcon._x == undefined)
    {
        stopDrag ();
        if (mainGUI.pokemonIcon6.i.hitTest(mainGUI.pokemonIcon2) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon2._visible == true)
        {
            getTimestamp("reorderPokemon", 5, 2);
        }
        else if (mainGUI.pokemonIcon6.i.hitTest(mainGUI.pokemonIcon3) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon3._visible == true)
        {
            getTimestamp("reorderPokemon", 5, 3);
        }
        else if (mainGUI.pokemonIcon6.i.hitTest(mainGUI.pokemonIcon4) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon4._visible == true)
        {
            getTimestamp("reorderPokemon", 5, 4);
        }
        else if (mainGUI.pokemonIcon6.i.hitTest(mainGUI.pokemonIcon5) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon5._visible == true)
        {
            getTimestamp("reorderPokemon", 5, 5);
        }
        else if (mainGUI.pokemonIcon6.i.hitTest(mainGUI.pokemonIcon1) && learnMoves != true && relearnGUI._x == undefined && mainGUI.pokemonIcon1._visible == true)
        {
            getTimestamp("reorderPokemon", 5, 1);
        }
        else if (mainGUI.pokemonIcon6.i.hitTest(mainGUI.storage))
        {
            getTimestamp("reorderStoragePokemon", 5, 0);
        }
        else if (mainGUI.pokemonIcon6.i.hitTest(marketplace.sell.dragItemToSell))
        {
            if (userPokemon.length > 1)
            {
                tradeableItem = true;
                for (b = 0; b < untradeablePokemon.length; b++)
                {
                    if (userPokemon[5].name == untradeablePokemon[b] && (userPokemon[5].originalCatcher == "Professor Oak" || userPokemon[5].originalCatcher == "???"))
                    {
                        tradeableItem = false;
                        break;
                    } // end if
                } // end of for
                if (tradeableItem == true)
                {
                    itemForSaleType = "pokemon";
                    marketplace.sell.i.gotoAndStop("none");
                    marketplace.sell.i2._visible = true;
                    marketplace.sell.i2.gotoAndStop(userPokemon[5].id);
                    marketplace.sell.nameT.htmlText = "<b> Lv " + userPokemon[5].level + " " + userPokemon[5].name;
                    itemForSale = 5;
                    itemForSaleAmount = 1;
                } // end if
            } // end if
            returnOldIcon(mainGUI.pokemonIcon6.i, -60, -10);
        }
        else
        {
            returnOldIcon(mainGUI.pokemonIcon6.i, -60, -10);
        } // end else if
    } // end else if
};
mainGUI.pokemonIcon1.i.onPress = function ()
{
    if (trading == false && battle == false && releasePokemonIcon._x == undefined)
    {
        if (userPokemon.length >= 1 && useItemOnPokemon._visible == false)
        {
            stopDrag ();
            mainGUI.pokemonIcon1.i.startDrag();
            mainGUI.pokemonIcon1.i._alpha = 75;
            mainGUI.pokemonIcon1.swapDepths(mainGUI.getNextHighestDepth());
            mainGUI.swapDepths(_root.getNextHighestDepth());
        } // end if
    } // end if
};
mainGUI.pokemonIcon2.i.onPress = function ()
{
    if (trading == false && battle == false && releasePokemonIcon._x == undefined)
    {
        if (userPokemon.length >= 2 && useItemOnPokemon._visible == false)
        {
            stopDrag ();
            mainGUI.pokemonIcon2.i.startDrag();
            mainGUI.pokemonIcon2.i._alpha = 75;
            mainGUI.pokemonIcon2.swapDepths(mainGUI.getNextHighestDepth());
            mainGUI.swapDepths(_root.getNextHighestDepth());
        } // end if
    } // end if
};
mainGUI.pokemonIcon3.i.onPress = function ()
{
    if (trading == false && battle == false && releasePokemonIcon._x == undefined)
    {
        if (userPokemon.length >= 3 && useItemOnPokemon._visible == false)
        {
            stopDrag ();
            mainGUI.pokemonIcon3.i.startDrag();
            mainGUI.pokemonIcon3.i._alpha = 75;
            mainGUI.pokemonIcon3.swapDepths(mainGUI.getNextHighestDepth());
            mainGUI.swapDepths(_root.getNextHighestDepth());
        } // end if
    } // end if
};
mainGUI.pokemonIcon4.i.onPress = function ()
{
    if (trading == false && battle == false && releasePokemonIcon._x == undefined)
    {
        if (userPokemon.length >= 4 && useItemOnPokemon._visible == false)
        {
            stopDrag ();
            mainGUI.pokemonIcon4.i.startDrag();
            mainGUI.pokemonIcon4.i._alpha = 75;
            mainGUI.pokemonIcon4.swapDepths(mainGUI.getNextHighestDepth());
            mainGUI.swapDepths(_root.getNextHighestDepth());
        } // end if
    } // end if
};
mainGUI.pokemonIcon5.i.onPress = function ()
{
    if (trading == false && battle == false && releasePokemonIcon._x == undefined)
    {
        if (userPokemon.length >= 5 && useItemOnPokemon._visible == false)
        {
            stopDrag ();
            mainGUI.pokemonIcon5.i.startDrag();
            mainGUI.pokemonIcon5.i._alpha = 75;
            mainGUI.pokemonIcon5.swapDepths(mainGUI.getNextHighestDepth());
            mainGUI.swapDepths(_root.getNextHighestDepth());
        } // end if
    } // end if
};
mainGUI.pokemonIcon6.i.onPress = function ()
{
    if (trading == false && battle == false && releasePokemonIcon._x == undefined)
    {
        if (userPokemon.length >= 6 && useItemOnPokemon._visible == false)
        {
            stopDrag ();
            mainGUI.pokemonIcon6.i.startDrag();
            mainGUI.pokemonIcon6.i._alpha = 75;
            mainGUI.pokemonIcon6.swapDepths(mainGUI.getNextHighestDepth());
            mainGUI.swapDepths(_root.getNextHighestDepth());
        } // end if
    } // end if
};
mainGUI.battleBackground.runB.onRelease = function ()
{
    if (battleType == "wild" && (_root.dungeonBattle == false || _root.map.indexOf("Safari Zone") != -1))
    {
        this.gotoAndStop(1);
    } // end if
    runFromBattle();
};
mainGUI.battleBackground.runB.onPress = function ()
{
    if (battleType == "wild" && (_root.dungeonBattle == false || _root.map.indexOf("Safari Zone") != -1))
    {
        this.gotoAndStop("click");
    } // end if
};
mainGUI.battleBackground.runB.onRollOver = function ()
{
    if (battleType == "wild" && (_root.dungeonBattle == false || _root.map.indexOf("Safari Zone") != -1))
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.battleBackground.runB.onRollOut = function ()
{
    if (battleType == "wild" && (_root.dungeonBattle == false || _root.map.indexOf("Safari Zone") != -1))
    {
        this.gotoAndStop(1);
    } // end if
};
slowMessage = 0;
myDate2 = new Date();
oldTime = Math.round(myDate2.getTime() + myDate2.getTimezoneOffset() * 60000);
antiSpeedHackI = setInterval(antiSpeedHack, 1000);
antiSpeedHackI2 = setInterval(antiSpeedHack2, 30000);
var mouseListener = new Object();
mouseListener.onMouseUp = function ()
{
    resetAutoKick();
    curClickX = _xmouse;
    curClickY = _ymouse;
    if (!(_xmouse == lastClickX && _ymouse == lastClickY))
    {
    }
    else
    {
        ++sameClick2;
        if (sameClick2 >= 15000)
        {
            sameClick2 = 0;
            getTimestamp("r3", lastClickX, lastClickY);
        } // end if
    } // end else if
    lastClickX = curClickX;
    lastClickY = curClickY;
    delete lastTime;
    if (bW == true)
    {
        sendMouseLog(curClickX, curClickY, getTimer());
    } // end if
};
Mouse.addListener(mouseListener);
mainGUI.globalTab.onRelease = mainGUI.globalTab.onReleaseOutside = function ()
{
    _root.chatType = "english";
    mainGUI.globalTab.gotoAndStop("click");
    mainGUI.localTab.gotoAndStop(1);
    mainGUI.tradeTab.gotoAndStop(1);
    mainGUI.battleTab.gotoAndStop(1);
    mainGUI.nonEnglishTab.gotoAndStop(1);
    mainGUI.clanTab.gotoAndStop(1);
    mainGUI.customTab.gotoAndStop(1);
    mainGUI.globalChatT._visible = true;
    mainGUI.localChatT._visible = false;
    mainGUI.tradeChatT._visible = false;
    mainGUI.battleChatT._visible = false;
    mainGUI.nonEnglishChatT._visible = false;
    mainGUI.clanChatT._visible = false;
    mainGUI.customChatT._visible = false;
    if (mainGUI.chatSettings._visible == true)
    {
        loadChatSettings();
    } // end if
};
mainGUI.globalTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.globalTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.localTab.onRelease = mainGUI.localTab.onReleaseOutside = function ()
{
    _root.chatType = "local";
    mainGUI.localTab.gotoAndStop("click");
    mainGUI.globalTab.gotoAndStop(1);
    mainGUI.tradeTab.gotoAndStop(1);
    mainGUI.battleTab.gotoAndStop(1);
    mainGUI.nonEnglishTab.gotoAndStop(1);
    mainGUI.clanTab.gotoAndStop(1);
    mainGUI.customTab.gotoAndStop(1);
    mainGUI.localChatT._visible = true;
    mainGUI.globalChatT._visible = false;
    mainGUI.tradeChatT._visible = false;
    mainGUI.battleChatT._visible = false;
    mainGUI.nonEnglishChatT._visible = false;
    mainGUI.clanChatT._visible = false;
    mainGUI.customChatT._visible = false;
    if (mainGUI.chatSettings._visible == true)
    {
        loadChatSettings();
    } // end if
};
mainGUI.localTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.localTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.tradeTab.onRelease = mainGUI.tradeTab.onReleaseOutside = function ()
{
    _root.chatType = "trade";
    mainGUI.tradeTab.gotoAndStop("click");
    mainGUI.localTab.gotoAndStop(1);
    mainGUI.globalTab.gotoAndStop(1);
    mainGUI.battleTab.gotoAndStop(1);
    mainGUI.nonEnglishTab.gotoAndStop(1);
    mainGUI.clanTab.gotoAndStop(1);
    mainGUI.customTab.gotoAndStop(1);
    mainGUI.tradeChatT._visible = true;
    mainGUI.localChatT._visible = false;
    mainGUI.globalChatT._visible = false;
    mainGUI.battleChatT._visible = false;
    mainGUI.nonEnglishChatT._visible = false;
    mainGUI.clanChatT._visible = false;
    mainGUI.customChatT._visible = false;
    if (mainGUI.chatSettings._visible == true)
    {
        loadChatSettings();
    } // end if
};
mainGUI.tradeTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.tradeTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.battleTab.onRelease = mainGUI.battleTab.onReleaseOutside = function ()
{
    mainGUI.battleTab.gotoAndStop("click");
    mainGUI.localTab.gotoAndStop(1);
    mainGUI.tradeTab.gotoAndStop(1);
    mainGUI.globalTab.gotoAndStop(1);
    mainGUI.nonEnglishTab.gotoAndStop(1);
    mainGUI.clanTab.gotoAndStop(1);
    mainGUI.customTab.gotoAndStop(1);
    mainGUI.battleChatT._visible = true;
    mainGUI.localChatT._visible = false;
    mainGUI.tradeChatT._visible = false;
    mainGUI.globalChatT._visible = false;
    mainGUI.nonEnglishChatT._visible = false;
    mainGUI.clanChatT._visible = false;
    mainGUI.customChatT._visible = false;
    if (mainGUI.chatSettings._visible == true)
    {
        loadChatSettings();
    } // end if
};
mainGUI.battleTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.battleTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.nonEnglishTab.onRelease = mainGUI.nonEnglishTab.onReleaseOutside = function ()
{
    _root.chatType = "nonEnglish";
    mainGUI.nonEnglishTab.gotoAndStop("click");
    mainGUI.localTab.gotoAndStop(1);
    mainGUI.tradeTab.gotoAndStop(1);
    mainGUI.battleTab.gotoAndStop(1);
    mainGUI.globalTab.gotoAndStop(1);
    mainGUI.clanTab.gotoAndStop(1);
    mainGUI.customTab.gotoAndStop(1);
    mainGUI.nonEnglishChatT._visible = true;
    mainGUI.localChatT._visible = false;
    mainGUI.tradeChatT._visible = false;
    mainGUI.battleChatT._visible = false;
    mainGUI.globalChatT._visible = false;
    mainGUI.clanChatT._visible = false;
    mainGUI.customChatT._visible = false;
    if (mainGUI.chatSettings._visible == true)
    {
        loadChatSettings();
    } // end if
};
mainGUI.nonEnglishTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.nonEnglishTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.clanTab.onRelease = mainGUI.clanTab.onReleaseOutside = function ()
{
    _root.chatType = "clan";
    mainGUI.clanTab.gotoAndStop("click");
    mainGUI.localTab.gotoAndStop(1);
    mainGUI.tradeTab.gotoAndStop(1);
    mainGUI.battleTab.gotoAndStop(1);
    mainGUI.globalTab.gotoAndStop(1);
    mainGUI.nonEnglishTab.gotoAndStop(1);
    mainGUI.customTab.gotoAndStop(1);
    mainGUI.clanChatT._visible = true;
    mainGUI.localChatT._visible = false;
    mainGUI.tradeChatT._visible = false;
    mainGUI.battleChatT._visible = false;
    mainGUI.globalChatT._visible = false;
    mainGUI.nonEnglishChatT._visible = false;
    mainGUI.customChatT._visible = false;
    if (mainGUI.chatSettings._visible == true)
    {
        loadChatSettings();
    } // end if
};
mainGUI.clanTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.clanTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.scrollBar.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.scrollBar.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.scrollBar.onPress = function ()
{
    this.gotoAndStop("click");
    _root.dragScrollbar = 38;
    this.startDrag(true, this._x, mainGUI.scrollUpB._y + mainGUI.scrollUpB._height / 2 + this._height / 2, this._x, mainGUI.scrollDownB._y - mainGUI.scrollDownB._height / 2 - this._height / 2);
};
mainGUI.scrollBar.onRelease = mainGUI.scrollBar.onReleaseOutside = function ()
{
    this.gotoAndStop(1);
    _root.dragScrollbar = 0;
    stopDrag ();
};
mainGUI.scrollUpB.onRelease = mainGUI.scrollUpB.onReleaseOutside = function ()
{
    _root.dragScrollbar = 0;
    this.gotoAndStop(1);
};
mainGUI.scrollUpB.onPress = function ()
{
    _root.dragScrollbar = 40;
    this.gotoAndStop("click");
};
mainGUI.scrollUpB.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.scrollUpB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.scrollDownB.onRelease = mainGUI.scrollDownB.onReleaseOutside = function ()
{
    _root.dragScrollbar = 0;
    this.gotoAndStop(1);
};
mainGUI.scrollDownB.onPress = function ()
{
    _root.dragScrollbar = 39;
    this.gotoAndStop("click");
};
mainGUI.scrollDownB.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.scrollDownB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.inventoryB.onRelease = function ()
{
    mainGUI.inventory.swapDepths(mainGUI.getNextHighestDepth());
    if (trading == false)
    {
        if (this._currentframe != 2)
        {
            this.gotoAndStop("click");
            mainGUI.inventory._visible = true;
        }
        else
        {
            this.gotoAndStop(1);
            mainGUI.inventory._visible = false;
        } // end if
    } // end else if
};
mainGUI.inventoryB.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.inventoryB.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
addDraggableGUI(mainGUI.itemBox);
mainGUI.itemBox.itemsTab.gotoAndStop("click");
mainGUI.inventory.itemBoxB.onRelease = function ()
{
    mainGUI.itemBox.swapDepths(mainGUI.getNextHighestDepth());
    if (this._currentframe != 2)
    {
        this.gotoAndStop("click");
        mainGUI.itemBox._visible = true;
    }
    else
    {
        this.gotoAndStop(1);
        mainGUI.itemBox._visible = false;
    } // end else if
};
mainGUI.inventory.itemBoxB.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.inventory.itemBoxB.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
assignMouseEvents(mainGUI.itemBox.exitB);
mainGUI.itemBox.exitB.onRelease = function ()
{
    mainGUI.itemBox._visible = false;
    mainGUI.inventory.itemBoxB.gotoAndStop(1);
};
mainGUI.itemBox.itemsTab.onRelease = function ()
{
    if (this._currentframe != 2)
    {
        mainGUI.itemBox.pokemonTab.gotoAndStop(1);
        this.gotoAndStop(2);
        makeItemBox();
    } // end if
};
mainGUI.itemBox.pokemonTab.onRelease = function ()
{
    if (this._currentframe != 2)
    {
        mainGUI.itemBox.itemsTab.gotoAndStop(1);
        this.gotoAndStop(2);
        makePokemonBox();
    } // end if
};
mainGUI.itemBox.receiveB.onRelease = function ()
{
    if (mainGUI.itemBox.itemsTab._currentframe == 2)
    {
        if (_root.itemBox.length > 0)
        {
            if (isBusy == false)
            {
                getTimestamp("receiveItemBox");
            } // end if
        }
        else
        {
            systemMessage("Your item box is empty.");
        } // end else if
    }
    else if (_root.pokemonBox.length > 0)
    {
        if (isBusy == false)
        {
            getTimestamp("receivePokemonBox");
        } // end if
    }
    else
    {
        systemMessage("Your pokemon box is empty.");
    } // end else if
    this.gotoAndStop(1);
};
assignMouseEvents(mainGUI.itemBox.receiveB);
mainGUI.inventory.exitB.onRelease = function ()
{
    if (trading == false)
    {
        this.gotoAndStop(1);
        mainGUI.inventoryB.gotoAndStop(1);
        mainGUI.inventory._visible = false;
    } // end if
};
mainGUI.inventory.exitB.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.inventory.exitB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.inventory.exitB.onPress = function ()
{
    this.gotoAndStop("click");
};
mainGUI.inventory.dragBg.onPress = function ()
{
    mainGUI.inventory.startDrag(false, -newWidth / 2 + 111 - widthOffset, -newHeight / 2 + 183 - heightOffset, newWidth / 2 - 111 + widthOffset, newHeight / 2 - 183 + heightOffset);
};
mainGUI.inventory.dragBg.onRelease = mainGUI.inventory.dragBg.onReleaseOutside = function ()
{
    mainGUI.inventory.stopDrag();
};
mainGUI.inventory.scrollBar.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.inventory.scrollBar.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.inventory.scrollBar.onPress = function ()
{
    this.gotoAndStop("click");
    _root.dragScrollbar = 36;
    this.startDrag(true, this._x, 95, this._x, -104);
};
mainGUI.inventory.scrollBar.onRelease = mainGUI.inventory.scrollBar.onReleaseOutside = function ()
{
    this.gotoAndStop(1);
    _root.dragScrollbar = 0;
    mainGUI.inventory.scrollBar.stopDrag();
};
mainGUI.inventory.scrollUpB.onRelease = mainGUI.inventory.scrollUpB.onReleaseOutside = function ()
{
    _root.dragScrollbar = 0;
    this.gotoAndStop(1);
};
mainGUI.inventory.scrollUpB.onPress = function ()
{
    _root.dragScrollbar = 22;
    this.gotoAndStop("click");
};
mainGUI.inventory.scrollUpB.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.inventory.scrollUpB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.inventory.scrollDownB.onRelease = mainGUI.inventory.scrollDownB.onReleaseOutside = function ()
{
    _root.dragScrollbar = 0;
    this.gotoAndStop(1);
};
mainGUI.inventory.scrollDownB.onPress = function ()
{
    _root.dragScrollbar = 21;
    this.gotoAndStop("click");
};
mainGUI.inventory.scrollDownB.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.inventory.scrollDownB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.settingsB.onRelease = function ()
{
    if (trading == false && battle == false)
    {
        if (mainGUI.settings._visible == false)
        {
            this.gotoAndStop("click");
            mainGUI.settings._visible = true;
            mainGUI.settings.swapDepths(mainGUI.getNextHighestDepth());
        }
        else
        {
            this.gotoAndStop(1);
            mainGUI.settings._visible = false;
        } // end if
    } // end else if
};
mainGUI.settingsB.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.settingsB.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.settings.tickBox.onRelease = function ()
{
    if (this._currentframe == 1)
    {
        fastBattles = true;
        getTimestamp("toggleFastBattles");
        this.gotoAndStop(2);
    }
    else
    {
        fastBattles = false;
        getTimestamp("toggleFastBattles");
        this.gotoAndStop(1);
    } // end else if
};
mainGUI.settings.tickBox2.onRelease = function ()
{
    if (this._currentframe == 1)
    {
        autoscroll = true;
        this.gotoAndStop(2);
    }
    else
    {
        autoscroll = false;
        this.gotoAndStop(1);
    } // end else if
};
mainGUI.settings.tickBox3.onRelease = function ()
{
    if (this._currentframe == 1)
    {
        disableBattleMusic = true;
        this.gotoAndStop(2);
    }
    else
    {
        disableBattleMusic = false;
        this.gotoAndStop(1);
    } // end else if
};
mainGUI.settings.tickBox4.onRelease = function ()
{
    if (this._currentframe == 1)
    {
        _root.showMoveInfo = true;
        this.gotoAndStop(2);
    }
    else
    {
        _root.showMoveInfo = false;
        this.gotoAndStop(1);
    } // end else if
};
mainGUI.settings.tickBox5.onRelease = function ()
{
    if (this._currentframe == 1)
    {
        _root.disableBattleAnimations = "1";
        this.gotoAndStop(2);
    }
    else
    {
        _root.disableBattleAnimations = "0";
        this.gotoAndStop(1);
    } // end else if
};
mainGUI.settings.tickBox6.onRelease = function ()
{
    if (this._currentframe == 1)
    {
        _root.allowSwearing = "1";
        this.gotoAndStop(2);
    }
    else
    {
        _root.allowSwearing = "0";
        this.gotoAndStop(1);
    } // end else if
};
mainGUI.settings.tickBox7.onRelease = function ()
{
    if (this._currentframe == 1)
    {
        _root.disableGlobalNotifications = "1";
        this.gotoAndStop(2);
    }
    else
    {
        _root.disableGlobalNotifications = "0";
        this.gotoAndStop(1);
    } // end else if
};
mainGUI.settings.tickBox8.onRelease = function ()
{
    if (this._currentframe == 1)
    {
        _root.disableFriendRequests = "1";
        this.gotoAndStop(2);
    }
    else
    {
        _root.disableFriendRequests = "0";
        this.gotoAndStop(1);
    } // end else if
};
mainGUI.settings.tickBox9.onRelease = function ()
{
    if (this._currentframe == 1)
    {
        _root.showCredits = "1";
        this.gotoAndStop(2);
    }
    else
    {
        _root.showCredits = "0";
        this.gotoAndStop(1);
    } // end else if
};
mainGUI.settings.tickBox10.onRelease = function ()
{
    if (this._currentframe == 1)
    {
        _root.newSettings[0] = "1";
        this.gotoAndStop(2);
    }
    else
    {
        _root.newSettings[0] = "0";
        this.gotoAndStop(1);
    } // end else if
};
mainGUI.settings.exitB.onRelease = function ()
{
    this.gotoAndStop(1);
    mainGUI.settingsB.gotoAndStop(1);
    mainGUI.settings._visible = false;
    delete mainGUI.settings.slider.onEnterFrame;
};
mainGUI.settings.exitB.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.settings.exitB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.settings.exitB.onPress = function ()
{
    this.gotoAndStop("click");
};
mainGUI.settings.saveB.onRelease = mainGUI.settings.saveB.onReleaseOutside = function ()
{
    this.gotoAndStop(1);
    if (getTimer() - lastSaveSettings > 1000 && _root.isBusy == false)
    {
        lastSaveSettings = getTimer();
        getTimestamp("saveSettings");
        systemMessage("Settings Saved.");
    } // end if
};
assignMouseEvents(mainGUI.settings.saveB);
mainGUI.chatSettingsB.onRelease = function ()
{
    if (trading == false && battle == false)
    {
        if (mainGUI.chatSettings._visible == false)
        {
            this.gotoAndStop("click");
            loadChatSettings();
        }
        else
        {
            this.gotoAndStop(1);
            mainGUI.chatSettings._visible = false;
        } // end if
    } // end else if
};
mainGUI.chatSettingsB.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.chatSettingsB.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.chatSettings.tickBox1.onRelease = function ()
{
    if (this._currentframe == 1)
    {
        if (mainGUI.globalChatT._visible == true)
        {
            englishChatSettings[0] = "1";
        }
        else if (mainGUI.tradeChatT._visible == true)
        {
            tradingChatSettings[0] = "1";
        }
        else if (mainGUI.localChatT._visible == true)
        {
            localChatSettings[0] = "1";
        }
        else if (mainGUI.nonEnglishChatT._visible == true)
        {
            nonEnglishChatSettings[0] = "1";
        }
        else if (mainGUI.clanChatT._visible == true)
        {
            clanChatSettings[0] = "1";
        }
        else if (mainGUI.customChatT._visible == true)
        {
            customChatSettings[0] = "1";
        } // end else if
        this.gotoAndStop(2);
    }
    else
    {
        if (mainGUI.globalChatT._visible == true)
        {
            englishChatSettings[0] = "0";
        }
        else if (mainGUI.tradeChatT._visible == true)
        {
            tradingChatSettings[0] = "0";
        }
        else if (mainGUI.localChatT._visible == true)
        {
            localChatSettings[0] = "0";
        }
        else if (mainGUI.nonEnglishChatT._visible == true)
        {
            nonEnglishChatSettings[0] = "0";
        }
        else if (mainGUI.clanChatT._visible == true)
        {
            clanChatSettings[0] = "0";
        }
        else if (mainGUI.customChatT._visible == true)
        {
            customChatSettings[0] = "0";
        } // end else if
        this.gotoAndStop(1);
    } // end else if
};
mainGUI.chatSettings.tickBox2.onRelease = function ()
{
    if (this._currentframe == 1)
    {
        if (mainGUI.globalChatT._visible == true)
        {
            englishChatSettings[1] = "1";
        }
        else if (mainGUI.tradeChatT._visible == true)
        {
            tradingChatSettings[1] = "1";
        }
        else if (mainGUI.localChatT._visible == true)
        {
            localChatSettings[1] = "1";
        }
        else if (mainGUI.nonEnglishChatT._visible == true)
        {
            nonEnglishChatSettings[1] = "1";
        }
        else if (mainGUI.clanChatT._visible == true)
        {
            clanChatSettings[1] = "1";
        }
        else if (mainGUI.customChatT._visible == true)
        {
            customChatSettings[1] = "1";
        } // end else if
        this.gotoAndStop(2);
    }
    else
    {
        if (mainGUI.globalChatT._visible == true)
        {
            englishChatSettings[1] = "0";
        }
        else if (mainGUI.tradeChatT._visible == true)
        {
            tradingChatSettings[1] = "0";
        }
        else if (mainGUI.localChatT._visible == true)
        {
            localChatSettings[1] = "0";
        }
        else if (mainGUI.nonEnglishChatT._visible == true)
        {
            nonEnglishChatSettings[1] = "0";
        }
        else if (mainGUI.clanChatT._visible == true)
        {
            clanChatSettings[1] = "0";
        }
        else if (mainGUI.customChatT._visible == true)
        {
            customChatSettings[1] = "0";
        } // end else if
        this.gotoAndStop(1);
    } // end else if
};
mainGUI.chatSettings.tickBox3.onRelease = function ()
{
    if (this._currentframe == 1)
    {
        if (mainGUI.globalChatT._visible == true)
        {
            englishChatSettings[2] = "1";
        }
        else if (mainGUI.tradeChatT._visible == true)
        {
            tradingChatSettings[2] = "1";
        }
        else if (mainGUI.localChatT._visible == true)
        {
            localChatSettings[2] = "1";
        }
        else if (mainGUI.nonEnglishChatT._visible == true)
        {
            nonEnglishChatSettings[2] = "1";
        }
        else if (mainGUI.clanChatT._visible == true)
        {
            clanChatSettings[2] = "1";
        }
        else if (mainGUI.customChatT._visible == true)
        {
            customChatSettings[2] = "1";
        } // end else if
        this.gotoAndStop(2);
    }
    else
    {
        if (mainGUI.globalChatT._visible == true)
        {
            englishChatSettings[2] = "0";
        }
        else if (mainGUI.tradeChatT._visible == true)
        {
            tradingChatSettings[2] = "0";
        }
        else if (mainGUI.localChatT._visible == true)
        {
            localChatSettings[2] = "0";
        }
        else if (mainGUI.nonEnglishChatT._visible == true)
        {
            nonEnglishChatSettings[2] = "0";
        }
        else if (mainGUI.clanChatT._visible == true)
        {
            clanChatSettings[2] = "0";
        }
        else if (mainGUI.customChatT._visible == true)
        {
            customChatSettings[2] = "0";
        } // end else if
        this.gotoAndStop(1);
    } // end else if
};
mainGUI.chatSettings.tickBox4.onRelease = function ()
{
    if (this._currentframe == 1)
    {
        if (mainGUI.globalChatT._visible == true)
        {
            englishChatSettings[3] = "1";
        }
        else if (mainGUI.tradeChatT._visible == true)
        {
            tradingChatSettings[3] = "1";
        }
        else if (mainGUI.localChatT._visible == true)
        {
            localChatSettings[3] = "1";
        }
        else if (mainGUI.nonEnglishChatT._visible == true)
        {
            nonEnglishChatSettings[3] = "1";
        }
        else if (mainGUI.clanChatT._visible == true)
        {
            clanChatSettings[3] = "1";
        }
        else if (mainGUI.customChatT._visible == true)
        {
            customChatSettings[3] = "1";
        } // end else if
        this.gotoAndStop(2);
    }
    else
    {
        if (mainGUI.globalChatT._visible == true)
        {
            englishChatSettings[3] = "0";
        }
        else if (mainGUI.tradeChatT._visible == true)
        {
            tradingChatSettings[3] = "0";
        }
        else if (mainGUI.localChatT._visible == true)
        {
            localChatSettings[3] = "0";
        }
        else if (mainGUI.nonEnglishChatT._visible == true)
        {
            nonEnglishChatSettings[3] = "0";
        }
        else if (mainGUI.clanChatT._visible == true)
        {
            clanChatSettings[3] = "0";
        }
        else if (mainGUI.customChatT._visible == true)
        {
            customChatSettings[3] = "0";
        } // end else if
        this.gotoAndStop(1);
    } // end else if
};
mainGUI.chatSettings.tickBox5.onRelease = function ()
{
    if (this._currentframe == 1)
    {
        if (mainGUI.globalChatT._visible == true)
        {
            englishChatSettings[4] = "1";
        }
        else if (mainGUI.tradeChatT._visible == true)
        {
            tradingChatSettings[4] = "1";
        }
        else if (mainGUI.localChatT._visible == true)
        {
            localChatSettings[4] = "1";
        }
        else if (mainGUI.nonEnglishChatT._visible == true)
        {
            nonEnglishChatSettings[4] = "1";
        }
        else if (mainGUI.clanChatT._visible == true)
        {
            clanChatSettings[4] = "1";
        }
        else if (mainGUI.customChatT._visible == true)
        {
            customChatSettings[4] = "1";
        } // end else if
        this.gotoAndStop(2);
    }
    else
    {
        if (mainGUI.globalChatT._visible == true)
        {
            englishChatSettings[4] = "0";
        }
        else if (mainGUI.tradeChatT._visible == true)
        {
            tradingChatSettings[4] = "0";
        }
        else if (mainGUI.localChatT._visible == true)
        {
            localChatSettings[4] = "0";
        }
        else if (mainGUI.nonEnglishChatT._visible == true)
        {
            nonEnglishChatSettings[4] = "0";
        }
        else if (mainGUI.clanChatT._visible == true)
        {
            clanChatSettings[4] = "0";
        }
        else if (mainGUI.customChatT._visible == true)
        {
            customChatSettings[4] = "0";
        } // end else if
        this.gotoAndStop(1);
    } // end else if
};
mainGUI.chatSettings.tickBox6.onRelease = function ()
{
    if (this._currentframe == 1)
    {
        if (mainGUI.globalChatT._visible == true)
        {
            englishChatSettings[5] = "1";
        }
        else if (mainGUI.tradeChatT._visible == true)
        {
            tradingChatSettings[5] = "1";
        }
        else if (mainGUI.localChatT._visible == true)
        {
            localChatSettings[5] = "1";
        }
        else if (mainGUI.nonEnglishChatT._visible == true)
        {
            nonEnglishChatSettings[5] = "1";
        }
        else if (mainGUI.clanChatT._visible == true)
        {
            clanChatSettings[5] = "1";
        }
        else if (mainGUI.customChatT._visible == true)
        {
            customChatSettings[5] = "1";
        } // end else if
        this.gotoAndStop(2);
    }
    else
    {
        if (mainGUI.globalChatT._visible == true)
        {
            englishChatSettings[5] = "0";
        }
        else if (mainGUI.tradeChatT._visible == true)
        {
            tradingChatSettings[5] = "0";
        }
        else if (mainGUI.localChatT._visible == true)
        {
            localChatSettings[5] = "0";
        }
        else if (mainGUI.nonEnglishChatT._visible == true)
        {
            nonEnglishChatSettings[5] = "0";
        }
        else if (mainGUI.clanChatT._visible == true)
        {
            clanChatSettings[5] = "0";
        }
        else if (mainGUI.customChatT._visible == true)
        {
            customChatSettings[5] = "0";
        } // end else if
        this.gotoAndStop(1);
    } // end else if
};
mainGUI.chatSettings.exitB.onRelease = function ()
{
    this.gotoAndStop(1);
    mainGUI.chatSettingsB.gotoAndStop(1);
    mainGUI.chatSettings._visible = false;
};
mainGUI.chatSettings.exitB.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.chatSettings.exitB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.chatSettings.exitB.onPress = function ()
{
    this.gotoAndStop("click");
};
assignMouseEvents(mainGUI.chatSettings.saveB);
mainGUI.chatSettings.saveB.onRelease = function ()
{
    this.gotoAndStop(1);
    if (getTimer() - lastSaveSettings > 1000 && _root.isBusy == false)
    {
        if (Number(mainGUI.chatSettings.chatFontSizeT.text) <= 3)
        {
            mainGUI.chatSettings.chatFontSizeT.text = "3";
        }
        else if (Number(mainGUI.chatSettings.chatFontSizeT.text) >= 30)
        {
            mainGUI.chatSettings.chatFontSizeT.text = "30";
        } // end else if
        _root.chatFontSize = Number(mainGUI.chatSettings.chatFontSizeT.text);
        setChatFontSize();
        lastChatSaveSettings = getTimer();
        getTimestamp("saveChatSettings");
        systemMessage("Chat settings saved.");
    }
    else
    {
        systemMessage("Please wait a few seconds before saving the chat settings again.");
    } // end else if
};
mainGUI.pokedexB.onRelease = function ()
{
    if (trading == false && battle == false)
    {
        if (mainGUI.pokedex._visible == false)
        {
            this.gotoAndStop("click");
            mainGUI.pokedex._visible = true;
            mainGUI.pokedex.swapDepths(mainGUI.getNextHighestDepth());
        }
        else
        {
            this.gotoAndStop(1);
            mainGUI.pokedex._visible = false;
        } // end if
    } // end else if
};
mainGUI.pokedexB.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.pokedexB.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.battleBackground.fightB.onPress = function ()
{
    this.gotoAndStop("click");
};
mainGUI.battleBackground.fightB.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.battleBackground.fightB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.battleBackground.bagB.onPress = function ()
{
    if (this._currentframe != 4)
    {
        this.gotoAndStop("click");
    } // end if
};
mainGUI.battleBackground.pokemonB.onPress = function ()
{
    if (canSwitchPokemon != false)
    {
        this.gotoAndStop("click");
    } // end if
};
mainGUI.battleBackground.pokemonB.onRollOver = function ()
{
    if (canSwitchPokemon != false)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.battleBackground.pokemonB.onRollOut = function ()
{
    if (canSwitchPokemon != false)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.battleBackground.move1B.onPress = function ()
{
    this.gotoAndStop("click");
};
mainGUI.battleBackground.move1B.onRollOver = function ()
{
    this.gotoAndStop("hover");
    if (this.moveName != "" && _root.showMoveInfo == true)
    {
        mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = "<b>" + moveData[userPokemon[activePokemon].moves[0]][5] + "-type " + moveData[userPokemon[activePokemon].moves[0]][2] + " move. " + moveData[userPokemon[activePokemon].moves[0]][3];
        if (moveData[userPokemon[activePokemon].moves[0]][1] != 0)
        {
            mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText + ("<b>" + moveData[userPokemon[activePokemon].moves[0]][1] + " power. ");
        } // end if
        if (moveData[userPokemon[activePokemon].moves[0]][0] != true)
        {
            mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText + ("<b>" + moveData[userPokemon[activePokemon].moves[0]][0] + " accuracy. ");
        } // end if
    } // end if
};
mainGUI.battleBackground.move1B.onRollOut = function ()
{
    this.gotoAndStop(1);
    mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = "";
};
mainGUI.battleBackground.move2B.onPress = function ()
{
    this.gotoAndStop("click");
};
mainGUI.battleBackground.move2B.onRollOver = function ()
{
    this.gotoAndStop("hover");
    if (this.moveName != "" && _root.showMoveInfo == true)
    {
        mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = "<b>" + moveData[userPokemon[activePokemon].moves[1]][5] + "-type " + moveData[userPokemon[activePokemon].moves[1]][2] + " move. " + moveData[userPokemon[activePokemon].moves[1]][3];
        if (moveData[userPokemon[activePokemon].moves[1]][1] != 0)
        {
            mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText + ("<b>" + moveData[userPokemon[activePokemon].moves[1]][1] + " power. ");
        } // end if
        if (moveData[userPokemon[activePokemon].moves[1]][0] != true)
        {
            mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText + ("<b>" + moveData[userPokemon[activePokemon].moves[1]][0] + " accuracy. ");
        } // end if
    } // end if
};
mainGUI.battleBackground.move2B.onRollOut = function ()
{
    this.gotoAndStop(1);
    mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = "";
};
mainGUI.battleBackground.move3B.onPress = function ()
{
    this.gotoAndStop("click");
};
mainGUI.battleBackground.move3B.onRollOver = function ()
{
    this.gotoAndStop("hover");
    if (this.moveName != "" && _root.showMoveInfo == true)
    {
        mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = "<b>" + moveData[userPokemon[activePokemon].moves[2]][5] + "-type " + moveData[userPokemon[activePokemon].moves[2]][2] + " move. " + moveData[userPokemon[activePokemon].moves[2]][3];
        if (moveData[userPokemon[activePokemon].moves[2]][1] != 0)
        {
            mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText + ("<b>" + moveData[userPokemon[activePokemon].moves[2]][1] + " power. ");
        } // end if
        if (moveData[userPokemon[activePokemon].moves[2]][0] != true)
        {
            mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText + ("<b>" + moveData[userPokemon[activePokemon].moves[2]][0] + " accuracy. ");
        } // end if
    } // end if
};
mainGUI.battleBackground.move3B.onRollOut = function ()
{
    this.gotoAndStop(1);
    mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = "";
};
mainGUI.battleBackground.move4B.onPress = function ()
{
    this.gotoAndStop("click");
};
mainGUI.battleBackground.move4B.onRollOver = function ()
{
    this.gotoAndStop("hover");
    if (this.moveName != "" && _root.showMoveInfo == true)
    {
        mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = "<b>" + moveData[userPokemon[activePokemon].moves[3]][5] + "-type " + moveData[userPokemon[activePokemon].moves[3]][2] + " move. " + moveData[userPokemon[activePokemon].moves[3]][3];
        if (moveData[userPokemon[activePokemon].moves[3]][1] != 0)
        {
            mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText + ("<b>" + moveData[userPokemon[activePokemon].moves[3]][1] + " power. ");
        } // end if
        if (moveData[userPokemon[activePokemon].moves[3]][0] != true)
        {
            mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText + ("<b>" + moveData[userPokemon[activePokemon].moves[3]][0] + " accuracy. ");
        } // end if
    } // end if
};
mainGUI.battleBackground.move4B.onRollOut = function ()
{
    this.gotoAndStop(1);
    mainGUI.battleBackground.moveDescriptionT.moveDescriptionT.htmlText = "";
};
mainGUI.battleBackground.backB.onPress = function ()
{
    this.gotoAndStop("click");
};
mainGUI.battleBackground.backB.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.battleBackground.backB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
var i = 1;
while (i < 7)
{
    mainGUI.battleBackground["pokemon" + i + "B"].onRollOver = function ()
    {
        if (this.bg._currentframe != 4)
        {
            this.bg.gotoAndStop("hover");
        } // end if
    };
    mainGUI.battleBackground["pokemon" + i + "B"].onRollOut = function ()
    {
        if (this.bg._currentframe != 4)
        {
            this.bg.gotoAndStop(1);
        } // end if
    };
    mainGUI.battleBackground["pokemon" + i + "B"].onPress = function ()
    {
        if (this.bg._currentframe != 4)
        {
            this.bg.gotoAndStop("click");
        } // end if
    };
    ++i;
} // end while
mainGUI.battleBackground.useItemLeftB.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.battleBackground.useItemLeftB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.battleBackground.useItemLeftB.onPress = function ()
{
    this.gotoAndStop("click");
};
mainGUI.battleBackground.useItemLeftB.onRelease = function ()
{
    this.gotoAndStop(1);
    if (itemsInBattleIndex > 0)
    {
        --itemsInBattleIndex;
        mainGUI.battleBackground.itemImage.gotoAndStop(itemsInBattle[itemsInBattleIndex][0]);
        mainGUI.battleBackground.itemTexts.itemNameT.htmlText = "<b>" + itemsInBattle[itemsInBattleIndex][0];
        mainGUI.battleBackground.itemTexts.itemAmountT.htmlText = "<b>" + itemsInBattle[itemsInBattleIndex][1];
    } // end if
};
mainGUI.battleBackground.useItemRightB.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.battleBackground.useItemRightB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.battleBackground.useItemRightB.onPress = function ()
{
    this.gotoAndStop("click");
};
mainGUI.battleBackground.useItemRightB.onRelease = function ()
{
    this.gotoAndStop(1);
    if (itemsInBattleIndex < itemsInBattle.length - 1)
    {
        ++itemsInBattleIndex;
        mainGUI.battleBackground.itemImage.gotoAndStop(itemsInBattle[itemsInBattleIndex][0]);
        mainGUI.battleBackground.itemTexts.itemNameT.htmlText = "<b>" + itemsInBattle[itemsInBattleIndex][0];
        mainGUI.battleBackground.itemTexts.itemAmountT.htmlText = "<b>" + itemsInBattle[itemsInBattleIndex][1];
    } // end if
};
mainGUI.battleBackground.useItemB.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.battleBackground.useItemB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.battleBackground.useItemB.onPress = function ()
{
    this.gotoAndStop("click");
};
mainGUI.battleBackground.useItemB.onRelease = function ()
{
    if (battleType == "wild" && isWaiting == false && itemsInBattle.length > 0 && _root.isBusy == false)
    {
        this.gotoAndStop(1);
        if (itemsInBattle[itemsInBattleIndex][0] != "Master Ball")
        {
            useBattleItem();
        }
        else
        {
            darkScreen = mainGUI.attachMovie("darkScreen", "darkScreen", mainGUI.getNextHighestDepth());
            darkScreen._width = Stage.width;
            darkScreen._height = Stage.height;
            darkScreen._alpha = 70;
            mConfirmBox = mainGUI.attachMovie("confirmBox", "mConfirmBox", mainGUI.getNextHighestDepth());
            assignMouseEvents(mConfirmBox.confirmB);
            assignMouseEvents(mConfirmBox.cancelB);
            assignMouseEvents(mConfirmBox.exitB);
            mConfirmBox.msgT.htmlText = "<b>Are you sure you want to use a Master Ball?";
            mConfirmBox.confirmB.onRelease = function ()
            {
                removeMovieClip (mConfirmBox);
                removeMovieClip (darkScreen);
                useBattleItem();
            };
            mConfirmBox.cancelB.onRelease = function ()
            {
                removeMovieClip (mConfirmBox);
                removeMovieClip (darkScreen);
            };
            mConfirmBox.exitB.onRelease = function ()
            {
                removeMovieClip (mConfirmBox);
                removeMovieClip (darkScreen);
            };
        } // end if
    } // end else if
};
mainGUI.creditShopB.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.creditShopB.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.settings.slider.onPress = function ()
{
    this.startDrag(true, mainGUI.settings.sliderLine._x, mainGUI.settings.sliderLine._y, mainGUI.settings.sliderLine._x + mainGUI.settings.sliderLine._width, mainGUI.settings.sliderLine._y);
    this.onEnterFrame = function ()
    {
        this.ratio = Math.round((this._x - mainGUI.settings.sliderLine._x) / mainGUI.settings.sliderLine._width * 100);
        _root.musicVolume = this.ratio;
        mainGUI.settings.percentT.htmlText = "<b>" + musicVolume + "%";
        if (_root.fadeOutMusic == false)
        {
            _root.mySound.setVolume(_root.musicVolume);
        } // end if
    };
};
mainGUI.settings.slider.onRelease = mainGUI.settings.slider.onReleaseOutside = mainGUI.settings.slider.stopDrag;
mainGUI.pokemonSummary.stats.exitB.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.pokemonSummary.stats.exitB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.pokemonSummary.stats.exitB.onPress = function ()
{
    this.gotoAndStop("click");
};
mainGUI.pokemonSummary.stats.exitB.onRelease = function ()
{
    pokemonSummaryNum - 1;
    mainGUI.pokemonSummary._visible = false;
};
mainGUI.pokemonSummary.stats.movesTab.onRelease = mainGUI.pokemonSummary.moveBank.movesTab.onRelease = function ()
{
    if (_root.mainGUI.pokemonSummary.moves._visible == false)
    {
        mainGUI.pokemonSummary.stats._visible = false;
        mainGUI.pokemonSummary.moves._visible = true;
        mainGUI.pokemonSummary.moveBank._visible = false;
        mainGUI.pokemonSummary.moves.movesTab.gotoAndStop(2);
        mainGUI.pokemonSummary.stats.movesTab.gotoAndStop(2);
        mainGUI.pokemonSummary.moveBank.movesTab.gotoAndStop(2);
        mainGUI.pokemonSummary.moves.statsTab.gotoAndStop(1);
        mainGUI.pokemonSummary.stats.statsTab.gotoAndStop(1);
        mainGUI.pokemonSummary.moveBank.statsTab.gotoAndStop(1);
        mainGUI.pokemonSummary.moves.moveBankTab.gotoAndStop(1);
        mainGUI.pokemonSummary.stats.moveBankTab.gotoAndStop(1);
        mainGUI.pokemonSummary.moveBank.moveBankTab.gotoAndStop(1);
        mainGUI.pokemonSummary.moves.name1T.htmlText = "<b>" + pokemonSummaryMoves[0];
        mainGUI.pokemonSummary.moves.name2T.htmlText = "<b>" + pokemonSummaryMoves[1];
        mainGUI.pokemonSummary.moves.name3T.htmlText = "<b>" + pokemonSummaryMoves[2];
        mainGUI.pokemonSummary.moves.name4T.htmlText = "<b>" + pokemonSummaryMoves[3];
        mainGUI.pokemonSummary.moves.one1B._visible = false;
        mainGUI.pokemonSummary.moves.one2B._visible = false;
        mainGUI.pokemonSummary.moves.one3B._visible = false;
        mainGUI.pokemonSummary.moves.one4B._visible = false;
        mainGUI.pokemonSummary.moves.two1B._visible = false;
        mainGUI.pokemonSummary.moves.two2B._visible = false;
        mainGUI.pokemonSummary.moves.two3B._visible = false;
        mainGUI.pokemonSummary.moves.two4B._visible = false;
        mainGUI.pokemonSummary.moves.three1B._visible = false;
        mainGUI.pokemonSummary.moves.three2B._visible = false;
        mainGUI.pokemonSummary.moves.three3B._visible = false;
        mainGUI.pokemonSummary.moves.three4B._visible = false;
        mainGUI.pokemonSummary.moves.four1B._visible = false;
        mainGUI.pokemonSummary.moves.four2B._visible = false;
        mainGUI.pokemonSummary.moves.four3B._visible = false;
        mainGUI.pokemonSummary.moves.four4B._visible = false;
        mainGUI.pokemonSummary.moves.one1T._visible = false;
        mainGUI.pokemonSummary.moves.one2T._visible = false;
        mainGUI.pokemonSummary.moves.one3T._visible = false;
        mainGUI.pokemonSummary.moves.one4T._visible = false;
        mainGUI.pokemonSummary.moves.two1T._visible = false;
        mainGUI.pokemonSummary.moves.two2T._visible = false;
        mainGUI.pokemonSummary.moves.two3T._visible = false;
        mainGUI.pokemonSummary.moves.two4T._visible = false;
        mainGUI.pokemonSummary.moves.three1T._visible = false;
        mainGUI.pokemonSummary.moves.three2T._visible = false;
        mainGUI.pokemonSummary.moves.three3T._visible = false;
        mainGUI.pokemonSummary.moves.three4T._visible = false;
        mainGUI.pokemonSummary.moves.four1T._visible = false;
        mainGUI.pokemonSummary.moves.four2T._visible = false;
        mainGUI.pokemonSummary.moves.four3T._visible = false;
        mainGUI.pokemonSummary.moves.four4T._visible = false;
        if (pokemonSummaryType == "normal")
        {
            assignMouseEvents(mainGUI.pokemonSummary.moves.one1B);
            assignMouseEvents(mainGUI.pokemonSummary.moves.one2B);
            assignMouseEvents(mainGUI.pokemonSummary.moves.one3B);
            assignMouseEvents(mainGUI.pokemonSummary.moves.one4B);
            assignMouseEvents(mainGUI.pokemonSummary.moves.two1B);
            assignMouseEvents(mainGUI.pokemonSummary.moves.two2B);
            assignMouseEvents(mainGUI.pokemonSummary.moves.two3B);
            assignMouseEvents(mainGUI.pokemonSummary.moves.two4B);
            assignMouseEvents(mainGUI.pokemonSummary.moves.three1B);
            assignMouseEvents(mainGUI.pokemonSummary.moves.three2B);
            assignMouseEvents(mainGUI.pokemonSummary.moves.three3B);
            assignMouseEvents(mainGUI.pokemonSummary.moves.three4B);
            assignMouseEvents(mainGUI.pokemonSummary.moves.four1B);
            assignMouseEvents(mainGUI.pokemonSummary.moves.four2B);
            assignMouseEvents(mainGUI.pokemonSummary.moves.four3B);
            assignMouseEvents(mainGUI.pokemonSummary.moves.four4B);
            if (trading == false)
            {
                tempLength = 0;
                for (kk in pokemonSummaryMoves)
                {
                    if (pokemonSummaryMoves[kk] != "")
                    {
                        ++tempLength;
                    } // end if
                } // end of for...in
                if (tempLength >= 4)
                {
                    mainGUI.pokemonSummary.moves.four1B._visible = true;
                    mainGUI.pokemonSummary.moves.four2B._visible = true;
                    mainGUI.pokemonSummary.moves.four3B._visible = true;
                    mainGUI.pokemonSummary.moves.four4B._visible = true;
                    mainGUI.pokemonSummary.moves.four1T._visible = true;
                    mainGUI.pokemonSummary.moves.four2T._visible = true;
                    mainGUI.pokemonSummary.moves.four3T._visible = true;
                    mainGUI.pokemonSummary.moves.four4T._visible = true;
                    mainGUI.pokemonSummary.moves.four1B.onRelease = function ()
                    {
                        if (isBusy == false && battle == false && trading == false)
                        {
                            getTimestamp("reorderMoves", pokemonSummaryNum, 4, 1);
                        } // end if
                    };
                    mainGUI.pokemonSummary.moves.four2B.onRelease = function ()
                    {
                        if (isBusy == false && battle == false && trading == false)
                        {
                            getTimestamp("reorderMoves", pokemonSummaryNum, 4, 2);
                        } // end if
                    };
                    mainGUI.pokemonSummary.moves.four3B.onRelease = function ()
                    {
                        if (isBusy == false && battle == false && trading == false)
                        {
                            getTimestamp("reorderMoves", pokemonSummaryNum, 4, 3);
                        } // end if
                    };
                } // end if
                if (tempLength >= 3)
                {
                    mainGUI.pokemonSummary.moves.three1B._visible = true;
                    mainGUI.pokemonSummary.moves.three2B._visible = true;
                    mainGUI.pokemonSummary.moves.three3B._visible = true;
                    mainGUI.pokemonSummary.moves.three1T._visible = true;
                    mainGUI.pokemonSummary.moves.three2T._visible = true;
                    mainGUI.pokemonSummary.moves.three3T._visible = true;
                    if (tempLength >= 4)
                    {
                        mainGUI.pokemonSummary.moves.three4B._visible = true;
                        mainGUI.pokemonSummary.moves.three4T._visible = true;
                    } // end if
                    mainGUI.pokemonSummary.moves.three1B.onRelease = function ()
                    {
                        if (isBusy == false && battle == false && trading == false)
                        {
                            getTimestamp("reorderMoves", pokemonSummaryNum, 3, 1);
                        } // end if
                    };
                    mainGUI.pokemonSummary.moves.three2B.onRelease = function ()
                    {
                        if (isBusy == false && battle == false && trading == false)
                        {
                            getTimestamp("reorderMoves", pokemonSummaryNum, 3, 2);
                        } // end if
                    };
                    mainGUI.pokemonSummary.moves.three4B.onRelease = function ()
                    {
                        if (isBusy == false && battle == false && trading == false)
                        {
                            getTimestamp("reorderMoves", pokemonSummaryNum, 3, 4);
                        } // end if
                    };
                } // end if
                if (tempLength >= 2)
                {
                    mainGUI.pokemonSummary.moves.one1B._visible = true;
                    mainGUI.pokemonSummary.moves.one2B._visible = true;
                    mainGUI.pokemonSummary.moves.two1B._visible = true;
                    mainGUI.pokemonSummary.moves.two2B._visible = true;
                    mainGUI.pokemonSummary.moves.one1T._visible = true;
                    mainGUI.pokemonSummary.moves.one2T._visible = true;
                    mainGUI.pokemonSummary.moves.two1T._visible = true;
                    mainGUI.pokemonSummary.moves.two2T._visible = true;
                    if (tempLength >= 3)
                    {
                        mainGUI.pokemonSummary.moves.one3B._visible = true;
                        mainGUI.pokemonSummary.moves.two3B._visible = true;
                        mainGUI.pokemonSummary.moves.one3T._visible = true;
                        mainGUI.pokemonSummary.moves.two3T._visible = true;
                    } // end if
                    if (tempLength >= 4)
                    {
                        mainGUI.pokemonSummary.moves.one4T._visible = true;
                        mainGUI.pokemonSummary.moves.two4T._visible = true;
                        mainGUI.pokemonSummary.moves.two4B._visible = true;
                        mainGUI.pokemonSummary.moves.one4B._visible = true;
                    } // end if
                    mainGUI.pokemonSummary.moves.two1B.onRelease = function ()
                    {
                        if (isBusy == false && battle == false && trading == false)
                        {
                            getTimestamp("reorderMoves", pokemonSummaryNum, 2, 1);
                        } // end if
                    };
                    mainGUI.pokemonSummary.moves.two3B.onRelease = function ()
                    {
                        if (isBusy == false && battle == false && trading == false)
                        {
                            getTimestamp("reorderMoves", pokemonSummaryNum, 2, 3);
                        } // end if
                    };
                    mainGUI.pokemonSummary.moves.two4B.onRelease = function ()
                    {
                        if (isBusy == false && battle == false && trading == false)
                        {
                            getTimestamp("reorderMoves", pokemonSummaryNum, 2, 4);
                        } // end if
                    };
                    mainGUI.pokemonSummary.moves.one2B.onRelease = function ()
                    {
                        if (isBusy == false && battle == false && trading == false)
                        {
                            getTimestamp("reorderMoves", pokemonSummaryNum, 1, 2);
                        } // end if
                    };
                    mainGUI.pokemonSummary.moves.one3B.onRelease = function ()
                    {
                        if (isBusy == false && battle == false && trading == false)
                        {
                            getTimestamp("reorderMoves", pokemonSummaryNum, 1, 3);
                        } // end if
                    };
                    mainGUI.pokemonSummary.moves.one4B.onRelease = function ()
                    {
                        if (isBusy == false && battle == false && trading == false)
                        {
                            getTimestamp("reorderMoves", pokemonSummaryNum, 1, 4);
                        } // end if
                    };
                } // end if
            } // end if
        } // end if
    } // end if
};
mainGUI.pokemonSummary.moves.exitB.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.pokemonSummary.moves.exitB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.pokemonSummary.moves.exitB.onPress = function ()
{
    this.gotoAndStop("click");
};
mainGUI.pokemonSummary.moves.exitB.onRelease = mainGUI.pokemonSummary.moveBank.exitB.onRelease = function ()
{
    pokemonSummaryNum - 1;
    mainGUI.pokemonSummary._visible = false;
};
mainGUI.pokemonSummary.moves.statsTab.onRelease = mainGUI.pokemonSummary.moveBank.statsTab.onRelease = function ()
{
    if (_root.mainGUI.pokemonSummary.stats._visible == false)
    {
        mainGUI.pokemonSummary.stats._visible = true;
        mainGUI.pokemonSummary.moves._visible = false;
        mainGUI.pokemonSummary.moveBank._visible = false;
        mainGUI.pokemonSummary.moves.statsTab.gotoAndStop(2);
        mainGUI.pokemonSummary.stats.statsTab.gotoAndStop(2);
        mainGUI.pokemonSummary.moveBank.statsTab.gotoAndStop(2);
        mainGUI.pokemonSummary.moves.movesTab.gotoAndStop(1);
        mainGUI.pokemonSummary.stats.movesTab.gotoAndStop(1);
        mainGUI.pokemonSummary.moveBank.movesTab.gotoAndStop(1);
        mainGUI.pokemonSummary.moves.moveBankTab.gotoAndStop(1);
        mainGUI.pokemonSummary.stats.moveBankTab.gotoAndStop(1);
        mainGUI.pokemonSummary.moveBank.moveBankTab.gotoAndStop(1);
    } // end if
};
mainGUI.peopleB.onRelease = function ()
{
    mainGUI.people.swapDepths(mainGUI.getNextHighestDepth());
    if (this._currentframe != 2)
    {
        if (friends.length > 0)
        {
            getTimestamp("loadFriends");
        } // end if
        mainGUI.people.friendsTab.gotoAndStop(2);
        mainGUI.people.ignoreTab.gotoAndStop(1);
        mainGUI.people.onlineTab.gotoAndStop(1);
        mainGUI.people.nameT.htmlText = "";
        mainGUI.people.namesT.htmlText = "";
        mainGUI.people.namesT._height = 253;
        mainGUI.people.addT._visible = true;
        mainGUI.people.removeT._visible = true;
        mainGUI.people.addB._visible = true;
        mainGUI.people.removeB._visible = true;
        mainGUI.people.addB.onRelease = function ()
        {
            if (friends.length < 5000)
            {
                if (isBusy == false)
                {
                    if (darkScreen._x == undefined)
                    {
                        darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                        darkScreen._width = Stage.width;
                        darkScreen._height = Stage.height;
                        darkScreen._alpha = 70;
                        darkScreen._x = newWidth / 2;
                        darkScreen._y = newHeight / 2;
                        friendInviteBox = _root.attachMovie("friendInviteBox", "friendInviteBox", _root.getNextHighestDepth());
                        friendInviteBox._x = 540;
                        friendInviteBox._y = 290;
                        friendInviteBox.nameT.restrict = "A-Z a-z 0-9";
                        Selection.setFocus(friendInviteBox.nameT);
                        friendInviteBox.confirmB.onRelease = function ()
                        {
                            if (isBusy == false && friendInviteBox.nameT.text != "" && String(friendInviteBox.nameT.text).toLowerCase() != username.toLowerCase())
                            {
                                Selection.setFocus(null);
                                getTimestamp("addFriend", friendInviteBox.nameT.text);
                            } // end if
                        };
                        friendInviteBox.cancelB.onRelease = function ()
                        {
                            removeMovieClip (friendInviteBox);
                            removeMovieClip (darkScreen);
                        };
                        friendInviteBox.exitB.onRelease = function ()
                        {
                            removeMovieClip (friendInviteBox);
                            removeMovieClip (darkScreen);
                        };
                        assignMouseEvents(friendInviteBox.confirmB);
                        assignMouseEvents(friendInviteBox.cancelB);
                        assignMouseEvents(friendInviteBox.exitB);
                    } // end if
                } // end if
            }
            else
            {
                systemMessage("Max friend limit reached.");
            } // end else if
        };
        mainGUI.people.removeB.onRelease = function ()
        {
            if (friends.length > 0)
            {
                if (isBusy == false)
                {
                    if (darkScreen._x == undefined)
                    {
                        darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                        darkScreen._width = Stage.width;
                        darkScreen._height = Stage.height;
                        darkScreen._alpha = 70;
                        darkScreen._x = newWidth / 2;
                        darkScreen._y = newHeight / 2;
                        friendInviteBox = _root.attachMovie("friendRemoveBox", "friendRemoveBox", _root.getNextHighestDepth());
                        friendInviteBox._x = 540;
                        friendInviteBox._y = 290;
                        friendInviteBox.nameT.restrict = "A-Z a-z 0-9";
                        Selection.setFocus(friendInviteBox.nameT);
                        friendInviteBox.confirmB.onRelease = function ()
                        {
                            if (isBusy == false && friendInviteBox.nameT.text != "" && String(friendInviteBox.nameT.text).toLowerCase() != username.toLowerCase())
                            {
                                Selection.setFocus(null);
                                getTimestamp("removeFriend", friendInviteBox.nameT.text);
                            } // end if
                        };
                        friendInviteBox.cancelB.onRelease = function ()
                        {
                            removeMovieClip (friendInviteBox);
                            removeMovieClip (darkScreen);
                        };
                        friendInviteBox.exitB.onRelease = function ()
                        {
                            removeMovieClip (friendInviteBox);
                            removeMovieClip (darkScreen);
                        };
                        assignMouseEvents(friendInviteBox.confirmB);
                        assignMouseEvents(friendInviteBox.cancelB);
                        assignMouseEvents(friendInviteBox.exitB);
                    } // end if
                } // end if
            }
            else
            {
                systemMessage("You don\'t have anyone to remove.");
            } // end else if
        };
        this.gotoAndStop("click");
        mainGUI.people._visible = true;
    }
    else
    {
        this.gotoAndStop(1);
        mainGUI.people._visible = false;
    } // end else if
};
mainGUI.peopleB.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.peopleB.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.people.onlineTab.onRelease = mainGUI.people.onlineTab.onReleaseOutside = function ()
{
    if (this._currentframe != 2 && _root.isBusy == false)
    {
        mainGUI.people.friendsTab.gotoAndStop(1);
        mainGUI.people.ignoreTab.gotoAndStop(1);
        mainGUI.people.onlineTab.gotoAndStop(2);
        getTimestamp("getUserList");
    } // end if
};
mainGUI.people.onlineTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(3);
    } // end if
};
mainGUI.people.onlineTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.people.friendsTab.onRelease = mainGUI.people.friendsTab.onReleaseOutside = function ()
{
    if (this._currentframe != 2)
    {
        if (friends.length > 0)
        {
            getTimestamp("loadFriends");
        } // end if
        mainGUI.people.friendsTab.gotoAndStop(2);
        mainGUI.people.ignoreTab.gotoAndStop(1);
        mainGUI.people.onlineTab.gotoAndStop(1);
        mainGUI.people.nameT.htmlText = "";
        mainGUI.people.namesT.htmlText = "";
        mainGUI.people.namesT._height = 253;
        mainGUI.people.addT._visible = true;
        mainGUI.people.removeT._visible = true;
        mainGUI.people.addB._visible = true;
        mainGUI.people.removeB._visible = true;
        mainGUI.people.addB.onRelease = function ()
        {
            if (friends.length < 5000)
            {
                if (isBusy == false)
                {
                    if (darkScreen._x == undefined)
                    {
                        darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                        darkScreen._width = Stage.width;
                        darkScreen._height = Stage.height;
                        darkScreen._alpha = 70;
                        darkScreen._x = newWidth / 2;
                        darkScreen._y = newHeight / 2;
                        friendInviteBox = _root.attachMovie("friendInviteBox", "friendInviteBox", _root.getNextHighestDepth());
                        friendInviteBox._x = 540;
                        friendInviteBox._y = 290;
                        friendInviteBox.nameT.restrict = "A-Z a-z 0-9";
                        Selection.setFocus(friendInviteBox.nameT);
                        friendInviteBox.confirmB.onRelease = function ()
                        {
                            if (isBusy == false && friendInviteBox.nameT.text != "" && String(friendInviteBox.nameT.text).toLowerCase() != username.toLowerCase())
                            {
                                Selection.setFocus(null);
                                getTimestamp("addFriend", friendInviteBox.nameT.text);
                            } // end if
                        };
                        friendInviteBox.cancelB.onRelease = function ()
                        {
                            removeMovieClip (friendInviteBox);
                            removeMovieClip (darkScreen);
                        };
                        friendInviteBox.exitB.onRelease = function ()
                        {
                            removeMovieClip (friendInviteBox);
                            removeMovieClip (darkScreen);
                        };
                        assignMouseEvents(friendInviteBox.confirmB);
                        assignMouseEvents(friendInviteBox.cancelB);
                        assignMouseEvents(friendInviteBox.exitB);
                    } // end if
                } // end if
            }
            else
            {
                systemMessage("Max friend limit reached.");
            } // end else if
        };
        mainGUI.people.removeB.onRelease = function ()
        {
            if (friends.length > 0)
            {
                if (isBusy == false)
                {
                    if (darkScreen._x == undefined)
                    {
                        darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                        darkScreen._width = Stage.width;
                        darkScreen._height = Stage.height;
                        darkScreen._alpha = 70;
                        darkScreen._x = newWidth / 2;
                        darkScreen._y = newHeight / 2;
                        friendInviteBox = _root.attachMovie("friendRemoveBox", "friendRemoveBox", _root.getNextHighestDepth());
                        friendInviteBox._x = 540;
                        friendInviteBox._y = 290;
                        friendInviteBox.nameT.restrict = "A-Z a-z 0-9";
                        Selection.setFocus(friendInviteBox.nameT);
                        friendInviteBox.confirmB.onRelease = function ()
                        {
                            if (isBusy == false && friendInviteBox.nameT.text != "" && String(friendInviteBox.nameT.text).toLowerCase() != username.toLowerCase())
                            {
                                Selection.setFocus(null);
                                getTimestamp("removeFriend", friendInviteBox.nameT.text);
                            } // end if
                        };
                        friendInviteBox.cancelB.onRelease = function ()
                        {
                            removeMovieClip (friendInviteBox);
                            removeMovieClip (darkScreen);
                        };
                        friendInviteBox.exitB.onRelease = function ()
                        {
                            removeMovieClip (friendInviteBox);
                            removeMovieClip (darkScreen);
                        };
                        assignMouseEvents(friendInviteBox.confirmB);
                        assignMouseEvents(friendInviteBox.cancelB);
                        assignMouseEvents(friendInviteBox.exitB);
                    } // end if
                } // end if
            }
            else
            {
                systemMessage("You don\'t have anyone to remove.");
            } // end else if
        };
        this.gotoAndStop("click");
        mainGUI.people._visible = true;
    } // end if
};
mainGUI.people.friendsTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(3);
    } // end if
};
mainGUI.people.friendsTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.people.ignoreTab.onRelease = mainGUI.people.ignoreTab.onReleaseOutside = function ()
{
    if (this._currentframe != 2)
    {
        mainGUI.people.friendsTab.gotoAndStop(1);
        mainGUI.people.ignoreTab.gotoAndStop(2);
        mainGUI.people.onlineTab.gotoAndStop(1);
        mainGUI.people.nameT.htmlText = "";
        mainGUI.people.namesT.htmlText = "";
        mainGUI.people.namesT._height = 253;
        mainGUI.people.addT._visible = true;
        mainGUI.people.removeT._visible = true;
        mainGUI.people.addB._visible = true;
        mainGUI.people.removeB._visible = true;
        mainGUI.people.addB.onRelease = function ()
        {
            if (ignore.length < 5000)
            {
                if (isBusy == false)
                {
                    if (darkScreen._x == undefined)
                    {
                        darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                        darkScreen._width = Stage.width;
                        darkScreen._height = Stage.height;
                        darkScreen._alpha = 70;
                        darkScreen._x = newWidth / 2;
                        darkScreen._y = newHeight / 2;
                        ignoreInviteBox = _root.attachMovie("ignoreInviteBox", "ignoreInviteBox", _root.getNextHighestDepth());
                        ignoreInviteBox._x = 540;
                        ignoreInviteBox._y = 290;
                        ignoreInviteBox.nameT.restrict = "A-Z a-z 0-9";
                        Selection.setFocus(ignoreInviteBox.nameT);
                        ignoreInviteBox.confirmB.onRelease = function ()
                        {
                            if (isBusy == false && ignoreInviteBox.nameT.text != "" && String(ignoreInviteBox.nameT.text).toLowerCase() != username.toLowerCase() && String(ignoreInviteBox.nameT.text).toLowerCase() != "brody" && String(ignoreInviteBox.nameT.text).toLowerCase() != "anubisius")
                            {
                                Selection.setFocus(null);
                                getTimestamp("addIgnore", ignoreInviteBox.nameT.text);
                            } // end if
                        };
                        ignoreInviteBox.cancelB.onRelease = function ()
                        {
                            removeMovieClip (ignoreInviteBox);
                            removeMovieClip (darkScreen);
                        };
                        ignoreInviteBox.exitB.onRelease = function ()
                        {
                            removeMovieClip (ignoreInviteBox);
                            removeMovieClip (darkScreen);
                        };
                        assignMouseEvents(ignoreInviteBox.confirmB);
                        assignMouseEvents(ignoreInviteBox.cancelB);
                        assignMouseEvents(ignoreInviteBox.exitB);
                    } // end if
                } // end if
            }
            else
            {
                systemMessage("Max ignore limit reached.");
            } // end else if
        };
        mainGUI.people.removeB.onRelease = function ()
        {
            if (ignore.length > 0)
            {
                if (isBusy == false)
                {
                    if (darkScreen._x == undefined)
                    {
                        darkScreen = _root.attachMovie("darkScreen", "darkScreen", _root.getNextHighestDepth());
                        darkScreen._width = Stage.width;
                        darkScreen._height = Stage.height;
                        darkScreen._alpha = 70;
                        darkScreen._x = newWidth / 2;
                        darkScreen._y = newHeight / 2;
                        ignoreInviteBox = _root.attachMovie("ignoreRemoveBox", "ignoreRemoveBox", _root.getNextHighestDepth());
                        ignoreInviteBox._x = 540;
                        ignoreInviteBox._y = 290;
                        ignoreInviteBox.nameT.restrict = "A-Z a-z 0-9";
                        Selection.setFocus(ignoreInviteBox.nameT);
                        ignoreInviteBox.confirmB.onRelease = function ()
                        {
                            if (isBusy == false && ignoreInviteBox.nameT.text != "" && String(ignoreInviteBox.nameT.text).toLowerCase() != username.toLowerCase())
                            {
                                Selection.setFocus(null);
                                getTimestamp("removeIgnore", ignoreInviteBox.nameT.text);
                            } // end if
                        };
                        ignoreInviteBox.cancelB.onRelease = function ()
                        {
                            removeMovieClip (ignoreInviteBox);
                            removeMovieClip (darkScreen);
                        };
                        ignoreInviteBox.exitB.onRelease = function ()
                        {
                            removeMovieClip (ignoreInviteBox);
                            removeMovieClip (darkScreen);
                        };
                        assignMouseEvents(ignoreInviteBox.confirmB);
                        assignMouseEvents(ignoreInviteBox.cancelB);
                        assignMouseEvents(ignoreInviteBox.exitB);
                    } // end if
                } // end if
            }
            else
            {
                systemMessage("You don\'t have anyone to remove.");
            } // end else if
        };
        for (z = 0; z < ignore.length; z++)
        {
            if (z == 0)
            {
                mainGUI.people.namesT.htmlText = "<b>" + ignore[z];
                continue;
            } // end if
            mainGUI.people.namesT.htmlText = mainGUI.people.namesT.htmlText + ("<b>" + ignore[z]);
        } // end of for
        this.gotoAndStop("click");
        mainGUI.people._visible = true;
    } // end if
};
mainGUI.people.ignoreTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(3);
    } // end if
};
mainGUI.people.ignoreTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
assignMouseEvents(mainGUI.people.addB);
assignMouseEvents(mainGUI.people.removeB);
mainGUI.people.exitB.onRelease = function ()
{
    mainGUI.peopleB.gotoAndStop(1);
    mainGUI.people._visible = false;
};
mainGUI.people.exitB.onPress = function ()
{
    this.gotoAndStop("click");
};
mainGUI.people.exitB.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.people.exitB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.people.scrollBar.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.people.scrollBar.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.people.scrollBar.onPress = function ()
{
    this.gotoAndStop("click");
    _root.dragScrollbar = 37;
    this.startDrag(true, this._x, 123, this._x, -103);
};
mainGUI.people.scrollBar.onRelease = mainGUI.people.scrollBar.onReleaseOutside = function ()
{
    this.gotoAndStop(1);
    _root.dragScrollbar = 0;
    stopDrag ();
};
mainGUI.clanB.onRelease = function ()
{
    if (this._currentframe != 2)
    {
        if (_root.clan != "")
        {
            this.gotoAndStop("click");
            loadClanGUIInfo();
            mainGUI.clanGUI.swapDepths(mainGUI.getNextHighestDepth());
        }
        else
        {
            systemMessage("You need to be in a clan to view the clan interface.");
        } // end else if
    }
    else
    {
        this.gotoAndStop(1);
        mainGUI.clanGUI._visible = false;
    } // end else if
};
mainGUI.clanB.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.clanB.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.clanGUI.exitB.onRelease = function ()
{
    if (mainGUI.clanGUI._visible == true)
    {
        mainGUI.clanB.gotoAndStop(1);
        mainGUI.clanGUI._visible = false;
    } // end if
};
mainGUI.clanGUI.rosterTab.onRelease = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("click");
        loadClanGUIInfo();
        mainGUI.clanGUI.scrollUpB._visible = true;
        mainGUI.clanGUI.scrollDownB._visible = true;
        mainGUI.clanGUI.scrollBar._visible = true;
        mainGUI.clanGUI.clanBg.gotoAndStop(1);
        mainGUI.clanGUI.bankTab.gotoAndStop(1);
        mainGUI.clanGUI.upgradesTab.gotoAndStop(1);
    } // end if
};
mainGUI.clanGUI.rosterTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.clanGUI.rosterTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.clanGUI.bankTab.onRelease = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("click");
        mainGUI.clanGUI.scrollUpB._visible = false;
        mainGUI.clanGUI.scrollDownB._visible = false;
        mainGUI.clanGUI.scrollBar._visible = false;
        mainGUI.clanGUI.clanBg.gotoAndStop(2);
        mainGUI.clanGUI.rosterTab.gotoAndStop(1);
        mainGUI.clanGUI.upgradesTab.gotoAndStop(1);
        loadClanBankInfo();
    } // end if
};
mainGUI.clanGUI.bankTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.clanGUI.bankTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.clanGUI.upgradesTab.onRelease = function ()
{
    if (this._currentframe != 2)
    {
        if (_root.clanRank == "Leader")
        {
            this.gotoAndStop("click");
            mainGUI.clanGUI.scrollUpB._visible = false;
            mainGUI.clanGUI.scrollDownB._visible = false;
            mainGUI.clanGUI.scrollBar._visible = false;
            mainGUI.clanGUI.clanBg.gotoAndStop(3);
            mainGUI.clanGUI.rosterTab.gotoAndStop(1);
            mainGUI.clanGUI.bankTab.gotoAndStop(1);
            loadClanUpgradesInfo();
        }
        else
        {
            systemMessage("Your rank is not high enough to view the upgrades section.");
        } // end if
    } // end else if
};
mainGUI.clanGUI.upgradesTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.clanGUI.upgradesTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
assignMouseEvents(mainGUI.clanGUI.inviteB);
assignMouseEvents(mainGUI.clanGUI.leaveB);
assignMouseEvents(mainGUI.clanGUI.disbandB);
assignMouseEvents(mainGUI.clanGUI.exitB);
mainGUI.battleBackground.continueB.onRelease = function ()
{
    if (isWaiting == false && _root.isBusy == false)
    {
        isWaiting = true;
        mainGUI.battleBackground.continueB._visible = false;
        mainGUI.battleBackground.continueT.continueT.text = "";
        if (battleType == "pvp")
        {
            mainGUI.battleBackground.battleT.battleT.htmlText = "<b>Waiting...";
            mainGUI.battleBackground.battleT._visible = true;
            if (_root.opponentVoltSwitching == true)
            {
                getTimestamp("battleMovePvpVS", 0);
            }
            else
            {
                getTimestamp("battleMovePvp", 0);
            } // end else if
        }
        else if (_root.opponentVoltSwitching == true)
        {
            getTimestamp("battleMoveVS", 0);
        }
        else
        {
            getTimestamp("battleMove", 0);
        } // end else if
        _root.opponentVoltSwitching = false;
    } // end if
};
assignMouseEvents(mainGUI.battleBackground.continueB);
mainGUI.trainerCardB.onRelease = function ()
{
    if (mainGUI.trainerCard._visible == false)
    {
        this.gotoAndStop("click");
        mainGUI.trainerCard.swapDepths(mainGUI.getNextHighestDepth());
        mainGUI.trainerCard.trainerInfo._visible = true;
        mainGUI.trainerCard.trainerLevels._visible = false;
        mainGUI.trainerCard.trainerInfo.idT.htmlText = "<b>" + format(id);
        mainGUI.trainerCard.trainerInfo.nameT.htmlText = "<b>" + username;
        mainGUI.trainerCard.trainerInfo.moneyT.htmlText = "<b>$" + format(money);
        mainGUI.trainerCard.trainerInfo.creditsT.htmlText = "<b>" + format(credits);
        mainGUI.trainerCard.trainerInfo.dateT.htmlText = "<b>" + creationDateText;
        makeTrainerCardBadges();
        mainGUI.trainerCard._visible = true;
    }
    else
    {
        this.gotoAndStop(1);
        mainGUI.trainerCard._visible = false;
    } // end else if
};
mainGUI.trainerCard.trainerInfo.trainerLevelsB.onRelease = function ()
{
    mainGUI.trainerCard.trainerInfo._visible = false;
    mainGUI.trainerCard.trainerLevels._visible = true;
};
mainGUI.trainerCard.trainerLevels.trainerInfoB.onRelease = function ()
{
    mainGUI.trainerCard.trainerInfo._visible = true;
    mainGUI.trainerCard.trainerLevels._visible = false;
};
assignMouseEvents(mainGUI.trainerCardB);
assignMouseEvents(mainGUI.trainerCard.trainerInfo.exitB);
assignMouseEvents(mainGUI.trainerCard.trainerInfo.trainerLevelsB);
assignMouseEvents(mainGUI.trainerCard.trainerLevels.exitB);
assignMouseEvents(mainGUI.trainerCard.trainerLevels.trainerInfoB);
mainGUI.trainerCard.trainerInfo.exitB.onRelease = function ()
{
    mainGUI.trainerCardB.gotoAndStop(1);
    mainGUI.trainerCard._visible = false;
};
mainGUI.trainerCard.trainerLevels.exitB.onRelease = function ()
{
    mainGUI.trainerCardB.gotoAndStop(1);
    mainGUI.trainerCard._visible = false;
};
mainGUI.pokedex.scrollUpB.onRelease = mainGUI.pokedex.scrollUpB.onReleaseOutside = function ()
{
    _root.dragScrollbar = 0;
    this.gotoAndStop(1);
};
mainGUI.pokedex.scrollUpB.onPress = function ()
{
    _root.dragScrollbar = 42;
    this.gotoAndStop("click");
};
mainGUI.pokedex.scrollUpB.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.pokedex.scrollUpB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.pokedex.scrollUpB2.onRelease = mainGUI.pokedex.scrollUpB.onReleaseOutside = function ()
{
    _root.dragScrollbar = 0;
    this.gotoAndStop(1);
};
mainGUI.pokedex.scrollUpB2.onPress = function ()
{
    _root.dragScrollbar = 44;
    this.gotoAndStop("click");
};
mainGUI.pokedex.scrollUpB2.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.pokedex.scrollUpB2.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.pokedex.scrollDownB.onRelease = mainGUI.pokedex.scrollDownB.onReleaseOutside = function ()
{
    _root.dragScrollbar = 0;
    this.gotoAndStop(1);
};
mainGUI.pokedex.scrollDownB.onPress = function ()
{
    _root.dragScrollbar = 43;
    this.gotoAndStop("click");
};
mainGUI.pokedex.scrollDownB.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.pokedex.scrollDownB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.pokedex.scrollDownB2.onRelease = mainGUI.pokedex.scrollDownB2.onReleaseOutside = function ()
{
    _root.dragScrollbar = 0;
    this.gotoAndStop(1);
};
mainGUI.pokedex.scrollDownB2.onPress = function ()
{
    _root.dragScrollbar = 45;
    this.gotoAndStop("click");
};
mainGUI.pokedex.scrollDownB2.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.pokedex.scrollDownB2.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.pokedex.exitB.onRelease = function ()
{
    mainGUI.pokedex._visible = false;
};
mainGUI.pokedex.scrollBar.onRelease = mainGUI.pokedex.scrollBar.onReleaseOutside = function ()
{
    this.gotoAndStop(1);
    this.stopDrag();
    _root.dragScrollbar = 0;
};
mainGUI.pokedex.scrollBar.onPress = function ()
{
    this.gotoAndStop("click");
    this.startDrag(true, this._x, 261, this._x, -64);
    _root.dragScrollbar = 24;
};
mainGUI.pokedex.scrollBar.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.pokedex.scrollBar.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.pokedex.scrollBar2.onRelease = mainGUI.pokedex.scrollBar2.onReleaseOutside = function ()
{
    this.gotoAndStop(1);
    this.stopDrag();
    _root.dragScrollbar = 0;
};
mainGUI.pokedex.scrollBar2.onPress = function ()
{
    this.gotoAndStop("click");
    this.startDrag(true, this._x, 261, this._x, 5);
    _root.dragScrollbar = 23;
};
mainGUI.pokedex.scrollBar2.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.pokedex.scrollBar2.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.pokedex.tickBox.onRelease = function ()
{
    if (this._currentframe == 1)
    {
        this.gotoAndStop(2);
    }
    else
    {
        this.gotoAndStop(1);
    } // end else if
    reloadPokedexIcons();
};
assignMouseEvents(mainGUI.pokedex.exitB);
assignMouseEvents(mainGUI.pokedex.searchB);
addDraggableGUI(mainGUI.trainerCard);
addDraggableGUI(mainGUI.settings);
addDraggableGUI(mainGUI.people);
addDraggableGUI(mainGUI.chatSettings);
mainGUI.pokemonSummary.stats.dragBg.onPress = mainGUI.pokemonSummary.moveBank.dragBg.onPress = function ()
{
    mainGUI.pokemonSummary.swapDepths(mainGUI.getNextHighestDepth());
    mainGUI.pokemonSummary.startDrag(false, -newWidth / 2 + mainGUI.pokemonSummary._width / 2 - widthOffset - 110, -newHeight / 2 + mainGUI.pokemonSummary._height / 2 - heightOffset + 10, newWidth / 2 - mainGUI.pokemonSummary._width / 2 + widthOffset + 75, newHeight / 2 - mainGUI.pokemonSummary._height / 2 + heightOffset + 10);
};
mainGUI.pokemonSummary.stats.dragBg.onRelease = mainGUI.pokemonSummary.stats.dragBg.onReleaseOutside = mainGUI.pokemonSummary.moveBank.dragBg.onRelease = mainGUI.pokemonSummary.moveBank.dragBg.onReleaseOutside = function ()
{
    mainGUI.pokemonSummary.stopDrag();
};
mainGUI.pokemonSummary.moves.dragBg.onPress = function ()
{
    mainGUI.pokemonSummary.swapDepths(mainGUI.getNextHighestDepth());
    mainGUI.pokemonSummary.startDrag(false, -newWidth / 2 + mainGUI.pokemonSummary._width / 2 - widthOffset - 110, -newHeight / 2 + mainGUI.pokemonSummary._height / 2 - heightOffset + 10, newWidth / 2 - mainGUI.pokemonSummary._width / 2 + widthOffset + 75, newHeight / 2 - mainGUI.pokemonSummary._height / 2 + heightOffset + 100);
};
mainGUI.pokemonSummary.moves.dragBg.onRelease = mainGUI.pokemonSummary.moves.dragBg.onReleaseOutside = function ()
{
    mainGUI.pokemonSummary.stopDrag();
};
var largeSurfingMounts = ["Kyogre", "Pelipper", "Mantine", "Milotic", "Snorlax", "Manaphy", "Vaporeon", "Froakie", "Pirate Ship", "Rubber Duck"];
var largeSurfingMounts2 = [];
var i = 0;
while (i < largeSurfingMounts.length)
{
    largeSurfingMounts2[largeSurfingMounts[i] + " Mount"] = 1;
    largeSurfingMounts2["Shiny " + largeSurfingMounts[i] + " Mount"] = 1;
    ++i;
} // end while
delete largeSurfingMounts;
var maleFemaleCapes = [];
maleFemaleCapes.Backpack = 1;
maleFemaleCapes["Starmie Backpack"] = 1;
maleFemaleCapes["Halloween Starmie Backpack"] = 1;
var hatsWithMasks = ["Wizard Hat", "Elf Hat", "Crown", "Backwards Cap", "Bandana", "Cap", "Cowboy Hat", "Fedora", "Magma Hood", "Pikachu Hat", "Team Rocket Hat", "Teddiursa Hat", "Top Hat", "Ninja Mask", "Aqua Bandana", "Bug Catcher Hat", "Trainer Hat", "Santa Hat", "Foongus Hat", "Witch Hat", "Snorkel", "Slowking Crown", "Beanie", "Captains Hat", "Drake Hat", "Hard Hat", "Magikarp Hat", "Military Hat", "Police Hat", "Rainbow Hat", "White Beanie", "Chefs Hat", "Honchkrow Hat", "Mining Helmet", "Clay Hat", "Wallace Hat", "Sailor Hat", "Fisherman Hat", "Camper Hat", "Straw Hat", "Pirate Hat"];
var hatsWithMasks2 = [];
for (var i in hatsWithMasks)
{
    hatsWithMasks2[hatsWithMasks[i]] = 1;
} // end of for...in
delete hatsWithMasks;
var hatsHeads = ["Evil Scarecrow Head", "Plague Doctor Mask", "Watermelon Head", "Bunny Head", "Frosty Head", "Milo Mask", "Mewtwo Mask", "Mew Mask", "Delibird Mask", "Duskull Mask", "Pumpkin Head", "Panda Head", "Cubone Mask", "Charizard Mask", "Space Helmet", "Marshmallow Head", "Shark Head", "Hooded Mask", "Lickitung Mask", "Lion Mask", "Anubis Mask", "Evil Bear Mask", "Motorcycle Helmet", "Hamburger Head", "Clefairy Mask", "Unicorn Mask", "Froakie Hat", "Snowboard Mask", "Paper Bag Mask", "Slowpoke Mask", "Bisharp Helmet", "Bucket Head", "Cofagrigus Mask", "Entei Mask", "Suicune Mask", "Raikou Mask", "Knight Helmet", "Lunatone Mask", "Solrock Mask", "Steampunk Helmet", "Omastar Mask", "Scizor Mask", "Psyduck Mask", "Bidoof Mask", "Steampunk Cat Mask", "Munchlax Mask", "Ludicolo Mask", "Wobbuffet Mask", "Gengar Head", "Glalie Head", "Poke Ball Head", "Great Ball Head", "Ultra Ball Head", "Master Ball Head", "Starly Mask", "Diving Helmet"];
var hatsHeads2 = [];
for (var i in hatsHeads)
{
    hatsHeads2[hatsHeads[i]] = 1;
} // end of for...in
delete hatsHeads;
var smallMountsWithFront = ["Swanna", "Crawdaunt", "Lapras", "Starmie"];
var smallMountsWithFront2 = [];
for (var i in smallMountsWithFront)
{
    smallMountsWithFront2[smallMountsWithFront[i] + " Mount"] = 1;
    smallMountsWithFront2["Shiny " + smallMountsWithFront[i] + " Mount"] = 1;
} // end of for...in
delete smallMountsWithFront;
var largeMountsWithFront = ["Pelipper", "Milotic", "Snorlax", "Manaphy", "Vaporeon", "Froakie", "Pirate Ship", "Rubber Duck"];
var largeMountsWithFront2 = [];
for (var i in largeMountsWithFront)
{
    largeMountsWithFront2[largeMountsWithFront[i] + " Mount"] = 1;
    largeMountsWithFront2["Shiny " + largeMountsWithFront[i] + " Mount"] = 1;
} // end of for...in
delete largeMountsWithFront;
mainGUI.inventory.sortB.onRelease = function ()
{
    if (mConfirmBox._x == undefined)
    {
        darkScreen = mainGUI.attachMovie("darkScreen", "darkScreen", mainGUI.getNextHighestDepth());
        darkScreen._width = Stage.width;
        darkScreen._height = Stage.height;
        darkScreen._alpha = 70;
        darkScreen.onRelease = function ()
        {
        };
        mConfirmBox = mainGUI.attachMovie("confirmBox", "mConfirmBox", mainGUI.getNextHighestDepth());
        assignMouseEvents(mConfirmBox.confirmB);
        assignMouseEvents(mConfirmBox.cancelB);
        assignMouseEvents(mConfirmBox.exitB);
        mConfirmBox.msgT.htmlText = "<b>Are you sure you want to sort your inventory?";
        mConfirmBox.confirmB.onRelease = function ()
        {
            getTimestamp("command", "sort");
            removeMovieClip (mConfirmBox);
            removeMovieClip (darkScreen);
        };
        mConfirmBox.cancelB.onRelease = function ()
        {
            removeMovieClip (mConfirmBox);
            removeMovieClip (darkScreen);
        };
        mConfirmBox.exitB.onRelease = function ()
        {
            removeMovieClip (mConfirmBox);
            removeMovieClip (darkScreen);
        };
    } // end if
    this.gotoAndStop(1);
};
mainGUI.inventory.sortB.onPress = function ()
{
    this.gotoAndStop("click");
};
mainGUI.inventory.sortB.onRollOver = function ()
{
    this.gotoAndStop("hover");
};
mainGUI.inventory.sortB.onRollOut = function ()
{
    this.gotoAndStop(1);
};
mainGUI.inventory.craftingB.onRelease = function ()
{
    if (mainGUI.crafting._visible == false)
    {
        this.gotoAndStop(2);
        _root.craftingArray = [[""], [""], [""], [""], [""], [""], [""], [""], [""]];
        for (var _loc3 = 0; _loc3 < 10; ++_loc3)
        {
            mainGUI.crafting["i" + _loc3].gotoAndStop(1);
        } // end of for
        mainGUI.crafting.swapDepths(mainGUI.getNextHighestDepth());
        mainGUI.crafting._visible = true;
    }
    else
    {
        this.gotoAndStop(1);
        mainGUI.crafting._visible = false;
    } // end else if
};
mainGUI.inventory.craftingB.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.inventory.craftingB.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
addDraggableGUI(mainGUI.crafting);
mainGUI.crafting.exitB.onRelease = function ()
{
    mainGUI.inventory.craftingB.gotoAndStop(1);
    mainGUI.crafting._visible = false;
};
assignMouseEvents(mainGUI.crafting.exitB);
mainGUI.crafting.i0.onPress = function ()
{
    this.x = this._x;
    this.y = this._y;
    this.startDrag();
};
mainGUI.crafting.i0.onRelease = mainGUI.crafting.i0.onReleaseOutside = function ()
{
    this.stopDrag();
    if (this.hitTest(mainGUI.inventory))
    {
        this.gotoAndStop(1);
        _root.craftingArray[0][0] = "";
        checkCraftingRecipe();
    } // end if
    this._x = this.x;
    this._y = this.y;
};
mainGUI.crafting.i1.onPress = function ()
{
    this.x = this._x;
    this.y = this._y;
    this.startDrag();
};
mainGUI.crafting.i1.onRelease = mainGUI.crafting.i1.onReleaseOutside = function ()
{
    this.stopDrag();
    if (this.hitTest(mainGUI.inventory))
    {
        this.gotoAndStop(1);
        _root.craftingArray[1][0] = "";
        checkCraftingRecipe();
    } // end if
    this._x = this.x;
    this._y = this.y;
};
mainGUI.crafting.i2.onPress = function ()
{
    this.x = this._x;
    this.y = this._y;
    this.startDrag();
};
mainGUI.crafting.i2.onRelease = mainGUI.crafting.i2.onReleaseOutside = function ()
{
    this.stopDrag();
    if (this.hitTest(mainGUI.inventory))
    {
        this.gotoAndStop(1);
        _root.craftingArray[2][0] = "";
        checkCraftingRecipe();
    } // end if
    this._x = this.x;
    this._y = this.y;
};
mainGUI.crafting.i3.onPress = function ()
{
    this.x = this._x;
    this.y = this._y;
    this.startDrag();
};
mainGUI.crafting.i3.onRelease = mainGUI.crafting.i3.onReleaseOutside = function ()
{
    this.stopDrag();
    if (this.hitTest(mainGUI.inventory))
    {
        this.gotoAndStop(1);
        _root.craftingArray[3][0] = "";
        checkCraftingRecipe();
    } // end if
    this._x = this.x;
    this._y = this.y;
};
mainGUI.crafting.i4.onPress = function ()
{
    this.x = this._x;
    this.y = this._y;
    this.startDrag();
};
mainGUI.crafting.i4.onRelease = mainGUI.crafting.i4.onReleaseOutside = function ()
{
    this.stopDrag();
    if (this.hitTest(mainGUI.inventory))
    {
        this.gotoAndStop(1);
        _root.craftingArray[4][0] = "";
        checkCraftingRecipe();
    } // end if
    this._x = this.x;
    this._y = this.y;
};
mainGUI.crafting.i5.onPress = function ()
{
    this.x = this._x;
    this.y = this._y;
    this.startDrag();
};
mainGUI.crafting.i5.onRelease = mainGUI.crafting.i5.onReleaseOutside = function ()
{
    this.stopDrag();
    if (this.hitTest(mainGUI.inventory))
    {
        this.gotoAndStop(1);
        _root.craftingArray[5][0] = "";
        checkCraftingRecipe();
    } // end if
    this._x = this.x;
    this._y = this.y;
};
mainGUI.crafting.i6.onPress = function ()
{
    this.x = this._x;
    this.y = this._y;
    this.startDrag();
};
mainGUI.crafting.i6.onRelease = mainGUI.crafting.i6.onReleaseOutside = function ()
{
    this.stopDrag();
    if (this.hitTest(mainGUI.inventory))
    {
        this.gotoAndStop(1);
        _root.craftingArray[6][0] = "";
        checkCraftingRecipe();
    } // end if
    this._x = this.x;
    this._y = this.y;
};
mainGUI.crafting.i7.onPress = function ()
{
    this.x = this._x;
    this.y = this._y;
    this.startDrag();
};
mainGUI.crafting.i7.onRelease = mainGUI.crafting.i7.onReleaseOutside = function ()
{
    this.stopDrag();
    if (this.hitTest(mainGUI.inventory))
    {
        this.gotoAndStop(1);
        _root.craftingArray[7][0] = "";
        checkCraftingRecipe();
    } // end if
    this._x = this.x;
    this._y = this.y;
};
mainGUI.crafting.i8.onPress = function ()
{
    this.x = this._x;
    this.y = this._y;
    this.startDrag();
};
mainGUI.crafting.i8.onRelease = mainGUI.crafting.i8.onReleaseOutside = function ()
{
    this.stopDrag();
    if (this.hitTest(mainGUI.inventory))
    {
        this.gotoAndStop(1);
        _root.craftingArray[8][0] = "";
        checkCraftingRecipe();
    } // end if
    this._x = this.x;
    this._y = this.y;
};
mainGUI.crafting.i9.onPress = function ()
{
    if (this._currentframe != 1)
    {
        this.x = this._x;
        this.y = this._y;
        this.startDrag();
    } // end if
};
mainGUI.crafting.i9.onRelease = mainGUI.crafting.i9.onReleaseOutside = function ()
{
    if (this._currentframe != 1 && _root.isBusy == false)
    {
        this.stopDrag();
        darkenScreenLoading();
        getTimestamp("craft", this.a, this.b, this.c);
        this.gotoAndStop(1);
        this.a = "";
        this.c = undefined;
        _root.craftingArray = [[""], [""], [""], [""], [""], [""], [""], [""], [""]];
        for (var _loc3 = 0; _loc3 < 10; ++_loc3)
        {
            mainGUI.crafting["i" + _loc3].gotoAndStop(1);
        } // end of for
        this._x = this.x;
        this._y = this.y;
    } // end if
};
var t1BanList = ["Kingdra", "Scolipede", "Nidoking", "Clefable", "Alakazam", "Cloyster", "Gengar", "Chansey", "Starmie", "Gyarados", "Dragonite", "Azumarill", "Scizor", "Skarmory", "Tyranitar", "Breloom", "Crawdaunt", "Salamence", "Infernape", "Staraptor", "Lucario", "Weavile", "Magnezone", "Tangrowth", "Togekiss", "Gliscor", "Porygon-z", "Garchomp", "Mamoswine", "Serperior", "Excadrill", "Conkeldurr", "Darmanitan", "Amoonguss", "Ferrothorn", "Chandelure", "Haxorus", "Bisharp", "Hydreigon", "Volcarona", "Diggersby", "Hawlucha", "Klefki", "Zapdos", "Mew", "Mewtwo", "Lugia", "Ho-Oh", "Suicune", "Raikou", "Latias", "Latios", "Kyogre", "Groudon", "Rayquaza", "Jirachi", "Deoxys", "Azelf", "Dialga", "Palkia", "Giratina", "Heatran", "Manaphy", "Darkrai", "Arceus", "Victini", "Terrakion", "Tornadus", "Thunderus", "Landorus", "Reshiram", "Zekrom", "Kyurem", "Keldeo", "Genesect", "Xerneas", "Yveltal", "Zygarde", "Volcanion", "Rotom"];
var t2BanList = ["Giratina", "Deoxys", "Darkrai", "Xerneas", "Blaziken", "Yveltal", "Greninja"];
var clanWarSpawns3 = [[2, 4], [11, 5], [20, 5], [29, 5], [37, 4], [37, 12], [37, 21], [29, 21], [20, 21], [11, 21], [2, 21], [2, 12], [2, 29], [2, 38], [11, 37], [20, 37], [20, 29], [29, 37], [37, 14], [38, 7], [37, 29], [29, 21]];
var clanWarSpawns2 = [[6, 7], [9, 7], [6, 10], [9, 10], [28, 7], [32, 7], [28, 9], [32, 9], [51, 7], [54, 7], [51, 10], [54, 10], [4, 28], [9, 28], [15, 28], [4, 32], [9, 32], [15, 32], [19, 19], [22, 19], [19, 22], [22, 22], [38, 19], [41, 19], [38, 22], [41, 22], [19, 36], [22, 36], [19, 39], [22, 39], [38, 36], [41, 36], [38, 39], [41, 39], [45, 28], [51, 28], [56, 28], [45, 32], [51, 32], [56, 32], [6, 52], [9, 52], [6, 55], [9, 55], [28, 50], [32, 50], [28, 55], [32, 55], [51, 52], [54, 52], [51, 55], [54, 55]];
var clanWarSpawns = [[13, 19], [19, 19], [25, 20], [35, 22], [45, 22], [55, 22], [64, 22], [71, 19], [76, 19], [74, 44], [81, 47], [73, 54], [81, 53], [65, 49], [55, 49], [45, 49], [35, 49], [25, 49], [9, 45], [17, 45], [18, 51], [8, 55], [19, 74], [25, 63], [27, 75], [45, 71], [63, 69], [66, 63], [71, 74]];
assignMouseEvents(mainGUI.pokedex.searchB);
mainGUI.pokedex.searchB.onRelease = function ()
{
    this.gotoAndStop(1);
    loadPokedexIconsSearch();
};
assignMouseEvents(mainGUI.people.scrollUpB);
assignMouseEvents(mainGUI.people.scrollDownB);
mainGUI.people.scrollUpB.onRelease = mainGUI.people.scrollUpB.onReleaseOutside = function ()
{
    this.gotoAndStop(1);
    delete mainGUI.people.onEnterFrame;
};
mainGUI.people.scrollDownB.onRelease = mainGUI.people.scrollDownB.onReleaseOutside = function ()
{
    this.gotoAndStop(1);
    delete mainGUI.people.onEnterFrame;
};
mainGUI.people.scrollUpB.onPress = function ()
{
    this.gotoAndStop("click");
    mainGUI.people.onEnterFrame = function ()
    {
        if (mainGUI.people.namesT.scroll > 0)
        {
            --mainGUI.people.namesT.scroll;
        } // end if
    };
};
mainGUI.people.scrollDownB.onPress = function ()
{
    this.gotoAndStop("click");
    mainGUI.people.onEnterFrame = function ()
    {
        if (mainGUI.people.namesT.scroll < mainGUI.people.namesT.maxscroll)
        {
            ++mainGUI.people.namesT.scroll;
        } // end if
    };
};
addDraggableGUI(mainGUI.creditShop);
assignMouseEvents(mainGUI.creditShop.scrollUpB);
assignMouseEvents(mainGUI.creditShop.scrollDownB);
mainGUI.creditShop.scrollUpB.onRelease = mainGUI.creditShop.scrollUpB.onReleaseOutside = function ()
{
    this.gotoAndStop(1);
    delete mainGUI.creditShop.onEnterFrame;
};
mainGUI.creditShop.scrollDownB.onRelease = mainGUI.creditShop.scrollDownB.onReleaseOutside = function ()
{
    this.gotoAndStop(1);
    delete mainGUI.creditShop.onEnterFrame;
};
mainGUI.creditShop.scrollUpB.onPress = function ()
{
    this.gotoAndStop("click");
    mainGUI.creditShop.onEnterFrame = function ()
    {
        if (mainGUI.creditShop.itemList._y < 0)
        {
            mainGUI.creditShop.itemList._y = mainGUI.creditShop.itemList._y + 10;
        } // end if
    };
};
mainGUI.creditShop.scrollDownB.onPress = function ()
{
    this.gotoAndStop("click");
    mainGUI.creditShop.onEnterFrame = function ()
    {
        if (mainGUI.creditShop.mainTab._currentframe == 2)
        {
            if (mainGUI.creditShop.itemList._y > 1.002967 * -Math.ceil(creditShopArray.length / 3 - 3) * 142)
            {
                mainGUI.creditShop.itemList._y = mainGUI.creditShop.itemList._y - 10;
            } // end if
        }
        else if (mainGUI.creditShop.mountTab._currentframe == 2)
        {
            if (mainGUI.creditShop.itemList._y > 1.002967 * -Math.ceil(creditShopMountArray.length / 3 - 3) * 142)
            {
                mainGUI.creditShop.itemList._y = mainGUI.creditShop.itemList._y - 10;
            } // end if
        }
        else if (mainGUI.creditShop.itemList._y > 1.002967 * -Math.ceil(creditShopDecorativeArray.length / 3 - 3) * 142)
        {
            mainGUI.creditShop.itemList._y = mainGUI.creditShop.itemList._y - 10;
        } // end else if
    };
};
assignMouseEvents(mainGUI.expandB);
assignMouseEvents(mainGUI.contractB);
mainGUI.expandB.onRelease = function ()
{
    this._visible = false;
    mainGUI.contractB._visible = true;
    mainGUI.chatBg.chatBg._visible = true;
    if (_root.chatType == "english")
    {
        mainGUI.globalChatT._visible = true;
    }
    else if (_root.chatType == "trade")
    {
        mainGUI.tradeChatT._visible = true;
    }
    else if (_root.chatType == "local")
    {
        mainGUI.localChatT._visible = true;
    }
    else if (_root.chatType == "nonEnglish")
    {
        mainGUI.nonEnglishChatT._visible = true;
    }
    else if (_root.chatType == "clan")
    {
        mainGUI.clanChatT._visible = true;
    }
    else if (_root.chatType == "custom")
    {
        mainGUI.customChatT._visible = true;
    } // end else if
    mainGUI.globalTab._visible = true;
    mainGUI.tradeTab._visible = true;
    mainGUI.localTab._visible = true;
    mainGUI.nonEnglishTab._visible = true;
    mainGUI.clanTab._visible = true;
    if (customChat != "")
    {
        mainGUI.customTab._visible = true;
    } // end if
    mainGUI.scrollBar._visible = true;
    mainGUI.scrollUpB._visible = true;
    mainGUI.scrollDownB._visible = true;
};
mainGUI.contractB.onRelease = function ()
{
    this._visible = false;
    mainGUI.expandB._visible = true;
    mainGUI.chatBg.chatBg._visible = false;
    mainGUI.globalTab._visible = false;
    mainGUI.tradeTab._visible = false;
    mainGUI.localTab._visible = false;
    mainGUI.nonEnglishTab._visible = false;
    mainGUI.clanTab._visible = false;
    mainGUI.customTab._visible = false;
    mainGUI.scrollBar._visible = false;
    mainGUI.scrollUpB._visible = false;
    mainGUI.scrollDownB._visible = false;
    mainGUI.globalChatT._visible = false;
    mainGUI.tradeChatT._visible = false;
    mainGUI.localChatT._visible = false;
    mainGUI.nonEnglishChatT._visible = false;
    mainGUI.clanChatT._visible = false;
    mainGUI.customChatT._visible = false;
};
mainGUI.achievementsB.onRelease = function ()
{
    mainGUI.achievements.swapDepths(mainGUI.getNextHighestDepth());
    if (this._currentframe != 2)
    {
        this.gotoAndStop("click");
        selectAchievement(_root.selectedAchievement);
        mainGUI.achievements._visible = true;
    }
    else
    {
        this.gotoAndStop(1);
        mainGUI.achievements._visible = false;
    } // end else if
};
mainGUI.achievementsB.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.achievementsB.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
assignMouseEvents(mainGUI.achievements.exitB);
mainGUI.achievements.exitB.onRelease = function ()
{
    mainGUI.achievementsB.gotoAndStop(1);
    mainGUI.achievements._visible = false;
};
mainGUI.hb1.onPress = function ()
{
    var startX = _xmouse;
    var startW = mainGUI.chatBg.chatBg._width;
    var startW2 = mainGUI.hb3._width;
    var startW3 = mainGUI.globalChatT._width;
    var startW4 = mainGUI.chatBg.chatBarBg._width;
    var startW5 = mainGUI.inputT._width;
    var startX2 = mainGUI.chatSettingsB._x;
    var startX3 = mainGUI.globalTab._x;
    var startX4 = mainGUI.tradeTab._x;
    var startX5 = mainGUI.localTab._x;
    var startX6 = mainGUI.nonEnglishTab._x;
    var startX7 = mainGUI.clanTab._x;
    var startX8 = mainGUI.customTab._x;
    var startX9 = mainGUI.globalChatT._x;
    var startX15 = mainGUI.hb1._x;
    var startX16 = mainGUI.hb2._x;
    var startX17 = mainGUI.hb3._x;
    var startX18 = mainGUI.chatBg.chatBarBg2._x;
    var startX19 = mainGUI.chatBg.inputTBg._x;
    var startX20 = mainGUI.expandB._x;
    var startX21 = mainGUI.inputT._x;
    var startX22 = mainGUI.contractB._x;
    this.onEnterFrame = function ()
    {
        if (startW + (startX - _xmouse) >= 409 && startW + (startX - _xmouse) <= Stage.width * 0.750000)
        {
            mainGUI.chatBg.chatBg._width = startW + (startX - _xmouse);
            mainGUI.hb3._width = startW2 + (startX - _xmouse);
            mainGUI.chatBg.chatBarBg._width = startW4 + (startX - _xmouse);
            mainGUI.inputT._width = startW5 + (startX - _xmouse);
            mainGUI.globalChatT._width = startW3 + (startX - _xmouse);
            mainGUI.tradeChatT._width = startW3 + (startX - _xmouse);
            mainGUI.localChatT._width = startW3 + (startX - _xmouse);
            mainGUI.nonEnglishChatT._width = startW3 + (startX - _xmouse);
            mainGUI.clanChatT._width = startW3 + (startX - _xmouse);
            mainGUI.customChatT._width = startW3 + (startX - _xmouse);
            mainGUI.chatSettingsB._x = startX2 - (startX - _xmouse);
            mainGUI.globalTab._x = startX3 - (startX - _xmouse);
            mainGUI.tradeTab._x = startX4 - (startX - _xmouse);
            mainGUI.localTab._x = startX5 - (startX - _xmouse);
            mainGUI.nonEnglishTab._x = startX6 - (startX - _xmouse);
            mainGUI.clanTab._x = startX7 - (startX - _xmouse);
            mainGUI.customTab._x = startX8 - (startX - _xmouse);
            mainGUI.globalChatT._x = startX9 - (startX - _xmouse);
            mainGUI.tradeChatT._x = startX9 - (startX - _xmouse);
            mainGUI.localChatT._x = startX9 - (startX - _xmouse);
            mainGUI.nonEnglishChatT._x = startX9 - (startX - _xmouse);
            mainGUI.clanChatT._x = startX9 - (startX - _xmouse);
            mainGUI.customChatT._x = startX9 - (startX - _xmouse);
            mainGUI.hb1._x = startX15 - (startX - _xmouse);
            mainGUI.hb2._x = startX16 - (startX - _xmouse);
            mainGUI.hb3._x = startX17 - (startX - _xmouse);
            mainGUI.chatBg.chatBarBg2._x = startX18 - (startX - _xmouse);
            mainGUI.chatBg.inputTBg._x = startX19 - (startX - _xmouse);
            mainGUI.expandB._x = startX20 - (startX - _xmouse);
            mainGUI.inputT._x = startX21 - (startX - _xmouse);
            mainGUI.contractB._x = startX22 - (startX - _xmouse);
        } // end if
    };
};
mainGUI.hb1.onRelease = mainGUI.hb1.onReleaseOutside = function ()
{
    delete this.onEnterFrame;
};
mainGUI.hb3.onPress = function ()
{
    var startY = _ymouse;
    var startH = mainGUI.chatBg.chatBg._height;
    var startH2 = mainGUI.hb1._height;
    var startH3 = mainGUI.globalChatT._height;
    var startY3 = mainGUI.globalTab._y;
    var startY4 = mainGUI.tradeTab._y;
    var startY5 = mainGUI.localTab._y;
    var startY6 = mainGUI.nonEnglishTab._y;
    var startY7 = mainGUI.clanTab._y;
    var startY8 = mainGUI.customTab._y;
    var startY9 = mainGUI.globalChatT._y;
    var startY10 = mainGUI.tradeChatT._y;
    var startY11 = mainGUI.localChatT._y;
    var startY12 = mainGUI.nonEnglishChatT._y;
    var startY13 = mainGUI.clanChatT._y;
    var startY14 = mainGUI.customChatT._y;
    var startY15 = mainGUI.hb1._y;
    var startY16 = mainGUI.hb2._y;
    var startY17 = mainGUI.hb3._y;
    var startY18 = mainGUI.scrollUpB._y;
    var startY19 = mainGUI.scrollBar._y;
    this.onEnterFrame = function ()
    {
        if (startH + (startY - _ymouse) >= 132 && startH + (startY - _ymouse) <= Stage.height * 0.800000)
        {
            mainGUI.chatBg.chatBg._height = startH + (startY - _ymouse);
            mainGUI.hb1._height = startH2 + (startY - _ymouse);
            mainGUI.globalChatT._height = startH3 + (startY - _ymouse);
            mainGUI.tradeChatT._height = startH3 + (startY - _ymouse);
            mainGUI.localChatT._height = startH3 + (startY - _ymouse);
            mainGUI.nonEnglishChatT._height = startH3 + (startY - _ymouse);
            mainGUI.clanChatT._height = startH3 + (startY - _ymouse);
            mainGUI.customChatT._height = startH3 + (startY - _ymouse);
            mainGUI.globalTab._y = startY3 - (startY - _ymouse);
            mainGUI.tradeTab._y = startY4 - (startY - _ymouse);
            mainGUI.localTab._y = startY5 - (startY - _ymouse);
            mainGUI.nonEnglishTab._y = startY6 - (startY - _ymouse);
            mainGUI.clanTab._y = startY7 - (startY - _ymouse);
            mainGUI.customTab._y = startY8 - (startY - _ymouse);
            mainGUI.globalChatT._y = startY9 - (startY - _ymouse);
            mainGUI.tradeChatT._y = startY10 - (startY - _ymouse);
            mainGUI.localChatT._y = startY11 - (startY - _ymouse);
            mainGUI.nonEnglishChatT._y = startY12 - (startY - _ymouse);
            mainGUI.clanChatT._y = startY13 - (startY - _ymouse);
            mainGUI.customChatT._y = startY14 - (startY - _ymouse);
            mainGUI.hb1._y = startY15 - (startY - _ymouse);
            mainGUI.hb2._y = startY16 - (startY - _ymouse);
            mainGUI.hb3._y = startY17 - (startY - _ymouse);
            mainGUI.scrollUpB._y = startY18 - (startY - _ymouse);
            if (startY19 - (startY - _ymouse) <= 240 + heightOffset)
            {
                mainGUI.scrollBar._y = startY19 - (startY - _ymouse);
            }
            else
            {
                mainGUI.scrollBar._y = 240 + heightOffset;
            } // end if
        } // end else if
    };
};
mainGUI.hb3.onRelease = mainGUI.hb3.onReleaseOutside = function ()
{
    delete this.onEnterFrame;
};
mainGUI.hb2.onPress = function ()
{
    var startX = _xmouse;
    var startW = mainGUI.chatBg.chatBg._width;
    var startW2 = mainGUI.hb3._width;
    var startW3 = mainGUI.globalChatT._width;
    var startW4 = mainGUI.chatBg.chatBarBg._width;
    var startW5 = mainGUI.inputT._width;
    var startX2 = mainGUI.chatSettingsB._x;
    var startX3 = mainGUI.globalTab._x;
    var startX4 = mainGUI.tradeTab._x;
    var startX5 = mainGUI.localTab._x;
    var startX6 = mainGUI.nonEnglishTab._x;
    var startX7 = mainGUI.clanTab._x;
    var startX8 = mainGUI.customTab._x;
    var startX9 = mainGUI.globalChatT._x;
    var startX15 = mainGUI.hb1._x;
    var startX16 = mainGUI.hb2._x;
    var startX17 = mainGUI.hb3._x;
    var startX18 = mainGUI.chatBg.chatBarBg2._x;
    var startX19 = mainGUI.chatBg.inputTBg._x;
    var startX20 = mainGUI.expandB._x;
    var startX21 = mainGUI.inputT._x;
    var startX22 = mainGUI.contractB._x;
    var startY = _ymouse;
    var startH = mainGUI.chatBg.chatBg._height;
    var startH2 = mainGUI.hb1._height;
    var startH3 = mainGUI.globalChatT._height;
    var startY3 = mainGUI.globalTab._y;
    var startY4 = mainGUI.tradeTab._y;
    var startY5 = mainGUI.localTab._y;
    var startY6 = mainGUI.nonEnglishTab._y;
    var startY7 = mainGUI.clanTab._y;
    var startY8 = mainGUI.customTab._y;
    var startY9 = mainGUI.globalChatT._y;
    var startY10 = mainGUI.tradeChatT._y;
    var startY11 = mainGUI.localChatT._y;
    var startY12 = mainGUI.nonEnglishChatT._y;
    var startY13 = mainGUI.clanChatT._y;
    var startY14 = mainGUI.customChatT._y;
    var startY15 = mainGUI.hb1._y;
    var startY16 = mainGUI.hb2._y;
    var startY17 = mainGUI.hb3._y;
    var startY18 = mainGUI.scrollUpB._y;
    var startY19 = mainGUI.scrollBar._y;
    this.onEnterFrame = function ()
    {
        if (startW + (startX - _xmouse) >= 409 && startW + (startX - _xmouse) <= Stage.width * 0.750000)
        {
            mainGUI.chatBg.chatBg._width = startW + (startX - _xmouse);
            mainGUI.hb3._width = startW2 + (startX - _xmouse);
            mainGUI.chatBg.chatBarBg._width = startW4 + (startX - _xmouse);
            mainGUI.inputT._width = startW5 + (startX - _xmouse);
            mainGUI.globalChatT._width = startW3 + (startX - _xmouse);
            mainGUI.tradeChatT._width = startW3 + (startX - _xmouse);
            mainGUI.localChatT._width = startW3 + (startX - _xmouse);
            mainGUI.nonEnglishChatT._width = startW3 + (startX - _xmouse);
            mainGUI.clanChatT._width = startW3 + (startX - _xmouse);
            mainGUI.customChatT._width = startW3 + (startX - _xmouse);
            mainGUI.chatSettingsB._x = startX2 - (startX - _xmouse);
            mainGUI.globalTab._x = startX3 - (startX - _xmouse);
            mainGUI.tradeTab._x = startX4 - (startX - _xmouse);
            mainGUI.localTab._x = startX5 - (startX - _xmouse);
            mainGUI.nonEnglishTab._x = startX6 - (startX - _xmouse);
            mainGUI.clanTab._x = startX7 - (startX - _xmouse);
            mainGUI.customTab._x = startX8 - (startX - _xmouse);
            mainGUI.globalChatT._x = startX9 - (startX - _xmouse);
            mainGUI.tradeChatT._x = startX9 - (startX - _xmouse);
            mainGUI.localChatT._x = startX9 - (startX - _xmouse);
            mainGUI.nonEnglishChatT._x = startX9 - (startX - _xmouse);
            mainGUI.clanChatT._x = startX9 - (startX - _xmouse);
            mainGUI.customChatT._x = startX9 - (startX - _xmouse);
            mainGUI.hb1._x = startX15 - (startX - _xmouse);
            mainGUI.hb2._x = startX16 - (startX - _xmouse);
            mainGUI.hb3._x = startX17 - (startX - _xmouse);
            mainGUI.chatBg.chatBarBg2._x = startX18 - (startX - _xmouse);
            mainGUI.chatBg.inputTBg._x = startX19 - (startX - _xmouse);
            mainGUI.expandB._x = startX20 - (startX - _xmouse);
            mainGUI.inputT._x = startX21 - (startX - _xmouse);
            mainGUI.contractB._x = startX22 - (startX - _xmouse);
        } // end if
        if (startH + (startY - _ymouse) >= 132 && startH + (startY - _ymouse) <= Stage.height * 0.800000)
        {
            mainGUI.chatBg.chatBg._height = startH + (startY - _ymouse);
            mainGUI.hb1._height = startH2 + (startY - _ymouse);
            mainGUI.globalChatT._height = startH3 + (startY - _ymouse);
            mainGUI.tradeChatT._height = startH3 + (startY - _ymouse);
            mainGUI.localChatT._height = startH3 + (startY - _ymouse);
            mainGUI.nonEnglishChatT._height = startH3 + (startY - _ymouse);
            mainGUI.clanChatT._height = startH3 + (startY - _ymouse);
            mainGUI.customChatT._height = startH3 + (startY - _ymouse);
            mainGUI.globalTab._y = startY3 - (startY - _ymouse);
            mainGUI.tradeTab._y = startY4 - (startY - _ymouse);
            mainGUI.localTab._y = startY5 - (startY - _ymouse);
            mainGUI.nonEnglishTab._y = startY6 - (startY - _ymouse);
            mainGUI.clanTab._y = startY7 - (startY - _ymouse);
            mainGUI.customTab._y = startY8 - (startY - _ymouse);
            mainGUI.globalChatT._y = startY9 - (startY - _ymouse);
            mainGUI.tradeChatT._y = startY10 - (startY - _ymouse);
            mainGUI.localChatT._y = startY11 - (startY - _ymouse);
            mainGUI.nonEnglishChatT._y = startY12 - (startY - _ymouse);
            mainGUI.clanChatT._y = startY13 - (startY - _ymouse);
            mainGUI.customChatT._y = startY14 - (startY - _ymouse);
            mainGUI.hb1._y = startY15 - (startY - _ymouse);
            mainGUI.hb2._y = startY16 - (startY - _ymouse);
            mainGUI.hb3._y = startY17 - (startY - _ymouse);
            mainGUI.scrollUpB._y = startY18 - (startY - _ymouse);
            if (startY19 - (startY - _ymouse) <= 240 + heightOffset)
            {
                mainGUI.scrollBar._y = startY19 - (startY - _ymouse);
            }
            else
            {
                mainGUI.scrollBar._y = 240 + heightOffset;
            } // end if
        } // end else if
    };
};
mainGUI.hb2.onRelease = mainGUI.hb2.onReleaseOutside = function ()
{
    delete this.onEnterFrame;
};
mainGUI.battleQueueB.onRelease = function ()
{
    if (_root.battle == false)
    {
        if (this._currentframe != 2)
        {
            canMove = false;
            this.gotoAndStop("click");
            _root.mainGUI.attachMovie("darkScreen", "darkScreen", mainGUI.getNextHighestDepth());
            _root.mainGUI.darkScreen._width = Stage.width;
            _root.mainGUI.darkScreen._height = Stage.height;
            _root.mainGUI.darkScreen._alpha = 50;
            _root.mainGUI.attachMovie("battleQueue", "battleQueue", _root.mainGUI.getNextHighestDepth());
            _root.mainGUI.battleQueue.cancelSearchB._visible = false;
            setRankIcon();
            _root.mainGUI.battleQueue.casualB.onRelease = function ()
            {
                if (_root.mainGUI.battleQueueHighscores._x == undefined && _root.mainGUI.battleQueuePrizeShop._x == undefined)
                {
                    if (_root.map != "PVP Arena" && _root.map != "Clan Wars T1" && _root.map != "Clan Wars T2" && _root.map != "Clan Wars T3")
                    {
                        if (_root.battle == false)
                        {
                            if (_root.queueingForBattle == undefined)
                            {
                                if (_root.isBusy == false)
                                {
                                    getTimestamp("casualBattleQueue");
                                } // end if
                            }
                            else
                            {
                                systemMessage("You are already queueing for a battle.");
                            } // end if
                        } // end else if
                    }
                    else
                    {
                        systemMessage("You can\'t queue for a battle on this map.");
                    } // end if
                } // end else if
            };
            _root.mainGUI.battleQueue.rankedB.onRelease = function ()
            {
                if (_root.mainGUI.battleQueueHighscores._x == undefined && _root.mainGUI.battleQueuePrizeShop._x == undefined)
                {
                    if (hasQuestArray("Elite Four"))
                    {
                        if (_root.map != "PVP Arena" && _root.map != "Clan Wars T1" && _root.map != "Clan Wars T2" && _root.map != "Clan Wars T3")
                        {
                            if (_root.battle == false)
                            {
                                if (_root.userPokemon.length >= 6)
                                {
                                    if (_root.queueingForBattle == undefined)
                                    {
                                        if (_root.isBusy == false)
                                        {
                                            getTimestamp("rankedBattleQueue");
                                        } // end if
                                    }
                                    else
                                    {
                                        systemMessage("You are already queueing for a battle.");
                                    } // end else if
                                }
                                else
                                {
                                    systemMessage("You need to have a full pokemon team before queueing for a ranked battle.");
                                } // end if
                            } // end else if
                        }
                        else
                        {
                            systemMessage("You can\'t queue for a battle on this map.");
                        } // end else if
                    }
                    else
                    {
                        systemMessage("You need to beat the Kanto Elite Four before having ranked battles.");
                    } // end if
                } // end else if
            };
            _root.mainGUI.battleQueue.rankingsB.onRelease = function ()
            {
                if (_root.battle == false)
                {
                    if (_root.mainGUI.battleQueueHighscores._x == undefined)
                    {
                        if (_root.isBusy == false)
                        {
                            _root.battleQueueHighscoresPage = 1;
                            _root.mainGUI.attachMovie("battleQueueHighscores", "battleQueueHighscores", _root.mainGUI.getNextHighestDepth());
                            _root.mainGUI.battleQueueHighscores.firstPageB.onRelease = function ()
                            {
                                if (_root.isBusy == false)
                                {
                                    _root.battleQueueHighscoresPage = 1;
                                    getTimestamp("battleQueueHighscores", _root.battleQueueHighscoresPage);
                                } // end if
                            };
                            _root.mainGUI.battleQueueHighscores.lastPageB.onRelease = function ()
                            {
                                if (_root.isBusy == false)
                                {
                                    _root.battleQueueHighscoresPage = 10;
                                    getTimestamp("battleQueueHighscores", _root.battleQueueHighscoresPage);
                                } // end if
                            };
                            _root.mainGUI.battleQueueHighscores.nextPageB.onRelease = function ()
                            {
                                if (_root.isBusy == false)
                                {
                                    if (_root.battleQueueHighscoresPage < 10)
                                    {
                                        ++_root.battleQueueHighscoresPage;
                                        getTimestamp("battleQueueHighscores", _root.battleQueueHighscoresPage);
                                    } // end if
                                } // end if
                            };
                            _root.mainGUI.battleQueueHighscores.previousPageB.onRelease = function ()
                            {
                                if (_root.isBusy == false)
                                {
                                    if (_root.battleQueueHighscoresPage > 1)
                                    {
                                        --_root.battleQueueHighscoresPage;
                                        getTimestamp("battleQueueHighscores", _root.battleQueueHighscoresPage);
                                    } // end if
                                } // end if
                            };
                            _root.mainGUI.battleQueueHighscores.exitB.onRelease = function ()
                            {
                                removeMovieClip (_root.mainGUI.battleQueueHighscores);
                            };
                            assignMouseEvents(_root.mainGUI.battleQueueHighscores.firstPageB);
                            assignMouseEvents(_root.mainGUI.battleQueueHighscores.lastPageB);
                            assignMouseEvents(_root.mainGUI.battleQueueHighscores.previousPageB);
                            assignMouseEvents(_root.mainGUI.battleQueueHighscores.nextPageB);
                            assignMouseEvents(_root.mainGUI.battleQueueHighscores.exitB);
                            addDraggableGUI(_root.mainGUI.battleQueueHighscores);
                            getTimestamp("battleQueueHighscores", _root.battleQueueHighscoresPage);
                        } // end if
                    } // end if
                } // end if
            };
            _root.mainGUI.battleQueue.cancelSearchB.onRelease = function ()
            {
                if (_root.battle == false)
                {
                    if (_root.queueingForBattle == "casual")
                    {
                        getTimestamp("stopQueueingCasual", 1);
                    }
                    else if (_root.queueingForBattle == "ranked")
                    {
                        getTimestamp("stopQueueingRanked", 1);
                    } // end else if
                }
                else
                {
                    systemMessage("Finish your battle first!");
                } // end else if
            };
            _root.mainGUI.battleQueue.prizeShopB.onRelease = function ()
            {
                npcPvPPrizeShop2();
            };
            _root.mainGUI.battleQueue.exitB.onRelease = function ()
            {
                if (_root.battle == false)
                {
                    if (_root.queueingForBattle == "casual")
                    {
                        getTimestamp("stopQueueingCasual", 0);
                    }
                    else if (_root.queueingForBattle == "ranked")
                    {
                        getTimestamp("stopQueueingRanked", 0);
                    }
                    else
                    {
                        closeBattleQueue();
                    } // end else if
                }
                else
                {
                    systemMessage("Finish your battle first!");
                } // end else if
            };
            assignMouseEvents(_root.mainGUI.battleQueue.casualB);
            assignMouseEvents(_root.mainGUI.battleQueue.rankedB);
            assignMouseEvents(_root.mainGUI.battleQueue.rankingsB);
            assignMouseEvents(_root.mainGUI.battleQueue.prizeShopB);
            assignMouseEvents(_root.mainGUI.battleQueue.cancelSearchB);
            assignMouseEvents(_root.mainGUI.battleQueue.exitB);
        }
        else if (_root.battle == false)
        {
            if (_root.queueingForBattle == "casual")
            {
                getTimestamp("stopQueueingCasual", 0);
            }
            else if (_root.queueingForBattle == "ranked")
            {
                getTimestamp("stopQueueingRanked", 0);
            }
            else
            {
                closeBattleQueue();
            } // end else if
        } // end else if
    }
    else
    {
        systemMessage("Finish your battle first!");
    } // end else if
};
mainGUI.battleQueueB.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.battleQueueB.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.pokemonSummary.stats.moveBankTab.onRelease = mainGUI.pokemonSummary.moves.moveBankTab.onRelease = function ()
{
    if (_root.mainGUI.pokemonSummary.moveBank._visible == false)
    {
        mainGUI.pokemonSummary.stats._visible = false;
        mainGUI.pokemonSummary.moves._visible = false;
        mainGUI.pokemonSummary.moveBank._visible = true;
        mainGUI.pokemonSummary.moves.moveBankTab.gotoAndStop(2);
        mainGUI.pokemonSummary.stats.moveBankTab.gotoAndStop(2);
        mainGUI.pokemonSummary.moveBank.moveBankTab.gotoAndStop(2);
        mainGUI.pokemonSummary.moves.statsTab.gotoAndStop(1);
        mainGUI.pokemonSummary.stats.statsTab.gotoAndStop(1);
        mainGUI.pokemonSummary.moveBank.statsTab.gotoAndStop(1);
        mainGUI.pokemonSummary.moves.movesTab.gotoAndStop(1);
        mainGUI.pokemonSummary.stats.movesTab.gotoAndStop(1);
        mainGUI.pokemonSummary.moveBank.movesTab.gotoAndStop(1);
        removeMovieClip (_root.mainGUI.pokemonSummary.moveBank.itemList);
        _root.mainGUI.pokemonSummary.moveBank.attachMovie("itemList", "itemList", _root.mainGUI.pokemonSummary.moveBank.getNextHighestDepth());
        _root.mainGUI.pokemonSummary.moveBank.itemList.setMask(_root.mainGUI.pokemonSummary.moveBank.maskBg);
        for (var _loc5 = 0; _loc5 < _root.pokemonSummaryMoveBank.length; ++_loc5)
        {
            var _loc3 = _root.mainGUI.pokemonSummary.moveBank.itemList.attachMovie("moveBankBar", "moveBankBar" + _loc5, _root.mainGUI.pokemonSummary.moveBank.itemList.getNextHighestDepth());
            _loc3._y = -58.500000 + _loc5 * 55;
            _loc3.nameT.htmlText = "<b>" + _root.pokemonSummaryMoveBank[_loc5];
            _loc3.num = _loc5;
            if (pokemonSummaryType == "normal")
            {
                for (var _loc4 = 0; _loc4 < 4; ++_loc4)
                {
                    _loc3["move" + (_loc4 + 1) + "B"]._visible = true;
                    _loc3["move" + (_loc4 + 1) + "T"]._visible = true;
                    assignMouseEvents(_loc3["move" + (_loc4 + 1) + "B"]);
                    _loc3["move" + (_loc4 + 1) + "B"].num = _loc4;
                    _loc3["move" + (_loc4 + 1) + "B"].onRelease = function ()
                    {
                        if (map.indexOf("Pokecenter") != -1 || map == "Indigo Plateau" || map == "Hoenn Pokemon League Lobby" || map == "Sinnoh Pokemon League" || map == "Unova Pokemon League")
                        {
                            if (_root.battle == false && _root.trading == false)
                            {
                                getTimestamp("moveBankMove", pokemonSummaryNum, this._parent.num, this.num);
                            } // end if
                        }
                        else
                        {
                            systemMessage("You need to be in a Pokecenter to do that.");
                        } // end else if
                    };
                } // end of for
            }
            else
            {
                _loc3.move1B._visible = false;
                _loc3.move2B._visible = false;
                _loc3.move3B._visible = false;
                _loc3.move4B._visible = false;
                _loc3.move1T._visible = false;
                _loc3.move2T._visible = false;
                _loc3.move3T._visible = false;
                _loc3.move4T._visible = false;
            } // end else if
            _loc3.n.num = _loc5;
            _loc3.n.onRollOver = function ()
            {
                var _loc3 = {x: _xmouse, y: _ymouse};
                mainGUI.pokemonSummary.moveBank.globalToLocal(_loc3);
                mainGUI.pokemonSummary.moveBank.movesHighlight._x = _loc3.x + 10;
                mainGUI.pokemonSummary.moveBank.movesHighlight._y = _loc3.y;
                mainGUI.pokemonSummary.moveBank.movesHighlight.nameT.htmlText = "<b>" + moveData[moveNameToId(_root.pokemonSummaryMoveBank[this.num])][5] + "-type " + moveData[moveNameToId(_root.pokemonSummaryMoveBank[this.num])][2] + " move. " + moveData[moveNameToId(_root.pokemonSummaryMoveBank[this.num])][3] + " ";
                if (moveData[moveNameToId(_root.pokemonSummaryMoveBank[this.num])][1] != 0)
                {
                    mainGUI.pokemonSummary.moveBank.movesHighlight.nameT.htmlText = mainGUI.pokemonSummary.moveBank.movesHighlight.nameT.htmlText + ("<b>" + moveData[moveNameToId(_root.pokemonSummaryMoveBank[this.num])][1] + " power. ");
                } // end if
                if (moveData[moveNameToId(_root.pokemonSummaryMoveBank[this.num])][0] != true)
                {
                    mainGUI.pokemonSummary.moveBank.movesHighlight.nameT.htmlText = mainGUI.pokemonSummary.moveBank.movesHighlight.nameT.htmlText + ("<b>" + moveData[moveNameToId(_root.pokemonSummaryMoveBank[this.num])][0] + " accuracy. ");
                } // end if
                mainGUI.pokemonSummary.moveBank.movesHighlight.nameT._width = mainGUI.pokemonSummary.moveBank.movesHighlight.nameT.textWidth + 10;
                mainGUI.pokemonSummary.moveBank.movesHighlight.bg._width = mainGUI.pokemonSummary.moveBank.movesHighlight.nameT.textWidth + 10;
                mainGUI.pokemonSummary.moveBank.movesHighlight.startDrag();
                mainGUI.pokemonSummary.moveBank.movesHighlight._visible = true;
            };
            _loc3.n.onRollOut = function ()
            {
                mainGUI.pokemonSummary.moveBank.movesHighlight.stopDrag();
                mainGUI.pokemonSummary.moveBank.movesHighlight._visible = false;
            };
        } // end of for
        mainGUI.pokemonSummary.moveBank.movesHighlight.swapDepths(mainGUI.pokemonSummary.moveBank.getNextHighestDepth());
        _root.mainGUI.pokemonSummary.moveBank.scrollBar.onRelease = _root.mainGUI.pokemonSummary.moveBank.scrollBar.onReleaseOutside = function ()
        {
            this.gotoAndStop(1);
            this.stopDrag();
            _root.dragScrollbar = 0;
        };
        _root.mainGUI.pokemonSummary.moveBank.scrollBar.onPress = function ()
        {
            this.gotoAndStop("click");
            this.startDrag(true, this._x, 85, this._x, -41);
            _root.dragScrollbar = 48;
        };
        _root.mainGUI.pokemonSummary.moveBank.scrollBar.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        _root.mainGUI.pokemonSummary.moveBank.scrollBar.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        _root.mainGUI.pokemonSummary.moveBank.scrollUpB.onPress = function ()
        {
            _root.dragScrollbar = 49;
            this.gotoAndStop("click");
        };
        _root.mainGUI.pokemonSummary.moveBank.scrollUpB.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        _root.mainGUI.pokemonSummary.moveBank.scrollUpB.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        _root.mainGUI.pokemonSummary.moveBank.scrollUpB.onRelease = _root.mainGUI.pokemonSummary.moveBank.scrollUpB.onReleaseOutside = function ()
        {
            _root.dragScrollbar = 0;
            this.gotoAndStop(1);
        };
        _root.mainGUI.pokemonSummary.moveBank.scrollDownB.onPress = function ()
        {
            _root.dragScrollbar = 50;
            this.gotoAndStop("click");
        };
        _root.mainGUI.pokemonSummary.moveBank.scrollDownB.onRollOver = function ()
        {
            this.gotoAndStop("hover");
        };
        _root.mainGUI.pokemonSummary.moveBank.scrollDownB.onRollOut = function ()
        {
            this.gotoAndStop(1);
        };
        _root.mainGUI.pokemonSummary.moveBank.scrollDownB.onRelease = _root.mainGUI.pokemonSummary.moveBank.scrollDownB.onReleaseOutside = function ()
        {
            _root.dragScrollbar = 0;
            this.gotoAndStop(1);
        };
    } // end if
};
assignMouseEvents(mainGUI.pokemonSummary.moveBank.exitB);
mainGUI.pokemonSummary.stats.statsTab.onPress = mainGUI.pokemonSummary.moves.statsTab.onPress = mainGUI.pokemonSummary.moveBank.statsTab.onPress = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("click");
    } // end if
};
mainGUI.pokemonSummary.stats.statsTab.onRollOver = mainGUI.pokemonSummary.moves.statsTab.onRollOver = mainGUI.pokemonSummary.moveBank.statsTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.pokemonSummary.stats.statsTab.onRollOut = mainGUI.pokemonSummary.moves.statsTab.onRollOut = mainGUI.pokemonSummary.moveBank.statsTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.pokemonSummary.stats.movesTab.onPress = mainGUI.pokemonSummary.moves.movesTab.onPress = mainGUI.pokemonSummary.moveBank.movesTab.onPress = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("click");
    } // end if
};
mainGUI.pokemonSummary.stats.movesTab.onRollOver = mainGUI.pokemonSummary.moves.movesTab.onRollOver = mainGUI.pokemonSummary.moveBank.movesTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.pokemonSummary.stats.movesTab.onRollOut = mainGUI.pokemonSummary.moves.movesTab.onRollOut = mainGUI.pokemonSummary.moveBank.movesTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};
mainGUI.pokemonSummary.stats.moveBankTab.onPress = mainGUI.pokemonSummary.moves.moveBankTab.onPress = mainGUI.pokemonSummary.moveBank.moveBankTab.onPress = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("click");
    } // end if
};
mainGUI.pokemonSummary.stats.moveBankTab.onRollOver = mainGUI.pokemonSummary.moves.moveBankTab.onRollOver = mainGUI.pokemonSummary.moveBank.moveBankTab.onRollOver = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop("hover");
    } // end if
};
mainGUI.pokemonSummary.stats.moveBankTab.onRollOut = mainGUI.pokemonSummary.moves.moveBankTab.onRollOut = mainGUI.pokemonSummary.moveBank.moveBankTab.onRollOut = function ()
{
    if (this._currentframe != 2)
    {
        this.gotoAndStop(1);
    } // end if
};

// [Action in Frame 4]
stop ();
canMove = false;
ct.htmlText = "<b>Connection Error: " + error;
mySound.stop();
for (var i in _root)
{
    if (typeof(_root[i]) == "movieclip")
    {
        _root[i].removeMovieClip();
    } // end if
} // end of for...in
if (_root.error == "Automatic kick for being AFK" || _root.error == "Speedhack Problem" || _root.error == "Automated permanent game ban for botting/use of third party macros")
{
    _root.smartfox.disconnect();
} // end if
if (_root.resolutionX == 1600)
{
    ct._x = 315;
    ct._y = 441;
}
else if (_root.resolutionX == 1920)
{
    ct._x = 475;
    ct._y = 531;
} // end else if
